{
    "questions": [
      {
        "id": 1,
        "title": "Find Maximum Subarray",
        "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n| Test Cases | nums                | Expected Output | Notes                            |\n|------------|----------------------|------------------|----------------------------------|\n| 1          | [-2,1,-3,4,-1,2,1,-5,4] | 6                | [4,-1,2,1] has the largest sum   |\n| 2          | [1]                   | 1                | Only one element                 |\n| 3          | [5,4,-1,7,8]          | 23               | Whole array is the max subarray |",
        "example": {
          "input": "[-2,1,-3,4,-1,2,1,-5,4]",
          "output": "6",
          "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
        },
        "answer": "class Solution:\n    def maxSubArray(self, nums):\n        max_sum = curr_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
      },
      {
        "id": 2,
        "title": "Remove Duplicates from Sorted Array",
        "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once and return the new length.\n\n| Test Cases | nums                | Expected Output | Notes                     |\n|------------|----------------------|------------------|----------------------------|\n| 1          | [1,1,2]              | 2                | Unique values: [1,2]       |\n| 2          | [0,0,1,1,1,2,2,3,3,4] | 5                | Unique values: [0,1,2,3,4] |",
        "example": {
          "input": "[1,1,2]",
          "output": "2",
          "explanation": "After removing duplicates, the first two elements are [1,2]."
        },
        "answer": "class Solution:\n    def removeDuplicates(self, nums):\n        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
      },
      {
        "id": 3,
        "title": "Find Maximum Number",
        "description": "Return the largest number in the given array.\n\n| Test Cases | nums             | Expected Output | Notes                            |\n|------------|------------------|------------------|----------------------------------|\n| 1          | [1, 2, 3, 4, 5]   | 5                | Positive integers                |\n| 2          | [-1, -2, -3, -4]  | -1               | All negative numbers             |\n| 3          | [5]              | 5                | Single element array             |\n| 4          | [0, 10, 2, 8]     | 10               | Mix of small and large numbers   |",
        "example": {
          "input": "[1, 5, 3, 9]",
          "output": "9",
          "explanation": "The largest number is 9."
        },
        "answer": "class Solution:\n    def findMax(self, nums):\n        return max(nums)"
      },
      {
        "id": 4,
        "title": "Find Minimum Number",
        "description": "Return the smallest number in the given array.\n\n| Test Cases | nums             | Expected Output | Notes                          |\n|------------|------------------|------------------|-------------------------------|\n| 1          | [1, 2, 3, 4, 5]   | 1                | Basic positive numbers         |\n| 2          | [-1, -2, -3, -4]  | -4               | All negative numbers           |\n| 3          | [10]             | 10               | Single element                 |\n| 4          | [5, 0, -5]        | -5               | Mixed values                   |",
        "example": {
          "input": "[10, -1, 4, 6]",
          "output": "-1",
          "explanation": "The smallest number is -1."
        },
        "answer": "class Solution:\n    def findMin(self, nums):\n        return min(nums)"
      },
      {
        "id": 5,
        "title": "Sum of All Elements",
        "description": "Return the sum of all elements in the array.\n\n| Test Cases | nums             | Expected Output | Notes                      |\n|------------|------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3, 4]      | 10               | Simple sum                 |\n| 2          | [0, 0, 0]         | 0                | All zeros                  |\n| 3          | [-1, -2, -3]      | -6               | All negative numbers       |\n| 4          | [10]              | 10               | Single element             |",
        "example": {
          "input": "[1, 1, 1, 1]",
          "output": "4",
          "explanation": "Sum of all elements is 4."
        },
        "answer": "class Solution:\n    def arraySum(self, nums):\n        return sum(nums)"
      },
      {
        "id": 6,
        "title": "Count Even Numbers",
        "description": "Return the count of even numbers in the array.\n\n| Test Cases | nums             | Expected Output | Notes                      |\n|------------|------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3, 4]      | 2                | Two even numbers          |\n| 2          | [1, 3, 5, 7]      | 0                | All odd                   |\n| 3          | [2, 4, 6, 8]      | 4                | All even                  |\n| 4          | [0]               | 1                | Zero is even              |",
        "example": {
          "input": "[1, 2, 3, 6]",
          "output": "2",
          "explanation": "2 and 6 are even."
        },
        "answer": "class Solution:\n    def countEvens(self, nums):\n        return sum(1 for num in nums if num % 2 == 0)"
      },
      {
        "id": 7,
        "title": "Count Odd Numbers",
        "description": "Return the count of odd numbers in the array.\n\n| Test Cases | nums             | Expected Output | Notes                      |\n|------------|------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3, 4]      | 2                | Two odd numbers           |\n| 2          | [2, 4, 6, 8]      | 0                | All even                  |\n| 3          | [1, 3, 5, 7]      | 4                | All odd                   |\n| 4          | [0]               | 0                | Zero is not odd           |",
        "example": {
          "input": "[1, 2, 3, 6]",
          "output": "2",
          "explanation": "1 and 3 are odd."
        },
        "answer": "class Solution:\n    def countOdds(self, nums):\n        return sum(1 for num in nums if num % 2 != 0)"
      },
      {
        "id": 8,
        "title": "Count Positive and Negative Numbers",
        "description": "Return how many positive and negative numbers are in the array.\n\n| Test Cases | nums                  | Expected Output | Notes                      |\n|------------|-----------------------|------------------|-----------------------------|\n| 1          | [1, -1, 2, -2, 3]      | (3, 2)           | Mixed positive and negative|\n| 2          | [-1, -2, -3]           | (0, 3)           | All negative               |\n| 3          | [1, 2, 3]              | (3, 0)           | All positive               |\n| 4          | [0, -1, 1]             | (1, 1)           | Zero ignored               |",
        "example": {
          "input": "[1, -2, 3, -4, 5]",
          "output": "(3, 2)",
          "explanation": "3 positives and 2 negatives."
        },
        "answer": "class Solution:\n    def countPosNeg(self, nums):\n        pos = sum(1 for x in nums if x > 0)\n        neg = sum(1 for x in nums if x < 0)\n        return pos, neg"
      },
      {
        "id": 9,
        "title": "Reverse an Array",
        "description": "Return the array in reversed order.\n\n| Test Cases | nums             | Expected Output | Notes                      |\n|------------|------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3]         | [3, 2, 1]        | Simple reverse            |\n| 2          | [5]               | [5]              | Single element            |\n| 3          | []                | []               | Empty array               |\n| 4          | [4, 5, 6, 7, 8]    | [8, 7, 6, 5, 4]   | Larger list               |",
        "example": {
          "input": "[1, 2, 3]",
          "output": "[3, 2, 1]",
          "explanation": "Array reversed."
        },
        "answer": "class Solution:\n    def reverseArray(self, nums):\n        return nums[::-1]"
      },
      {
        "id": 10,
        "title": "Check if Array is Sorted",
        "description": "Return true if array is sorted in non-decreasing order.\n\n| Test Cases | nums              | Expected Output | Notes                      |\n|------------|-------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3, 4]       | True             | Increasing                 |\n| 2          | [4, 3, 2, 1]       | False            | Decreasing                 |\n| 3          | [1, 1, 1]          | True             | All same values           |\n| 4          | [1]                | True             | Single element            |",
        "example": {
          "input": "[1, 2, 3]",
          "output": "True",
          "explanation": "Array is sorted."
        },
        "answer": "class Solution:\n    def isSorted(self, nums):\n        return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))"
      },
      {
        "id": 11,
        "title": "Find Second Largest",
        "description": "Return the second largest element in array or -1 if not possible.\n\n| Test Cases | nums               | Expected Output | Notes                      |\n|------------|--------------------|------------------|-----------------------------|\n| 1          | [1, 2, 3, 4]        | 3                | Distinct values           |\n| 2          | [5, 5, 5]           | -1               | All same values           |\n| 3          | [9]                 | -1               | Single element            |\n| 4          | [10, 20, 10]        | 10               | Repeated second largest   |",
        "example": {
          "input": "[1, 4, 2, 4]",
          "output": "2",
          "explanation": "Second largest is 2."
        },
        "answer": "class Solution:\n    def secondLargest(self, nums):\n        unique = list(set(nums))\n        if len(unique) < 2:\n            return -1\n        unique.sort(reverse=True)\n        return unique[1]"
      },
      {
        "id": 12,
        "title": "Find the Missing Number",
        "description": "Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.\n\n| Test Cases | nums                 | Expected Output | Notes                        |\n|------------|----------------------|-----------------|------------------------------|\n| 1          | [3, 0, 1]            | 2               | Missing in middle            |\n| 2          | [0, 1]               | 2               | Missing at end               |\n| 3          | [1, 2, 3]            | 0               | Missing at beginning         |\n| 4          | [0]                  | 1               | Small array                  |\n| 5          | [1]                  | 0               | Small array                  |\n| 6          | [9,6,4,2,3,5,7,0,1]  | 8               | Larger array                 |\n| 7          | [2, 0]               | 1               | Missing in middle            |\n| 8          | [4, 1, 2, 0]         | 3               | Missing in middle            |\n| 9          | [5, 3, 1, 0, 2]      | 4               | Missing in middle            |\n| 10         | [10,9,8,7,6,5,4,3,2,1] | 0            | Missing zero                 |",
        "example": {
            "input": "[3, 0, 1]",
            "output": "2",
            "explanation": "The array contains 3 elements from 0 to 3, and 2 is missing."
        },
        "answer": "class Solution:\n    def missingNumber(self, nums):\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return expected_sum - actual_sum"
    },
    {
        "id": 13,
        "title": "Find the Pivot Index",
        "description": "Given an array of integers nums, calculate the pivot index of this array. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the right of the index. If no such index exists, return -1. If there are multiple pivot indexes, return the left-most one.\n\n| Test Cases | nums                | Expected Output | Notes                        |\n|------------|---------------------|-----------------|------------------------------|\n| 1          | [1, 7, 3, 6, 5, 6]  | 3               | Pivot in middle              |\n| 2          | [2, 1, -1]          | 0               | Pivot at beginning           |\n| 3          | [1, 2, 3]           | -1              | No pivot                     |\n| 4          | [0, 0, 0, 0]        | 0               | All zeros                    |\n| 5          | [5]                 | 0               | Single element               |\n| 6          | [1, 2]              | -1              | Two elements, no pivot       |\n| 7          | [-1, -1, -1, -1]    | -1              | All negative, no pivot       |\n| 8          | [1, -1, 2, -2, 3]   | -1              | Mixed, no pivot              |\n| 9          | [1, 2, 3, 0, 3, 2, 1] | 3             | Pivot in middle              |\n| 10         | [-1, 1, 0]          | 2               | Pivot at end                 |",
        "example": {
            "input": "[1, 7, 3, 6, 5, 6]",
            "output": "3",
            "explanation": "The sum of the numbers to the left of index 3 is 1 + 7 + 3 = 11, and the sum to the right is 5 + 6 = 11."
        },
        "answer": "class Solution:\n    def pivotIndex(self, nums):\n        total_sum = sum(nums)\n        left_sum = 0\n        for i in range(len(nums)):\n            if left_sum == total_sum - left_sum - nums[i]:\n                return i\n            left_sum += nums[i]\n        return -1"
    }
    ]
  }
  
