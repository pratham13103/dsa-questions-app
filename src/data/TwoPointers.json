{
    "questions": [
        {
            "id": 1,
            "title": "Pair with Target Sum",
            "description": "Find two numbers such that they add up to a specific target.\n\n | Test Cases | Input              | Expected Output | Notes           |\n|------------|--------------------|-----------------|-----------------|\n| 1          | [2,7,11,15], target=9  | [0,1]           | Basic test      |\n| 2          | [1,3,4,5,6], target=10 | [3,4]           | Larger test     |\n| 3          | [1,2,3,4], target=7    | [2,3]           | Target at the end |\n| 4          | [1,2,3,4,5], target=8  | [2,4]           | Middle target   |\n| 5          | [5,5,10,20], target=15 | [0,2]           | Equal number    |\n| 6          | [1,1,2,2,3], target=4  | [1,3]           | Multiple pairs  |\n| 7          | [1,2,3,4,5,6], target=7 | [0,5]           | Mixed input     |\n| 8          | [3,5,7,9], target=12   | [2,3]           | High number     |\n| 9          | [2,4,6,8,10], target=14| [2,4]           | Even numbers    |\n| 10         | [1,1,2,3,5,6], target=7| [0,5]           | Random input    |\n| 11         | [1,1,1,1,1,2], target=3| [0,5]           | Multiple duplicates |\n| 12         | [1,2,3,4,5], target=9  | [3,4]           | Simple sequence |\n| 13         | [1,3,5,7,9], target=10 | [0,4]           | Odd numbers     |\n| 14         | [2,3,5,7,8], target=10 | [0,3]           | Mixed input     |\n| 15         | [10,20,30,40,50], target=70| [1,3]         | Large numbers   |\n| 16         | [4,4,4,4], target=8    | [0,3]           | Same number     |\n| 17         | [1,2,3,4,5,6,7,8], target=12 | [3,7]       | Sequential input|\n| 18         | [2,3,5,6,7], target=11 | [3,4]           | Mix of numbers  |\n| 19         | [3,6,9,12], target=15  | [0,2]           | Larger numbers  |\n| 20         | [2,3,5,7,11], target=8  | [0,3]           | Sequence with primes |\n| 21         | [1,1,2,3], target=4    | [1,3]           | Simple test     |\n| 22         | [10,20,30,40], target=50| [0,2]           | Large input     |\n| 23         | [1,2,3,4,5,6], target=5 | [0,3]           | Target in the middle |\n| 24         | [7,8,9,10], target=17  | [0,3]           | Sequential input|\n| 25         | [2,3,5,7,9], target=12  | [2,4]           | Mixed input     |\n| 26         | [1,1,2,2,3,4,5], target=7| [1,6]          | Larger input    |\n| 27         | [5,10,15,20], target=30 | [0,3]           | Larger sequence |\n| 28         | [5,6,7,8], target=15   | [1,3]           | Increasing order|\n| 29         | [3,6,9,12,15], target=21| [0,4]          | Mix of numbers  |\n| 30         | [4,5,6,7], target=11   | [0,3]           | Simple case     |",
            "example": {
              "input": "[2,7,11,15], target=9",
              "output": "[0,1]",
              "explanation": "The pair (2, 7) at indices 0 and 1 adds up to the target sum of 9."
            },
            "answer": "def twoSum(numbers, target):\n    left, right = 0, len(numbers)-1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left, right]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1"
          },
          {
            "id": 2,
            "title": "Remove Duplicates from Sorted Array",
            "description": "Remove duplicates in-place and return the new length.\n\n | Test Cases | Input                      | Expected Output | Notes                          |\n|------------|----------------------------|-----------------|---------------------------------|\n| 1          | [1,1,2]                    | 2               | Basic test                     |\n| 2          | [1,2,2,3]                  | 3               | Simple case                    |\n| 3          | [0,0,0,1,1,1,1]            | 2               | Multiple duplicates            |\n| 4          | [1,1,1,1,1,1]              | 1               | All duplicates                 |\n| 5          | [2,2,2,3,4]                | 3               | Mix of numbers                 |\n| 6          | [5,6,6,7,8,8]              | 4               | Duplicates in the middle       |\n| 7          | [1,1,2,2,3,4]              | 4               | Multiple duplicates at start   |\n| 8          | [0,1,1,2,3]                | 4               | Simple input                   |\n| 9          | [1,2,2,3,3,3]              | 3               | Multiple 3's                   |\n| 10         | [2,3,4,4,4,5]              | 4               | Ending duplicates              |\n| 11         | [1,2,3,4,5]                | 5               | All unique                     |\n| 12         | [1]                        | 1               | Single element                 |\n| 13         | []                         | 0               | Empty array                    |\n| 14         | [0,0,0,0,0,0]              | 1               | All zeros                      |\n| 15         | [1,1,1,2,2,3,3,4,4,5,5,5]  | 5               | Repeated groups                |\n| 16         | [1,2,2,2,2,2,3]            | 3               | One unique in the middle       |\n| 17         | [1,1,1,2,3,3,3,4,4,5,6]    | 6               | Alternating duplicates         |\n| 18         | [1,2,3,3,3,3,3,3,4,5]      | 5               | Many duplicates of one value   |\n| 19         | [1,1,1,1,1,2,2,2,3,3,3,4]  | 4               | Larger input                   |\n| 20         | [1,1,2,2,2,2,3,3,4,5,6,6]  | 6               | Spread-out duplicates          |\n| 21         | [1,1,1,2,3]                | 3               | First elements duplicated      |\n| 22         | [1,2,3,4,5,5,5]            | 5               | Ending duplicates              |\n| 23         | [2,2,3,4,4,5,6,7]          | 6               | Random mid duplicates          |\n| 24         | [1,1,1,1,2,2,2,2,3,3]      | 3               | Dense duplications             |\n| 25         | [0,1,1,1,2,3,3,4,5]        | 6               | Simple increasing pattern      |\n| 26         | [0,0,0,0,0,1,1,1,1,2,2]    | 3               | Zeros and ones                 |\n| 27         | [1,1,1,1,1,1,1,1,1,1,1]    | 1               | All same number                |\n| 28         | [1,2,2,3,4,4,5,6,6,6,6]    | 6               | Mid-end duplicates             |\n| 29         | [1,2,3,4,5,6,7,8,9]        | 9               | No duplicates                  |\n| 30         | [1,1,2,3,3,4,5,5,5,6,7]    | 7               | Mixed duplicates               |\n| 31         | [5,5,5,5,5,5,5,5]          | 1               | All same, mid-value            |\n| 32         | [1,2,2,3,4,5,5,6,7,8,9,9]  | 9               | Multiple sparse duplicates     |\n| 33         | [2,2,2,2,3,4,4,5,6,6,6]    | 6               | Repeats in pairs               |\n| 34         | [1,2,3,4,5,5,5,6,7,8,9,10] | 10              | Ending repeat                  |\n| 35         | [3,3,3,4,5,6,7,8,9,10,11]  | 9               | Beginning repeated             |\n| 36         | [0,0,1,2,3,4,5,6,7,7,7]    | 9               | Start and end repeats          |\n| 37         | [9,9,10,11,11,12,13]      | 5               | Duplicate pairs                |\n| 38         | [5,5,5,6,7,8,8,8,9,10]     | 6               | Central dense duplicates       |\n| 39         | [1,2,3,4,5,6,7,7,8,9,9]    | 9               | Multiple ends                  |\n| 40         | [10,10,10,10,10,11]        | 2               | Heavy beginning duplicates     |",
            "example": {
              "input": "[1,1,2]",
              "output": "2",
              "explanation": "After removing the duplicates, the new length is 2."
            },
            "answer": "def removeDuplicates(nums):\n    if not nums:\n        return 0\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i+1"
          },
          {
            "id": 3,
            "title": "Squares of a Sorted Array",
            "description": "Return an array of the squares of each number sorted in non-decreasing order.\n\n| Test Cases | Input                 | Expected Output     | Notes                          |\n|------------|-----------------------|---------------------|--------------------------------|\n| 1          | [-4,-1,0,3,10]        | [0,1,9,16,100]      | Mixed negatives and positives  |\n| 2          | [-7,-3,2,3,11]        | [4,9,9,49,121]      | Multiple negatives             |\n| 3          | [-5,-3,-2,-1]         | [1,4,9,25]          | All negatives                  |\n| 4          | [0,1,2,3,4]           | [0,1,4,9,16]        | All positives                  |\n| 5          | [1]                   | [1]                 | Single element                 |\n| 6          | [0]                   | [0]                 | Zero only                      |\n| 7          | [-1,0,1]              | [0,1,1]             | Symmetric around zero          |\n| 8          | [-2,-1,0,1,2]         | [0,1,1,4,4]         | Symmetric with duplicates      |\n| 9          | [-3,-3,-2,-2]         | [4,4,9,9]           | Duplicates negatives           |\n| 10         | [2,2,3,3]             | [4,4,9,9]           | Duplicates positives           |\n| 11         | [-1,-1,0,0,1,1]       | [0,0,1,1,1,1]       | Multiple zeros and ones        |\n| 12         | [-10000,0,10000]      | [0,100000000,100000000] | Large magnitude numbers    |\n| 13         | []                    | []                  | Empty array                    |\n| 14         | [-2,-1,0,1,2,3]       | [0,1,1,4,4,9]       | Mixed with increasing positives|\n| 15         | [-3,-2,-1,0,1,2,3]    | [0,1,1,4,4,9,9]     | Symmetric with zero            |\n| 16         | [-1,-1,-1,-1]         | [1,1,1,1]           | All same negatives             |\n| 17         | [1,1,1,1]             | [1,1,1,1]           | All same positives             |\n| 18         | [-2,-2,-2,-2]         | [4,4,4,4]           | All same negatives             |\n| 19         | [2,2,2,2]             | [4,4,4,4]           | All same positives             |\n| 20         | [-3,-2,-1,0,0,1,2,3]  | [0,0,1,1,4,4,9,9]   | Symmetric with duplicates      |\n| 21         | [-5,-3,-1,0,2,4,6]    | [0,1,4,9,16,25,36]  | Mixed with increasing positives|\n| 22         | [-10,-5,0,5,10]       | [0,25,25,100,100]   | Symmetric large numbers        |\n| 23         | [-1,1]                | [1,1]               | Small symmetric                |\n| 24         | [-2,0,2]              | [0,4,4]             | Small symmetric with zero      |\n| 25         | [-3,-1,0,1,3]         | [0,1,1,9,9]         | Symmetric with odd numbers     |\n| 26         | [-4,-2,0,2,4]         | [0,4,4,16,16]       | Symmetric with even numbers    |\n| 27         | [-6,-3,0,3,6]         | [0,9,9,36,36]       | Symmetric with multiples of 3  |\n| 28         | [-7,-4,-1,2,5]        | [1,4,16,25,49]      | Mixed with varied numbers      |\n| 29         | [-8,-5,-2,1,4,7]      | [1,4,16,25,49,64]   | Mixed with increasing positives|\n| 30         | [-9,-6,-3,0,3,6,9]    | [0,9,9,36,36,81,81] | Symmetric with multiples of 3  |\n| 31         | [-10,-5,0,5,10]       | [0,25,25,100,100]   | Symmetric large numbers        |\n| 32         | [-100,-50,0,50,100]   | [0,2500,2500,10000,10000] | Large symmetric numbers |\n| 33         | [-1,0,0,0,1]          | [0,0,0,1,1]         | Multiple zeros                 |\n| 34         | [-2,-1,-1,0,1,1,2]    | [0,1,1,1,1,4,4]     | Duplicates around zero         |\n| 35         | [-3,-2,-1,1,2,3]      | [1,1,4,4,9,9]       | Symmetric without zero         |\n| 36         | [-4,-3,-2,-1,0,1,2,3,4] | [0,1,1,4,4,9,9,16,16] | Full range symmetric      |\n| 37         | [-5,-4,-3,-2,-1,0,1,2,3,4,5] | [0,1,1,4,4,9,9,16,16,25,25] | Extended symmetric |\n| 38         | [-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6] | [0,1,1,4,4,9,9,16,16,25,25,36,36] | Larger symmetric |\n| 39         | [-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7] | [0,1,1,4,4,9,9,16,16,25,25,36,36,49,49] | Extended symmetric |\n| 40         | [-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8] | [0,1,1,4,4,9,9,16,16,25,25,36,36,49,49,64,64] | Full symmetric |",
            "example": {
              "input": "[-4,-1,0,3,10]",
              "output": "[0,1,9,16,100]",
              "explanation": "After squaring each number and sorting, we get [0,1,9,16,100]."
            },
            "answer": "def sortedSquares(nums):\n    n = len(nums)\n    result = [0]*n\n    left, right = 0, n-1\n    pos = n-1\n    while left <= right:\n        if abs(nums[left]) > abs(nums[right]):\n            result[pos] = nums[left] ** 2\n            left += 1\n        else:\n            result[pos] = nums[right] ** 2\n            right -= 1\n        pos -= 1\n    return result"
          },
          {
            "id": 4,
            "title": "Move Zeroes to End",
            "description": "Move all zeroes to the end maintaining order.\n\n | Test Cases | Input               | Expected Output   | Notes           |\n|------------|---------------------|-------------------|-----------------|\n| 1          | [0,1,0,3,12]         | [1,3,12,0,0]      | Basic test      |\n| 2          | [1,2,0,0,3]          | [1,2,3,0,0]       | Multiple zeroes |\n| 3          | [0,0,0,1]            | [1,0,0,0]         | All zeroes      |\n| 4          | [4,5,6,0,0,1]        | [4,5,6,1,0,0]     | Mixed input     |\n| 5          | [0,2,0,0]            | [2,0,0,0]         | Few zeroes      |\n| 6          | [7,0,0,0,8]          | [7,8,0,0,0]       | Zeroes at the end |\n| 7          | [1,2,3]              | [1,2,3]           | No zeroes       |\n| 8          | [0,0,0,0]            | [0,0,0,0]         | All zeroes      |\n| 9          | [2,0,3,0]            | [2,3,0,0]         | Mixed numbers   |\n| 10         | [0,3,1]              | [3,1,0]           | Zero at the beginning |\n| 11         | [1,0]                | [1,0]             | Simple case     |\n| 12         | [0,1,2,3]            | [1,2,3,0]         | Zero at the front |\n| 13         | [3,4,0,5,0,0]        | [3,4,5,0,0,0]     | Multiple zeroes |\n| 14         | [1,0,2]              | [1,2,0]           | Mix of numbers  |\n| 15         | [0,4,0,5]            | [4,5,0,0]         | Zeroes scattered|\n| 16         | [1,1,0,1]            | [1,1,1,0]         | Duplicate numbers|\n| 17         | [0,5,7,0,0,8]        | [5,7,8,0,0,0]     | Zeroes at various places |\n| 18         | [0,1,2,3,0]          | [1,2,3,0,0]       | Zero at the end |\n| 19         | [0,0,1]              | [1,0,0]           | Simple test     |\n| 20         | [2,3,0,0]            | [2,3,0,0]         | Mix of numbers  |\n| 21         | [5,4,0,0,3]          | [5,4,3,0,0]       | Mixed input     |\n| 22         | [1,0,0,0,0,1]        | [1,1,0,0,0,0]     | Multiple zeroes |\n| 23         | [3,4,0,0,0]          | [3,4,0,0,0]       | Zeroes at the end |\n| 24         | [0,0,0,4,3]          | [4,3,0,0,0]       | Zeroes at front |\n| 25         | [0,1,2,0,0,3]        | [1,2,3,0,0,0]     | Multiple zeroes |\n| 26         | [4,0,6,7,0]          | [4,6,7,0,0]       | Zeroes scattered|\n| 27         | [0,0,0,0,5]          | [5,0,0,0,0]       | All zeroes      |\n| 28         | [5,0,1]              | [5,1,0]           | Simple test     |\n| 29         | [1,0,0,1,2]          | [1,1,2,0,0]       | Mixed input     |\n| 30         | [0,4,5,6,0]          | [4,5,6,0,0]       | Zero at the end |\n| 31         | [0,3,0,1]            | [3,1,0,0]         | Mix of numbers  |\n| 32         | [1,0,2,0,0,3]        | [1,2,3,0,0,0]     | Mixed zeroes    |\n| 33         | [2,0,1,0]            | [2,1,0,0]         | Simple input    |\n| 34         | [0,0,4,5,0]          | [4,5,0,0,0]       | Zeroes in between |\n| 35         | [0,2,0,3]            | [2,3,0,0]         | Simple sequence |\n| 36         | [0,0,0,0,0,1]        | [1,0,0,0,0,0]     | All zeroes      |\n| 37         | [2,0,0,0,0]          | [2,0,0,0,0]       | Zeroes at the end |\n| 38         | [3,0,4,5,0]          | [3,4,5,0,0]       | Mixed numbers   |\n| 39         | [0,0,0,5,6]          | [5,6,0,0,0]       | Mixed zeroes    |\n| 40         | [1,0,1]              | [1,1,0]           | Mix of numbers  |",
            "example": {
              "input": "[0,1,0,3,12]",
              "output": "[1,3,12,0,0]",
              "explanation": "Move all zeroes to the end while maintaining the order of other elements."
            },
            "answer": "def moveZeroes(nums):\n    lastNonZeroFoundAt = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[lastNonZeroFoundAt], nums[i] = nums[i], nums[lastNonZeroFoundAt]\n            lastNonZeroFoundAt += 1"
          },
          {
            "id": 5,
            "title": "Backspace String Compare",
            "description": "Compare two strings considering '#' as a backspace.\n\n | Test Cases | Input        | Expected Output | Notes            |\n|------------|--------------|-----------------|------------------|\n| 1          | \"ab#c\", \"ad#c\" | True            | Simple test      |\n| 2          | \"ab##c\", \"a#c\" | True            | Multiple backspaces |\n| 3          | \"a#c\", \"b\"    | False           | Backspace removal |\n| 4          | \"y#z#a\", \"a\"  | True            | Mixed backspaces |\n| 5          | \"ab#c#d\", \"a#bc\" | False          | Multiple backspaces |\n| 6          | \"a#c#d\", \"ad\"  | False           | Backspace deletion |\n| 7          | \"x##z#c\", \"z#c\" | True            | Multiple backspaces |\n| 8          | \"#y#z\", \"y#z\"  | True            | Backspace at the start |\n| 9          | \"a#b#c#d\", \"abcd\" | False         | Complex case     |\n| 10         | \"a#c#d\", \"cd\"  | True            | Backspace at front |\n| 11         | \"abc#d\", \"abd\" | True            | Partial deletion |\n| 12         | \"#ab#c\", \"abc\" | False           | Complex case     |\n| 13         | \"ab##cd\", \"cd\" | True            | Multiple deletions |\n| 14         | \"ab#c#d#e#f\", \"abcf\" | True       | Alternating backspaces |\n| 15         | \"#a#b#c#d\", \"abcd\" | False       | Mixed backspaces |\n| 16         | \"a#b#c#d\", \"abcd\" | False       | Multiple deletions |\n| 17         | \"abc#d#e#f\", \"abcd\" | True       | Backspace removal |\n| 18         | \"#a#b#c#d\", \"bc\" | True           | Starting with backspaces |\n| 19         | \"a#bc#d#e\", \"abcde\" | False     | Extra characters  |\n| 20         | \"a#b#c#d\", \"abcd\" | False       | Mixed deletions  |\n| 21         | \"##abcd\", \"abcd\" | True          | Backspaces at front |\n| 22         | \"ab#cd#d\", \"acdd\" | True         | Multiple backspaces |\n| 23         | \"a#bc#d\", \"abcd\" | True          | Mixed backspaces  |\n| 24         | \"#abcd#\", \"abcd\" | True          | Complex case      |\n| 25         | \"abcd#\", \"abc\"  | True            | Single backspace  |\n| 26         | \"#ab#c#d\", \"acd\" | True          | Backspaces in middle |\n| 27         | \"ab##cd#\", \"ab##d\" | True        | Deletions from both |\n| 28         | \"abc#d#e#f\", \"abcd\" | True      | Multiple deletions |\n| 29         | \"a#bc#d#e\", \"aef\" | True         | Backspace removal |\n| 30         | \"#abc#d#e\", \"ace\" | False       | Backspace at start |\n| 31         | \"abc#d#e#f\", \"abcf\" | True       | Complex input     |\n| 32         | \"abc###d\", \"abc\" | True           | Multiple deletions |\n| 33         | \"#ab##c#d\", \"ad\" | True          | Multiple backspaces |\n| 34         | \"abc#cd#d\", \"abcd\" | True         | Mix of deletions  |\n| 35         | \"a#b#c#d\", \"abcd\" | True         | Mixed deletions  |\n| 36         | \"abc#d#e#f\", \"abcd\" | True       | Complex deletions |\n| 37         | \"#a#b#c#d\", \"abcd\" | False      | Backspace errors  |\n| 38         | \"abc#d#e#f\", \"abcdef\" | True     | Alternating case  |\n| 39         | \"#a#b#c#d\", \"abc\" | False       | Edge case         |\n| 40         | \"abcd#\", \"abc\"  | True            | Backspace removal |\n",
            "example": {
              "input": "\"ab#c\", \"ad#c\"",
              "output": "True",
              "explanation": "Both strings evaluate to 'ac', so they are equal after applying the backspaces."
            },
            "answer": "def backspaceCompare(s, t):\n    def build(string):\n        res = []\n        for ch in string:\n            if ch != '#':\n                res.append(ch)\n            elif res:\n                res.pop()\n        return ''.join(res)\n    return build(s) == build(t)"
          },
          {
            "id": 6,
            "title": "3Sum",
            "description": "Find all unique triplets in the array which gives the sum of zero.\n\n | Test Cases | Input                  | Expected Output             | Notes           |\n|------------|------------------------|-----------------------------|-----------------|\n| 1          | [-1,0,1,2,-1,-4]        | [[-1,-1,2], [-1,0,1]]       | Basic case      |\n| 2          | [0,0,0]                | [[0,0,0]]                  | All zeroes      |\n| 3          | [1,2,-2,-5,0,-1,4]      | [[-5,1,4], [-2,0,2]]        | Mixed input     |\n| 4          | [-2,0,1,1]             | [[-2,1,1]]                 | Small input     |\n| 5          | [1,-1,-1,0]            | [[-1,0,1]]                 | Simple input    |\n| 6          | [1,-1,-1,0,2,3]        | [[-1,0,1], [-1,-1,2]]      | Large input     |\n| 7          | [0,-1,2,-3,1]          | [[-3,1,2], [-1,0,1]]       | Mix of numbers  |\n| 8          | [3,0,-2,-1,1,2]        | [[-2,-1,3], [-2,0,2], [-1,0,1]] | Larger input  |\n| 9          | [-1,0,1,2,3,-3,-2,-1]  | [[-3,0,3], [-2,-1,3], [-2,0,2], [-1,-1,2]] | Complex input |\n| 10         | [0,0,0,0]              | [[0,0,0]]                  | All zeroes      |",
            "example": {
                "input": "[-1,0,1,2,-1,-4]",
                "output": "[[-1,-1,2], [-1,0,1]]",
                "explanation": "The unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
            },
            "answer": "def threeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left, right = i+1, len(nums)-1\n        while left < right:\n            s = nums[i] + nums[left] + nums[right]\n            if s == 0:\n                res.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return res"
        },
        {
            "id": 7,
            "title": "Container With Most Water",
            "description": "Given an array of non-negative integers, where each element represents a vertical line at that position, find two lines that together with the x-axis form a container that holds the most water.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [1,8,6,2,5,4,8,3,7]    | 49              | Basic case      |\n| 2          | [1,1]                  | 1               | Two elements    |\n| 3          | [4,3,2,1,4]            | 16              | Simple input    |\n| 4          | [1,8,3,4,7,5]          | 28              | Mix of heights  |\n| 5          | [10,9,8,7,6,5,4,3]     | 70              | Decreasing heights |\n| 6          | [7,1,2,3,9]            | 28              | Increase-decrease heights |\n| 7          | [1,2,4,3,5]            | 12              | Increasing heights |\n| 8          | [1,2,1,2]              | 2               | Small container |\n| 9          | [4,7,1,2]              | 6               | Random heights  |\n| 10         | [5,3,8,6]              | 20              | Even spacing    |",
            "example": {
                "input": "[1,8,6,2,5,4,8,3,7]",
                "output": "49",
                "explanation": "The container formed by the lines at indices 1 and 8 (heights 8 and 7) holds the most water, 49 units."
            },
            "answer": "def maxArea(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    while left < right:\n        area = min(height[left], height[right]) * (right - left)\n        max_area = max(max_area, area)\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area"
        },
        {
            "id": 8,
            "title": "Minimum Size Subarray Sum",
            "description": "Given an array of positive integers and a target value, find the minimal length of a contiguous subarray whose sum is greater than or equal to the target.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [2,3,1,2,4,3], target=7 | 2               | Basic case      |\n| 2          | [1,4,4], target=4       | 1               | Exact match     |\n| 3          | [1,1,1,1,1,1], target=11| 6               | All elements    |\n| 4          | [1,2,3,4,5], target=11  | 3               | Longer input    |\n| 5          | [1,1,1,1,1,1], target=6 | 6               | Smallest subarray|\n| 6          | [2,3,1,2,4,3], target=10| 4               | Larger input    |\n| 7          | [1,2,3,4,5], target=15  | 5               | All elements    |\n| 8          | [1,2,3,4,5], target=11  | 3               | Mix of numbers  |\n| 9          | [2,3,1,2,4,3], target=9 | 3               | Middle sequence |\n| 10         | [1,4,4], target=5       | 2               | Random input    |",
            "example": {
                "input": "[2,3,1,2,4,3], target=7",
                "output": "2",
                "explanation": "The smallest subarray whose sum is greater than or equal to 7 is [4, 3] with length 2."
            },
            "answer": "def minSubArrayLen(target, nums):\n    left, total, min_len = 0, 0, float('inf')\n    for right in range(len(nums)):\n        total += nums[right]\n        while total >= target:\n            min_len = min(min_len, right - left + 1)\n            total -= nums[left]\n            left += 1\n    return min_len if min_len != float('inf') else 0"
        },
        {
            "id": 9,
            "title": "Search in Rotated Sorted Array",
            "description": "You are given an integer array nums sorted in ascending order, and an integer target. Suppose that nums is rotated at some pivot. Find the index of the target in nums.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [4,5,6,7,0,1,2], target=0| 4               | Basic case      |\n| 2          | [4,5,6,7,8,9,10], target=5| 1              | No rotation     |\n| 3          | [1,2,3,4,5,6], target=3 | 2               | No rotation     |\n| 4          | [2,3,4,5,6,7,8,9], target=5 | 3             | Larger array    |\n| 5          | [7,8,9,1,2,3,4], target=2 | 4               | Rotated array   |\n| 6          | [3,4,5,6,7,8,9,1,2], target=9 | 7            | Rotated array   |\n| 7          | [2,3,4,5,6], target=3   | 1               | Simple input    |\n| 8          | [8,9,10,11,12,1,2,3,4], target=12 | 4         | Rotated input   |\n| 9          | [1,2,3,4,5,6,7,8], target=6 | 5               | No rotation     |\n| 10         | [9,10,11,12,1,2,3,4], target=1 | 4           | Rotated input   |",
            "example": {
                "input": "[4,5,6,7,0,1,2], target=0",
                "output": "4",
                "explanation": "The target value 0 is at index 4 after the array is rotated."
            },
            "answer": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1"
        }
                                    
                              
          
          
    
    
    
        ]
 }
