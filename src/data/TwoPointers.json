{
    "questions": [
        {
            "id": 1,
            "title": "Pair with Target Sum",
            "description": "Find two numbers such that they add up to a specific target.\n\n | Test Cases | Input              | Expected Output | Notes           |\n|------------|--------------------|-----------------|-----------------|\n| 1          | [2,7,11,15], target=9  | [0,1]           | Basic test      |\n| 2          | [1,3,4,5,6], target=10 | [3,4]           | Larger test     |\n| 3          | [1,2,3,4], target=7    | [2,3]           | Target at the end |\n| 4          | [1,2,3,4,5], target=8  | [2,4]           | Middle target   |\n| 5          | [5,5,10,20], target=15 | [0,2]           | Equal number    |\n| 6          | [1,1,2,2,3], target=4  | [1,3]           | Multiple pairs  |\n| 7          | [1,2,3,4,5,6], target=7 | [0,5]           | Mixed input     |\n| 8          | [3,5,7,9], target=12   | [2,3]           | High number     |\n| 9          | [2,4,6,8,10], target=14| [2,4]           | Even numbers    |\n| 10         | [1,1,2,3,5,6], target=7| [0,5]           | Random input    |\n| 11         | [1,1,1,1,1,2], target=3| [0,5]           | Multiple duplicates |\n| 12         | [1,2,3,4,5], target=9  | [3,4]           | Simple sequence |\n| 13         | [1,3,5,7,9], target=10 | [0,4]           | Odd numbers     |\n| 14         | [2,3,5,7,8], target=10 | [0,3]           | Mixed input     |\n| 15         | [10,20,30,40,50], target=70| [1,3]         | Large numbers   |\n| 16         | [4,4,4,4], target=8    | [0,3]           | Same number     |\n| 17         | [1,2,3,4,5,6,7,8], target=12 | [3,7]       | Sequential input|\n| 18         | [2,3,5,6,7], target=11 | [3,4]           | Mix of numbers  |\n| 19         | [3,6,9,12], target=15  | [0,2]           | Larger numbers  |\n| 20         | [2,3,5,7,11], target=8  | [0,3]           | Sequence with primes |\n| 21         | [1,1,2,3], target=4    | [1,3]           | Simple test     |\n| 22         | [10,20,30,40], target=50| [0,2]           | Large input     |\n| 23         | [1,2,3,4,5,6], target=5 | [0,3]           | Target in the middle |\n| 24         | [7,8,9,10], target=17  | [0,3]           | Sequential input|\n| 25         | [2,3,5,7,9], target=12  | [2,4]           | Mixed input     |\n| 26         | [1,1,2,2,3,4,5], target=7| [1,6]          | Larger input    |\n| 27         | [5,10,15,20], target=30 | [0,3]           | Larger sequence |\n| 28         | [5,6,7,8], target=15   | [1,3]           | Increasing order|\n| 29         | [3,6,9,12,15], target=21| [0,4]          | Mix of numbers  |\n| 30         | [4,5,6,7], target=11   | [0,3]           | Simple case     |",
            "example": {
              "input": "[2,7,11,15], target=9",
              "output": "[0,1]",
              "explanation": "The pair (2, 7) at indices 0 and 1 adds up to the target sum of 9."
            },
            "answer": "def twoSum(numbers, target):\n    left, right = 0, len(numbers)-1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left, right]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1"
          },
          {
            "id": 2,
            "title": "Remove Duplicates from Sorted Array",
            "description": "Remove duplicates in-place and return the new length.\n\n | Test Cases | Input                      | Expected Output | Notes                          |\n|------------|----------------------------|-----------------|---------------------------------|\n| 1          | [1,1,2]                    | 2               | Basic test                     |\n| 2          | [1,2,2,3]                  | 3               | Simple case                    |\n| 3          | [0,0,0,1,1,1,1]            | 2               | Multiple duplicates            |\n| 4          | [1,1,1,1,1,1]              | 1               | All duplicates                 |\n| 5          | [2,2,2,3,4]                | 3               | Mix of numbers                 |\n| 6          | [5,6,6,7,8,8]              | 4               | Duplicates in the middle       |\n| 7          | [1,1,2,2,3,4]              | 4               | Multiple duplicates at start   |\n| 8          | [0,1,1,2,3]                | 4               | Simple input                   |\n| 9          | [1,2,2,3,3,3]              | 3               | Multiple 3's                   |\n| 10         | [2,3,4,4,4,5]              | 4               | Ending duplicates              |\n| 11         | [1,2,3,4,5]                | 5               | All unique                     |\n| 12         | [1]                        | 1               | Single element                 |\n| 13         | []                         | 0               | Empty array                    |\n| 14         | [0,0,0,0,0,0]              | 1               | All zeros                      |\n| 15         | [1,1,1,2,2,3,3,4,4,5,5,5]  | 5               | Repeated groups                |\n| 16         | [1,2,2,2,2,2,3]            | 3               | One unique in the middle       |\n| 17         | [1,1,1,2,3,3,3,4,4,5,6]    | 6               | Alternating duplicates         |\n| 18         | [1,2,3,3,3,3,3,3,4,5]      | 5               | Many duplicates of one value   |\n| 19         | [1,1,1,1,1,2,2,2,3,3,3,4]  | 4               | Larger input                   |\n| 20         | [1,1,2,2,2,2,3,3,4,5,6,6]  | 6               | Spread-out duplicates          |\n| 21         | [1,1,1,2,3]                | 3               | First elements duplicated      |\n| 22         | [1,2,3,4,5,5,5]            | 5               | Ending duplicates              |\n| 23         | [2,2,3,4,4,5,6,7]          | 6               | Random mid duplicates          |\n| 24         | [1,1,1,1,2,2,2,2,3,3]      | 3               | Dense duplications             |\n| 25         | [0,1,1,1,2,3,3,4,5]        | 6               | Simple increasing pattern      |\n| 26         | [0,0,0,0,0,1,1,1,1,2,2]    | 3               | Zeros and ones                 |\n| 27         | [1,1,1,1,1,1,1,1,1,1,1]    | 1               | All same number                |\n| 28         | [1,2,2,3,4,4,5,6,6,6,6]    | 6               | Mid-end duplicates             |\n| 29         | [1,2,3,4,5,6,7,8,9]        | 9               | No duplicates                  |\n| 30         | [1,1,2,3,3,4,5,5,5,6,7]    | 7               | Mixed duplicates               |\n| 31         | [5,5,5,5,5,5,5,5]          | 1               | All same, mid-value            |\n| 32         | [1,2,2,3,4,5,5,6,7,8,9,9]  | 9               | Multiple sparse duplicates     |\n| 33         | [2,2,2,2,3,4,4,5,6,6,6]    | 6               | Repeats in pairs               |\n| 34         | [1,2,3,4,5,5,5,6,7,8,9,10] | 10              | Ending repeat                  |\n| 35         | [3,3,3,4,5,6,7,8,9,10,11]  | 9               | Beginning repeated             |\n| 36         | [0,0,1,2,3,4,5,6,7,7,7]    | 9               | Start and end repeats          |\n| 37         | [9,9,10,11,11,12,13]      | 5               | Duplicate pairs                |\n| 38         | [5,5,5,6,7,8,8,8,9,10]     | 6               | Central dense duplicates       |\n| 39         | [1,2,3,4,5,6,7,7,8,9,9]    | 9               | Multiple ends                  |\n| 40         | [10,10,10,10,10,11]        | 2               | Heavy beginning duplicates     |",
            "example": {
              "input": "[1,1,2]",
              "output": "2",
              "explanation": "After removing the duplicates, the new length is 2."
            },
            "answer": "def remove_duplicates_from_input(input_line):\n    nums = list(map(int, input_line.strip().split()))\n    if not nums:\n        print(0)\n        return\n\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n\n    print(i + 1)\n\n# ğŸš¨ This takes user input (not hardcoded anymore)\nif __name__ == \"__main__\":\n    input_line = input()\n    remove_duplicates_from_input(input_line)"
          },
          {
            "id": 3,
            "title": "Squares of a Sorted Array",
            "description": "Return an array of the squares of each number sorted in non-decreasing order.\n\n| Test Cases | Input                 | Expected Output     | Notes                          |\n|------------|-----------------------|---------------------|--------------------------------|\n| 1          | [-4,-1,0,3,10]        | [0,1,9,16,100]      | Mixed negatives and positives  |\n| 2          | [-7,-3,2,3,11]        | [4,9,9,49,121]      | Multiple negatives             |\n| 3          | [-5,-3,-2,-1]         | [1,4,9,25]          | All negatives                  |\n| 4          | [0,1,2,3,4]           | [0,1,4,9,16]        | All positives                  |\n| 5          | [1]                   | [1]                 | Single element                 |\n| 6          | [0]                   | [0]                 | Zero only                      |\n| 7          | [-1,0,1]              | [0,1,1]             | Symmetric around zero          |\n| 8          | [-2,-1,0,1,2]         | [0,1,1,4,4]         | Symmetric with duplicates      |\n| 9          | [-3,-3,-2,-2]         | [4,4,9,9]           | Duplicates negatives           |\n| 10         | [2,2,3,3]             | [4,4,9,9]           | Duplicates positives           |\n| 11         | [-1,-1,0,0,1,1]       | [0,0,1,1,1,1]       | Multiple zeros and ones        |\n| 12         | [-10000,0,10000]      | [0,100000000,100000000] | Large magnitude numbers    |\n| 13         | []                    | []                  | Empty array                    |\n| 14         | [-2,-1,0,1,2,3]       | [0,1,1,4,4,9]       | Mixed with increasing positives|\n| 15         | [-3,-2,-1,0,1,2,3]    | [0,1,1,4,4,9,9]     | Symmetric with zero            |\n| 16         | [-1,-1,-1,-1]         | [1,1,1,1]           | All same negatives             |\n| 17         | [1,1,1,1]             | [1,1,1,1]           | All same positives             |\n| 18         | [-2,-2,-2,-2]         | [4,4,4,4]           | All same negatives             |\n| 19         | [2,2,2,2]             | [4,4,4,4]           | All same positives             |\n| 20         | [-3,-2,-1,0,0,1,2,3]  | [0,0,1,1,4,4,9,9]   | Symmetric with duplicates      |\n| 21         | [-5,-3,-1,0,2,4,6]    | [0,1,4,9,16,25,36]  | Mixed with increasing positives|\n| 22         | [-10,-5,0,5,10]       | [0,25,25,100,100]   | Symmetric large numbers        |\n| 23         | [-1,1]                | [1,1]               | Small symmetric                |\n| 24         | [-2,0,2]              | [0,4,4]             | Small symmetric with zero      |\n| 25         | [-3,-1,0,1,3]         | [0,1,1,9,9]         | Symmetric with odd numbers     |\n| 26         | [-4,-2,0,2,4]         | [0,4,4,16,16]       | Symmetric with even numbers    |\n| 27         | [-6,-3,0,3,6]         | [0,9,9,36,36]       | Symmetric with multiples of 3  |\n| 28         | [-7,-4,-1,2,5]        | [1,4,16,25,49]      | Mixed with varied numbers      |\n| 29         | [-8,-5,-2,1,4,7]      | [1,4,16,25,49,64]   | Mixed with increasing positives|\n| 30         | [-9,-6,-3,0,3,6,9]    | [0,9,9,36,36,81,81] | Symmetric with multiples of 3  |\n| 31         | [-10,-5,0,5,10]       | [0,25,25,100,100]   | Symmetric large numbers        |\n| 32         | [-100,-50,0,50,100]   | [0,2500,2500,10000,10000] | Large symmetric numbers |\n| 33         | [-1,0,0,0,1]          | [0,0,0,1,1]         | Multiple zeros                 |\n| 34         | [-2,-1,-1,0,1,1,2]    | [0,1,1,1,1,4,4]     | Duplicates around zero         |\n| 35         | [-3,-2,-1,1,2,3]      | [1,1,4,4,9,9]       | Symmetric without zero         |\n| 36         | [-4,-3,-2,-1,0,1,2,3,4] | [0,1,1,4,4,9,9,16,16] | Full range symmetric      |\n| 37         | [-5,-4,-3,-2,-1,0,1,2,3,4,5] | [0,1,1,4,4,9,9,16,16,25,25] | Extended symmetric |\n| 38         | [-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6] | [0,1,1,4,4,9,9,16,16,25,25,36,36] | Larger symmetric |\n| 39         | [-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7] | [0,1,1,4,4,9,9,16,16,25,25,36,36,49,49] | Extended symmetric |\n| 40         | [-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8] | [0,1,1,4,4,9,9,16,16,25,25,36,36,49,49,64,64] | Full symmetric |",
            "example": {
              "input": "[-4,-1,0,3,10]",
              "output": "[0,1,9,16,100]",
              "explanation": "After squaring each number and sorting, we get [0,1,9,16,100]."
            },
            "answer": "def sortedSquares(nums):\n    n = len(nums)\n    result = [0]*n\n    left, right = 0, n-1\n    pos = n-1\n    while left <= right:\n        if abs(nums[left]) > abs(nums[right]):\n            result[pos] = nums[left] ** 2\n            left += 1\n        else:\n            result[pos] = nums[right] ** 2\n            right -= 1\n        pos -= 1\n    return result"
          },
          {
            "id": 4,
            "title": "Move Zeroes to End",
            "description": "Move all zeroes to the end maintaining order.\n\n | Test Cases | Input               | Expected Output   | Notes           |\n|------------|---------------------|-------------------|-----------------|\n| 1          | [0,1,0,3,12]         | [1,3,12,0,0]      | Basic test      |\n| 2          | [1,2,0,0,3]          | [1,2,3,0,0]       | Multiple zeroes |\n| 3          | [0,0,0,1]            | [1,0,0,0]         | All zeroes      |\n| 4          | [4,5,6,0,0,1]        | [4,5,6,1,0,0]     | Mixed input     |\n| 5          | [0,2,0,0]            | [2,0,0,0]         | Few zeroes      |\n| 6          | [7,0,0,0,8]          | [7,8,0,0,0]       | Zeroes at the end |\n| 7          | [1,2,3]              | [1,2,3]           | No zeroes       |\n| 8          | [0,0,0,0]            | [0,0,0,0]         | All zeroes      |\n| 9          | [2,0,3,0]            | [2,3,0,0]         | Mixed numbers   |\n| 10         | [0,3,1]              | [3,1,0]           | Zero at the beginning |\n| 11         | [1,0]                | [1,0]             | Simple case     |\n| 12         | [0,1,2,3]            | [1,2,3,0]         | Zero at the front |\n| 13         | [3,4,0,5,0,0]        | [3,4,5,0,0,0]     | Multiple zeroes |\n| 14         | [1,0,2]              | [1,2,0]           | Mix of numbers  |\n| 15         | [0,4,0,5]            | [4,5,0,0]         | Zeroes scattered|\n| 16         | [1,1,0,1]            | [1,1,1,0]         | Duplicate numbers|\n| 17         | [0,5,7,0,0,8]        | [5,7,8,0,0,0]     | Zeroes at various places |\n| 18         | [0,1,2,3,0]          | [1,2,3,0,0]       | Zero at the end |\n| 19         | [0,0,1]              | [1,0,0]           | Simple test     |\n| 20         | [2,3,0,0]            | [2,3,0,0]         | Mix of numbers  |\n| 21         | [5,4,0,0,3]          | [5,4,3,0,0]       | Mixed input     |\n| 22         | [1,0,0,0,0,1]        | [1,1,0,0,0,0]     | Multiple zeroes |\n| 23         | [3,4,0,0,0]          | [3,4,0,0,0]       | Zeroes at the end |\n| 24         | [0,0,0,4,3]          | [4,3,0,0,0]       | Zeroes at front |\n| 25         | [0,1,2,0,0,3]        | [1,2,3,0,0,0]     | Multiple zeroes |\n| 26         | [4,0,6,7,0]          | [4,6,7,0,0]       | Zeroes scattered|\n| 27         | [0,0,0,0,5]          | [5,0,0,0,0]       | All zeroes      |\n| 28         | [5,0,1]              | [5,1,0]           | Simple test     |\n| 29         | [1,0,0,1,2]          | [1,1,2,0,0]       | Mixed input     |\n| 30         | [0,4,5,6,0]          | [4,5,6,0,0]       | Zero at the end |\n| 31         | [0,3,0,1]            | [3,1,0,0]         | Mix of numbers  |\n| 32         | [1,0,2,0,0,3]        | [1,2,3,0,0,0]     | Mixed zeroes    |\n| 33         | [2,0,1,0]            | [2,1,0,0]         | Simple input    |\n| 34         | [0,0,4,5,0]          | [4,5,0,0,0]       | Zeroes in between |\n| 35         | [0,2,0,3]            | [2,3,0,0]         | Simple sequence |\n| 36         | [0,0,0,0,0,1]        | [1,0,0,0,0,0]     | All zeroes      |\n| 37         | [2,0,0,0,0]          | [2,0,0,0,0]       | Zeroes at the end |\n| 38         | [3,0,4,5,0]          | [3,4,5,0,0]       | Mixed numbers   |\n| 39         | [0,0,0,5,6]          | [5,6,0,0,0]       | Mixed zeroes    |\n| 40         | [1,0,1]              | [1,1,0]           | Mix of numbers  |",
            "example": {
              "input": "[0,1,0,3,12]",
              "output": "[1,3,12,0,0]",
              "explanation": "Move all zeroes to the end while maintaining the order of other elements."
            },
            "answer": "def moveZeroes(nums):\n    lastNonZeroFoundAt = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[lastNonZeroFoundAt], nums[i] = nums[i], nums[lastNonZeroFoundAt]\n            lastNonZeroFoundAt += 1\n\ninput_nums = input()\nnums = list(map(int, input_nums.split()))\nmoveZeroes(nums)\nprint(\" \".join(map(str, nums)))"
          },
          {
            "id": 5,
            "title": "Backspace String Compare",
            "description": "Compare two strings considering '#' as a backspace.\n\n | Test Cases | Input        | Expected Output | Notes            |\n|------------|--------------|-----------------|------------------|\n| 1          | \"ab#c\", \"ad#c\" | True            | Simple test      |\n| 2          | \"ab##c\", \"a#c\" | True            | Multiple backspaces |\n| 3          | \"a#c\", \"b\"    | False           | Backspace removal |\n| 4          | \"y#z#a\", \"a\"  | True            | Mixed backspaces |\n| 5          | \"ab#c#d\", \"a#bc\" | False          | Multiple backspaces |\n| 6          | \"a#c#d\", \"ad\"  | False           | Backspace deletion |\n| 7          | \"x##z#c\", \"z#c\" | True            | Multiple backspaces |\n| 8          | \"#y#z\", \"y#z\"  | True            | Backspace at the start |\n| 9          | \"a#b#c#d\", \"abcd\" | False         | Complex case     |\n| 10         | \"a#c#d\", \"cd\"  | True            | Backspace at front |\n| 11         | \"abc#d\", \"abd\" | True            | Partial deletion |\n| 12         | \"#ab#c\", \"abc\" | False           | Complex case     |\n| 13         | \"ab##cd\", \"cd\" | True            | Multiple deletions |\n| 14         | \"ab#c#d#e#f\", \"abcf\" | True       | Alternating backspaces |\n| 15         | \"#a#b#c#d\", \"abcd\" | False       | Mixed backspaces |\n| 16         | \"a#b#c#d\", \"abcd\" | False       | Multiple deletions |\n| 17         | \"abc#d#e#f\", \"abcd\" | True       | Backspace removal |\n| 18         | \"#a#b#c#d\", \"bc\" | True           | Starting with backspaces |\n| 19         | \"a#bc#d#e\", \"abcde\" | False     | Extra characters  |\n| 20         | \"a#b#c#d\", \"abcd\" | False       | Mixed deletions  |\n| 21         | \"##abcd\", \"abcd\" | True          | Backspaces at front |\n| 22         | \"ab#cd#d\", \"acdd\" | True         | Multiple backspaces |\n| 23         | \"a#bc#d\", \"abcd\" | True          | Mixed backspaces  |\n| 24         | \"#abcd#\", \"abcd\" | True          | Complex case      |\n| 25         | \"abcd#\", \"abc\"  | True            | Single backspace  |\n| 26         | \"#ab#c#d\", \"acd\" | True          | Backspaces in middle |\n| 27         | \"ab##cd#\", \"ab##d\" | True        | Deletions from both |\n| 28         | \"abc#d#e#f\", \"abcd\" | True      | Multiple deletions |\n| 29         | \"a#bc#d#e\", \"aef\" | True         | Backspace removal |\n| 30         | \"#abc#d#e\", \"ace\" | False       | Backspace at start |\n| 31         | \"abc#d#e#f\", \"abcf\" | True       | Complex input     |\n| 32         | \"abc###d\", \"abc\" | True           | Multiple deletions |\n| 33         | \"#ab##c#d\", \"ad\" | True          | Multiple backspaces |\n| 34         | \"abc#cd#d\", \"abcd\" | True         | Mix of deletions  |\n| 35         | \"a#b#c#d\", \"abcd\" | True         | Mixed deletions  |\n| 36         | \"abc#d#e#f\", \"abcd\" | True       | Complex deletions |\n| 37         | \"#a#b#c#d\", \"abcd\" | False      | Backspace errors  |\n| 38         | \"abc#d#e#f\", \"abcdef\" | True     | Alternating case  |\n| 39         | \"#a#b#c#d\", \"abc\" | False       | Edge case         |\n| 40         | \"abcd#\", \"abc\"  | True            | Backspace removal |\n",
            "example": {
              "input": "\"ab#c\", \"ad#c\"",
              "output": "True",
              "explanation": "Both strings evaluate to 'ac', so they are equal after applying the backspaces."
            },
            "answer": "def backspaceCompare(s, t):\n    def build(string):\n        res = []\n        for ch in string:\n            if ch != '#':\n                res.append(ch)\n            elif res:\n                res.pop()\n        return ''.join(res)\n    return build(s) == build(t)\n\ns, t = input().split()\nprint(backspaceCompare(s, t))"
          },
          {
            "id": 6,
            "title": "3Sum",
            "description": "Find all unique triplets in the array which gives the sum of zero.\n\n | Test Cases | Input                  | Expected Output             | Notes           |\n|------------|------------------------|-----------------------------|-----------------|\n| 1          | [-1,0,1,2,-1,-4]        | [[-1,-1,2], [-1,0,1]]       | Basic case      |\n| 2          | [0,0,0]                | [[0,0,0]]                  | All zeroes      |\n| 3          | [1,2,-2,-5,0,-1,4]      | [[-5,1,4], [-2,0,2]]        | Mixed input     |\n| 4          | [-2,0,1,1]             | [[-2,1,1]]                 | Small input     |\n| 5          | [1,-1,-1,0]            | [[-1,0,1]]                 | Simple input    |\n| 6          | [1,-1,-1,0,2,3]        | [[-1,0,1], [-1,-1,2]]      | Large input     |\n| 7          | [0,-1,2,-3,1]          | [[-3,1,2], [-1,0,1]]       | Mix of numbers  |\n| 8          | [3,0,-2,-1,1,2]        | [[-2,-1,3], [-2,0,2], [-1,0,1]] | Larger input  |\n| 9          | [-1,0,1,2,3,-3,-2,-1]  | [[-3,0,3], [-2,-1,3], [-2,0,2], [-1,-1,2]] | Complex input |\n| 10         | [0,0,0,0]              | [[0,0,0]]                  | All zeroes      |\n| 11         | [-5,-3,0,2,5]          | [[-5,0,5], [-3,-1,4]]      | Mix of negatives and positives |\n| 12         | [0,1,-1]               | [[-1,0,1]]                 | Small input     |\n| 13         | [1,-1,0]               | [[-1,0,1]]                 | Simple case     |\n| 14         | [-2,3,4,-1,-1,0]       | [[-2,-1,3]]                | Small mix       |\n| 15         | [2,0,-1,-1]            | [[-1,0,1]]                 | Simple input    |\n| 16         | [1,0,-1,-1,2,4]        | [[-1,-1,2], [0,0,0]]       | Larger input    |\n| 17         | [-1,2,0,1,-1]          | [[-1,-1,2], [0,0,0]]       | Simple case     |\n| 18         | [4,3,-1,-2,-1,2]       | [[-2,-1,3], [-1,0,1]]      | Mixed case      |\n| 19         | [0,-2,2,-2,0,1]        | [[-2,0,2]]                 | Small input     |\n| 20         | [1,-3,2,-2,0,0]        | [[-3,1,2], [-2,0,2]]       | Mixed case      |\n| 21         | [-3,-2,0,1,2]          | [[-3,0,3], [-2,-1,3]]      | Simple case     |\n| 22         | [0,0,1,-1,2]           | [[-1,0,1]]                 | Simple input    |\n| 23         | [1,2,-1,-1,0]          | [[-1,0,1]]                 | Simple input    |\n| 24         | [-2,0,1,3,-1,0]        | [[-2,1,1], [-1,0,1]]       | Larger input    |\n| 25         | [2,0,-1,-1]            | [[-1,0,1]]                 | Mix of numbers  |\n| 26         | [1,0,-1,-2,-3]         | [[-3,1,2], [-2,-1,3]]      | Mixed input     |\n| 27         | [1,1,1]                | []                         | No triplets     |\n| 28         | [0,1,2,3]              | []                         | No triplets     |\n| 29         | [1,-1,0,-2,2]          | [[-2,0,2], [-1,0,1]]       | Mixed input     |\n| 30         | [-3,-2,1,2,3]          | [[-3,0,3], [-2,-1,3]]      | Larger input    |\n| 31         | [1,0,-1,2,-1,-2]       | [[-2,0,2], [-1,-1,2]]      | Complex input   |\n| 32         | [5,4,-4,-1,2,0]        | [[-4,-1,5]]                | Larger input    |\n| 33         | [-3,-2,0,2,3]          | [[-3,0,3], [-2,-1,3]]      | Mixed input     |\n| 34         | [3,4,5,6,7,8]          | []                         | No triplets     |\n| 35         | [1,2,3,4]              | []                         | No triplets     |\n| 36         | [-5,-4,-3,-2,-1,0]     | []                         | No triplets     |\n| 37         | [0,1,3,4,5]            | []                         | No triplets     |\n| 38         | [0,-1,2,-1]            | [[-1,-1,2]]                | Simple case     |\n| 39         | [2,2,-4,1]             | []                         | No triplets     |\n| 40         | [-1,-1,-1,2]           | [[-1,-1,2]]                | Simple case     |",
            "example": {
                "input": "[-1,0,1,2,-1,-4]",
                "output": "[[-1,-1,2], [-1,0,1]]",
                "explanation": "The unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
            },
            "answer": "def threeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left, right = i+1, len(nums)-1\n        while left < right:\n            s = nums[i] + nums[left] + nums[right]\n            if s == 0:\n                res.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return res"
        },
        {
          
            "id": 7,
            "title": "Container With Most Water",
           "description": "Given an array of non-negative integers, where each element represents a vertical line at that position, find two lines that together with the x-axis form a container that holds the most water.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [1,8,6,2,5,4,8,3,7]    | 49              | Basic case      |\n| 2          | [1,1]                  | 1               | Two elements    |\n| 3          | [4,3,2,1,4]            | 16              | Simple input    |\n| 4          | [1,8,3,4,7,5]          | 28              | Mix of heights  |\n| 5          | [10,9,8,7,6,5,4,3]     | 70              | Decreasing heights |\n| 6          | [7,1,2,3,9]            | 28              | Increase-decrease heights |\n| 7          | [1,2,4,3,5]            | 12              | Increasing heights |\n| 8          | [1,2,1,2]              | 2               | Small container |\n| 9          | [4,7,1,2]              | 6               | Random heights  |\n| 10         | [5,3,8,6]              | 20              | Even spacing    |\n| 11         | [1,3,2,5,6,7]          | 12              | Simple increasing heights |\n| 12         | [6,7,4,3,2,5,8]        | 24              | Decreasing then increasing |\n| 13         | [3,1,4,2,7,8,1]        | 21              | Mix of heights  |\n| 14         | [1,2,3,4,5]            | 6               | Increasing heights |\n| 15         | [5,4,3,2,1]            | 12              | Decreasing heights |\n| 16         | [10,1,2,3,4,5]         | 20              | Mixed input     |\n| 17         | [3,7,9,5,2,6]          | 21              | Random input    |\n| 18         | [8,1,3,4,6]            | 20              | Mixed container sizes |\n| 19         | [1,2,6,4,8]            | 24              | Various sizes   |\n| 20         | [2,3,4,5,6]            | 8               | Simple case     |\n| 21         | [1,3,6,8,10,1]         | 24              | Larger input    |\n| 22         | [1,1,2,3,4,5]          | 6               | Increasing heights |\n| 23         | [3,7,4,5,6,7]          | 24              | Mix of peaks    |\n| 24         | [5,3,2,6,7,1,8]        | 24              | Random input    |\n| 25         | [8,7,5,3,1]            | 20              | Decreasing heights |\n| 26         | [4,2,1,8]              | 8               | Small input     |\n| 27         | [2,5,4,3,7,9]          | 24              | Mixed case      |\n| 28         | [9,8,6,7]              | 18              | Decreasing heights |\n| 29         | [3,6,8,9,4,3]          | 18              | Complex case    |\n| 30         | [4,6,2,3,5]            | 15              | Simple case     |\n| 31         | [2,3,4,5,6,1]          | 12              | Mixed case      |\n| 32         | [7,5,4,3,2]            | 12              | Decreasing heights |\n| 33         | [1,2,3,4,5,6,7]        | 12              | Increasing heights |\n| 34         | [7,4,5,3,2,8]          | 28              | Mix of heights  |\n| 35         | [9,4,7,2,8,1]          | 21              | Complex case    |\n| 36         | [3,1,4,7,9,5]          | 21              | Mixed case      |\n| 37         | [1,3,2,6,8]            | 24              | Mixed case      |\n| 38         | [2,1,3,8,4]            | 24              | Mixed case      |\n| 39         | [1,5,4,6,7,3]          | 24              | Random input    |\n| 40         | [1,2,3,7]              | 6               | Simple case     |",
            "example": {
                "input": "[1,8,6,2,5,4,8,3,7]",
                "output": "49",
                "explanation": "The container formed by the lines at indices 1 and 8 (heights 8 and 7) holds the most water, 49 units."
            },
            "answer": "def maxArea(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    while left < right:\n        area = min(height[left], height[right]) * (right - left)\n        max_area = max(max_area, area)\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area"
        },
        {
          "id": 8,
          "title": "Minimum Size Subarray Sum",
          "description": "Given an array of positive integers and a target value, find the minimal length of a contiguous subarray whose sum is greater than or equal to the target.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [2,3,1,2,4,3], target=7 | 2               | Basic case      |\n| 2          | [1,4,4], target=4       | 1               | Exact match     |\n| 3          | [1,1,1,1,1,1], target=11| 6               | All elements    |\n| 4          | [1,2,3,4,5], target=11  | 3               | Longer input    |\n| 5          | [1,1,1,1,1,1], target=6 | 6               | Smallest subarray|\n| 6          | [2,3,1,2,4,3], target=10| 4               | Larger input    |\n| 7          | [1,2,3,4,5], target=15  | 5               | All elements    |\n| 8          | [1,2,3,4,5], target=11  | 3               | Mix of numbers  |\n| 9          | [2,3,1,2,4,3], target=9 | 3               | Middle sequence |\n| 10         | [1,4,4], target=5       | 2               | Random input    |\n| 11         | [1, 2, 3, 4, 5], target=10 | 4             | Sequential elements|\n| 12         | [5, 5, 5, 5, 5], target=15 | 3            | Repeated elements|\n| 13         | [1, 2, 3, 4, 5, 6], target=9 | 3           | Mixed sequence  |\n| 14         | [2, 2, 2, 2, 2], target=6  | 3             | Repeated values|\n| 15         | [7, 1, 3, 2, 8], target=10 | 3             | Random order    |\n| 16         | [9, 7, 3, 1, 2, 4], target=12 | 4            | Mix of small numbers|\n| 17         | [5, 1, 3, 6, 7], target=10 | 3             | Random order    |\n| 18         | [6, 7, 8, 9], target=20  | 4             | Large target    |\n| 19         | [1, 1, 2, 3, 4], target=7 | 4             | Small increments |\n| 20         | [3, 4, 1, 2], target=8   | 3             | Non-sequential input|\n| 21         | [10, 2, 3, 1, 5, 6], target=9 | 2           | Non-sequential input|\n| 22         | [8, 7, 4, 1], target=10  | 3             | Decreasing values|\n| 23         | [1, 2, 2, 3, 3, 1], target=6 | 3           | Mixed cases     |\n| 24         | [4, 4, 4, 4], target=12  | 3             | Equal elements  |\n| 25         | [1, 2, 3, 5, 5, 5], target=8 | 3            | Random input    |\n| 26         | [2, 3, 4, 5, 6], target=9 | 3             | Simple case     |\n| 27         | [5, 10, 20, 25], target=30 | 2            | Larger numbers  |\n| 28         | [2, 5, 6, 8], target=15  | 3             | Random order    |\n| 29         | [10, 15, 20, 25], target=50 | 3            | Large input     |\n| 30         | [1, 3, 5, 7], target=12  | 3             | Simple input    |\n| 31         | [6, 3, 1, 5], target=9   | 2             | Random order    |\n| 32         | [2, 3, 4, 2, 5], target=8 | 3             | Random input    |\n| 33         | [10, 3, 5, 4], target=8  | 2             | Non-sequential input|\n| 34         | [1, 2, 2, 1, 2], target=5 | 4             | Repeated values |",
          "example": {
            "input": "[2,3,1,2,4,3], target=7",
            "output": "2",
            "explanation": "The smallest subarray whose sum is greater than or equal to 7 is [4, 3] with length 2."
          },
          "answer": "def minSubArrayLen(target, nums):\n    left, total, min_len = 0, 0, float('inf')\n    for right in range(len(nums)):\n        total += nums[right]\n        while total >= target:\n            min_len = min(min_len, right - left + 1)\n            total -= nums[left]\n            left += 1\n    return min_len if min_len != float('inf') else 0"
        },
        {
          "id": 9,
          "title": "Search in Rotated Sorted Array",
          "description": "You are given an integer array nums sorted in ascending order, and an integer target. Suppose that nums is rotated at some pivot. Find the index of the target in nums.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | [4,5,6,7,0,1,2], target=0| 4               | Basic case      |\n| 2          | [4,5,6,7,8,9,10], target=5| 1              | No rotation     |\n| 3          | [1,2,3,4,5,6], target=3 | 2               | No rotation     |\n| 4          | [2,3,4,5,6,7,8,9], target=5 | 3             | Larger array    |\n| 5          | [7,8,9,1,2,3,4], target=2 | 4               | Rotated array   |\n| 6          | [3,4,5,6,7,8,9,1,2], target=9 | 7            | Rotated array   |\n| 7          | [2,3,4,5,6], target=3   | 1               | Simple input    |\n| 8          | [8,9,10,11,12,1,2,3,4], target=12 | 4         | Rotated input   |\n| 9          | [1,2,3,4,5,6,7,8], target=6 | 5               | No rotation     |\n| 10         | [9,10,11,12,1,2,3,4], target=1 | 4           | Rotated input   |\n| 11         | [1, 2, 3, 4, 5], target=5  | 4              | Simple case     |\n| 12         | [4,5,6,7,0,1,2], target=7 | 3              | Edge case       |\n| 13         | [1, 3, 5, 7, 9], target=7 | 3              | Middle value    |\n| 14         | [1, 2, 3, 4, 5], target=3 | 2              | Small input     |\n| 15         | [10, 20, 30, 40, 50], target=40 | 3            | Larger sequence |\n| 16         | [5, 7, 9, 10, 15, 20], target=10 | 3            | Simple case     |\n| 17         | [5, 6, 7, 8, 9], target=9 | 4              | Maximum value   |\n| 18         | [1, 3, 5, 7, 9], target=9 | 4              | Max target      |\n| 19         | [7, 8, 9, 1, 2, 3], target=1 | 3             | Rotated values  |\n| 20         | [9, 10, 11, 12, 1, 2, 3], target=3 | 6         | Rotated values  |\n| 21         | [1, 3, 5, 7, 9], target=5 | 2              | Middle target   |\n| 22         | [2, 3, 4, 5, 6, 7], target=4 | 2             | No rotation     |\n| 23         | [6, 7, 8, 9, 10, 11], target=10 | 4            | Larger array    |\n| 24         | [3, 5, 7, 8, 10], target=8 | 3             | Mixed array     |\n| 25         | [1, 2, 3, 4, 5], target=3 | 2              | Simple sequence |\n| 26         | [5, 8, 9, 10, 2, 3], target=9 | 2             | Random values   |\n| 27         | [1, 2, 3, 4, 5], target=10 | 5             | No rotation     |\n| 28         | [7, 8, 9, 1, 2, 3, 4], target=9 | 2             | Target last     |\n| 29         | [1, 2, 3, 4, 5], target=4 | 3              | Near last       |\n| 30         | [2, 3, 4, 5, 6], target=3 | 1              | First element   |\n| 31         | [5, 1, 2, 3, 4], target=2 | 2              | Mixed elements  |\n| 32         | [9, 10, 11, 12, 1, 2], target=1 | 4           | Rotated input   |\n| 33         | [1, 5, 7, 9, 11], target=7 | 2              | Simple case     |\n| 34         | [2, 4, 6, 8, 10], target=10 | 4             | Simple sequence |\n| 35         | [1, 3, 5, 7, 9], target=7 | 3              | Near middle     |\n| 36         | [7, 8, 9, 1, 2, 3], target=8 | 0              | Edge case       |\n| 37         | [10, 11, 12, 1, 2], target=11 | 1             | Simple match    |\n| 38         | [8, 9, 10, 1, 2], target=9 | 1             | First match     |\n| 39         | [1, 2, 3, 4], target=3 | 2              | Normal case     |\n| 40         | [10, 20, 30, 40, 50], target=50 | 4            | Edge case       |",
         "example": {
                "input": "[4,5,6,7,0,1,2], target=0",
                "output": "4",
                "explanation": "The target value 0 is at index 4 after the array is rotated."
            },
            "answer": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1"
        },
        {
          "id": 10,
          "title": "Longest Substring Without Repeating Characters",
          "description": "Length of the longest substring without repeating characters.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | 'abcabcbb'             | 3               | Basic case      |\n| 2          | 'bbbbb'                | 1               | All characters are the same |\n| 3          | 'pwwkew'               | 3               | Substring starts at index 2 |\n| 4          | 'abcde'                | 5               | All characters unique |\n| 5          | 'dvdf'                  | 3               | Multiple repetitions |\n| 6          | 'a'                     | 1               | Single character |\n| 7          | 'au'                    | 2               | Two unique characters |\n| 8          | 'dcbabcba'             | 4               | Alternating characters |\n| 9          | 'longestsubstring'     | 13              | No repeats |\n| 10         | 'mondaytuesday'        | 10              | No repeats |\n| 11         | 'sssss'                 | 1               | Repeating character |\n| 12         | 'abcdabc'               | 4               | Initial part has all unique chars |\n| 13         | 'abcdefg'               | 7               | Entire string unique |\n| 14         | 'zxvbnm'                | 6               | All unique |\n| 15         | 'papapap'               | 2               | Repeated pattern |\n| 16         | 'tesla'                 | 5               | All unique |\n| 17         | 'laptop'                | 6               | All unique |\n| 18         | 'banana'                | 3               | Contains 'na' repeat |\n| 19         | 'bookkeeper'            | 6               | Contains multiple repeats |\n| 20         | 'pineapple'             | 5               | First part unique |\n| 21         | 'bar'                   | 3               | All unique chars |\n| 22         | 'gdhghgd'               | 4               | Alternating unique and repeat |\n| 23         | 'abcdeabcde'            | 5               | Partial repeats |\n| 24         | 'axcvbn'                | 6               | All unique |\n| 25         | 'aabbcc'                | 2               | Pairs repeating |\n| 26         | 'java'                  | 4               | All unique |\n| 27         | 'debug'                 | 5               | All unique |\n| 28         | 'workwork'              | 4               | Repeats halfway |\n| 29         | 'abcdab'                | 4               | Starts and ends with repeat |\n| 30         | 'zxcvbnm'               | 7               | All unique |\n| 31         | 'aaxzmn'                | 6               | Repeats at both ends |\n| 32         | 'loooll'                | 3               | Repeated characters |\n| 33         | 'bbbcab'                | 4               | Repeating 'b' at start |\n| 34         | 'tttsss'                | 2               | Multiple repeats |\n| 35         | 'happyhappy'            | 5               | Repeat after a few chars |\n| 36         | 'valueinput'            | 8               | No repeats |\n| 37         | 'characters'            | 9               | No repeats |\n| 38         | 'longtext'              | 8               | Contains repeat |\n| 39         | 'aabbccdd'              | 2               | Multiple pair repeats |\n| 40         | 'xxxx'                  | 1               | Single repeated character |",
          "example": {
            "input": "'abcabcbb'",
            "output": "3",
            "explanation": "The longest substring without repeating characters is 'abc' with length 3."
          },
          "answer": "def lengthOfLongestSubstring(s):\n    char_index = {}  # Dictionary to store the last seen index of characters\n    left = 0         # Start of the current window\n    max_len = 0      # Max length of substring without repeating characters\n\n    for right in range(len(s)):\n        # If the character is repeated and inside the current window, move left pointer\n        if s[right] in char_index and char_index[s[right]] >= left:\n            left = char_index[s[right]] + 1  # Slide the window forward\n        \n        # Update the last seen index of the character\n        char_index[s[right]] = right\n        \n        # Update the max length found so far\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n# Take user input\ninput_str = input().strip()\n\n# Call the function and print the result\nprint(lengthOfLongestSubstring(input_str))"
        },
        {
          "id": 11,
          "title": "Reverse String",
          "description": "Reverse a string in-place.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | ['h','e','l','l','o']   | ['o','l','l','e','h'] | Basic case      |\n| 2          | ['h','e','l','l','o','w'] | ['w','o','l','l','e','h'] | With space at end |\n| 3          | ['r','a','c','e','c','a','r'] | ['r','a','c','e','c','a','r'] | Palindrome input |\n| 4          | ['a','b','c']            | ['c','b','a'] | Small length |\n| 5          | ['x','y']                | ['y','x'] | Two characters |\n| 6          | ['a']                    | ['a'] | Single character |\n| 7          | []                       | [] | Empty string |\n| 8          | ['m','o','n','d','a','y'] | ['y','a','d','n','o','m'] | Weekday input |\n| 9          | ['t','e','s','t']        | ['t','s','e','t'] | Reversal test |\n| 10         | ['a','b','c','d','e','f'] | ['f','e','d','c','b','a'] | Even length |\n| 11         | ['z','y','x']            | ['x','y','z'] | Small reversed input |\n| 12         | ['p','q','r']            | ['r','q','p'] | Another small case |\n| 13         | ['b','o','o','k']        | ['k','o','o','b'] | Small word |\n| 14         | ['p','a','l','a','n','d','r','o','m','e'] | ['e','m','o','r','d','n','a','l','a','p'] | Palindrome word |\n| 15         | ['r','a','y']            | ['y','a','r'] | Short word |\n| 16         | ['l','a','t','o','p']    | ['p','o','t','a','l'] | Mixed input |\n| 17         | ['r','a','b','i','t']    | ['t','i','b','a','r'] | Animal word |\n| 18         | ['p','i','n','e','a','p','p','l','e'] | ['e','l','p','p','a','e','n','i','p'] | Fruit word |\n| 19         | ['a','b','c','d']        | ['d','c','b','a'] | Simple input |\n| 20         | ['g','o','o','g','l','e'] | ['e','l','g','o','o','g'] | Popular website |\n| 21         | ['s','t','r','i','n','g'] | ['g','n','i','r','t','s'] | Word input |\n| 22         | ['h','e','a','r','t']    | ['t','r','e','a','h'] | Emotion word |\n| 23         | ['c','a','r']            | ['r','a','c'] | Vehicle word |\n| 24         | ['r','i','v','e','r']    | ['r','e','v','i','r'] | Water-related word |\n| 25         | ['r','e','m','e','m','b','e','r'] | ['r','e','b','m','e','m','e','r'] | Memory-related word |\n| 26         | ['l','e','m','o','n']    | ['n','o','m','e','l'] | Fruit word |\n| 27         | ['a','l','p','h','a']    | ['a','h','p','l','a'] | Mixed chars |\n| 28         | ['c','o','d','e']        | ['e','d','o','c'] | Programming word |\n| 29         | ['s','p','a','r','k']    | ['k','r','a','p','s'] | Technology word |\n| 30         | ['c','h','a','r','g','e'] | ['e','g','r','a','h','c'] | Power-related word |\n| 31         | ['m','i','c','r','o','s','o','f','t'] | ['t','f','o','s','r','o','s','r','m'] | Company name |\n| 32         | ['t','r','e','e']        | ['e','e','r','t'] | Nature-related word |\n| 33         | ['b','i','r','d']        | ['d','r','i','b'] | Nature-related word |\n| 34         | ['s','n','o','w']        | ['w','o','n','s'] | Weather word |\n| 35         | ['h','e','a','r']        | ['r','e','a','h'] | Simple word |\n| 36         | ['f','l','a','g']        | ['g','f','l','a'] | Color word |\n| 37         | ['d','a','y']            | ['y','a','d'] | Time-related word |\n| 38         | ['m','o','o','n']        | ['n','o','o','m'] | Nature word |\n| 39         | ['r','a','i','n']        | ['n','i','a','r'] | Weather word |\n| 40         | ['m','o','u','n','t','a','i','n'] | ['n','i','a','t','m','u','o','n'] | Nature-related word |",
          "example": {
            "input": "['h','e','l','l','o']",
            "output": "['o','l','l','e','h']",
            "explanation": "The string is reversed in-place to become ['o','l','l','e','h']."
          },
          "answer": "def reverseString(s):\n    left, right = 0, len(s)-1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n\n# Take user input, split it into a list of characters\ninput_str = input().strip().split()\n\n# Reverse the input string\nreverseString(input_str)\n\n# Output the reversed string, joining the characters back with a space\nprint(\" \".join(input_str))"
        },
        {
          "id": 12,
          "title": "Is Subsequence",
          "description": "Check if s is a subsequence of t.\n\n | Test Cases | Input                  | Expected Output | Notes           |\n|------------|------------------------|-----------------|-----------------|\n| 1          | 'abc', 'ahbgdc'         | True            | Simple subsequence |\n| 2          | 'axc', 'ahbgdc'         | False           | Character 'x' not in target |\n| 3          | 'abc', 'abcde'          | True            | Exact match |\n| 4          | 'ace', 'abcde'          | True            | Subsequence at alternate positions |\n| 5          | '', 'abcde'             | True            | Empty subsequence |\n| 6          | 'abc', ''               | False           | No matching subsequence |\n| 7          | 'a', 'a'                 | True            | Single character |\n| 8          | 'rts', 'rust'           | True            | Simple subsequence |\n| 9          | 'xy', 'xxyy'            | True            | Repeating characters |\n| 10         | 'apple', 'applicable'   | True            | Longer target string |\n| 11         | 'pencil', 'pentacle'    | True            | Mixed word subsequence |\n| 12         | 'ab', 'cd'              | False           | No subsequence |\n| 13         | 'ki', 'kite'            | True            | Common characters |\n| 14         | 'rust', 'rust'          | True            | Exact match |\n| 15         | 'tune', 'untuned'       | True            | Subsequence with some common chars |\n| 16         | 'grape', 'grandfather'  | True            | Subsequence with more letters |\n| 17         | 'yummy', 'yummylicious' | True            | Longer subsequence |\n| 18         | 'hot', 'hotel'          | True            | Common letters |\n| 19         | 'code', 'codex'         | True            | Subsequence |\n| 20         | 'air', 'fair'           | False           | No subsequence |\n| 21         | 'school', 'elearning'   | True            | Common subsequence |\n| 22         | 'land', 'wonderland'    | True            | Larger subsequence |\n| 23         | 'jack', 'jackpot'       | True            | Common subsequence |\n| 24         | 'dream', 'dreamer'      | True            | Subsequence match |\n| 25         | 'rake', 'break'         | True            | Subsequence |\n| 26         | 'love', 'loved'         | True            | Subsequence match |\n| 27         | 'fig', 'figments'       | True            | Longer word match |\n| 28         | 'not', 'note'           | True            | Subsequence match |\n| 29         | 'elephant', 'elephantine' | True          | Longer sequence |\n| 30         | 'school', 'scholar'     | True            | Subsequence |\n| 31         | 'game', 'frame'         | False           | No match |\n| 32         | 'chicken', 'kitchen'    | True            | Reordering subsequence |\n| 33         | 'push', 'splash'        | True            | Mixed input |\n| 34         | 'cook', 'cookie'        | True            | Subsequence |\n| 35         | 'hat', 'that'           | True            | Simple subsequence |\n| 36         | 'food', 'goodfood'      | True            | Subsequence |\n| 37         | 'sharp', 'sharpen'      | True            | Subsequence with common parts |\n| 38         | 'sun', 'sunglow'        | True            | Part of string |\n| 39         | 'go', 'goggles'         | True            | Repeating letters |\n| 40         | 'light', 'highlight'    | True            | Common subsequence |",
          "example": {
            "input": "'abc', 'ahbgdc'",
            "output": "True",
            "explanation": "The string 'abc' is a subsequence of 'ahbgdc'."
          },
          "answer": "def isSubsequence(s, t):\n    iter_t = iter(t)\n    return all(c in iter_t for c in s)"
        },
          {
            "id": 13,
            "title": "Valid Palindrome",
            "description": "Check if string is a palindrome (ignore non-alphanumeric).\n\n | Test Cases | Input                                | Expected Output | Notes         |\n|------------|--------------------------------------|-----------------|---------------|\n| 1          | \"A man, a plan, a canal: Panama\"     | true            | Basic test    |\n| 2          | \"race a car\"                        | false           | Simple case   |\n| 3          | \"\"                                  | true            | Empty string  |\n| 4          | \".,;:\"                               | true            | Punctuation   |\n| 5          | \"Was it a car or a cat I saw?\"       | true            | Palindrome    |\n| 6          | \"No 'x' in Nixon\"                   | true            | Longer string |\n| 7          | \"Step on no pets\"                   | true            | Reverse words |\n| 8          | \"Red roses\"                         | false           | Not a palindrome |\n| 9          | \"Madam, in Eden, I'm Adam\"           | true            | Complex test  |\n| 10         | \"Taco cat\"                           | true            | Palindrome    |\n| 11         | \"Not a palindrome!\"                  | false           | Exclamation   |\n| 12         | \"Was it a car?\"                      | true            | Palindrome    |\n| 13         | \"Is a man, or a cat I saw?\"          | true            | Sentence palindrome |\n| 14         | \"Random string\"                      | false           | Random input  |\n| 15         | \"No lemon, no melon\"                 | true            | Reverse word palindrome |\n| 16         | \"Never a foot too far, even.\"        | true            | Complex case  |\n| 17         | \"Racecar\"                            | true            | Simple palindrome |\n| 18         | \"Civic\"                              | true            | Simple palindrome |\n| 19         | \"Deified\"                            | true            | Simple palindrome |\n| 20         | \"Palindrome\"                         | false           | Not a palindrome |\n| 21         | \"Able was I, ere I saw Elba\"         | true            | Famous palindrome |\n| 22         | \"Eva, can I see bees in a cave?\"     | true            | Complex palindrome |\n| 23         | \"No devil lived on\"                  | true            | Reverse palindrome |\n| 24         | \"Drab as a fool, aloof as a bard\"    | true            | Sentence palindrome |\n| 25         | \"Hannah\"                             | true            | Single word palindrome |\n| 26         | \"Bob\"                                | true            | Short palindrome |\n| 27         | \"Pushkin\"                            | false           | Not a palindrome |\n| 28         | \"Java\"                               | false           | Not a palindrome |\n| 29         | \"redivider\"                          | true            | Palindrome    |\n| 30         | \"Level\"                              | true            | Single word palindrome |\n| 31         | \"Detartrated\"                        | true            | Longer palindrome |\n| 32         | \"Reviver\"                            | true            | Palindrome    |\n| 33         | \"Deified\"                            | true            | Single word palindrome |\n| 34         | \"Rotator\"                            | true            | Single word palindrome |\n| 35         | \"Repaper\"                            | true            | Palindrome    |\n| 36         | \"Redder\"                             | true            | Palindrome    |\n| 37         | \"Tenet\"                              | true            | Palindrome    |\n| 38         | \"Madam\"                              | true            | Palindrome    |\n| 39         | \"Welcome\"                            | false           | Random string |\n| 40         | \"Winter\"                             | false           | Not a palindrome |",
            "example": {
              "input": "\"A man, a plan, a canal: Panama\"",
              "output": "true",
              "explanation": "The string, ignoring spaces and non-alphanumeric characters, is a palindrome."
            },
            "answer": "def isPalindrome(s):\n    new_s = ''.join(c.lower() for c in s if c.isalnum())\n    return new_s == new_s[::-1]"
          },
          {
            "id": 14,
            "title": "Subarray Product Less Than K",
            "description": "Find the number of subarrays with product less than k.\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [10,5,2,6], k=100    | 8               | Basic test      |\n| 2          | [1,2,3,4], k=10      | 7               | Larger k        |\n| 3          | [1,1,1,1], k=2       | 10              | All ones        |\n| 4          | [1,1,1,1,1], k=5     | 15              | Multiple ones   |\n| 5          | [2,5,3,10], k=100    | 7               | Larger numbers  |\n| 6          | [1,2,4,1], k=8       | 6               | Mixed sequence  |\n| 7          | [2,3,4,5], k=15      | 7               | Decreasing numbers |\n| 8          | [1,3,4], k=10        | 6               | Simple case     |\n| 9          | [1,2,3], k=50        | 6               | Small numbers   |\n| 10         | [5,10,20,25], k=30   | 4               | Mixed sequence  |\n| 11         | [1,3,5,7], k=15      | 6               | Increasing numbers |\n| 12         | [3,4,5,6], k=60      | 9               | Larger product  |\n| 13         | [2,6,8], k=20        | 4               | Even numbers    |\n| 14         | [1,3,1,2], k=15      | 6               | Small sequence  |\n| 15         | [3,5,7,9], k=50      | 6               | Larger sequence |\n| 16         | [1,1,2,3], k=10      | 10              | Small numbers   |\n| 17         | [2,3,5,7,8], k=20    | 10              | Mixed sequence  |\n| 18         | [1,4,7,8], k=30      | 9               | Larger test     |\n| 19         | [2,3,5,7,9], k=30    | 12              | Larger input    |\n| 20         | [5,10,15,20], k=50   | 9               | Larger sequence |\n| 21         | [1,2,3,5], k=10      | 8               | Mixed sequence  |\n| 22         | [3,4,5,6], k=50      | 9               | Larger product  |\n| 23         | [2,5,7,8], k=35      | 8               | Mixed sequence  |\n| 24         | [1,1,2,3,4], k=12    | 15              | Increasing order |\n| 25         | [2,3,6,10], k=30     | 9               | Larger product  |\n| 26         | [4,5,6], k=50        | 6               | Mixed input     |\n| 27         | [2,5,10], k=50       | 6               | Larger values   |\n| 28         | [1,2,3], k=20        | 6               | Simple case     |\n| 29         | [4,5,10,15], k=50    | 10              | Random numbers  |\n| 30         | [2,4,8,16], k=100    | 6               | Larger numbers  |\n| 31         | [5,6,7,8,9], k=100   | 12              | Larger test     |\n| 32         | [1,2,3,4,5], k=30    | 15              | Mixed sequence  |\n| 33         | [1,5,10], k=50       | 5               | Simple case     |\n| 34         | [5,5,10], k=25       | 6               | Same numbers    |\n| 35         | [2,4,6,8,10], k=40   | 9               | Mixed numbers   |\n| 36         | [1,1,2,3,5], k=10    | 15              | Larger input    |\n| 37         | [3,4,7,8,9], k=50    | 15              | Larger numbers  |\n| 38         | [2,5,8,10], k=30     | 7               | Larger input    |\n| 39         | [1,3,5,7,9], k=50    | 10              | Simple sequence |\n| 40         | [2,5,7,9,10], k=40   | 12              | Larger input    |",
            "example": {
              "input": "[10,5,2,6], k=100",
              "output": "8",
              "explanation": "The subarrays that have a product less than 100 are [10], [5], [2], [6], [5,2], [2,6], [5,2,6], [10,5]."
            },
            "answer": "def numSubarrayProductLessThanK(nums, k):\n    if k <= 1:\n        return 0\n    prod = 1\n    ans = left = 0\n    for right, val in enumerate(nums):\n        prod *= val\n        while prod >= k:\n            prod /= nums[left]\n            left += 1\n        ans += right - left + 1\n    return ans"
          },
          {
            "id": 15,
            "title": "Minimum Window Substring",
            "description": "Find minimum window substring containing all characters.\n\n | Test Cases | Input                           | Expected Output | Notes         |\n|------------|---------------------------------|-----------------|---------------|\n| 1          | \"ADOBECODEBANC\", \"ABC\"        | \"BANC\"         | Basic test    |\n| 2          | \"ADOBECODEBANCCO\", \"ABC\"     | \"BANC\"         | Additional letters |\n| 3          | \"AAAA\", \"A\"                   | \"A\"            | Single character |\n| 4          | \"BBBBBB\", \"BB\"                | \"BB\"           | Repeated characters |\n| 5          | \"ABCDABCEBABC\", \"ABC\"        | \"ABC\"          | Substring found |\n| 6          | \"ADOBECODEBANCC\", \"ABC\"      | \"BANC\"         | Small input    |\n| 7          | \"XYZABXYCXYABCABCZ\", \"ABC\"   | \"ABC\"          | Complex case  |\n| 8          | \"ZZAABBCDAABBAABBC\", \"ABC\"   | \"ABB\"          | Multiple matches |\n| 9          | \"ZZABAAACZACBBACCZ\", \"ABC\"   | \"AAACZ\"        | Complex test  |\n| 10         | \"ABCDEABCDEABCDE\", \"ABCDE\"   | \"ABCDE\"        | Large repeated substring |\n| 11         | \"ZZZZZZZZZZ\", \"Z\"             | \"Z\"            | Single character repeated |\n| 12         | \"QWERTYUIO\", \"UI\"             | \"UI\"           | Basic match   |\n| 13         | \"ADADCBACBADBC\", \"AABC\"       | \"BADBC\"        | Multiple matches |\n| 14         | \"XYZXYZXYZXYZ\", \"XYZ\"         | \"XYZ\"          | Repeated pattern |\n| 15         | \"ABCABCABCABC\", \"CBA\"         | \"CBA\"          | Random sequence |\n| 16         | \"AABACBABACAB\", \"BAC\"         | \"BAC\"          | Substring found |\n| 17         | \"BABCAACCCBCAAAB\", \"ABC\"     | \"BCAAC\"        | Complex case  |\n| 18         | \"DADAACBDDAAACC\", \"ACB\"       | \"ACC\"          | Longer substring |\n| 19         | \"ABABBAACABBABA\", \"AAB\"       | \"AAB\"          | Complex string |\n| 20         | \"BBBAACBBACABAAB\", \"BB\"       | \"BB\"           | Repeated characters |\n| 21         | \"BCDCBDBCBCCB\", \"BCC\"        | \"BCC\"          | Overlapping subtring |\n| 22         | \"XYABCDXYBC\", \"XY\"           | \"XY\"           | Simple case    |\n| 23         | \"AABBCCDDAABBC\", \"BBCC\"      | \"BBCC\"         | Substring match |\n| 24         | \"BABABBBCBCBABBB\", \"AAB\"      | \"AAB\"          | Random input   |\n| 25         | \"ABBBCCAAABABAB\", \"ABAB\"     | \"ABAB\"         | Multiple substrings |\n| 26         | \"AAABBBCCCABAAABB\", \"ABC\"    | \"ABC\"          | Mixed sequence |\n| 27         | \"AABACDCADABCA\", \"DC\"        | \"DC\"           | Simple match   |\n| 28         | \"AAABCABCBAABBCBBA\", \"ABC\"   | \"ABC\"          | Larger string  |\n| 29         | \"CBAACBABCBAA\", \"CAB\"        | \"CAB\"          | Reverse input  |\n| 30         | \"AAABBACABBAABBAAC\", \"ABC\"   | \"ABC\"          | Complex string |\n| 31         | \"ABCDABDCABACDAB\", \"ACD\"     | \"ACD\"          | Multiple matches |\n| 32         | \"BBACACBBBCABCBAB\", \"BCC\"    | \"BCC\"          | Overlap input  |\n| 33         | \"AABCBDABCBACB\", \"ABC\"       | \"ABC\"          | Random sequence |",
              "example": {
                "input": "ADOBECODEBANC, ABC",
                "output": "BANC",
                "explanation": "The smallest window in the input string containing all characters from 'ABC' is 'BANC'."
              },
              "answer": "def minWindow(s, t):\n    if not s or not t:\n        return \"\"\n    dict_t = Counter(t)\n    required = len(dict_t)\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n    ans = float(\"inf\"), None, None\n    while r < len(s):\n        c = s[r]\n        window_counts[c] = window_counts.get(c, 0) + 1\n        if c in dict_t and window_counts[c] == dict_t[c]:\n            formed += 1\n        while l <= r and formed == required:\n            c = s[l]\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n            window_counts[c] -= 1\n            if c in dict_t and window_counts[c] < dict_t[c]:\n                formed -= 1\n            l += 1\n        r += 1\n    return \"\" if ans[0] == float(\"inf\") else s[ans[1]:ans[2]+1]"
            },
            {
              "id": 16,
              "title": "Sort Colors (Dutch National Flag Problem)",
              "description": "Sort an array with 0s, 1s, and 2s without using sort().\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [2,0,2,1,1,0]        | [0,0,1,1,2,2]   | Basic test      |\n| 2          | [1,0,2,1,0,2]        | [0,0,1,1,2,2]   | Mixed order     |\n| 3          | [0,0,0,1,1,1]        | [0,0,0,1,1,1]   | Already sorted  |\n| 4          | [2,2,2,1,1,1]        | [1,1,1,2,2,2]   | Reverse order   |\n| 5          | [0,1,2,0,1,2]        | [0,0,1,1,2,2]   | Random mix      |\n| 6          | [1,2,1,0,2,0]        | [0,0,1,1,2,2]   | Shuffled input  |\n| 7          | [2,1,0,2,1,0]        | [0,0,1,1,2,2]   | Another mix     |\n| 8          | [1,0,0,1,2,2]        | [0,0,1,1,2,2]   | Simple case     |\n| 9          | [0,2,1,0,2,1]        | [0,0,1,1,2,2]   | No sorted order |\n| 10         | [1,2,2,0,1,0]        | [0,0,1,1,2,2]   | Random mix      |\n| 11         | [2,2,0,1,0,1]        | [0,0,1,1,2,2]   | Simple test     |\n| 12         | [0,1,0,2,1,2]        | [0,0,1,1,2,2]   | Mixed elements  |\n| 13         | [1,0,2,1,2,0]        | [0,0,1,1,2,2]   | Another shuffle |\n| 14         | [2,0,1,1,2,0]        | [0,0,1,1,2,2]   | Random test     |\n| 15         | [0,0,1,2,1,2]        | [0,0,1,1,2,2]   | Sorted parts    |\n| 16         | [1,1,2,0,0,2]        | [0,0,1,1,2,2]   | Test with 3 elements |\n| 17         | [2,1,0,0,2,1]        | [0,0,1,1,2,2]   | All positions mixed |\n| 18         | [1,2,0,1,2,0]        | [0,0,1,1,2,2]   | Half sorted     |\n| 19         | [0,2,1,0,1,2]        | [0,0,1,1,2,2]   | Random order    |\n| 20         | [2,0,2,0,1,1]        | [0,0,1,1,2,2]   | Mixed elements  |\n| 21         | [0,1,1,0,2,2]        | [0,0,1,1,2,2]   | Simple case     |\n| 22         | [1,1,0,2,2,0]        | [0,0,1,1,2,2]   | Randomized order |\n| 23         | [2,1,0,1,0,2]        | [0,0,1,1,2,2]   | Mixed positions |\n| 24         | [1,2,0,1,2,0]        | [0,0,1,1,2,2]   | Duplicate input |\n| 25         | [0,0,2,1,1,2]        | [0,0,1,1,2,2]   | Simple sequence |\n| 26         | [2,0,1,1,2,0]        | [0,0,1,1,2,2]   | Already sorted  |\n| 27         | [1,0,2,0,1,2]        | [0,0,1,1,2,2]   | Basic mix       |\n| 28         | [0,0,1,1,2,2]        | [0,0,1,1,2,2]   | Already sorted  |\n| 29         | [2,2,1,1,0,0]        | [0,0,1,1,2,2]   | Reverse order   |\n| 30         | [1,2,1,2,0,0]        | [0,0,1,1,2,2]   | Mixed order     |\n| 31         | [0,1,2,1,2,0]        | [0,0,1,1,2,2]   | Random elements |\n| 32         | [0,2,1,0,1,2]        | [0,0,1,1,2,2]   | Unsorted input  |\n| 33         | [0,1,0,2,2,1]        | [0,0,1,1,2,2]   | Basic case      |\n| 34         | [2,0,2,1,0,1]        | [0,0,1,1,2,2]   | Random sequence |\n| 35         | [0,2,1,1,0,2]        | [0,0,1,1,2,2]   | Shuffled input  |\n| 36         | [1,1,2,0,2,0]        | [0,0,1,1,2,2]   | Mixed set       |\n| 37         | [1,0,2,2,1,0]        | [0,0,1,1,2,2]   | Reversed order  |\n| 38         | [0,1,2,2,1,0]        | [0,0,1,1,2,2]   | Mixed order     |\n| 39         | [2,1,0,0,2,1]        | [0,0,1,1,2,2]   | Shuffled input  |\n| 40         | [1,2,1,0,2,0]        | [0,0,1,1,2,2]   | Random test     |",
              "example": {
                "input": "[2,0,2,1,1,0]",
                "output": "[0,0,1,1,2,2]",
                "explanation": "The array is sorted by grouping the 0s, 1s, and 2s in the correct order."
              },
              "answer": "def sortColors(nums):\n    low, mid, high = 0, 0, len(nums) - 1\n    while mid <= high:\n        if nums[mid] == 0:\n            nums[low], nums[mid] = nums[mid], nums[low]\n            low += 1\n            mid += 1\n        elif nums[mid] == 1:\n            mid += 1\n        else:\n            nums[mid], nums[high] = nums[high], nums[mid]\n            high -= 1\n\nif __name__ == \"__main__\":\n    nums = list(map(int, input().split()))\n    sortColors(nums)\n    print(*nums)"
            },
            {
              "id": 17,
              "title": "Find Pair Given Difference",
              "description": "Find if there exists a pair with a given difference.\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [1,5,3,4,2], diff=3  | True            | Basic test      |\n| 2          | [10,15,3,4,8], diff=5 | True            | Larger test     |\n| 3          | [1,3,5,7,9], diff=2  | True            | Multiple pairs  |\n| 4          | [10,20,30,40], diff=10| True            | Consecutive nums|\n| 5          | [4,2,7,9,11], diff=3 | True            | Simple case     |\n| 6          | [1,2,3,4,5], diff=1  | True            | Simple increment|\n| 7          | [5,3,1,7,9], diff=4  | True            | Random mix      |\n| 8          | [8,16,24,40], diff=8 | True            | Large numbers   |\n| 9          | [3,5,8,6], diff=1    | True            | Two adjacent    |\n| 10         | [6,2,3,7], diff=4    | True            | Diff present    |\n| 11         | [3,9,5,7,11], diff=6 | True            | Larger numbers  |\n| 12         | [4,1,3,9], diff=6    | True            | Positive test   |\n| 13         | [5,9,15,20], diff=5  | True            | Multiple options|\n| 14         | [5,1,2,3], diff=2    | True            | Small test      |\n| 15         | [10,12,14,16], diff=2| True            | Even sequence   |\n| 16         | [1,1,1,2,3], diff=1  | True            | Small duplicate |\n| 17         | [8,10,5,7], diff=3   | True            | Non-sorted      |\n| 18         | [9,5,2,1,8], diff=7  | True            | Largest diff    |\n| 19         | [15,12,5,3,9], diff=3 | True            | Simple set      |\n| 20         | [8,11,14,6], diff=3  | True            | Adjacent pair   |\n| 21         | [4,6,3,9], diff=2    | True            | Small numbers   |\n| 22         | [7,5,9,13], diff=4   | True            | Positive case   |\n| 23         | [4,1,6,3], diff=3    | True            | Valid test      |\n| 24         | [2,5,7,4], diff=3    | True            | Random test     |\n| 25         | [12,14,16,10], diff=6| True            | Larger values   |\n| 26         | [5,4,2,8], diff=3    | True            | Sequential      |\n| 27         | [3,10,6,1], diff=3   | True            | Same diff       |\n| 28         | [20,25,15,30], diff=5| True            | Multiple diff   |\n| 29         | [2,7,4,1], diff=3    | True            | Difference exists|\n| 30         | [10,1,2,6], diff=4   | True            | Single solution |\n| 31         | [6,3,4,5], diff=1    | True            | Close diff      |\n| 32         | [1,7,2,8,5], diff=3  | True            | Multiple diffs  |\n| 33         | [4,8,3,1], diff=3    | True            | Small diff      |\n| 34         | [1,4,3,9], diff=3    | True            | Basic set       |\n| 35         | [2,7,1,5], diff=2    | True            | Two pairs       |\n| 36         | [6,3,5,7], diff=2    | True            | Sorted order    |\n| 37         | [15,9,4,1], diff=7   | True            | Reverse order   |\n| 38         | [9,2,10,5], diff=4   | True            | Positive test   |\n| 39         | [6,5,2,7], diff=3    | True            | Difference found|\n| 40         | [1,3,5,7], diff=2    | True            | Random test     |",
              "example": {
                "input": "[1,5,3,4,2], diff=3",
                "output": "True",
                "explanation": "A pair (6,3) with difference 3 exists in the array."
              },
              "answer": "def findPairWithDiff(arr):\n    diff = arr[0]\n    nums = arr[1:]\n    nums_set = set(nums)\n    for num in nums:\n        if num + diff in nums_set or num - diff in nums_set:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    print(findPairWithDiff(arr))"
            },
            {
              "id": 18,
              "title": "Move Zeroes",
              "description": "Move all 0s to the end of the array while maintaining the relative order of the non-zero elements.\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [0,1,2,0,3,4]        | [1,2,3,4,0,0]   | Basic test      |\n| 2          | [0,0,0,1,2,3]        | [1,2,3,0,0,0]   | Leading zeroes  |\n| 3          | [1,2,3,4,5]          | [1,2,3,4,5]     | Already sorted  |\n| 4          | [5,4,3,2,1]          | [5,4,3,2,1]     | No zeroes       |\n| 5          | [0,0,1,0,0,2]        | [1,2,0,0,0,0]   | Zeros in between|\n| 6          | [0,0,0,0,0]          | [0,0,0,0,0]     | All zeros       |\n| 7          | [1,0,0,2,0,3]        | [1,2,3,0,0,0]   | Mixed zeroes    |\n| 8          | [1,2,0,0,3,0]        | [1,2,3,0,0,0]   | Zeroes after elements|\n| 9          | [1,0,2,0,3,0,4]      | [1,2,3,4,0,0,0] | Multiple zeroes |\n| 10         | [0,1]                | [1,0]           | Simple two-element list |\n| 11         | [1,0,0,0,2]          | [1,2,0,0,0]     | Simple case     |\n| 12         | [0,1,0,2,0,3]        | [1,2,3,0,0,0]   | Mixed zeroes    |\n| 13         | [1,0,0,0]            | [1,0,0,0]       | Leading zero    |\n| 14         | [1,2,3,0,0,0,4]      | [1,2,3,4,0,0,0] | Random input    |\n| 15         | [0,0,0,0,0,0]        | [0,0,0,0,0,0]   | All zeroes      |\n| 16         | [2,3,0,0,5]          | [2,3,5,0,0]     | Test with non-zeroes |\n| 17         | [0,0,0,6,0,9]        | [6,9,0,0,0,0]   | Multiple zeroes in between|\n| 18         | [4,0,3,0,2,0]        | [4,3,2,0,0,0]   | Zeroes after elements|\n| 19         | [1,1,0,0,1]          | [1,1,1,0,0]     | Repeating 1s    |\n| 20         | [0,0,3,0,2,0,1]      | [3,2,1,0,0,0,0] | Multiple zeroes |\n| 21         | [3,2,1,0]            | [3,2,1,0]       | No zeroes       |\n| 22         | [1,2,3,0,0,0]        | [1,2,3,0,0,0]   | Zeroes at the end|\n| 23         | [0,0,0,3,2,1]        | [3,2,1,0,0,0]   | Zeros in the front |\n| 24         | [0,0,0,0,5,4]        | [5,4,0,0,0,0]   | Simple case     |\n| 25         | [0,0,1,0,2]          | [1,2,0,0,0]     | Leading zero    |\n| 26         | [0,2,0,4,0,6]        | [2,4,6,0,0,0]   | Zeroes in the middle |\n| 27         | [0,5,6,0,7]          | [5,6,7,0,0]     | Random zeroes   |\n| 28         | [0,0,1,0]            | [1,0,0,0]       | Short list      |\n| 29         | [2,4,0,0,7]          | [2,4,7,0,0]     | Multiple zeroes |\n| 30         | [3,1,4,0,5]          | [3,1,4,5,0]     | Simple shuffle  |\n| 31         | [0,0,6,0,1,0]        | [6,1,0,0,0,0]   | Multiple zeros  |\n| 32         | [0,3,0,5,0,7]        | [3,5,7,0,0,0]   | Mixed elements  |\n| 33         | [0,2,0,0,4,1]        | [2,4,1,0,0,0]   | Random mix      |\n| 34         | [1,0,0,0,2,0]        | [1,2,0,0,0,0]   | Basic input     |\n| 35         | [0,1,0,0,4,0,5]      | [1,4,5,0,0,0,0] | Leading zeroes  |\n| 36         | [1,0,0,3,0]          | [1,3,0,0,0]     | Rearrange zeroes|\n| 37         | [0,1,4,0,0]          | [1,4,0,0,0]     | Basic test      |\n| 38         | [0,0,0,0,1,2]        | [1,2,0,0,0,0]   | Small zeros     |\n| 39         | [0,0,2,3,4]          | [2,3,4,0,0]     | Random order    |\n| 40         | [0,1,0,3,4]          | [1,3,4,0,0]     | Zeros in the middle |\n",
              "example": {
                "input": "[0,1,2,0,3,4]",
                "output": "[1,2,3,4,0,0]",
                "explanation": "Move all zeroes to the end of the array while maintaining the order of non-zero elements."
              },
              "answer": "def moveZeroes(nums):\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1"
            },
            {
              "id": 18,
              "title": "Reverse Words in a String III",
              "description": "Reverse characters of each word separately.\n\n | Test Cases | Input                           | Expected Output               | Notes           |\n|------------|---------------------------------|-------------------------------|-----------------|\n| 1          | 'Let's take LeetCode contest'   | 's'teL ekat edoCteeL tsetnoc'  | Basic test      |\n| 2          | 'Hello World'                   | 'olleH dlroW'                 | Simple case     |\n| 3          | 'Reverse words in string'       | 'esreveR sdrow ni gnirts'     | General case    |\n| 4          | 'This is a test'                | 'sihT si a tset'              | Common test     |\n| 5          | 'Java is fun'                   | 'avaJ si nuf'                 | Short sentence  |\n| 6          | 'Coding is great'               | 'gnidoC si taerg'             | Basic sentence  |\n| 7          | 'Keep learning new things'      | 'peeK gninrael wen sgniht'    | Longer sentence |\n| 8          | 'Python is powerful'            | 'nohtyP si lufrewop'          | Mixed letters   |\n| 9          | 'I am a programmer'              | 'I ma a remmargorp'           | Basic input     |\n| 10         | 'Data structures are fun'       | 'ataD serutcurts era nuf'     | Common test     |\n| 11         | 'Never stop learning'           | 'reveN pots gninrael'         | Basic input     |\n| 12         | 'All your base are belong to us'| 'llA ruoy esab era gnolneb ot su' | Phrase test  |\n| 13         | 'Reverse each word'             | 'esreveR hcae drow'           | General test    |\n| 14         | 'String reversal test'          | 'gnirtS lasrever tset'        | General case    |\n| 15         | 'Tech is awesome'                | 'hceT si emosewa'             | Simple case     |\n| 16         | 'Have fun coding'               | 'evaH nuf gnidoc'             | Basic input     |\n| 17         | 'Enjoy your day'                | 'yojnE ruoy yad'              | Short sentence  |\n| 18         | 'Write code daily'              | 'etirW edoc yladi'            | Regular case    |\n| 19         | 'Happy learning always'         | 'yppaH gninrael syawla'       | Simple sentence |\n| 20         | 'Stay positive always'          | 'yats evitisop syawla'        | General case    |\n| 21         | 'Good luck'                      | 'dooG kcul'                   | Basic test      |\n| 22         | 'Donâ€™t stop dreaming'            | 'tnoD pots gnimaerd'          | Simple test     |\n| 23         | 'Success requires effort'       | 'sseccuS seriuqer tffore'     | Mixed case      |\n| 24         | 'Keep pushing forward'           | 'peeK hsingup drawrof'        | Regular test    |\n| 25         | 'Believe in yourself'           | 'eveileB ni flesruoy'        | Common sentence |\n| 26         | 'Never give up'                  | 'reveN evig pu'               | Simple test     |\n| 27         | 'We are learning new things'    | 'eW era gninrael wen sgniht'  | Longer input    |\n| 28         | 'Coding is fun'                  | 'gnidoC si nuf'               | Short sentence  |\n| 29         | 'Start coding today'             | 'trats gnidoc yadot'          | Simple case     |\n| 30         | 'Write your code'                | 'etirW ruoy edoc'             | Common test     |\n| 31         | 'Find the solution'              | 'dniF eht noitulos'           | Basic test      |\n| 32         | 'Donâ€™t stop coding'              | 'tnoD pots gnidoc'            | Common input    |\n| 33         | 'Love coding everyday'           | 'evaL gnidoc yadreve'         | Regular case    |\n| 34         | 'Programming is amazing'         | 'gnimmargorP si gnizama'     | Mixed case      |\n| 35         | 'Stay focused and keep learning' | 'yats desucof dna peek gninrael' | Long sentence  |\n| 36         | 'Solve the problem'              | 'evloS eht melborp'           | Basic input     |\n| 37         | 'Focus on the task'              | 'sucoF no eht ksat'           | Simple test     |\n| 38         | 'Success comes with hard work'   | 'sseccuS semoc htiw drah krow' | Longer input    |\n| 39         | 'You can do it'                 | 'uoY nac od ti'               | Motivational    |\n| 40         | 'Dream big, work hard'           | 'maerD gib, krow drah'        | Inspirational  |",
              "example": {
                "input": "'Let's take LeetCode contest'",
                "output": "'s'teL ekat edoCteeL tsetnoc'",
                "explanation": "Each word in the input string has been reversed, while the order of the words remains unchanged."
              },
              "answer": "def reverseWords(s):\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return ' '.join(words)"
            },
            {
              "id": 19,
              "title": "Longest Mountain in Array",
              "description": "Find the length of the longest mountain.\n\n | Test Cases | Input                         | Expected Output | Notes           |\n|------------|-------------------------------|-----------------|-----------------|\n| 1          | [2,1,4,7,3,2,5]               | 5               | Basic test      |\n| 2          | [2,2,2,2,2]                   | 0               | No mountain     |\n| 3          | [0,1,2,3,4,5,6]               | 0               | No mountain     |\n| 4          | [1,3,2,1]                     | 3               | Small mountain  |\n| 5          | [9,8,7,6,5,4,3]               | 7               | Full descent    |\n| 6          | [1,2,3,4,5,4,3,2,1,0]         | 9               | Peak at center  |\n| 7          | [1,3,2,1,2,1,4,5,6]           | 4               | Multiple peaks  |\n| 8          | [1,2,1,3,4,2,3,4]             | 5               | Alternating rise and fall |\n| 9          | [3,4,5,2,1]                   | 4               | Simple peak     |\n| 10         | [3,2,1,4,5]                   | 4               | Decreasing first, then increasing |\n| 11         | [5,4,3,2,1,2,3]               | 5               | Decreasing, then increasing |\n| 12         | [6,5,4,5,6]                   | 5               | Peak at center  |\n| 13         | [2,3,4,5,6,7,8]               | 0               | No descent      |\n| 14         | [1,2,3,2,1,2,3,4,5]           | 5               | Complex sequence|\n| 15         | [2,4,6,8,10,7,6,5,4]          | 9               | Large mountain  |\n| 16         | [0,1,2,3,4,3,2,1,0]           | 9               | Peak in middle  |\n| 17         | [1,2,3,4,5,6,7,8,9,10]        | 0               | No mountain     |\n| 18         | [1,2,1,2,1]                   | 3               | Small test      |\n| 19         | [3,2,1,0,2,3]                 | 3               | Complex input   |\n| 20         | [1,2,3,2,3,4,5]               | 5               | Larger mountain |\n| 21         | [3,4,3,2,1]                   | 3               | Simple mountain |\n| 22         | [1,2,3,2,3,4,5,2]             | 5               | Complex rise and fall |\n| 23         | [1,2,3,1,4,5,6]               | 4               | Peak first      |\n| 24         | [1,2,1,2,1,2,3]               | 4               | Alternating     |\n| 25         | [3,1,2,3,4,5,6,7]             | 7               | Peak at the end |\n| 26         | [1,2,3,4,5,6,5,4,3,2]         | 9               | Reverse mountain|\n| 27         | [4,3,2,1,2,3,4]               | 7               | Peak after fall |\n| 28         | [5,4,3,2,1,2,3,4,5]           | 9               | Full peak       |\n| 29         | [9,8,7,6,5,4,3]               | 0               | Only descending |\n| 30         | [1,1,1,1,1]                   | 0               | No variation    |\n| 31         | [2,1,3,2,1,4]                 | 4               | Peak in the middle |\n| 32         | [1,3,5,2,4,6]                 | 4               | Mix of rises and falls |\n| 33         | [2,4,6,7,3,2,1]               | 5               | Complex middle  |\n| 34         | [1,2,3,1,3,5,6]               | 5               | Multiple increases and decreases |\n| 35         | [1,2,3,2,1,4,3,2]             | 5               | Small mountain  |\n| 36         | [4,5,6,7,8,9,10,9,8]          | 9               | Peak at middle  |\n| 37         | [2,1,2,3,4,3,2,1]             | 5               | Alternating rises |\n| 38         | [5,3,2,1,4,6]                 | 4               | Starting high, descending and ascending |\n| 39         | [1,2,3,4,2,1,5]               | 5               | Complex peak    |\n| 40         | [1,2,3,2,1,0,2]               | 5               | Middle descent  |",
              "example": {
                "input": "[2,1,4,7,3,2,5]",
                "output": "5",
                "explanation": "The longest mountain is from index 1 to index 5, which includes the numbers [1,4,7,3,2]."
              },
              "answer": "def longestMountain(arr):\n    n = len(arr)\n    res = 0\n    i = 1\n    while i < n-1:\n        if arr[i-1] < arr[i] > arr[i+1]:\n            l, r = i, i\n            while l > 0 and arr[l-1] < arr[l]:\n                l -= 1\n            while r < n-1 and arr[r] > arr[r+1]:\n                r += 1\n            res = max(res, r-l+1)\n            i = r\n        else:\n            i += 1\n    return res"
            },
            {
              "id": 20,
              "title": "Count Pairs with Sum Less than Target",
              "description": "Count the number of pairs whose sum is less than the target.\n\n | Test Cases | Input                    | Expected Output | Notes           |\n|------------|--------------------------|-----------------|-----------------|\n| 1          | [1,3,5,7], target=8       | 2               | Basic test      |\n| 2          | [1,3,5,7], target=10      | 4               | Larger test     |\n| 3          | [1,2,3,4,5], target=8     | 6               | Simple sequence |\n| 4          | [1,2,3,4,5], target=9     | 7               | Large sequence  |\n| 5          | [1,1,2,2,3,4], target=6   | 7               | Duplicates      |\n| 6          | [2,3,5,7], target=10      | 4               | Mixed input     |\n| 7          | [1,1,1,1], target=4       | 2               | Same numbers    |\n| 8          | [1,2,3,4], target=7       | 3               | Simple case     |\n| 9          | [2,3,4,5], target=7       | 3               | Smaller array   |\n| 10         | [1,3,5,7], target=12      | 6               | Larger sum      |\n| 11         | [1,2,2,3], target=6       | 4               | Repeated numbers|\n| 12         | [1,5,7,9,11], target=15   | 6               | Mix of numbers  |\n| 13         | [2,4,6,8], target=14      | 6               | Even numbers    |\n| 14         | [3,5,7,9], target=15      | 6               | Larger numbers  |\n| 15         | [2,3,5,6,7], target=15    | 10              | Larger sequence |\n| 16         | [1,3,4,6], target=8       | 4               | Basic increase  |\n| 17         | [3,5,7,9], target=16      | 6               | No boundary     |\n| 18         | [1,2,3,5,6], target=10    | 8               | Larger sequence |\n| 19         | [2,3,5,7], target=12      | 4               | Intermediary    |\n| 20         | [1,2,3,4], target=5       | 4               | Simple pair     |\n| 21         | [1,3,5,7], target=6       | 3               | Test with lower values |\n| 22         | [5,7,9,11], target=20     | 6               | Larger numbers  |\n| 23         | [1,3,4,7], target=9       | 4               | Basic check     |\n| 24         | [2,3,5,6,7], target=12    | 9               | Mixed sequence  |\n| 25         | [1,3,5,7], target=15      | 6               | Larger array    |\n| 26         | [3,5,7,9], target=11      | 3               | Smaller sum     |\n| 27         | [4,5,6,7], target=12      | 6               | Middle range    |\n| 28         | [1,1,1,1,1], target=4     | 5               | Same numbers    |\n| 29         | [2,3,5,6,8], target=11    | 10              | Mixed input     |\n| 30         | [3,5,7,9], target=20      | 6               | No sums greater than target |\n| 31         | [2,3,5,7], target=10      | 6               | Mid values      |\n| 32         | [1,3,5,6], target=8       | 4               | Increase       |\n| 33         | [5,7,9], target=16        | 3               | Small test      |\n| 34         | [1,3,2,4,6], target=10    | 10              | Mixed sequence  |\n| 35         | [5,6,7], target=12        | 3               | Test case 3     |\n| 36         | [2,4,6,7], target=11      | 6               | Low range       |\n| 37         | [5,4,3,2,1], target=7     | 6               | Descending input |\n| 38         | [4,5,3,7,9], target=15    | 6               | Mixed test      |\n| 39         | [2,5,6,7], target=11      | 6               | Moderate case   |\n| 40         | [3,2,1,5], target=10      | 6               | Mixed scenario  |",
              "example": {
                "input": "[1,3,5,7], target=8",
                "output": "2",
                "explanation": "Pairs that sum to less than 8 are [1,3] and [1,5]."
              },
              "answer": "def countPairs(arr, target):\n    arr.sort()\n    i, j = 0, len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] < target:\n            count += (j - i)\n            i += 1\n        else:\n            j -= 1\n    return count"
            },
            {
              "id": 21,
              "title": "Palindrome Linked List",
              "description": "Check if a linked list is a palindrome.\n\n | Test Cases | Input              | Expected Output | Notes           |\n|------------|--------------------|-----------------|-----------------|\n| 1          | [1,2,2,1]           | True            | Simple palindrome |\n| 2          | [1,2,3,2,1]         | True            | Odd length palindrome |\n| 3          | [1,2,3,4,5]         | False           | Not a palindrome  |\n| 4          | [1,2,1]             | True            | Odd length palindrome |\n| 5          | [5,5,5,5]           | True            | Even length palindrome |\n| 6          | [1,2,3,4]           | False           | Not a palindrome  |\n| 7          | [9,8,7,8,9]         | True            | Odd length palindrome |\n| 8          | [1,1,2,2,1]         | True            | Even length palindrome |\n| 9          | [3,4,5,4,3]         | True            | Odd length palindrome |\n| 10         | [10,20,30,20,10]    | True            | Even length palindrome |\n| 11         | [2,3,3,2]           | True            | Even length palindrome |\n| 12         | [0,1,2,1,0]         | True            | Odd length palindrome |\n| 13         | [1,2,3,3,2,1]       | True            | Even length palindrome |\n| 14         | [5,5,5,5,5,5]       | True            | Even length palindrome |\n| 15         | [1,2,2]             | True            | Small palindrome   |\n| 16         | [4,4,5,4,4]         | False           | Not a palindrome  |\n| 17         | [1,1,1]             | True            | Odd length palindrome |\n| 18         | [3,2,1,1,2,3]       | True            | Even length palindrome |\n| 19         | [7,8,8,7]           | True            | Even length palindrome |\n| 20         | [0,0,0,0,0]         | True            | Even length palindrome |\n| 21         | [3,4,5,6,7]         | False           | Not a palindrome  |\n| 22         | [4,5,6,5,4]         | True            | Odd length palindrome |\n| 23         | [1,3,2,3,1]         | True            | Odd length palindrome |\n| 24         | [9,7,5,7,9]         | True            | Odd length palindrome |\n| 25         | [2,4,5,4,2]         | True            | Odd length palindrome |\n| 26         | [11,22,33,22,11]    | True            | Even length palindrome |\n| 27         | [1,2,3,4,5,6]       | False           | Not a palindrome  |\n| 28         | [5,4,3,2,1]         | False           | Not a palindrome  |\n| 29         | [1,1,2,2,3,3,2,2,1] | True            | Odd length palindrome |\n| 30         | [1,2,3,4,5,6]       | False           | Not a palindrome  |\n| 31         | [0,0,0,0]           | True            | Even length palindrome |\n| 32         | [10,20,30,40,50]    | False           | Not a palindrome  |\n| 33         | [7,6,5,4,3,2,1]     | False           | Not a palindrome  |\n| 34         | [2,2,2]             | True            | Small palindrome   |\n| 35         | [1,2,1,2,1]         | False           | Not a palindrome  |\n| 36         | [9,9,8,8,7,7,6]     | False           | Not a palindrome  |\n| 37         | [4,4,3,2,1,1,2]     | False           | Not a palindrome  |\n| 38         | [0,0,1,1,0]         | True            | Even length palindrome |\n| 39         | [8,7,6,7,8]         | True            | Odd length palindrome |\n| 40         | [3,4,5,6,7,8]       | False           | Not a palindrome  |",
              "example": {
                "input": "[1,2,2,1]",
                "output": "True",
                "explanation": "The linked list is the same forwards and backwards, so it is a palindrome."
              },
              "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def isPalindrome(self, head):\n        # Fast and slow pointers to find the middle of the list\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Reverse the second half of the list\n        prev, curr = None, slow\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # Compare the first and second halves\n        left, right = head, prev\n        while right:  # No need to check left if right is exhausted\n            if left.val != right.val:\n                return False\n            left = left.next\n            right = right.next\n        return True\n\n# Function to create a linked list from an input list of integers\ndef create_linked_list(arr):\n    head = ListNode(arr[0])\n    current = head\n    for val in arr[1:]:\n        current.next = ListNode(val)\n        current = current.next\n    return head\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    head = create_linked_list(arr)\n    solution = Solution()\n    print(solution.isPalindrome(head))"
            },
            {
              "id": 22,
              "title": "Sum of Two Numbers Equal to Target (Unsorted Array)",
              "description": "Find two numbers that add up to a specific target in an unsorted array.\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [3,2,4], target=6    | [1,2]           | Basic test      |\n| 2          | [1,3,5,6], target=10 | [3,4]           | Larger test     |\n| 3          | [3,4,1,2], target=5  | [0,3]           | Random order    |\n| 4          | [5,5,5,5], target=10 | [0,1]           | Duplicate numbers |\n| 5          | [9,4,3,8], target=12 | [1,3]           | Random mix      |\n| 6          | [1,2,3,4,5], target=5| [0,4]           | Target at the end |\n| 7          | [10,20,30,40], target=50| [0,2]         | Large numbers   |\n| 8          | [1,2,3,4], target=7  | [2,3]           | Middle target   |\n| 9          | [2,7,8,1], target=9  | [0,3]           | Mix of numbers  |\n| 10         | [5,6,1,3,9], target=10| [0,4]          | Larger sequence |\n| 11         | [1,5,3,9,2], target=8| [0,3]           | Random mix      |\n| 12         | [1,3,7,9], target=10 | [0,2]           | Larger test     |\n| 13         | [1,2,3,4,5], target=6| [0,4]           | Simple case     |\n| 14         | [9,8,7,6], target=13 | [0,2]           | Random order    |\n| 15         | [2,3,6,7], target=9  | [1,2]           | Sequence of numbers |\n| 16         | [4,5,6,7,8], target=12| [0,4]          | Large input     |\n| 17         | [1,1,1,1], target=2  | [0,1]           | Duplicates      |\n| 18         | [10,15,25], target=40| [0,2]           | Larger input    |\n| 19         | [2,2,4,4], target=8  | [2,3]           | Duplicate pairs |\n| 20         | [7,9,10,20], target=27| [1,3]           | Large target    |\n| 21         | [3,5,8,12], target=15| [1,3]           | Random order    |\n| 22         | [5,7,9,4], target=11 | [0,2]           | Random input    |\n| 23         | [1,3,9,4], target=7  | [0,1]           | Target in the middle |\n| 24         | [2,5,7,1,9], target=8| [0,3]           | Larger test     |\n| 25         | [1,2,3,4,5], target=9| [3,4]           | Target at the end |\n| 26         | [6,8,10,12], target=18| [0,3]          | Sequence of numbers |\n| 27         | [7,8,4,3], target=11 | [0,1]           | Middle elements |\n| 28         | [5,9,4,1,3], target=7| [0,3]           | Simple test     |\n| 29         | [10,20,30], target=50| [1,2]           | Target greater than first element |\n| 30         | [1,3,9,6], target=12 | [2,3]           | Larger input    |\n| 31         | [2,4,6,8], target=12 | [1,3]           | Target at the end |\n| 32         | [5,10,15,5], target=15| [0,2]          | Simple mix      |\n| 33         | [3,5,8,4], target=9  | [1,2]           | Larger sequence |\n| 34         | [2,4,6,8], target=14 | [2,3]           | Target at the end |\n| 35         | [1,7,2,9], target=16 | [1,3]           | Simple sequence |\n| 36         | [3,5,9,6,2], target=7| [1,3]           | Random order    |\n| 37         | [1,2,4,3], target=7  | [1,2]           | Middle test     |\n| 38         | [2,3,4,1,9], target=5| [0,3]           | Larger test     |\n| 39         | [6,5,9,8,4], target=10| [1,3]          | Random test     |\n| 40         | [4,3,2,1], target=5  | [0,3]           | Larger test     |",
              "example": {
                "input": "[3,2,4], target=6",
                "output": "[1,2]",
                "explanation": "The two numbers that add up to the target are at indices 1 and 2, which are 2 and 4."
              },
              "answer": "class Solution:\n    def twoSum(self, nums, target):\n        hash_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in hash_map:\n                return [hash_map[complement], i]\n            hash_map[num] = i"
            },
            {
              "id": 23,
              "title": "Remove Nth Node from End of List",
              "description": "Remove the Nth node from the end in one pass.\n\n | Test Cases | Input               | Expected Output | Notes           |\n|------------|---------------------|-----------------|-----------------|\n| 1          | [1,2,3,4,5], n=2     | [1,2,3,5]       | Basic test      |\n| 2          | [1,2,3,4,5], n=5     | [2,3,4,5]       | Remove first node |\n| 3          | [1,2,3,4,5], n=1     | [1,2,3,4]       | Remove last node |\n| 4          | [1,2], n=1           | [1]             | Two nodes       |\n| 5          | [5,4,3,2,1], n=3     | [5,4,2,1]       | Remove middle node |\n| 6          | [1], n=1             | []              | Single node     |\n| 7          | [10,20,30,40], n=2   | [10,20,40]      | Remove 2nd from last |\n| 8          | [100,200,300], n=3   | [200,300]       | Remove first node |\n| 9          | [1,1,1,1], n=2       | [1,1,1]         | Remove middle node |\n| 10         | [7,8,9,10], n=3      | [7,9,10]        | Remove second from last |\n| 11         | [9,10], n=1          | [9]             | Remove last node |\n| 12         | [5,6,7], n=3         | [6,7]           | Remove first node |\n| 13         | [4,3,2,1], n=1       | [4,3,2]         | Remove last node |\n| 14         | [8,7,6], n=2         | [8,6]           | Remove second node |\n| 15         | [1,3,5,7], n=4       | [3,5,7]         | Remove first node |\n| 16         | [1,2,3,4], n=4       | [2,3,4]         | Remove first node |\n| 17         | [1,2,3,4,5,6], n=6   | [2,3,4,5,6]     | Remove first node |\n| 18         | [1,1,1,1,1], n=4     | [1,1,1,1]       | Remove last node |\n| 19         | [7,8,9,10], n=1      | [7,8,9]         | Remove last node |\n| 20         | [1,2,3], n=2         | [1,3]           | Remove middle node |\n| 21         | [1,3,5,7], n=2       | [1,3,7]         | Remove middle node |\n| 22         | [1,2,3,4,5,6], n=5   | [1,2,3,4,6]     | Remove second from last |\n| 23         | [10,20,30,40], n=4   | [20,30,40]      | Remove first node |\n| 24         | [10,10,10,10], n=3   | [10,10,10]      | Remove last node |\n| 25         | [1,2,3], n=1         | [1,2]           | Remove last node |\n| 26         | [9,8,7], n=2         | [9,7]           | Remove second node |\n| 27         | [1,2,3,4,5,6], n=3   | [1,2,4,5,6]     | Remove third node |\n| 28         | [3,2,1], n=2         | [3,1]           | Remove second node |\n| 29         | [1,2,3,4,5], n=4     | [1,2,3,5]       | Remove second from last |\n| 30         | [7,8,9], n=1         | [7,8]           | Remove last node |\n| 31         | [1,2,3], n=3         | [2,3]           | Remove first node |\n| 32         | [1,2,3,4,5,6], n=2   | [1,3,4,5,6]     | Remove second node |\n| 33         | [8,7,6,5,4], n=3     | [8,7,5,4]       | Remove third node |\n| 34         | [10,20,30], n=2      | [10,30]         | Remove second node |\n| 35         | [10,20,30], n=3      | [20,30]         | Remove first node |\n| 36         | [1,2,3,4,5,6], n=4   | [1,2,3,5,6]     | Remove fourth node |\n| 37         | [2,4,6,8], n=2       | [2,6,8]         | Remove second node |\n| 38         | [3,5,7], n=3         | [5,7]           | Remove first node |\n| 39         | [2,3,4], n=1         | [2,3]           | Remove last node |\n| 40         | [7,8,9,10], n=4      | [8,9,10]        | Remove first node |\n",
              "example": {
                "input": "[1,2,3,4,5], n=2",
                "output": "[1,2,3,5]",
                "explanation": "The 2nd node from the end is 4, and removing it leaves the list [1,2,3,5]."
              },
              "answer": "def removeNthFromEnd(head, n):\n    dummy = ListNode(0)\n    dummy.next = head\n    fast = slow = dummy\n    for _ in range(n+1):\n        fast = fast.next\n    while fast:\n        slow = slow.next\n        fast = fast.next\n    slow.next = slow.next.next\n    return dummy.next"
            },
            {
              "id": 24,
              "title": "Partition Labels",
              "description": "Partition string so that each letter appears in at most one part.\n\n | Test Cases | Input                          | Expected Output | Notes           |\n|------------|--------------------------------|-----------------|-----------------|\n| 1          | 'ababcbacadefegdehijhklij'    | [9,7,8]         | Basic test      |\n| 2          | 'abcdeabcde'                  | [5,5]           | Two equal partitions |\n| 3          | 'aabbccddeeffgg'              | [2,2,2,2,2,2]   | Alternating pairs |\n| 4          | 'abca'                         | [4]             | Single part     |\n| 5          | 'abcabc'                       | [3,3]           | Multiple repeats |\n| 6          | 'abcdef'                       | [6]             | No repeating letters |\n| 7          | 'zzyyxx'                       | [2,2,2]         | Same letters    |\n| 8          | 'aaabbbccc'                    | [3,3,3]         | Balanced letters |\n| 9          | 'xyzxyzxyz'                    | [3,3,3]         | Repeated sequence |\n| 10         | 'zxyabc'                        | [2,1,3]         | Mixed sequence  |\n| 11         | 'pqrpqr'                        | [3,3]           | Repeating pairs |\n| 12         | 'abababcabc'                   | [4,4]           | Balanced pairs  |\n| 13         | 'abcdefghijkl'                 | [12]            | Continuous alphabet |\n| 14         | 'zzzz'                          | [4]             | All same letters |\n| 15         | 'abcdefabcdef'                 | [6,6]           | Equal parts     |\n| 16         | 'aaaabbbccccc'                 | [4,5]           | Unbalanced split |\n| 17         | 'abab'                          | [4]             | Even distribution |\n| 18         | 'abcd'                          | [4]             | Non-repeating characters |\n| 19         | 'ffgfffg'                       | [2,3,2]         | Letters repeating in parts |\n| 20         | 'aabbbcddccc'                  | [3,4,3]         | Mixed repetition |\n| 21         | 'aaabbcc'                       | [3,3]           | Balanced letters |\n| 22         | 'abcdefabcdefabc'              | [6,6,3]         | Partitions with same letter frequency |\n| 23         | 'xyzabcd'                       | [4,3]           | Mix of letters and repetition |\n| 24         | 'abcdefg'                       | [7]             | No repeating letters |\n| 25         | 'opqrst'                        | [6]             | No repetition   |\n| 26         | 'ababab'                        | [3,3]           | Repeating pairs |\n| 27         | 'aabbccdd'                      | [2,2,2,2]       | Equal distribution |\n| 28         | 'abcdabcd'                      | [4,4]           | Repeating sequence |\n| 29         | 'abccba'                        | [6]             | Symmetric repeat |\n| 30         | 'aaabbbcccddd'                 | [3,3,4]         | Multiple blocks |\n| 31         | 'sssstttt'                      | [4,3]           | Balanced partitions |\n| 32         | 'zzzzzz'                        | [6]             | All same letters |\n| 33         | 'abcdeabc'                      | [5,3]           | Overlapping sets |\n| 34         | 'aaaabbbbcccc'                 | [4,4,4]         | Equal split     |\n| 35         | 'abcdefg'                       | [7]             | Single partition |\n| 36         | 'abcdedcba'                     | [10]            | Palindromic split |\n| 37         | 'abababab'                      | [4,4]           | Balanced letters |\n| 38         | 'bcdefg'                        | [6]             | No repetition   |\n| 39         | 'tttttttt'                      | [8]             | All same letters |\n| 40         | 'aaabbbccc'                     | [3,3,3]         | Equal repetitions |\n",
              "example": {
                "input": "'ababcbacadefegdehijhklij'",
                "output": "[9,7,8]",
                "explanation": "Partition the string into substrings where each letter appears only once in each substring, resulting in the partitions [9,7,8]."
              },
              "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef removeNthFromEnd(head, n):\n    dummy = ListNode(0)\n    dummy.next = head\n    fast = slow = dummy\n    for _ in range(n + 1):\n        if fast:\n            fast = fast.next\n        else:\n            return head\n    while fast:\n        fast = fast.next\n        slow = slow.next\n    slow.next = slow.next.next\n    return dummy.next\n\n# Read input\narr = list(map(int, input().split()))\nn = arr[0]\nvalues = arr[1:]\n\n# Build linked list\nhead = None\ncurr = None\nfor val in values:\n    node = ListNode(val)\n    if not head:\n        head = node\n        curr = node\n    else:\n        curr.next = node\n        curr = node\n\n# Remove node\nhead = removeNthFromEnd(head, n)\n\n# Print result\nif not head:\n    print(\"null\")\nelse:\n    result = []\n    while head:\n        result.append(str(head.val))\n        head = head.next\n    print(\" \".join(result))"
            },
            {
              "id": 25,
              "title": "Trapping Rain Water",
              "description": "Calculate how much rainwater can be trapped.\n\n | Test Cases | Input                      | Expected Output | Notes           |\n|------------|----------------------------|-----------------|-----------------|\n| 1          | [0,1,0,2,1,0,1,3,2,1,2,1]  | 6               | Basic test      |\n| 2          | [4,2,0,3,2,5]               | 9               | Simple valley   |\n| 3          | [1,0,2,1,0,1,0]             | 4               | Single valley   |\n| 4          | [3,0,2,0,4]                 | 7               | Mixed heights   |\n| 5          | [0,1,0,2,1,0,1]             | 4               | Lower bars      |\n| 6          | [1,1,1,1,1]                 | 0               | No trapping     |\n| 7          | [0,0,0,0]                   | 0               | All zeros       |\n| 8          | [2,1,0,2]                   | 3               | Two bars        |\n| 9          | [1,2,1,2,1]                 | 2               | Multiple peaks  |\n| 10         | [1,2,3,4,5]                 | 0               | No trapped water|\n| 11         | [1,0,1,0,1,0]               | 6               | Alternating peaks|\n| 12         | [5,4,1,2,3,4,5]             | 10              | Larger valley   |\n| 13         | [1,3,2,4,1]                 | 2               | V-shaped valley |\n| 14         | [1,0,3,2,1,0,1]             | 6               | Random heights  |\n| 15         | [3,0,1,3,2,5]               | 8               | Complex case    |\n| 16         | [0,2,0,3,0,4]               | 7               | Narrow valleys  |\n| 17         | [1,2,1,2,1,2]               | 0               | No rain trapping|\n| 18         | [2,1,2,1,2]                 | 2               | Simple valley   |\n| 19         | [0,1,0,2,3,4]               | 3               | Right-sided valley|\n| 20         | [0,1,2,1,0]                 | 2               | Left-sided valley|\n| 21         | [2,0,2,0,2,0]               | 6               | Multiple dips   |\n| 22         | [1,2,3,2,1]                 | 1               | Symmetric valley|\n| 23         | [0,1,1,0,1]                 | 2               | Peak at center  |\n| 24         | [3,3,3,3]                   | 0               | No variance     |\n| 25         | [0,1,0,1,0]                 | 2               | Small dips      |\n| 26         | [1,0,2,1,0,1,0]             | 4               | Multiple valleys|\n| 27         | [1,0,3,1,0,1,0,3]           | 8               | Larger case     |\n| 28         | [1,2,3,0,1,2]               | 3               | Multiple heights|\n| 29         | [3,1,3,0,2,1]               | 4               | Peak in the middle|\n| 30         | [2,3,1,2,3]                 | 3               | Multiple peaks  |\n| 31         | [1,0,2,1,2]                 | 3               | Lower valley    |\n| 32         | [4,2,0,3,2,5]               | 9               | General valley  |\n| 33         | [1,1,0,2,1,1,1]             | 3               | Multiple waters |\n| 34         | [1,2,3,4,3,2]               | 1               | Simple valley   |\n| 35         | [0,1,0,2,1,2,1]             | 4               | Random mix      |\n| 36         | [2,0,1,0,2,1,0,1,2]         | 7               | Zig-zag valleys |\n| 37         | [1,1,2,3,2,1,1]             | 3               | Water in between|\n| 38         | [5,1,2,3,2,1,5]             | 12              | Larger case     |\n| 39         | [0,0,0,0,1]                 | 0               | No water trapping|\n| 40         | [1,0,2,1,0,3]               | 4               | Peaks at both ends|\n",
              "example": {
                "input": "[0,1,0,2,1,0,1,3,2,1,2,1]",
                "output": "6",
                "explanation": "The water is trapped between the bars, and the total amount is 6."
              },
              "answer": "def trap(height):\n    l, r = 0, len(height)-1\n    leftMax, rightMax = 0, 0\n    res = 0\n    while l < r:\n        if height[l] < height[r]:\n            if height[l] >= leftMax:\n                leftMax = height[l]\n            else:\n                res += leftMax - height[l]\n            l += 1\n        else:\n            if height[r] >= rightMax:\n                rightMax = height[r]\n            else:\n                res += rightMax - height[r]\n            r -= 1\n    return res"
            },
            {
              "id": 26,
              "title": "Remove Element",
              "description": "Remove all instances of a value in-place and return new length.\n\n | Test Cases | Input              | Expected Output | Notes           |\n|------------|--------------------|-----------------|-----------------|\n| 1          | [3,2,2,3], val=3    | 2               | Basic case      |\n| 2          | [1,2,3,4,5], val=3  | 4               | Remove middle   |\n| 3          | [1,1,2,2,3], val=1  | 3               | Removing duplicates |\n| 4          | [5,5,5,5,5], val=5  | 0               | All same        |\n| 5          | [2,4,6,8], val=4    | 3               | Remove one element |\n| 6          | [1,1,1,2,2,3], val=1| 3               | Removing beginning |\n| 7          | [2,3,4,5], val=0    | 4               | No elements removed|\n| 8          | [5,6,7,8], val=7    | 3               | Remove middle   |\n| 9          | [1,1,1,2], val=1    | 1               | Remove all but one|\n| 10         | [3,3,3,3], val=3    | 0               | Remove all      |\n| 11         | [1,2,3,4,5], val=6  | 5               | No removal      |\n| 12         | [1,2,3,2,1], val=2  | 3               | Middle removal  |\n| 13         | [9,8,7,6], val=7    | 3               | Removing middle |\n| 14         | [5,6,7,5], val=5    | 2               | Remove start    |\n| 15         | [1,1,1,2,3], val=1  | 2               | Removing duplicates |\n| 16         | [4,4,4,4], val=4    | 0               | All same        |\n| 17         | [10,20,30,40], val=20| 3               | Remove middle   |\n| 18         | [2,4,6,8,10], val=6 | 4               | Remove middle   |\n| 19         | [7,8,9,10], val=9   | 3               | Remove middle   |\n| 20         | [3,1,4,1], val=1    | 2               | Remove duplicate|\n| 21         | [1,2,3], val=3      | 2               | Remove last     |\n| 22         | [1,1,1], val=1      | 0               | Remove all      |\n| 23         | [5,6,7,5,8], val=5  | 3               | Remove start and middle|\n| 24         | [5,7,9,6], val=7    | 3               | Remove middle   |\n| 25         | [9,7,5,3], val=7    | 3               | Remove middle   |\n| 26         | [2,4,8,10], val=4   | 3               | Remove one      |\n| 27         | [3,3,3,3,3], val=3  | 0               | All elements removed|\n| 28         | [10,5,10,5], val=5  | 2               | Remove duplicates|\n| 29         | [4,8,9,12], val=12  | 3               | Remove end      |\n| 30         | [6,5,4,3], val=3    | 3               | Remove last     |\n| 31         | [3,2,2,3,3], val=3  | 2               | Remove end      |\n| 32         | [0,1,2,0], val=0    | 2               | Remove zeros    |\n| 33         | [1,1,2,3], val=3    | 3               | Remove last     |\n| 34         | [7,8,6,4], val=6    | 3               | Remove middle   |\n| 35         | [5,6,7,6], val=6    | 2               | Remove duplicate|\n| 36         | [1,1,2,3,1], val=1  | 2               | Remove starting duplicates|\n| 37         | [1,2,3,1], val=1    | 2               | Remove starting duplicates|\n| 38         | [4,4,4,4], val=4    | 0               | Remove all      |\n| 39         | [10,5,1,3], val=5   | 3               | Remove middle   |\n| 40         | [2,1,3,4], val=3    | 3               | Remove middle   |\n",
              "example": {
                "input": "[3,2,2,3], val=3",
                "output": "2",
                "explanation": "After removal of 3, the list becomes [2,2]."
              },
              "answer": "def removeElement(nums, val):\n    i = 0\n    for num in nums:\n        if num != val:\n            nums[i] = num\n            i += 1\n    return i\n\n# Input handling\narr = list(map(int, input().split()))\nval = arr[0]\nnums = arr[1:]\n\n# Output the result\nprint(removeElement(nums, val))"
            },
            {
              "id": 27,
              "title": "Valid Palindrome II",
              "description": "Check if a string can become a palindrome after deleting at most one character.\n\n | Test Cases | Input  | Expected Output | Notes           |\n|------------|--------|-----------------|-----------------|\n| 1          | \"abca\" | True            | Can become palindrome after deleting 'b' |\n| 2          | \"racecar\" | True          | Already a palindrome |\n| 3          | \"abc\"   | False           | Cannot become palindrome with one deletion |\n| 4          | \"deed\"  | True            | Already a palindrome |\n| 5          | \"abbca\" | True            | Can become palindrome after deleting 'b' |\n| 6          | \"abcdca\"| False           | Cannot become palindrome with one deletion |\n| 7          | \"abcda\" | True            | Can become palindrome after deleting 'b' |\n| 8          | \"abccba\"| True            | Already a palindrome |\n| 9          | \"civic\" | True            | Already a palindrome |\n| 10         | \"deeee\" | True            | Can become palindrome after deleting 'd' |\n| 11         | \"abddca\"| True            | Can become palindrome after deleting 'b' |\n| 12         | \"mimic\" | True            | Already a palindrome |\n| 13         | \"abcdcba\"| True           | Already a palindrome |\n| 14         | \"random\"| False           | Cannot become palindrome with one deletion |\n| 15         | \"madam\" | True            | Already a palindrome |\n| 16         | \"cacba\" | True            | Can become palindrome after deleting 'c' |\n| 17         | \"apple\" | False           | Cannot become palindrome with one deletion |\n| 18         | \"hannah\"| True            | Already a palindrome |\n| 19         | \"abcde\" | False           | Cannot become palindrome with one deletion |\n| 20         | \"tattarrattat\"| True      | Already a palindrome |\n| 21         | \"chirp\" | False           | Cannot become palindrome with one deletion |\n| 22         | \"alabala\"| True           | Can become palindrome after deleting 'l' |\n| 23         | \"radar\" | True            | Already a palindrome |\n| 24         | \"likeil\" | False          | Cannot become palindrome with one deletion |\n| 25         | \"ogogo\" | True            | Already a palindrome |\n| 26         | \"lol\"   | True            | Already a palindrome |\n| 27         | \"notpalindrome\" | False | Cannot become palindrome with one deletion |\n| 28         | \"reviver\"| True           | Already a palindrome |\n| 29         | \"abccba\"| True            | Already a palindrome |\n| 30         | \"asdfgh\"| False           | Cannot become palindrome with one deletion |\n| 31         | \"xyzyx\" | True            | Already a palindrome |\n| 32         | \"pursuit\"| False          | Cannot become palindrome with one deletion |\n| 33         | \"racecar\"| True           | Already a palindrome |\n| 34         | \"pop\"   | True            | Already a palindrome |\n| 35         | \"abcdefg\"| False          | Cannot become palindrome with one deletion |\n| 36         | \"test\"  | False           | Cannot become palindrome with one deletion |\n| 37         | \"aabaa\" | True            | Already a palindrome |\n| 38         | \"ayaya\" | True            | Already a palindrome |\n| 39         | \"abbbc\" | True            | Can become palindrome after deleting 'b' |\n| 40         | \"axxxa\" | True            | Can become palindrome after deleting 'x' |",
              "example": {
                "input": "\"abca\"",
                "output": "True",
                "explanation": "The string can become a palindrome after deleting 'b'."
              },
              "answer": "def validPalindrome(s):\n    def is_pali(i, j):\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return is_pali(i + 1, j) or is_pali(i, j - 1)\n        i += 1\n        j -= 1\n    return True\n\ns = input().strip()\nprint(validPalindrome(s))"
            },
            {
              "id": 28,
              "title": "Find the Duplicate Number",
              "description": "Find the duplicate number without modifying the array.\n\n | Test Cases | Input              | Expected Output | Notes           |\n|------------|--------------------|-----------------|-----------------|\n| 1          | [1,3,4,2,2]        | 2               | Basic case      |\n| 2          | [3,1,3,4,2]        | 3               | Duplicate first |\n| 3          | [1,2,3,4,5,6,7,8,9,10,1] | 1        | Duplicate at start |\n| 4          | [2,2,3,4,5]        | 2               | Duplicate at start |\n| 5          | [6,3,5,2,1,3]      | 3               | Middle duplicate|\n| 6          | [4,4,5,6,7,8]      | 4               | Duplicate at start |\n| 7          | [9,9,3,4,5]        | 9               | Duplicate at start |\n| 8          | [5,6,7,8,9,5]      | 5               | Duplicate first |\n| 9          | [3,2,1,3,4]        | 3               | Duplicate in middle|\n| 10         | [1,3,2,1,5]        | 1               | Duplicate at start |\n| 11         | [1,4,2,3,1]        | 1               | Duplicate at start |\n| 12         | [6,5,3,4,6]        | 6               | Duplicate at end |\n| 13         | [7,7,8,9,10]       | 7               | Duplicate at start |\n| 14         | [4,2,5,5,6]        | 5               | Duplicate in middle|\n| 15         | [3,1,3,2,5,4]      | 3               | Duplicate first |\n| 16         | [2,3,2,6,7]        | 2               | Duplicate in the middle |\n| 17         | [8,9,10,11,8]      | 8               | Duplicate at start |\n| 18         | [6,8,9,6]          | 6               | Duplicate at start |\n| 19         | [1,1,2,3,4,5]      | 1               | Duplicate at start |\n| 20         | [1,5,4,3,1]        | 1               | Duplicate at start |\n| 21         | [7,8,9,10,7]       | 7               | Duplicate at start |\n| 22         | [2,2,1,4]          | 2               | Duplicate at start |\n| 23         | [9,8,7,6,5,9]      | 9               | Duplicate at end |\n| 24         | [3,3,3,2]          | 3               | Duplicate in the middle |\n| 25         | [4,5,6,4]          | 4               | Duplicate at start |\n| 26         | [1,2,3,3]          | 3               | Duplicate at the end |\n| 27         | [1,1,1,1]          | 1               | All elements are duplicates |\n| 28         | [10,9,8,7,6,10]    | 10              | Duplicate at start |\n| 29         | [2,3,3,3,2]        | 3               | Duplicate in the middle |\n| 30         | [8,5,6,7,5]        | 5               | Duplicate in middle |\n| 31         | [4,6,7,4]          | 4               | Duplicate at start |\n| 32         | [10,10,10,10]      | 10              | All elements are duplicates |\n| 33         | [9,8,7,9]          | 9               | Duplicate at start |\n| 34         | [3,2,1,2,3]        | 2               | Duplicate at middle |\n| 35         | [5,4,3,2,1,5]      | 5               | Duplicate at start |\n| 36         | [6,7,8,9,6]        | 6               | Duplicate at start |\n| 37         | [1,3,4,3]          | 3               | Duplicate in middle |\n| 38         | [2,3,4,5,3]        | 3               | Duplicate at middle |\n| 39         | [8,7,6,8]          | 8               | Duplicate at start |\n| 40         | [1,2,3,4,1]        | 1               | Duplicate at start |\n",
              "example": {
                "input": "[1,3,4,2,2]",
                "output": "2",
                "explanation": "The duplicate number in the array is 2."
              },
              "answer": "def findDuplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n\nnums = list(map(int, input().split()))\nprint(findDuplicate(nums))"
            },
            {
              "id": 29,
              "title": "Minimum Operations to Make Array Equal",
              "description": "Minimize number of operations to make elements equal.\n\n | Test Cases | Input | Expected Output | Notes |\n|------------|-------|-----------------|-------|\n| 1          | 3     | 2               | Basic test |\n| 2          | 6     | 9               | Larger n |\n| 3          | 8     | 16              | Even number |\n| 4          | 5     | 6               | Odd number |\n| 5          | 10    | 25              | Larger test |\n| 6          | 1     | 0               | Single element |\n| 7          | 12    | 36              | Larger n |\n| 8          | 7     | 12              | Test with odd n |\n| 9          | 14    | 49              | Even larger n |\n| 10         | 15    | 56              | Larger n |\n| 11         | 20    | 100             | Bigger n |\n| 12         | 25    | 156             | Large n |\n| 13         | 30    | 225             | High n |\n| 14         | 100   | 2500            | High value |\n| 15         | 50    | 1225            | Mid size |\n| 16         | 35    | 612             | Random n |\n| 17         | 13    | 42              | Small n |\n| 18         | 19    | 171             | Odd input |\n| 19         | 3     | 2               | Simple test |\n| 20         | 6     | 9               | Test with even n |\n| 21         | 10    | 25              | Larger n |\n| 22         | 7     | 12              | Smaller value |\n| 23         | 15    | 56              | Larger value |\n| 24         | 2     | 0               | Basic test with small n |\n| 25         | 9     | 20              | Middle value |\n| 26         | 17    | 144             | Random test |\n| 27         | 8     | 16              | Even n |\n| 28         | 11    | 30              | Higher input |\n| 29         | 13    | 42              | Odd number |\n| 30         | 100   | 2500            | Large value |\n| 31         | 8     | 16              | Random small value |\n| 32         | 14    | 49              | Even test |\n| 33         | 18    | 162             | Mid range n |\n| 34         | 22    | 242             | Larger n |\n| 35         | 1     | 0               | Minimum test |\n| 36         | 27    | 364             | Larger n |\n| 37         | 40    | 800             | Big n |\n| 38         | 17    | 144             | Random large n |\n| 39         | 100   | 2500            | High value |\n| 40         | 50    | 1225            | Mid size n |\n",
              "example": {
                "input": "3",
                "output": "2",
                "explanation": "The minimum number of operations to make all elements equal is 2."
              },
              "answer": "def minOperations(n):\n    return (n * n) // 4\n\nn = int(input())\nprint(minOperations(n))"
            },
            {
              "id": 30,
              "title": "Shortest Unsorted Continuous Subarray",
              "description": "Find the shortest subarray to sort so entire array is sorted.\n\n | Test Cases | Input                        | Expected Output | Notes               |\n|------------|-----------------------------|-----------------|---------------------|\n| 1          | [2,6,4,8,10,9,15]            | 5               | Basic test          |\n| 2          | [1,3,2,2,2]                  | 4               | Simple unsorted subarray |\n| 3          | [1,2,3,4]                    | 0               | Already sorted      |\n| 4          | [1,3,5,4,2]                  | 4               | Middle unsorted segment |\n| 5          | [1,5,3,4,2]                  | 4               | Larger unsorted section |\n| 6          | [1,2,3,4,5,6,7]              | 0               | Already sorted      |\n| 7          | [2,1]                        | 2               | Small unsorted pair |\n| 8          | [2,6,4,8,10,9,15,1]          | 7               | Multiple unsorted sections |\n| 9          | [10,9,8,7,6,5,4,3,2,1]       | 10              | Reverse order       |\n| 10         | [1,2,3,4,5,6,7,8,9,10]       | 0               | Already sorted      |\n| 11         | [1,7,5,3,4,6]                | 4               | Complex unsorted |\n| 12         | [5,4,3,2,1]                  | 5               | Entire array unsorted |\n| 13         | [1,2,5,4,3,6]                | 4               | Middle unsorted block |\n| 14         | [2,1,3,4,5]                  | 2               | Middle unsorted section |\n| 15         | [1,3,5,7,9,2,4,6,8]          | 5               | Multiple out-of-order sections |\n| 16         | [1,2,6,5,4,3,7]              | 4               | Unsorted end block |\n| 17         | [2,4,6,8,10,15,9]            | 4               | Middle unsorted segment |\n| 18         | [2,6,4,8,10,9]               | 5               | Simple case         |\n| 19         | [1,2,3,4,5,6,7,8,9,10]       | 0               | Already sorted      |\n| 20         | [10,8,6,4,2]                 | 5               | Reverse unsorted    |\n| 21         | [1,2,5,3,4]                  | 3               | Middle unsorted part |\n| 22         | [1,5,6,3,2]                  | 4               | Subarray sorting case |\n| 23         | [3,1,2,4,5]                  | 3               | Partial unsorted array |\n| 24         | [1,2,3,4,5,9,8,7,6]          | 4               | Complex unsorted range |\n| 25         | [5,4,3,2,1,6]                | 5               | Entire subarray unsorted |\n| 26         | [1,2,3,5,4,6,7]              | 3               | Middle unsorted    |\n| 27         | [1,2,3,5,4,2,3]              | 5               | Multiple unsorted ranges |\n| 28         | [1,2,3,4,6,5,7,8]            | 2               | Slight rearrangement |\n| 29         | [6,5,4,3,2,1]                | 6               | Reverse ordered section |\n| 30         | [10,20,15,5,10,10]            | 4               | Section to sort |\n| 31         | [1,3,4,6,5,2]                | 4               | Unsorted block |\n| 32         | [1,3,2,4,5,6]                | 3               | Unsorted middle part |\n| 33         | [2,3,4,7,9,5]                | 4               | Unsorted middle range |\n| 34         | [1,2,3,5,6,7,8]              | 3               | Middle unsorted case |\n| 35         | [1,2,3,4,7,6,5,8,9]          | 4               | Unsynced end block |\n| 36         | [1,4,5,3,2,6]                | 4               | Middle unsorted portion |\n| 37         | [7,8,9,1,2,3]                | 4               | Mix of sorted and unsorted blocks |\n| 38         | [4,5,3,2]                    | 3               | Middle unsorted subarray |\n| 39         | [2,3,4,1,5,6]                | 3               | Reversed middle subarray |\n| 40         | [10,20,30,25,50]             | 4               | Middle unsorted subrange |\n",
              "example": {
                "input": "[2,6,4,8,10,9,15]",
                "output": "5",
                "explanation": "The shortest subarray that needs to be sorted is from index 1 to index 5."
              },
              "answer": "def findUnsortedSubarray(nums):\n    n = len(nums)\n    left, right = 0, n - 1\n\n    while left < n - 1 and nums[left] <= nums[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n\n    while right > 0 and nums[right] >= nums[right - 1]:\n        right -= 1\n\n    min_val = min(nums[left:right+1])\n    max_val = max(nums[left:right+1])\n\n    while left > 0 and nums[left - 1] > min_val:\n        left -= 1\n    while right < n - 1 and nums[right + 1] < max_val:\n        right += 1\n\n    return right - left + 1\n\nnums = list(map(int, input().split()))\nprint(findUnsortedSubarray(nums))"
            }
    
        ]
 }
