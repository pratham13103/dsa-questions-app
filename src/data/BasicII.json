{
  "questions":[
    {
  "id": 1,
  "title": "Check if a Number is a Perfect Square",
  "description": "Given an integer N, check whether it is a perfect square or not.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | True | 1^2 = 1 |\n| 2 | 4 | True | 2^2 = 4 |\n| 3 | 9 | True | 3^2 = 9 |\n| 4 | 10 | False | Not a perfect square |\n| 5 | 16 | True | 4^2 = 16 |\n| 6 | 25 | True | 5^2 = 25 |\n| 7 | 26 | False | Not a perfect square |\n| 8 | 36 | True | 6^2 = 36 |\n| 9 | 50 | False | Not a perfect square |\n| 10 | 64 | True | 8^2 = 64 |\n| 11 | 81 | True | 9^2 = 81 |\n| 12 | 100 | True | 10^2 = 100 |\n| 13 | 121 | True | 11^2 = 121 |\n| 14 | 144 | True | 12^2 = 144 |\n| 15 | 200 | False | Not a perfect square |\n| 16 | 1000000 | True | 1000^2 |\n| 17 | 999999 | False | Just under 1M |\n| 18 | 0 | True | 0^2 = 0 |\n| 19 | -1 | False | Negative numbers not perfect squares |\n| 20 | -25 | False | Negative input |\n",
  "example": {
    "input": "isPerfectSquare(25)",
    "output": "true",
    "explanation": "25 is a perfect square because 5 * 5 = 25."
  },
  "answer": "import math\n\nn = int(input())\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\nprint(is_perfect_square(n))"
},
{
  "id": 2,
  "title": "Calculate the Sum of Natural Numbers up to N",
  "description": "Given an integer N, compute the sum of the first N natural numbers (1 through N).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | 1 | 1 |\n| 2 | 2 | 3 | 1 + 2 |\n| 3 | 3 | 6 | 1 + 2 + 3 |\n| 4 | 5 | 15 | 1+2+3+4+5 |\n| 5 | 10 | 55 | Standard sum |\n| 6 | 15 | 120 | Sum to 15 |\n| 7 | 20 | 210 | Sum to 20 |\n| 8 | 30 | 465 | Sum to 30 |\n| 9 | 50 | 1275 | Sum to 50 |\n| 10 | 100 | 5050 | Classic Gauss result |\n| 11 | 0 | 0 | Edge case |\n| 12 | -5 | 0 | Negative input, assume 0 |\n| 13 | 1000 | 500500 | Large input |\n| 14 | 999 | 499500 | Just below 1K |\n| 15 | 1234 | 761995 | Random input |\n| 16 | 50000 | 1250025000 | Very large |\n| 17 | 100000 | 5000050000 | 1e5 limit |\n| 18 | 99999 | 4999950000 | Close to limit |\n| 19 | 7 | 28 | 1+2+3+4+5+6+7 |\n| 20 | 6 | 21 | 1+2+3+4+5+6 |\n",
  "example": {
    "input": "sum_natural(10)",
    "output": "55",
    "explanation": "Sum of 1 through 10 = 10 * (10 + 1) / 2 = 55."
  },
  "answer":"n = int(input())\n\ndef sum_natural(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n\nprint(sum_natural(n))"
},
{
  "id": 3,
  "title": "Find the First N Prime Numbers",
  "description": "Given an integer N, print the first N prime numbers.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 0 | [] | No primes |\n| 2 | 1 | [2] | First prime |\n| 3 | 2 | [2, 3] | First 2 primes |\n| 4 | 3 | [2, 3, 5] | First 3 primes |\n| 5 | 4 | [2, 3, 5, 7] | |\n| 6 | 5 | [2, 3, 5, 7, 11] | |\n| 7 | 6 | [2, 3, 5, 7, 11, 13] | |\n| 8 | 7 | [2, 3, 5, 7, 11, 13, 17] | |\n| 9 | 10 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] | First 10 |\n| 10 | 15 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] | |\n| 11 | 20 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71] | |\n| 12 | 25 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] | |\n| 13 | 30 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113] | |\n| 14 | -1 | [] | Negative input |\n| 15 | 8 | [2, 3, 5, 7, 11, 13, 17, 19] | |\n| 16 | 12 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37] | |\n| 17 | 18 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61] | |\n| 18 | 5 | [2, 3, 5, 7, 11] | Repeated |\n| 19 | 9 | [2, 3, 5, 7, 11, 13, 17, 19, 23] | |\n| 20 | 14 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43] | |\n",
  "example": {
    "input": "first_n_primes(5)",
    "output": [2, 3, 5, 7, 11],
    "explanation": "The first 5 prime numbers are [2, 3, 5, 7, 11]."
  },
  "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = int(input())\nresult = first_n_primes(n)\nprint(*result)"
},
{
  "id": 4,
  "title": "Check if a Number is a Perfect Number",
  "description": "A perfect number is a positive integer that is equal to the sum of its proper positive divisors, excluding itself.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 6 | True | 1 + 2 + 3 = 6 |\n| 2 | 28 | True | 1 + 2 + 4 + 7 + 14 = 28 |\n| 3 | 496 | True | Known perfect number |\n| 4 | 12 | False | 1 + 2 + 3 + 4 + 6 = 16 |\n| 5 | 1 | False | No proper divisors |\n| 6 | 0 | False | Not a positive integer |\n| 7 | 8128 | True | Known perfect number |\n| 8 | 10 | False | 1 + 2 + 5 = 8 |\n| 9 | 2 | False | Only 1 as divisor |\n| 10 | 33550336 | True | Known perfect number |\n",
  "example": {
    "input": "[6]",
    "output": "True",
    "explanation": "The sum of proper divisors of 6 is 1 + 2 + 3 = 6."
  },
  "answer": "def is_perfect_number(num):\n    if num <= 1:\n        return False\n    total = 1  # 1 is always a divisor (except for 1 itself, but handled by condition)\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            total += i\n            if i != num // i:\n                total += num // i\n        i += 1\n    return total == num\n\nn = int(input())\nprint(is_perfect_number(n))"
},
{
  "id": 5,
  "title": "Find the Sum of All Even Numbers in a Range",
  "description": "Given two integers `start` and `end`, find the sum of all even numbers in the range `[start, end]` (inclusive).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | [1, 10] | 30 | Even numbers: 2, 4, 6, 8, 10 |\n| 2 | [2, 5] | 6 | 2 + 4 |\n| 3 | [3, 3] | 0 | 3 is odd |\n| 4 | [4, 4] | 4 | Single even number |\n| 5 | [10, 1] | 30 | Order doesn't matter |\n| 6 | [0, 0] | 0 | 0 is not counted |\n| 7 | [0, 2] | 2 | 2 is the only even |\n| 8 | [5, 11] | 24 | 6 + 8 + 10 |\n| 9 | [-4, 4] | 0 | Even: -4, -2, 0, 2, 4 → sum = 0 |\n| 10 | [100, 200] | 7650 | Sum of all even numbers in range |\n",
  "example": {
    "input": "[1, 10]",
    "output": "30",
    "explanation": "The even numbers between 1 and 10 are 2, 4, 6, 8, 10 → sum = 30."
  },
  "answer": "def sum_even_in_range(start, end):\n    if start > end:\n        start, end = end, start\n    \n    # Find first even number >= start\n    if start % 2 != 0:\n        start += 1\n    \n    # Find last even number <= end\n    if end % 2 != 0:\n        end -= 1\n    \n    if start > end:\n        return 0\n    \n    count = ((end - start) // 2) + 1\n    # Sum of arithmetic series: count * (first + last) // 2\n    return count * (start + end) // 2\n\na, b = map(int, input().split())\nprint(sum_even_in_range(a, b))"
},
{
  "id": 6,
  "title": "Find the Product of Digits of a Number",
  "description": "Given a number `n`, find the product of all its digits.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 123 | 6 | 1 × 2 × 3 = 6 |\n| 2 | 456 | 120 | 4 × 5 × 6 |\n| 3 | 101 | 0 | Contains 0 so product is 0 |\n| 4 | 999 | 729 | 9 × 9 × 9 |\n| 5 | 0 | 0 | Only one digit 0 |\n| 6 | 8 | 8 | Single digit |\n| 7 | 1002 | 0 | 1 × 0 × 0 × 2 = 0 |\n| 8 | 1111 | 1 | All digits 1 |\n| 9 | 27 | 14 | 2 × 7 = 14 |\n| 10 | 314 | 12 | 3 × 1 × 4 |\n",
  "example": {
    "input": "[123]",
    "output": "6",
    "explanation": "The digits are 1, 2, 3 → 1 × 2 × 3 = 6."
  },
  "answer": "def product_of_digits(n):\n    if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        product *= digit\n        n //= 10\n    return product\n\nn = int(input())\nprint(product_of_digits(n))"
},
{
  "id": 7,
  "title": "Find the HCF (Highest Common Factor) of Three Numbers",
  "description": "Given three integers `a`, `b`, and `c`, find their Highest Common Factor (HCF).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | [12, 15, 21] | 3 | Common factor of all |\n| 2 | [10, 20, 30] | 10 | HCF is 10 |\n| 3 | [5, 10, 15] | 5 | |\n| 4 | [7, 11, 13] | 1 | All are prime |\n| 5 | [8, 16, 32] | 8 | |\n| 6 | [1, 2, 3] | 1 | HCF with 1 is always 1 |\n| 7 | [0, 5, 10] | 5 | HCF of 0 and 5 is 5 |\n| 8 | [0, 0, 5] | 5 | HCF of 0 and a number is that number |\n| 9 | [0, 0, 0] | 0 | Edge case |\n| 10 | [18, 24, 30] | 6 | |\n| 11 | [81, 27, 45] | 9 | |\n| 12 | [14, 28, 35] | 7 | |\n| 13 | [100, 150, 250] | 50 | |\n| 14 | [3, 6, 9] | 3 | |\n| 15 | [101, 103, 107] | 1 | All prime, no common factors |\n",
  "example": {
    "input": "[12, 15, 21]",
    "output": "3",
    "explanation": "HCF of 12, 15, and 21 is 3."
  },
  "answer": "import math\n\na, b, c = map(int, input().split())\n\ndef hcf_of_three(a, b, c):\n    return math.gcd(math.gcd(a, b), c)\n\nprint(hcf_of_three(a, b, c))"
},
{
  "id": 8,
  "title": "Calculate the Sum of a Geometric Progression",
  "description": "Given first term `a`, common ratio `r`, and number of terms `n`, calculate the sum of the geometric progression.\n\nFormula:\n- If r == 1: Sum = a × n\n- Else: Sum = a × (rⁿ - 1) / (r - 1)\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | [1, 2, 3] | 7 | 1 + 2 + 4 |\n| 2 | [2, 3, 4] | 80 | 2 + 6 + 18 + 54 |\n| 3 | [5, 1, 5] | 25 | All terms are 5 |\n| 4 | [1, -1, 4] | 0 | 1 -1 +1 -1 = 0 |\n| 5 | [3, 2, 0] | 0 | Zero terms |\n| 6 | [10, 2, 1] | 10 | One term only |\n| 7 | [1, 0, 5] | 1 | All terms after first are 0 |\n| 8 | [2, 0.5, 3] | 3.5 | 2 + 1 + 0.5 |\n| 9 | [3, -2, 4] | -3 | 3 -6 +12 -24 |\n| 10 | [4, 4, 3] | 84 | 4 + 16 + 64 |\n| 11 | [1, 1, 100] | 100 | r = 1 case |\n| 12 | [100, 0.1, 3] | 111 | 100 + 10 + 1 |\n| 13 | [1, 3, 5] | 121 | 1+3+9+27+81 |\n| 14 | [7, 2, 4] | 105 | 7+14+28+56 |\n| 15 | [2, 2, 10] | 2046 | 2^1 to 2^10 sum |\n",
  "example": {
    "input": "[1, 2, 3]",
    "output": "7",
    "explanation": "Sum = 1 + 2 + 4 = 7."
  },
  "answer": "a, r, n = map(int, input().split())\n\ndef geometric_sum(a, r, n):\n    if n == 0:\n        return 0\n    if r == 1:\n        return a * n\n    # Use pow for efficient exponentiation\n    sum_gp = a * (pow(r, n) - 1) / (r - 1)\n    return int(sum_gp)  # Convert to int for output\n\nprint(geometric_sum(a, r, n))"
},
{
  "id": 9,
  "title": "Check if a Character is a Consonant",
  "description": "Given a single character, check if it is a consonant (i.e., not a vowel and is an alphabet).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"b\" | True | Lowercase consonant |\n| 2 | \"A\" | False | Vowel |\n| 3 | \"Z\" | True | Uppercase consonant |\n| 4 | \"e\" | False | Vowel |\n| 5 | \"y\" | True | Considered consonant here |\n| 6 | \"i\" | False | Vowel |\n| 7 | \"m\" | True | |\n| 8 | \"U\" | False | Vowel |\n| 9 | \"1\" | False | Not a letter |\n| 10 | \"#\" | False | Not a letter |\n| 11 | \"q\" | True | |\n| 12 | \"\" | False | Empty input |\n| 13 | \"O\" | False | Vowel |\n| 14 | \"n\" | True | |\n| 15 | \"R\" | True | Uppercase consonant |\n",
  "example": {
    "input": "[\"b\"]",
    "output": "True",
    "explanation": "\"b\" is a consonant."
  },
  "answer": "char = input()\n\ndef is_consonant(c):\n    if len(c) != 1 or not c.isalpha():\n        return False\n    return c.lower() not in ['a', 'e', 'i', 'o', 'u']\n\nprint(is_consonant(char))"
},
{
  "id": 10,
  "title": "Find the Number of Zeros in a Number",
  "description": "Given an integer `n`, count the number of times digit '0' appears in it.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 100 | 2 | Two zeros in 100 |\n| 2 | 0 | 1 | Single zero |\n| 3 | 10500 | 3 | Three zeros |\n| 4 | 123456 | 0 | No zeros |\n| 5 | 90009 | 3 | Three zeros |\n| 6 | 101010 | 3 | Alternating zeros |\n| 7 | 1000000 | 6 | Six zeros |\n| 8 | 909090 | 3 | |\n| 9 | 1 | 0 | |\n| 10 | 10 | 1 | One zero |\n| 11 | 1001 | 2 | |\n| 12 | 200000 | 5 | |\n| 13 | 50505 | 2 | |\n| 14 | 999999 | 0 | No zeros |\n| 15 | 1230405060 | 4 | |\n",
  "example": {
    "input": "100",
    "output": "2",
    "explanation": "100 has two zeros."
  },
  "answer": "n = int(input())\ndef count_zeros(num):\n    return str(num).count('0')\nprint(count_zeros(n))"
},
{
  "id": 11,
  "title": "Remove All Punctuation from a String",
  "description": "Given a string, remove all punctuation characters and return the cleaned string.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"Hello, World!\" | \"Hello World\" | Comma and exclamation removed |\n| 2 | \"No-punctuation-here\" | \"Nopunctuationhere\" | Hyphens removed |\n| 3 | \"What? Why?!\" | \"What Why\" | Multiple punctuations |\n| 4 | \"Hello.\" | \"Hello\" | Period removed |\n| 5 | \"(Test)\" | \"Test\" | Brackets removed |\n| 6 | \"\" | \"\" | Empty string |\n| 7 | \"All Good!\" | \"All Good\" | |\n| 8 | \"@OpenAI#123\" | \"OpenAI123\" | Special chars removed |\n| 9 | \"A:B;C\" | \"ABC\" | Colons and semicolons removed |\n| 10 | \"123...456\" | \"123456\" | Ellipsis removed |\n| 11 | \"Quotes'\" | \"Quotes\" | Apostrophes removed |\n| 12 | \"{JSON}\" | \"JSON\" | Curly braces removed |\n| 13 | \"Yes, we can!\" | \"Yes we can\" | |\n| 14 | \"Email@example.com\" | \"Emailexamplecom\" | At and dot removed |\n| 15 | \"Good#Morning!\" | \"GoodMorning\" | |\n",
  "example": {
    "input": "\"Hello, World!\"",
    "output": "\"Hello World\"",
    "explanation": "All punctuation removed."
  },
  "answer": "import string\ns = input()\ndef remove_punctuation(s):\n    return ''.join(c for c in s if c not in string.punctuation)\nprint(remove_punctuation(s))"
},
{
  "id": 12,
  "title": "Capitalize the First Letter of Each Word in a String",
  "description": "Given a string, capitalize the first letter of each word.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"hello world\" | \"Hello World\" | Basic case |\n| 2 | \"openai is amazing\" | \"Openai Is Amazing\" | |\n| 3 | \"already Capitalized\" | \"Already Capitalized\" | Capitalization is preserved or corrected |\n| 4 | \"mixed CASE words\" | \"Mixed Case Words\" | All words adjusted |\n| 5 | \"\" | \"\" | Empty string |\n| 6 | \"a b c\" | \"A B C\" | Single characters |\n| 7 | \"1st word is a number\" | \"1st Word Is A Number\" | Numbers retained |\n| 8 | \"multiple     spaces\" | \"Multiple     Spaces\" | Preserve spacing |\n| 9 | \"newline\\ncharacter\" | \"Newline\\ncharacter\" | Newline split |\n| 10 | \"punctuation, stays?\" | \"Punctuation, Stays?\" | Only first letter capitalized |\n| 11 | \"   leading space\" | \"   Leading Space\" | Leading spaces retained |\n| 12 | \"CAPS LOCK\" | \"Caps Lock\" | Fixed casing |\n| 13 | \"aBc dEf\" | \"Abc Def\" | Capitalize only first letters |\n| 14 | \"hello123 world456\" | \"Hello123 World456\" | Alphanumeric words |\n| 15 | \"snake_case test_case\" | \"Snake_case Test_case\" | Underscores not treated as delimiters |\n",
  "example": {
    "input": "\"hello world\"",
    "output": "\"Hello World\"",
    "explanation": "Each word starts with a capital letter."
  },
  "answer": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())\n\ns = input()\nprint(capitalize_words(s))"
},
{
  "id": 13,
  "title": "Count the Number of Consonants in a String",
  "description": "Given a string, count the number of consonants (letters that are not vowels).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"hello\" | 3 | h, l, l |\n| 2 | \"aeiou\" | 0 | All vowels |\n| 3 | \"bcdfg\" | 5 | All consonants |\n| 4 | \"HELLO\" | 3 | Case insensitive |\n| 5 | \"Hello World!\" | 7 | Includes punctuation |\n| 6 | \"\" | 0 | Empty string |\n| 7 | \"Python\" | 5 | y, t, h, n are consonants |\n| 8 | \"12345\" | 0 | Digits ignored |\n| 9 | \"Sky\" | 2 | s and k are consonants |\n| 10 | \"Quick brown fox\" | 10 | All consonants counted |\n| 11 | \"AEIOUaeiou\" | 0 | Only vowels |\n| 12 | \"xyz\" | 3 | All consonants |\n| 13 | \"Check 123!\" | 5 | Ignore numbers and symbols |\n| 14 | \"Consonants and vowels\" | 13 | Total consonants |\n| 15 | \"Zebra\" | 3 | z, b, r are consonants |\n",
  "example": {
    "input": "\"hello\"",
    "output": "3",
    "explanation": "Consonants are h, l, and l."
  },
  "answer": "s = input()\n\ndef count_consonants(s):\n    vowels = 'aeiou'\n    return sum(1 for c in s.lower() if c.isalpha() and c not in vowels)\n\nprint(count_consonants(s))"
},
{
  "id": 14,
  "title": "Find the Length of the Longest Word in a Sentence",
  "description": "Given a sentence, find the length of the longest word in it.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"The quick brown fox\" | 5 | \"quick\" or \"brown\" |\n| 2 | \"Hello\" | 5 | Single word |\n| 3 | \"\" | 0 | Empty string |\n| 4 | \"Tiny ant\" | 4 | \"Tiny\" |\n| 5 | \"Supercalifragilisticexpialidocious\" | 34 | Longest word |\n| 6 | \"A mix of short and longer words\" | 6 | \"longer\" |\n| 7 | \"Hi there friend\" | 6 | \"friend\" |\n| 8 | \"Python programming is fun\" | 11 | \"programming\" |\n| 9 | \"Don't split hyphenated-words\" | 10 | \"hyphenated-words\" treated as one |\n| 10 | \"1234 56789\" | 5 | Only lengths |\n| 11 | \"Spaces     between words\" | 7 | Handle multiple spaces |\n| 12 | \"Testing punctuation.\" | 10 | Ignore punctuation on counting |\n| 13 | \"Short long longest\" | 7 | \"longest\" |\n| 14 | \"Capitalize FIRST then rest\" | 10 | \"Capitalize\" |\n| 15 | \"Edge-cases like this-work\" | 9 | Count whole word including hyphen |\n",
  "example": {
    "input": "\"The quick brown fox\"",
    "output": "5",
    "explanation": "The longest words are 'quick' and 'brown', each 5 characters long."
  },
  "answer": "import re\n\ndef length_of_longest_word(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    if not words:\n        return 0\n    return max(len(word) for word in words)\n\nsentence = input()\nprint(length_of_longest_word(sentence))"
},
{
  "id": 15,
  "title": "Reverse the Words in a Sentence",
  "description": "Given a sentence, reverse the order of the words.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"Hello world\" | \"world Hello\" | Basic test |\n| 2 | \"The quick brown fox\" | \"fox brown quick The\" | Full reversal |\n| 3 | \"a b c\" | \"c b a\" | Simple |\n| 4 | \"One\" | \"One\" | Single word |\n| 5 | \"\" | \"\" | Empty input |\n| 6 | \"   Leading spaces\" | \"spaces Leading\" | Ignore extra spaces |\n| 7 | \"Trailing spaces   \" | \"spaces Trailing\" | Trimmed |\n| 8 | \"Multiple     spaces\" | \"spaces Multiple\" | Handle multiple spaces |\n| 9 | \"Python is fun\" | \"fun is Python\" | Standard |\n| 10 | \"123 456 789\" | \"789 456 123\" | Numbers as words |\n| 11 | \"First second third\" | \"third second First\" | Three words |\n| 12 | \"One-word\" | \"One-word\" | Single compound word |\n| 13 | \"To be or not to be\" | \"be to not or be To\" | Longer sentence |\n| 14 | \"UpperCase MIXED case\" | \"case MIXED UpperCase\" | Keep case |\n| 15 | \"Palindrome sentence Palindrome\" | \"Palindrome sentence Palindrome\" | Symmetry preserved |\n",
  "example": {
    "input": "\"The quick brown fox\"",
    "output": "\"fox brown quick The\"",
    "explanation": "All words are reversed in order."
  },
  "answer": "s = input()\n\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n\nprint(reverse_words(s))"
},
{
  "id": 16,
  "title": "Check if Two Strings are Rotations of Each Other",
  "description": "Determine whether one string is a rotation of another.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | (\"abcde\", \"deabc\") | true | Rotation exists |\n| 2 | (\"abcde\", \"abced\") | false | Not a valid rotation |\n| 3 | (\"\", \"\") | true | Both are empty |\n| 4 | (\"a\", \"a\") | true | Same single character |\n| 5 | (\"ab\", \"ba\") | true | Two-char rotation |\n| 6 | (\"waterbottle\", \"erbottlewat\") | true | Classic case |\n| 7 | (\"rotation\", \"tationro\") | true | Rotated once |\n| 8 | (\"rotation\", \"ationrot\") | true | Rotated twice |\n| 9 | (\"rotation\", \"nrotation\") | false | Not a full rotation |\n| 10 | (\"abc\", \"cab\") | true | Rotation |\n| 11 | (\"abc\", \"acb\") | false | Different order |\n| 12 | (\"abcd\", \"dabc\") | true | Rotated right by 1 |\n| 13 | (\"abcd\", \"cdab\") | true | Rotated by 2 |\n| 14 | (\"hello\", \"elloh\") | true | Valid rotation |\n| 15 | (\"hello\", \"olleh\") | false | Reverse is not rotation |\n",
  "example": {
    "input": "(\"abcde\", \"deabc\")",
    "output": "true",
    "explanation": "The second string is a rotation of the first."
  },
  "answer": "def are_rotations(s1, s2):\n    return len(s1) == len(s2) and s2 in (s1 + s1)\n\ns1, s2 = input().split()\nprint(are_rotations(s1, s2))"
},
{
  "id": 17,
  "title": "Find the First Non-Repeating Character in a String",
  "description": "Return the first character that does not repeat in the string.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | \"leetcode\" | \"l\" | First non-repeating |\n| 2 | \"loveleetcode\" | \"v\" | v appears once first |\n| 3 | \"aabbcc\" | \"\" | All repeat |\n| 4 | \"aabbc\" | \"c\" | Only c doesn’t repeat |\n| 5 | \"\" | \"\" | Empty string |\n| 6 | \"xxyyzzq\" | \"q\" | q is unique |\n| 7 | \"racecar\" | \"e\" | e only appears once |\n| 8 | \"success\" | \"u\" | u is unique |\n| 9 | \"repetition\" | \"r\" | r comes first and is unique |\n| 10 | \"a\" | \"a\" | One character |\n| 11 | \"abcabcde\" | \"d\" | First non-repeat after repeats |\n| 12 | \"xyzxyzx\" | \"y\" | Last y is unique |\n| 13 | \"mango\" | \"m\" | m is unique |\n| 14 | \"zebra\" | \"z\" | z first and unique |\n| 15 | \"nnnne\" | \"e\" | Last letter is unique |\n",
  "example": {
    "input": "\"leetcode\"",
    "output": "\"l\"",
    "explanation": "l is the first character that doesn't repeat."
  },
  "answer": "from collections import Counter\n\ns = input()\n\ndef first_non_repeating_char(s):\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return \"\"\n\nprint(first_non_repeating_char(s))"
},
{
  "id": 18,
  "title": "Print a Right-Aligned Triangle of Stars for a Given Height",
  "description": "Given a number `n`, print a right-aligned triangle of `*` characters.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | \"*\" | Base case |\n| 2 | 2 | \" *\\n**\" | Two lines |\n| 3 | 3 | \"  *\\n **\\n***\" | Right-aligned |\n| 4 | 4 | \"   *\\n  **\\n ***\\n****\" | Four levels |\n| 5 | 5 | \"    *\\n   **\\n  ***\\n ****\\n*****\" | Five rows |\n| 6 | 0 | \"\" | No output |\n| 7 | 6 | \"     *\\n    **\\n   ***\\n  ****\\n *****\\n******\" | Larger triangle |\n| 8 | 7 | \"      *\\n     **\\n    ***\\n   ****\\n  *****\\n ******\\n*******\" | Seven rows |\n| 9 | 8 | Valid | Continue the pattern |\n| 10 | 9 | Valid | As above |\n| 11 | 10 | Valid | Right-aligned 10 rows |\n| 12 | 15 | Valid | Large triangle |\n| 13 | 20 | Valid | Very large triangle |\n| 14 | -1 | \"\" | Negative input = no output |\n| 15 | 3 | \"  *\\n **\\n***\" | Repetition |\n",
  "example": {
    "input": "3",
    "output": "\"  *\\n **\\n***\"",
    "explanation": "Each line has right padding to align the stars to the right."
  },
  "answer": "def right_aligned_triangle(n):\n    return '\\n'.join(' ' * (n - i - 1) + '*' * (i + 1) for i in range(n))"
},
{
  "id": 19,
  "title": "Generate a Pyramid Pattern of Numbers",
  "description": "Given a number `n`, print a pyramid pattern of numbers for `n` rows.\n\nEach row `i` (1-based) contains numbers from 1 to `i`, right-aligned as a pyramid.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | \"1\" | Single row |\n| 2 | 2 | \" 1\\n1 2\" | Two rows |\n| 3 | 3 | \"  1\\n 1 2\\n1 2 3\" | Three rows |\n| 4 | 4 | \"   1\\n  1 2\\n 1 2 3\\n1 2 3 4\" | Four rows |\n| 5 | 5 | \"    1\\n   1 2\\n  1 2 3\\n 1 2 3 4\\n1 2 3 4 5\" | Five rows |\n| 6 | 0 | \"\" | No output |\n| 7 | 6 | Valid | Six rows |\n| 8 | 7 | Valid | Seven rows |\n| 9 | 8 | Valid | Eight rows |\n| 10 | 9 | Valid | Nine rows |\n| 11 | 10 | Valid | Ten rows |\n| 12 | 15 | Valid | Larger pattern |\n| 13 | -1 | \"\" | Negative input, no output |\n| 14 | 3 | \"  1\\n 1 2\\n1 2 3\" | Repeated case |\n| 15 | 12 | Valid | Twelve rows pyramid |\n",
  "example": {
    "input": "3",
    "output": "\"  1\\n 1 2\\n1 2 3\"",
    "explanation": "Each line is right-aligned forming a pyramid."
  },
  "answer": "def pyramid_pattern(n):\n    return '\\n'.join(' ' * (n - i - 1) + ' '.join(str(j) for j in range(1, i + 1)) for i in range(1, n + 1))"
},
{
  "id": 20,
  "title": "Print Floyd’s Triangle for N Rows",
  "description": "Floyd's Triangle is a right-angled triangle formed using natural numbers.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | \"1\" | One row |\n| 2 | 2 | \"1\\n2 3\" | Two rows |\n| 3 | 3 | \"1\\n2 3\\n4 5 6\" | Three rows |\n| 4 | 4 | \"1\\n2 3\\n4 5 6\\n7 8 9 10\" | Four rows |\n| 5 | 5 | Valid | Five rows |\n| 6 | 0 | \"\" | Zero rows |\n| 7 | 6 | Valid | Six rows |\n| 8 | 7 | Valid | Seven rows |\n| 9 | 8 | Valid | Eight rows |\n| 10 | 9 | Valid | Nine rows |\n| 11 | 10 | Valid | Ten rows |\n| 12 | 15 | Valid | Fifteen rows |\n| 13 | -2 | \"\" | Negative input |\n| 14 | 3 | \"1\\n2 3\\n4 5 6\" | Repeated test case |\n| 15 | 12 | Valid | Twelve rows Floyd’s triangle |\n",
  "example": {
    "input": "3",
    "output": "\"1\\n2 3\\n4 5 6\"",
    "explanation": "Each row `i` contains `i` numbers in sequence."
  },
  "answer": "def floyds_triangle(n):\n    result = []\n    num = 1\n    for i in range(1, n + 1):\n        row = ' '.join(str(num + j) for j in range(i))\n        result.append(row)\n        num += i\n    return '\\n'.join(result)"
},
{
  "id": 21,
  "title": "Calculate the Sum of Each Row in a Matrix",
  "description": "Given a 2D matrix of integers, return a list of sums for each row.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | [[1,2,3],[4,5,6],[7,8,9]] | [6,15,24] | 3x3 matrix |\n| 2 | [[1]] | [1] | Single element |\n| 3 | [[1,2],[3,4]] | [3,7] | 2x2 matrix |\n| 4 | [] | [] | Empty matrix |\n| 5 | [[0,0,0]] | [0] | Zero row |\n| 6 | [[5,5,5],[10,10,10]] | [15,30] | Uniform rows |\n| 7 | [[1,2,3,4]] | [10] | Single long row |\n| 8 | [[1],[2],[3]] | [1,2,3] | Single column matrix |\n| 9 | [[-1,-2,-3],[1,2,3]] | [-6,6] | Mixed signs |\n| 10 | [[100,200,300]] | [600] | Large numbers |\n| 11 | [[7,8],[9,10],[11,12]] | [15,19,23] | 3 rows 2 cols |\n| 12 | [[1,2],[3,4],[5,6],[7,8]] | [3,7,11,15] | More rows than cols |\n| 13 | [[3,3,3],[2,2,2],[1,1,1]] | [9,6,3] | Patterned input |\n| 14 | [[4,1],[2,3],[6,0]] | [5,5,6] | Custom matrix |\n| 15 | [[10,20],[30,40],[50,60]] | [30,70,110] | Large pairs |\n",
  "example": {
    "input": "[[1,2,3],[4,5,6],[7,8,9]]",
    "output": "[6,15,24]",
    "explanation": "Each row sum is calculated separately."
  },
  "answer": "import sys\n\ndef sum_of_each_row(matrix):\n    return [sum(row) for row in matrix]\n\nmatrix = []\nfor line in sys.stdin:\n    line = line.strip()\n    if not line:\n        break\n    row = list(map(int, line.split()))\n    matrix.append(row)\n\nresult = sum_of_each_row(matrix)\nprint(*result)"
},
{
  "id": 22,
  "title": "Transpose a Matrix",
  "description": "Given a 2D matrix, return its transpose.\nThe transpose of a matrix is obtained by switching its rows with its columns.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | [[1, 2], [3, 4]] | [[1, 3], [2, 4]] | 2x2 matrix |\n| 2 | [[1]] | [[1]] | Single element |\n| 3 | [[1, 2, 3]] | [[1], [2], [3]] | 1x3 row to 3x1 column |\n| 4 | [[1], [2], [3]] | [[1, 2, 3]] | 3x1 column to 1x3 row |\n| 5 | [[1,2,3],[4,5,6]] | [[1,4],[2,5],[3,6]] | 2x3 to 3x2 |\n| 6 | [[0,0],[0,0]] | [[0,0],[0,0]] | All zeros |\n| 7 | [[5,7],[8,9]] | [[5,8],[7,9]] | 2x2 example |\n| 8 | [[10]] | [[10]] | Repeated scalar test |\n| 9 | [[1,2],[3,4],[5,6]] | [[1,3,5],[2,4,6]] | 3x2 to 2x3 |\n| 10 | [] | [] | Empty matrix |\n| 11 | [[1,2,3,4]] | [[1],[2],[3],[4]] | 1x4 to 4x1 |\n| 12 | [[1],[2],[3],[4]] | [[1,2,3,4]] | 4x1 to 1x4 |\n| 13 | [[1,2],[3,4],[5,6],[7,8]] | [[1,3,5,7],[2,4,6,8]] | 4x2 to 2x4 |\n| 14 | [[9,8],[7,6]] | [[9,7],[8,6]] | Patterned example |\n| 15 | [[100,200,300],[400,500,600]] | [[100,400],[200,500],[300,600]] | Large values |\n",
  "example": {
    "input": "[[1, 2], [3, 4]]",
    "output": "[[1, 3], [2, 4]]",
    "explanation": "Transpose switches rows and columns."
  },
  "answer": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]\n\nmatrix = []\n\ntry:\n    while True:\n        line = input()\n        if line.strip() == '':\n            break\n        row = list(map(int, line.strip().split()))\n        matrix.append(row)\nexcept EOFError:\n    pass\n\ntransposed = transpose_matrix(matrix)\n\nfor row in transposed:\n    print(*row)"
},
{
  "id": 23,
  "title": "Check if a Matrix is Symmetric",
  "description": "A matrix is symmetric if it is equal to its transpose.\nReturn True if the matrix is symmetric, False otherwise.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | [[1,2],[2,1]] | true | Symmetric 2x2 |\n| 2 | [[1,0,0],[0,1,0],[0,0,1]] | true | Identity matrix |\n| 3 | [[1,2,3],[2,4,5],[3,5,6]] | true | Symmetric 3x3 |\n| 4 | [[1,2],[3,4]] | false | Not symmetric |\n| 5 | [[1]] | true | Single element |\n| 6 | [[0,1],[1,0]] | true | Symmetric with 0/1 |\n| 7 | [[5,6],[6,5]] | true | Another 2x2 symmetric |\n| 8 | [[1,2],[2,3],[3,4]] | false | 3x2 not square |\n| 9 | [[7,8,9],[8,7,6],[9,6,7]] | true | Symmetric 3x3 matrix |\n| 10 | [] | true | Empty matrix treated as symmetric |\n| 11 | [[1,2,3],[4,5,6]] | false | Not square |\n| 12 | [[2,2],[2,2]] | true | All same elements |\n| 13 | [[1,0,1],[0,1,0],[1,0,1]] | true | Palindromic structure |\n| 14 | [[1,2],[2,2],[2,1]] | false | Not square |\n| 15 | [[100,200],[200,100]] | true | Large values |\n",
  "example": {
    "input": "[[1, 2], [2, 1]]",
    "output": "true",
    "explanation": "The matrix equals its transpose."
  },
  "answer": "import sys\n\ndef is_symmetric(matrix):\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    return matrix == [list(row) for row in zip(*matrix)]\n\nmatrix = []\nfor line in sys.stdin:\n    line = line.strip()\n    if not line:\n        break\n    matrix.append(list(map(int, line.split())))\n\nprint(is_symmetric(matrix))"
},
{
  "id": 24,
  "title": "Add Two Matrices",
  "description": "Given two matrices of the same size, return a new matrix that is their element-wise sum.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | ([[1,2],[3,4]], [[5,6],[7,8]]) | [[6,8],[10,12]] | 2x2 matrices |\n| 2 | ([[1]], [[1]]) | [[2]] | Single element |\n| 3 | ([[0,0],[0,0]], [[0,0],[0,0]]) | [[0,0],[0,0]] | All zeros |\n| 4 | ([[1,1,1]], [[2,2,2]]) | [[3,3,3]] | 1x3 row |\n| 5 | ([[5],[6]], [[5],[4]]) | [[10],[10]] | Column vectors |\n| 6 | ([[1,2,3],[4,5,6]], [[6,5,4],[3,2,1]]) | [[7,7,7],[7,7,7]] | 2x3 |\n| 7 | ([[1,2],[3,4]], [[-1,-2],[-3,-4]]) | [[0,0],[0,0]] | Canceling values |\n| 8 | ([[10,20],[30,40]], [[1,1],[1,1]]) | [[11,21],[31,41]] | Large + small |\n| 9 | ([[3,3],[3,3]], [[2,2],[2,2]]) | [[5,5],[5,5]] | Uniform values |\n| 10 | ([[1,2,3]], [[3,2,1]]) | [[4,4,4]] | 1x3 symmetry |\n| 11 | ([[1,2,3],[4,5,6]], [[0,0,0],[1,1,1]]) | [[1,2,3],[5,6,7]] | Mixed values |\n| 12 | ([[100,200]], [[300,400]]) | [[400,600]] | Large elements |\n| 13 | ([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]]) | [[8,10,12],[14,16,18]] | 2x3 matrices |\n| 14 | ([[1,2],[3,4],[5,6]], [[6,5],[4,3],[2,1]]) | [[7,7],[7,7],[7,7]] | 3x2 matrices |\n| 15 | ([[1,1,1],[2,2,2]], [[3,3,3],[4,4,4]]) | [[4,4,4],[6,6,6]] | Rows of same values |\n",
  "example": {
    "input": "([[1,2],[3,4]], [[5,6],[7,8]])",
    "output": "[[6,8],[10,12]]",
    "explanation": "Each element is the sum of elements at the same position."
  },
  "answer": "def add_matrices(A, B):\n    return [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n\nimport sys\n\n# Read all lines as integer lists\nlines = [list(map(int, line.split())) for line in sys.stdin if line.strip()]\n\n# Split evenly into two matrices\nmid = len(lines) // 2\nA = lines[:mid]\nB = lines[mid:]\n\n# Compute and print result\nresult = add_matrices(A, B)\nfor row in result:\n    print(*row)"
},
{
  "id": 25,
  "title": "Find the Maximum Element in a 2D Matrix",
  "description": "Given a 2D matrix of integers, return the maximum element in the matrix.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | [[1, 2], [3, 4]] | 4 | Standard 2x2 matrix |\n| 2 | [[-1, -2], [-3, -4]] | -1 | All negative values |\n| 3 | [[5]] | 5 | Single element |\n| 4 | [[0, 0], [0, 0]] | 0 | All zeros |\n| 5 | [[1, 99], [100, 50]] | 100 | Max in bottom left |\n| 6 | [[10, 20, 30], [40, 50, 60]] | 60 | Rectangular matrix |\n| 7 | [[-5, -10], [-1, -20]] | -1 | Negative max value |\n| 8 | [[1000, 2000], [3000, 4000]] | 4000 | Large numbers |\n| 9 | [[0]] | 0 | Zero element |\n| 10 | [[1, 2, 3], [3, 2, 1]] | 3 | Multiple max values |\n| 11 | [[2, 2, 2], [2, 2, 2]] | 2 | All same values |\n| 12 | [[1, 2, 3]] | 3 | Single row |\n| 13 | [[4], [5], [6]] | 6 | Single column |\n| 14 | [] | null | Empty matrix |\n| 15 | [[7, 8], [9, 10], [11, 12]] | 12 | Max in last row |\n",
  "example": {
    "input": "[[1, 2], [3, 4]]",
    "output": "4",
    "explanation": "4 is the largest element in the matrix."
  },
  "answer": "import sys\n\nlines = [line.strip() for line in sys.stdin if line.strip()]\nmatrix = [list(map(int, line.split())) for line in lines]\n\ndef max_in_2d_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return None\n    return max(max(row) for row in matrix)\n\nprint(max_in_2d_matrix(matrix))"
},
{
  "id": 26,
  "title": "Find All Divisors of a Number",
  "description": "Given an integer `n`, return a list of all its positive divisors.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | 1 | [1] | Only 1 is divisor of itself |\n| 2 | 6 | [1, 2, 3, 6] | Standard case |\n| 3 | 12 | [1, 2, 3, 4, 6, 12] | Multiple divisors |\n| 4 | 7 | [1, 7] | Prime number |\n| 5 | 16 | [1, 2, 4, 8, 16] | Power of 2 |\n| 6 | 100 | [1,2,4,5,10,20,25,50,100] | Larger number |\n| 7 | 17 | [1, 17] | Another prime |\n| 8 | 36 | [1,2,3,4,6,9,12,18,36] | Many divisors |\n| 9 | 81 | [1,3,9,27,81] | Power of 3 |\n| 10 | 0 | [] | Edge case, no divisors |\n| 11 | -6 | [1, 2, 3, 6] | Negative input treated as positive |\n| 12 | 49 | [1, 7, 49] | Square of a prime |\n| 13 | 15 | [1, 3, 5, 15] | Odd number |\n| 14 | 2 | [1, 2] | Smallest even prime |\n| 15 | 101 | [1, 101] | Prime again |\n",
  "example": {
    "input": "6",
    "output": "[1, 2, 3, 6]",
    "explanation": "6 is divisible by 1, 2, 3, and 6."
  },
  "answer": "def find_divisors(n):\n    n = abs(n)\n    if n == 0:\n        return []\n    divisors = set()\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n        i += 1\n    return sorted(divisors)\n\nn = int(input())\nresult = find_divisors(n)\nprint(' '.join(map(str, result)))"
},
{
  "id": 27,
  "title": "Check if an Element Exists in a List",
  "description": "Given a list and an element, return True if the element exists in the list, otherwise False.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | ([1, 2, 3], 2) | true | Element exists |\n| 2 | ([\"a\", \"b\", \"c\"], \"d\") | false | Element not in list |\n| 3 | ([1], 1) | true | Single element |\n| 4 | ([], 5) | false | Empty list |\n| 5 | ([1,2,3,4], 5) | false | Element not found |\n| 6 | ([\"apple\", \"banana\"], \"apple\") | true | String match |\n| 7 | ([None, False], False) | true | Handles falsy values |\n| 8 | ([0, 1, 2], 0) | true | 0 is present |\n| 9 | ([\"A\", \"B\", \"C\"], \"a\") | false | Case sensitive |\n| 10 | ([1.1, 2.2], 1.1) | true | Float match |\n| 11 | ([\"x\", \"y\", \"z\"], \"z\") | true | Last element |\n| 12 | ([\"cat\", \"dog\", \"mouse\"], \"lion\") | false | Not present |\n| 13 | ([3,4,5], 4) | true | Middle element |\n| 14 | ([\"\"], \"\") | true | Empty string match |\n| 15 | ([\"a\", \"ab\", \"abc\"], \"ab\") | true | Partial match exists |\n",
  "example": {
    "input": "([1, 2, 3], 2)",
    "output": "true",
    "explanation": "2 is in the list."
  },
  "answer": "lst = input().split()\nelement = input()\nprint(element in lst)"
},
{
  "id": 28,
  "title": "Find the Index of First Occurrence of an Element in a List",
  "description": "Given a list and an element, return the index of the first occurrence of the element. If the element does not exist in the list, return -1.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | ([1, 2, 3], 2) | 1 | Normal case |\n| 2 | ([\"a\", \"b\", \"c\"], \"c\") | 2 | End of list |\n| 3 | ([1, 2, 1, 2], 1) | 0 | First match only |\n| 4 | ([1, 2, 3], 4) | -1 | Not found |\n| 5 | ([], 1) | -1 | Empty list |\n| 6 | ([5, 5, 5], 5) | 0 | All same elements |\n| 7 | ([\"x\", \"y\", \"z\"], \"x\") | 0 | First element match |\n| 8 | ([1.1, 2.2, 3.3], 2.2) | 1 | Float match |\n| 9 | ([\"a\", \"b\", \"a\"], \"a\") | 0 | Repeated string |\n| 10 | ([None, 0, False], False) | 2 | False is at index 2 |\n| 11 | ([True, False], True) | 0 | Boolean match |\n| 12 | ([\"apple\", \"banana\", \"cherry\"], \"banana\") | 1 | Middle match |\n| 13 | ([100, 200, 300], 100) | 0 | First match |\n| 14 | ([1, 2, 3], 3) | 2 | Last index match |\n| 15 | ([\"hello\", \"world\"], \"hi\") | -1 | Not found |\n",
  "example": {
    "input": "([1, 2, 3, 4], 3)",
    "output": "2",
    "explanation": "The number 3 first appears at index 2."
  },
  "answer": "lst = input().split()\nelement = input()\n\ntry:\n    print(lst.index(element))\nexcept ValueError:\n    print(-1)"
},
{
  "id": 29,
  "title": "Count Positive and Negative Numbers in a List",
  "description": "Given a list of integers, return a tuple (positive_count, negative_count) representing how many positive and negative numbers are in the list.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | [1, -2, 3, -4, 5] | (3, 2) | Mixed values |\n| 2 | [1, 2, 3] | (3, 0) | All positive |\n| 3 | [-1, -2, -3] | (0, 3) | All negative |\n| 4 | [0, 0, 0] | (0, 0) | Zeros only |\n| 5 | [] | (0, 0) | Empty list |\n| 6 | [10, -10, 20, -20] | (2, 2) | Equal positives and negatives |\n| 7 | [5] | (1, 0) | Single positive |\n| 8 | [-5] | (0, 1) | Single negative |\n| 9 | [1, -1, 0, 2, -2] | (2, 2) | Zeros ignored |\n| 10 | [0] | (0, 0) | Zero ignored |\n| 11 | [100, -100, 200, -200] | (2, 2) | Large numbers |\n| 12 | [-1, 2, -3, 4, 0] | (2, 2) | Zero ignored |\n| 13 | [-1, -2, -3, -4] | (0, 4) | All negative case |\n| 14 | [1, 2, 3, 4] | (4, 0) | All positive case |\n| 15 | [0, 1, -1] | (1, 1) | Balanced example |\n",
  "example": {
    "input": "[1, -2, 3, -4, 5]",
    "output": "(3, 2)",
    "explanation": "Three positives (1,3,5) and two negatives (-2,-4)."
  },
  "answer": "lst = list(map(int, input().split()))\n\ndef count_pos_neg(lst):\n    pos = sum(1 for x in lst if x > 0)\n    neg = sum(1 for x in lst if x < 0)\n    return (pos, neg)\n\npos_count, neg_count = count_pos_neg(lst)\nprint(pos_count, neg_count)"
},
{
  "id": 30,
  "title": "Remove Duplicates from a List While Preserving Order",
  "description": "Given a list, return a new list with duplicates removed but the original order preserved.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | [1, 2, 2, 3, 1] | [1, 2, 3] | Simple integer list |\n| 2 | [\"a\", \"b\", \"a\"] | [\"a\", \"b\"] | Strings |\n| 3 | [1, 1, 1, 1] | [1] | All duplicates |\n| 4 | [1, 2, 3] | [1, 2, 3] | No duplicates |\n| 5 | [] | [] | Empty list |\n| 6 | [\"apple\", \"banana\", \"apple\", \"cherry\"] | [\"apple\", \"banana\", \"cherry\"] | Mixed strings |\n| 7 | [True, False, True, False] | [True, False] | Boolean values |\n| 8 | [1.1, 2.2, 1.1] | [1.1, 2.2] | Floats |\n| 9 | [None, None, 1, None] | [None, 1] | None values |\n| 10 | [\"A\", \"a\"] | [\"A\", \"a\"] | Case sensitivity |\n| 11 | [5, 6, 5, 6, 5, 6] | [5, 6] | Repeating pairs |\n| 12 | [10, 20, 10, 30, 20, 30] | [10, 20, 30] | Multiple repeats |\n| 13 | [\"x\"] | [\"x\"] | Single element |\n| 14 | [\"x\", \"x\", \"x\", \"y\"] | [\"x\", \"y\"] | First occurrence only |\n| 15 | [\"z\", \"y\", \"x\", \"z\", \"y\"] | [\"z\", \"y\", \"x\"] | Complex repeat |\n",
  "example": {
    "input": "[1, 2, 2, 3, 1]",
    "output": "[1, 2, 3]",
    "explanation": "Only the first occurrences of each element are retained."
  },
  "answer": "lst = input().split()\n\ndef remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\nresult = remove_duplicates(lst)\nprint(' '.join(result))"
}



  ]
}