{
  "questions": [
    {
      "id": 1,
      "title": "Is Palindrome",
      "description": "Check if the given string is a palindrome.\n\n| Test Case | Input                             | Expected Output | Notes                                      |\n|-----------|-----------------------------------|------------------|--------------------------------------------|\n| 1         | \"racecar\"                         | true             | Normal case                                |\n| 2         | \"hello\"                           | false            | Not a palindrome                           |\n| 3         | \"madam\"                           | true             | Palindrome                                 |\n| 4         | \"A man a plan a canal Panama\"     | true             | Ignore case/space                          |\n| 5         | \"ab\"                              | false            | Not a palindrome                           |\n| 6         | \"abba\"                            | true             | Palindrome                                 |\n| 7         | \"abcba\"                           | true             | Palindrome                                 |\n| 8         | \"abccba\"                          | true             | Palindrome                                 |\n| 9         | \"\"                                | true             | Empty string                               |\n| 10        | \"No lemon, no melon\"              | true             | Palindrome with punctuation                |\n| 11        | \"Step on no pets\"                 | true             | Palindrome with punctuation                |\n| 12        | \"Was it a car or a cat I saw?\"    | true             | Punctuation and case-insensitive           |\n| 13        | \"Eva, can I see bees in a cave?\"  | true             | Long with punctuation                      |\n| 14        | \"Mr. Owl ate my metal worm\"       | true             | Mixed case and spaces                      |\n| 15        | \"Able was I ere I saw Elba\"       | true             | Mixed case and spaces                      |\n| 16        | \"Never odd or even\"               | true             | Common palindrome phrase                   |\n| 17        | \"Madam In Eden I'm Adam\"          | true             | Case and punctuation insensitive           |\n| 18        | \"Yo, Banana Boy!\"                 | true             | Palindrome with symbols                    |\n| 19        | \"12321\"                           | true             | Numeric palindrome                         |\n| 20        | \"123456\"                          | false            | Non-palindrome numbers                     |\n| 21        | \"1a2\"                              | false            | Near palindrome but not                    |\n| 22        | \"a.\"                               | true             | Single letter with punctuation             |\n| 23        | \"Red roses run no risk, sir, on Nurse's order\" | true   | Complex sentence, ignore punctuation       |\n| 24        | \"abccbx\"                           | false            | One character off                          |\n| 25        | \"   \"                              | true             | Only spaces                                |\n| 26        | \"   a   \"                          | true             | Spaces around a character                  |\n| 27        | \"A Toyota's a Toyota\"             | true             | Palindrome with apostrophe                 |\n| 28        | \"Madam, in Eden, I'm Adam\"        | true             | With commas                                |\n| 29        | \"Was it Eliot's toilet I saw?\"    | true             | Apostrophe and question mark               |\n| 30        | \"Do geese see God?\"               | true             | Phrase with punctuation                    |\n| 31        | \"√âsope reste ici et se repose\"    | true             | French phrase with accents                 |\n| 32        | \"„ÅÇ„ÅÑ„ÅÑ„ÅÇ\"                         | true             | Japanese palindrome                        |\n| 33        | \"üôÇüôÉüôÇ\"                            | true             | Emoji palindrome                           |\n| 34        | \"üôÇüôÉüòê\"                            | false            | Not a palindrome with emojis               |\n| 35        | \"abcbaabcba\"                      | false            | Repeating pattern but not mirrored         |\n| 36        | \"Taco cat\"                         | true             | Famous case-insensitive palindrome         |\n| 37        | \"Cigar? Toss it in a can. It is so tragic.\" | true  | Long sentence with punctuation            |\n| 38        | \"   R   A   C   E   C   A   R   \"  | true             | Spaced out characters                      |\n| 39        | \"noon\"                             | true             | Common simple palindrome                   |\n| 40        | \"notpalindrome\"                   | false            | Control case                               |",
      "example": {
        "input": "\"madam\"",
        "output": "true"
      },
      "answer": "def is_palindrome(s):\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return cleaned == cleaned[::-1]"
    },
    {
      "id": 2,
      "title": "Check Anagram",
      "description": "Check whether two strings are anagrams of each other.\n\n| Test Case | Input 1       | Input 2       | Expected Output | Notes                                |\n|-----------|----------------|----------------|------------------|--------------------------------------|\n| 1         | \"listen\"       | \"silent\"       | true             | Basic anagram                       |\n| 2         | \"hello\"        | \"bello\"        | false            | Different letters                   |\n| 3         | \"triangle\"     | \"integral\"     | true             | Same letters                        |\n| 4         | \"aabbcc\"       | \"abcabc\"       | true             | Rearranged                          |\n| 5         | \"rat\"          | \"car\"          | false            | Not anagram                         |\n| 6         | \"\"             | \"\"             | true             | Both empty                          |\n| 7         | \"a\"            | \"a\"            | true             | Single letter                       |\n| 8         | \"ab\"           | \"ba\"           | true             | Two letters                         |\n| 9         | \"abc\"          | \"cba\"          | true             | Simple reverse                      |\n| 10        | \"god\"          | \"dog\"          | true             | Classic anagram                     |\n| 11        | \"evil\"         | \"vile\"         | true             | Common anagram                     |\n| 12        | \"dusty\"        | \"study\"        | true             | Rearranged                          |\n| 13        | \"school master\"| \"the classroom\"| true             | With spaces                         |\n| 14        | \"Debit card\"   | \"Bad credit\"   | true             | Case and space insensitive          |\n| 15        | \"Astronomer\"   | \"Moon starer\"  | true             | Famous example                      |\n| 16        | \"The eyes\"     | \"They see\"     | true             | Ignore case and spaces              |\n| 17        | \"conversation\" | \"voices rant on\"| true            | Ignore space                        |\n| 18        | \"dormitory\"    | \"dirty room\"   | true             | Space handling                      |\n| 19        | \"Eleven plus two\"| \"Twelve plus one\"| true         | Long phrase                         |\n| 20        | \"aabbcc\"       | \"aabbc\"        | false            | One char missing                    |\n| 21        | \"abcd\"         | \"abce\"         | false            | One different letter                |\n| 22        | \"   \"          | \"\"             | true             | Whitespace ignored                  |\n| 23        | \"Night\"        | \"Thing\"        | true             | Case insensitive                    |\n| 24        | \"cinema\"       | \"iceman\"       | true             | Classic anagram                     |\n| 25        | \"fluster\"      | \"restful\"      | true             | Rearranged                          |\n| 26        | \"conversation\" | \"conservation\" | true             | Rearranged                          |\n| 27        | \"aacc\"         | \"ccaa\"         | true             | Character counts match              |\n| 28        | \"aacc\"         | \"acca\"         | true             | Different order                     |\n| 29        | \"A\"            | \"a\"            | true             | Case ignored                        |\n| 30        | \"abcd123\"      | \"321dcba\"      | true             | Alphanumeric                        |\n| 31        | \"abc!\"         | \"c!ba\"         | true             | Punctuation kept                    |\n| 32        | \"a!b@c\"        | \"c@b!a\"        | true             | Punctuation reordered                |\n| 33        | \"12345\"        | \"54321\"        | true             | Numbers only                        |\n| 34        | \"üôÇüôÉ\"          | \"üôÉüôÇ\"          | true             | Emojis                              |\n| 35        | \"üôÇüôÉüôÉ\"         | \"üôÇüôÉüôÇ\"         | false            | Emojis differ                       |\n| 36        | \"abc d\"        | \"cab d\"        | true             | Spaces within                       |\n| 37        | \"long string\"  | \"string long\"  | true             | Long word pair                      |\n| 38        | \"test\"         | \"sett\"         | true             | Rearranged letters                  |\n| 39        | \"looped\"       | \"poodle\"       | false            | Letters don't match                 |\n| 40        | \"stop\"         | \"pots\"         | true             | Common example                      |",
      "example": {
        "input": [
          "listen",
          "silent"
        ],
        "output": "true"
      },
      "answer": "def is_anagram(s1, s2):\n    from collections import Counter\n    s1_clean = ''.join(c.lower() for c in s1 if c.isalnum())\n    s2_clean = ''.join(c.lower() for c in s2 if c.isalnum())\n    return Counter(s1_clean) == Counter(s2_clean)"
    },
    {
      "id": 3,
      "title": "Longest Common Prefix",
      "description": "Find the longest common prefix among an array of strings.\n\n| Test Case | Input                              | Expected Output | Notes                              |\n|-----------|-------------------------------------|------------------|------------------------------------|\n| 1         | [\"flower\",\"flow\",\"flight\"]          | \"fl\"             | Common prefix exists              |\n| 2         | [\"dog\",\"racecar\",\"car\"]             | \"\"               | No common prefix                  |\n| 3         | [\"interstellar\", \"internet\"]        | \"inter\"          | Partial prefix                    |\n| 4         | [\"apple\"]                            | \"apple\"          | Single string                     |\n| 5         | []                                   | \"\"               | Empty list                        |\n| 6         | [\"abc\",\"abcd\",\"ab\"]                 | \"ab\"             | Varying lengths                   |\n| 7         | [\"a\",\"a\",\"a\"]                        | \"a\"              | All same single character         |\n| 8         | [\"a\",\"b\"]                            | \"\"               | No common                         |\n| 9         | [\"prefix\",\"prefixes\"]                | \"prefix\"         | One is full prefix of another     |\n| 10        | [\"test\",\"testing\",\"tester\"]         | \"test\"           | Partial matches                   |\n| 11        | [\"car\",\"carpool\",\"carpet\"]          | \"car\"            | Common root                       |\n| 12        | [\"same\",\"same\",\"same\"]              | \"same\"           | All same word                     |\n| 13        | [\"abcde\",\"abcfgh\"]                   | \"abc\"            | Prefix diverges after 3 letters   |\n| 14        | [\"x\"]                                | \"x\"              | Single letter                     |\n| 15        | [\"x\",\"xy\",\"xyz\"]                    | \"x\"              | Incremental growth                |\n| 16        | [\"flower\",\"flow\",\"flock\"]           | \"flo\"            | Similar words                     |\n| 17        | [\"abc\",\"\"]                            | \"\"               | One empty string                  |\n| 18        | [\"\"]                                 | \"\"               | One empty string in list          |\n| 19        | [\"abc\",\"abc\",\"abcd\"]                | \"abc\"            | 2 exact matches                   |\n| 20        | [\"1234\",\"123\",\"12345\"]               | \"123\"            | Numeric prefixes                  |\n| 21        | [\"üôÇabc\",\"üôÇab\"]                      | \"üôÇab\"           | Unicode handling                  |\n| 22        | [\"longest\",\"longer\",\"long\"]         | \"long\"           | Subset prefix                     |\n| 23        | [\"a\",\"ab\",\"abc\"]                    | \"a\"              | Increasing in size                |\n| 24        | [\"space bar\",\"space age\"]            | \"space \"         | Include space                     |\n| 25        | [\"  abc\",\"  ab\"]                      | \"  ab\"           | Leading spaces                    |\n| 26        | [\"A\",\"a\"]                            | \"\"               | Case-sensitive                    |\n| 27        | [\"lower\",\"LOWER\"]                    | \"\"               | Case-sensitive                    |\n| 28        | [\"pre\",\"prefix\",\"preface\"]           | \"pre\"            | Common prefix                     |\n| 29        | [\"coexist\",\"coed\",\"coer\"]           | \"coe\"            | Short common part                 |\n| 30        | [\"test1\",\"test2\"]                    | \"test\"           | Ends diverge                      |\n| 31        | [\"abc123\",\"abc\"]                     | \"abc\"            | Shorter prefix                    |\n| 32        | [\"true\",\"truly\",\"truck\"]             | \"tru\"            | Partial match                     |\n| 33        | [\"‚Äúquote\",\"‚Äúquoted\"]                 | \"‚Äúquote\"         | Special characters                |\n| 34        | [\"\",\"\",\"a\"]                           | \"\"               | Two empty                         |\n| 35        | [\"zzzz\",\"zzzx\"]                       | \"zzz\"            | Close match                       |\n| 36        | [\"ab\",\"cd\"]                           | \"\"               | No match                          |\n| 37        | [\"\" for _ in range(5)]               | \"\"               | All empty                         |\n| 38        | [\"same\", \"samee\"]                    | \"same\"           | Close match                       |\n| 39        | [\"end.\",\"end!\"]                       | \"end\"            | Symbols at end                    |\n| 40        | [\"123abc\",\"123a\",\"123\"]              | \"123\"            | Prefix of numbers/letters         |",
      "example": {
        "input": [
          "flower",
          "flow",
          "flight"
        ],
        "output": "fl"
      },
      "answer": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix"
    },
    {
      "id": 4,
      "title": "Reverse Words in a String",
      "description": "Reverse the words in a given string. Remove extra spaces.\n\n| Test Case | Input                            | Expected Output              | Notes                              |\n|-----------|----------------------------------|-------------------------------|------------------------------------|\n| 1         | \"the sky is blue\"               | \"blue is sky the\"             | Normal case                        |\n| 2         | \"  hello world  \"               | \"world hello\"                 | Leading/trailing spaces            |\n| 3         | \"a good   example\"             | \"example good a\"              | Multiple spaces                    |\n| 4         | \"Bob Loves Alice\"              | \"Alice Loves Bob\"             | Proper nouns                       |\n| 5         | \"Alice does not even like bob\"| \"bob like even not does Alice\"| Long input                         |\n| 6         | \"\"                             | \"\"                            | Empty string                       |\n| 7         | \" \"                            | \"\"                            | Only space                         |\n| 8         | \"    a    b  c   \"              | \"c b a\"                        | Random spaces                      |\n| 9         | \"a\"                            | \"a\"                            | One word                           |\n| 10        | \"to be or not to be\"           | \"be to not or be to\"          | Repetition                         |\n| 11        | \"Let's go!\"                    | \"go! Let's\"                   | Punctuation                        |\n| 12        | \"good morning\"                | \"morning good\"                | Two words                          |\n| 13        | \"morning good\"                | \"good morning\"                | Reversed case                      |\n| 14        | \"Word\"                         | \"Word\"                        | Single word                        |\n| 15        | \"one,two,three\"               | \"one,two,three\"               | No space between punctuation       |\n| 16        | \"hello üòä world\"              | \"world üòä hello\"              | Emoji                              |\n| 17        | \"üòä\"                           | \"üòä\"                          | Single emoji                       |\n| 18        | \"one  two   three\"            | \"three two one\"               | Irregular spaces                   |\n| 19        | \"  space before\"              | \"before space\"                | Leading spaces                     |\n| 20        | \"after space   \"              | \"space after\"                 | Trailing spaces                    |\n| 21        | \"a b c d e f g\"               | \"g f e d c b a\"               | Long sequence                      |\n| 22        | \"    \"                         | \"\"                            | Only spaces                        |\n| 23        | \"newline\\nseparated\"          | \"newline\\nseparated\"          | No actual space                    |\n| 24        | \"tab\\tseparated\"              | \"tab\\tseparated\"              | No actual space                    |\n| 25        | \"  mix   of \\n and \\t  \"      | \"\\t and \\n of mix\"            | String literals                    |\n| 26        | \"reverse! this! now!\"          | \"now! this! reverse!\"         | Punctuation handling               |\n| 27        | \"123 abc\"                     | \"abc 123\"                     | Alphanumeric                       |\n| 28        | \"abc 123\"                     | \"123 abc\"                     | Reverse order                      |\n| 29        | \"OneWord\"                     | \"OneWord\"                     | No space                           |\n| 30        | \"Word  \"                      | \"Word\"                        | Extra space                        |\n| 31        | \" Word\"                       | \"Word\"                        | Leading space                      |\n| 32        | \"a  b  c\"                      | \"c b a\"                        | Triple split                       |\n| 33        | \"this is\"                     | \"is this\"                     | Two word reverse                   |\n| 34        | \"double  space\"               | \"space double\"                | Double space                       |\n| 35        | \"long     space     here\"     | \"here space long\"             | Multiple spaces                    |\n| 36        | \"symbols #! are ignored\"      | \"ignored are #! symbols\"      | Special characters remain          |\n| 37        | \"why? what?\"                  | \"what? why?\"                  | Reversal                           |\n| 38        | \"UpperCase Words\"             | \"Words UpperCase\"             | Case matters                       |\n| 39        | \"mixed CASE\"                  | \"CASE mixed\"                  | Case preserved                     |\n| 40        | \"odd  even  words\"            | \"words even odd\"              | Order switch                       |",
      "example": {
        "input": "the sky is blue",
        "output": "blue is sky the"
      },
      "answer": "def reverse_words(s):\n    return ' '.join(s.strip().split()[::-1])"
    },
    {
      "id": 5,
      "title": "Remove Duplicate Characters",
      "description": "Remove duplicate characters, keeping the first occurrence.\n\n| Test Case | Input          | Expected Output | Notes                        |\n|-----------|----------------|------------------|------------------------------|\n| 1         | \"ababac\"       | \"abc\"           | Removes duplicates           |\n| 2         | \"hello\"        | \"helo\"          | Removes duplicates           |\n| 3         | \"abc\"          | \"abc\"           | No duplicates                |\n| 4         | \"\"             | \"\"              | Empty string                 |\n| 5         | \"aaaa\"         | \"a\"             | Removes duplicates           |\n| 6         | \"aabbccdd\"     | \"abcd\"          | Removes duplicates           |\n| 7         | \"mississippi\"  | \"misp\"          | Removes duplicates           |\n| 8         | \"123123\"       | \"123\"           | Removes duplicates           |\n| 9         | \"ABCA\"         | \"ABC\"           | Case-sensitive               |\n| 10        | \"zxyzzxy\"      | \"zxy\"           | Removes duplicates           |\n| 11        | \"@@!!##\"       | \"@!#\"           | Removes duplicates           |\n| 12        | \"abcdefgh\"     | \"abcdefgh\"      | No duplicates                |\n| 13        | \"abacabad\"     | \"abcad\"         | Removes duplicates           |\n| 14        | \"aaabbbccc\"    | \"abc\"           | Removes duplicates           |\n| 15        | \"aaaabbbbcccc\" | \"abc\"           | Removes duplicates           |\n| 16        | \"abcabcabc\"    | \"abc\"           | Removes duplicates           |\n| 17        | \"12345\"        | \"12345\"         | No duplicates                |\n| 18        | \"ppqqrrsstt\"   | \"pqrst\"         | Removes duplicates           |\n| 19        | \"xyzxyz\"       | \"xyz\"           | Removes duplicates           |\n| 20        | \"!!!abc!!!\"    | \"!abc\"          | Removes duplicates           |\n| 21        | \"thequickfox\"   | \"thequickfox\"    | No duplicates                |\n| 22        | \"firstfirst\"    | \"first\"         | Removes duplicates           |\n| 23        | \"abcdefg\"       | \"abcdefg\"       | No duplicates                |\n| 24        | \"abccba\"        | \"abc\"           | Removes duplicates           |\n| 25        | \"aabbcc\"        | \"abc\"           | Removes duplicates           |\n| 26        | \"aaabbbcccaaa\"  | \"abc\"           | Removes duplicates           |\n| 27        | \"xyzyx\"         | \"xy\"            | Removes duplicates           |\n| 28        | \"appleorange\"   | \"apleorng\"      | Removes duplicates           |\n| 29        | \"helloworld\"    | \"heloworld\"     | Removes duplicates           |\n| 30        | \"abracadabra\"   | \"abrcd\"         | Removes duplicates           |\n| 31        | \"popcorn\"       | \"pocnr\"         | Removes duplicates           |\n| 32        | \"looploop\"      | \"lop\"           | Removes duplicates           |\n| 33        | \"123abc123\"     | \"123abc\"        | Removes duplicates           |\n| 34        | \"zzyyxx\"        | \"zyx\"           | Removes duplicates           |\n| 35        | \"keepitreal\"    | \"keprital\"      | Removes duplicates           |\n| 36        | \"abcdefabcdef\"  | \"abcdef\"        | Removes duplicates           |\n| 37        | \"abcabcabcabc\"  | \"abc\"           | Removes duplicates           |\n| 38        | \"onlyunique\"    | \"onlyunique\"    | No duplicates                |\n| 39        | \"aaaaaa\"        | \"a\"             | Removes duplicates           |\n| 40        | \"ilovecoding\"   | \"ilovecding\"    | Removes duplicates           |",
      "example": {
        "input": "\"mississippi\"",
        "output": "\"misp\""
      },
      "answer": "def remove_duplicates(s):\n    seen = set()\n    result = []\n    for ch in s:\n        if ch not in seen:\n            seen.add(ch)\n            result.append(ch)\n    return ''.join(result)"
    },
    {
      "id": 6,
      "title": "Longest Substring Without Repeating Characters",
      "description": "Find the length of the longest substring without repeating characters.\n\n| Test Case | Input         | Expected Output | Notes                                      |\n|-----------|---------------|------------------|--------------------------------------------|\n| 1         | \"abcabcbb\"    | 3               | \"abc\" is the longest substring             |\n| 2         | \"bbbbb\"       | 1               | \"b\" is the longest substring               |\n| 3         | \"pwwkew\"      | 3               | \"wke\" is the longest substring             |\n| 4         | \"\"            | 0               | Empty string                               |\n| 5         | \"abcdefg\"     | 7               | Whole string is unique                     |\n| 6         | \"abba\"        | 2               | \"ab\" or \"ba\"                               |\n| 7         | \"dvdf\"        | 3               | \"vdf\"                                      |\n| 8         | \"anviaj\"      | 5               | \"nviaj\"                                    |\n| 9         | \"tmmzuxt\"     | 5               | \"mzuxt\"                                    |\n| 10        | \"aab\"         | 2               | \"ab\"                                       |\n| 11        | \"abcdeabcde\"  | 5               | \"abcde\" is the longest substring           |\n| 12        | \"abcdabcd\"    | 4               | \"abcd\" is the longest substring            |\n| 13        | \"aabbccddeeff\" | 2               | Repeating letters                           |\n| 14        | \"wxyz\"         | 4               | No repeats, the entire string               |\n| 15        | \"aaabbbaaa\"    | 2               | \"ab\" is the longest substring              |\n| 16        | \"bbbbbbbbb\"    | 1               | Only one unique character                   |\n| 17        | \"xyzxyzxyz\"    | 3               | \"xyz\" is the longest substring             |\n| 18        | \"abcdefabcdef\" | 6               | \"abcdef\" is the longest substring          |\n| 19        | \"pqrstpqr\"     | 5               | \"pqrst\" is the longest substring           |\n| 20        | \"javaprogram\"  | 8               | \"javaprogr\" is the longest substring       |\n| 21        | \"kkllmmnn\"     | 2               | Repeating pairs                             |\n| 22        | \"qwerty\"       | 6               | No repeating characters                     |\n| 23        | \"sunnyday\"     | 8               | No repeating characters                     |\n| 24        | \"abbaabbaa\"    | 2               | \"ab\" is the longest substring              |\n| 25        | \"xxyyzz\"       | 3               | \"xyz\" is the longest substring             |\n| 26        | \"aaaaaaa\"      | 1               | Single repeated character                    |\n| 27        | \"turingmachine\" | 10              | \"turingmach\" is the longest substring      |\n| 28        | \"xyzzzy\"       | 3               | \"xyz\" is the longest substring             |\n| 29        | \"abcabcabc\"    | 3               | \"abc\" is the longest substring             |\n| 30        | \"qwertyuiop\"   | 10              | Whole string is unique                      |\n| 31        | \"world\"        | 5               | No repeats, the entire string               |\n| 32        | \"gfg\"          | 3               | Entire string is unique                     |\n| 33        | \"mnbvcxz\"      | 7               | No repeats, the entire string               |\n| 34        | \"abcdabc\"      | 4               | \"abcd\" is the longest substring            |\n| 35        | \"dabbc\"        | 3               | \"abc\" is the longest substring             |\n| 36        | \"racecar\"      | 3               | \"rac\" or \"car\"                            |\n| 37        | \"lionking\"     | 8               | No repeating characters                     |\n| 38        | \"redbluegreen\" | 6               | \"redblu\" is the longest substring          |\n| 39        | \"abracadabra\"  | 4               | \"abrc\" is the longest substring            |\n| 40        | \"apple\"        | 5               | No repeats, the entire string               |",
      "example": {
        "input": "\"pwwkew\"",
        "output": "3"
      },
      "answer": "def length_of_longest_substring(s):\n    char_index = {}\n    left = 0\n    max_length = 0\n    for right, ch in enumerate(s):\n        if ch in char_index and char_index[ch] >= left:\n            left = char_index[ch] + 1\n        char_index[ch] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length"
    },
    {
      "id": 7,
      "title": "Check if String is Substring",
      "description": "Given two strings s1 and s2, determine if s2 is a substring of s1. Return 'True' if s2 is a substring of s1, otherwise return 'False'.\n\n| Test Case | Input s1          | Input s2    | Expected Output | Notes                         |\n|-----------|-------------------|-------------|-----------------|-------------------------------|\n| 1         | \"hello\"          | \"ll\"       | True            | \"ll\" is in \"hello\"         |\n| 2         | \"world\"          | \"or\"       | True            | \"or\" is in \"world\"         |\n| 3         | \"abcde\"          | \"xyz\"      | False           | \"xyz\" not in \"abcde\"       |\n| 4         | \"aabbcc\"         | \"bc\"       | True            | \"bc\" is in \"aabbcc\"        |\n| 5         | \"testcase\"       | \"case\"     | True            | \"case\" is in \"testcase\"    |\n| 6         | \"python\"         | \"py\"       | True            | \"py\" is in \"python\"        |\n| 7         | \"substring\"      | \"string\"   | True            | \"string\" is in \"substring\" |\n| 8         | \"abcdef\"         | \"def\"      | True            | \"def\" is in \"abcdef\"       |\n| 9         | \"xyzxyz\"         | \"abc\"      | False           | \"abc\" not in \"xyzxyz\"      |\n| 10        | \"a\"              | \"a\"        | True            | \"a\" is in \"a\"              |",
      "example": {
        "input": "\"hello\", \"ll\"",
        "output": "True"
      },
      "answer": "def is_substring(s1, s2):\n    return str(s2 in s1)\n\ns1 = input().strip()\ns2 = input().strip()\nprint(is_substring(s1, s2))"
    },
    {
      "id": 8,
      "title": "String Compression",
      "description": "Given an array of characters, compress it using the counts of repeated characters.\n\n| Test Case | Input            | Expected Output  | Notes                         |\n|-----------|------------------|------------------|-------------------------------|\n| 1         | ['a', 'a', 'b', 'b', 'c', 'c', 'c'] | ['a', '2', 'b', '2', 'c', '3'] | Normal case                  |\n| 2         | ['a', 'a', 'a']   | ['a', '3']       | Only one repeated character  |\n| 3         | ['a', 'b', 'c']   | ['a', 'b', 'c']  | No compression needed        |\n| 4         | ['a', 'a', 'a', 'b', 'b', 'a', 'a'] | ['a', '3', 'b', '2', 'a', '2'] | Mixed characters              |\n| 5         | ['z']             | ['z']            | Single character             |\n| 6         | ['a', 'b', 'b', 'b', 'c', 'c', 'c'] | ['a', 'b', '3', 'c', '3'] | Repeated characters          |\n| 7         | ['x', 'x', 'x', 'x', 'x', 'x'] | ['x', '6'] | Single repeated character    |\n| 8         | ['a', 'a', 'a', 'a', 'a'] | ['a', '5']       | Multiple identical chars    |\n| 9         | []                | []               | Empty array                 |\n| 10        | ['a', 'b', 'c', 'a', 'a'] | ['a', '1', 'b', '1', 'c', '1', 'a', '2'] | Alternating characters       |",
      "example": {
        "input": "['a', 'a', 'b', 'b', 'c', 'c', 'c']",
        "output": "['a', '2', 'b', '2', 'c', '3']"
      },
      "answer": "def compress(chars):\n    write = 0\n    read = 0\n    while read < len(chars):\n        char = chars[read]\n        count = 1\n        while read + 1 < len(chars) and chars[read + 1] == char:\n            read += 1\n            count += 1\n        chars[write] = char\n        write += 1\n        if count > 1:\n            for c in str(count):\n                chars[write] = c\n                write += 1\n        read += 1\n    return chars[:write]"
    },
    {
      "id": 9,
      "title": "Valid Anagram",
      "description": "Determine if one string is an anagram of another.\n\n| Test Case | Input A     | Input B     | Expected Output | Notes                        |\n|-----------|-------------|-------------|------------------|------------------------------|\n| 1         | \"anagram\"   | \"nagaram\"  | true             | Both are anagrams            |\n| 2         | \"rat\"       | \"car\"      | false            | Not an anagram               |\n| 3         | \"hello\"     | \"ollhe\"    | true             | Both are anagrams            |\n| 4         | \"abc\"       | \"cba\"      | true             | Both are anagrams            |\n| 5         | \"a\"         | \"b\"        | false            | Single characters not matching |\n| 6         | \"abcabc\"    | \"cbaabc\"   | true             | Both are anagrams            |\n| 7         | \"xyz\"       | \"zyx\"      | true             | Both are anagrams            |\n| 8         | \"abcd\"      | \"abdc\"     | true             | Both are anagrams            |\n| 9         | \"abcdefg\"   | \"gfedcba\"  | true             | Both are anagrams            |\n| 10        | \"pqrst\"     | \"qrstp\"    | true             | Both are anagrams            |\n| 11        | \"abcde\"     | \"edcba\"    | true             | Both are anagrams            |\n| 12        | \"abc\"       | \"acb\"      | true             | Both are anagrams            |\n| 13        | \"apple\"     | \"pale\"     | false            | Different letter counts      |\n| 14        | \"night\"     | \"thing\"    | true             | Both are anagrams            |\n| 15        | \"kitten\"    | \"tinket\"   | false            | Different letter counts      |\n| 16        | \"abcdef\"    | \"abcfde\"   | false            | Different number of letters  |\n| 17        | \"moon\"      | \"mono\"     | true             | Both are anagrams            |\n| 18        | \"hello\"     | \"heoll\"    | true             | Both are anagrams            |\n| 19        | \"madam\"     | \"adamm\"    | true             | Both are anagrams            |\n| 20        | \"laptop\"    | \"tpalto\"   | true             | Both are anagrams            |\n| 21        | \"race\"      | \"care\"     | true             | Both are anagrams            |\n| 22        | \"silent\"    | \"listen\"   | true             | Both are anagrams            |\n| 23        | \"hello\"     | \"ellho\"    | true             | Both are anagrams            |\n| 24        | \"book\"      | \"obok\"     | true             | Both are anagrams            |\n| 25        | \"faded\"     | \"defad\"    | true             | Both are anagrams            |\n| 26        | \"rot\"       | \"tor\"      | true             | Both are anagrams            |\n| 27        | \"cold\"      | \"clod\"     | true             | Both are anagrams            |\n| 28        | \"miss\"      | \"sims\"     | true             | Both are anagrams            |\n| 29        | \"jumps\"     | \"spjum\"    | true             | Both are anagrams            |\n| 30        | \"snow\"      | \"owns\"     | true             | Both are anagrams            |\n| 31        | \"team\"      | \"mate\"     | true             | Both are anagrams            |\n| 32        | \"code\"      | \"ocde\"     | true             | Both are anagrams            |\n| 33        | \"listen\"    | \"silent\"   | true             | Both are anagrams            |\n| 34        | \"finder\"    | \"friend\"   | true             | Both are anagrams            |\n| 35        | \"alter\"     | \"later\"    | true             | Both are anagrams            |\n| 36        | \"test\"      | \"tset\"     | true             | Both are anagrams            |\n| 37        | \"action\"    | \"canto\"    | true             | Both are anagrams            |\n| 38        | \"sort\"      | \"rots\"     | true             | Both are anagrams            |\n| 39        | \"greet\"     | \"teerg\"    | true             | Both are anagrams            |\n| 40        | \"knee\"      | \"keen\"     | true             | Both are anagrams            |",
      "example": {
        "input": "\"anagram\", \"nagaram\"",
        "output": "true"
      },
      "answer": "def is_anagram(a, b):\n    return sorted(a) == sorted(b)"
    },
    {
      "id": 10,
      "title": "Palindrome Permutation",
      "description": "Given a string, determine if a permutation of the string could form a palindrome.\n\n| Test Case | Input        | Expected Output | Notes                         |\n|-----------|--------------|------------------|-------------------------------|\n| 1         | \"civic\"     | true             | \"civic\" itself is a palindrome |\n| 2         | \"ivicc\"     | true             | Can be rearranged as \"civic\" |\n| 3         | \"hello\"     | false            | Cannot be rearranged to form a palindrome |\n| 4         | \"racecar\"   | true             | Already a palindrome          |\n| 5         | \"abcde\"     | false            | Cannot be rearranged to form a palindrome |\n| 6         | \"aabbcc\"    | true             | Can be rearranged as \"abcabc\" |\n| 7         | \"abcabcba\"  | true             | Palindrome as is              |\n| 8         | \"aabbbb\"    | true             | Can be rearranged to form a palindrome |\n| 9         | \"aa\"        | true             | Already a palindrome          |\n| 10        | \"abcd\"      | false            | Cannot form a palindrome      |\n| 11        | \"a\"         | true             | Single character palindrome   |\n| 12        | \"bbccbb\"    | true             | Palindrome as is              |\n| 13        | \"bbccc\"     | false            | Cannot form a palindrome      |\n| 14        | \"xxyyzz\"    | true             | Can be rearranged as \"xyzzyx\" |\n| 15        | \"xyzzyx\"    | true             | Palindrome as is              |\n| 16        | \"abbcbba\"   | true             | Can be rearranged to form a palindrome |\n| 17        | \"xyx\"       | true             | Already a palindrome          |\n| 18        | \"abbac\"     | true             | Can be rearranged to form a palindrome |\n| 19        | \"abcabc\"    | true             | Can be rearranged to form a palindrome |\n| 20        | \"aabbccdd\"  | true             | Can be rearranged as \"abcdabcd\" |\n| 21        | \"abbacc\"    | true             | Can be rearranged to form a palindrome |\n| 22        | \"abcdeff\"   | false            | Cannot be rearranged to form a palindrome |\n| 23        | \"abcdefg\"   | false            | Cannot form a palindrome      |\n| 24        | \"bbbbcc\"    | true             | Can be rearranged as \"bbcb\"  |\n| 25        | \"jjjjjj\"    | true             | Already a palindrome          |\n| 26        | \"jjjjjjj\"   | true             | Palindrome as is              |\n| 27        | \"kxyzk\"     | true             | Already a palindrome          |\n| 28        | \"aaaaaaaaaaaa\" | true          | Long even length palindrome   |\n| 29        | \"abcabcabc\" | false            | Cannot form a palindrome      |\n| 30        | \"baabcc\"    | true             | Can be rearranged to form a palindrome |\n| 31        | \"abcdabcd\"  | true             | Already a palindrome          |\n| 32        | \"oovvxx\"    | true             | Can be rearranged to form a palindrome |\n| 33        | \"zzzxxz\"     | true            | Can be rearranged as a palindrome |\n| 34        | \"abbccccba\"  | true            | Already a palindrome         |\n| 35        | \"abcabcab\"   | false           | Cannot form a palindrome       |\n| 36        | \"cbbabbbc\"  | true             | Can be rearranged to form a palindrome |\n| 37        | \"aaccbbdd\"   | true            | Can be rearranged to form a palindrome |\n| 38        | \"abccbaab\"   | true            | Palindrome as is              |\n| 39        | \"dacefd\"     | false            | Cannot form a palindrome      |\n| 40        | \"bbccaa\"     | true             | Can be rearranged to form a palindrome |",
      "example": {
        "input": "\"civic\"",
        "output": "true"
      },
      "answer": "from collections import Counter\n\ndef can_permute_palindrome(s):\n    count = Counter(s)\n    odd_count = sum(1 for c in count.values() if c % 2 == 1)\n    return odd_count <= 1"
    },
    {
      "id": 11,
      "title": "Count and Say",
      "description": "The count-and-say sequence is a sequence of digit strings defined by the following rules:\n1. 1 is the first term.\n2. To generate the next term, we describe the previous term by the number of digits (count) followed by the digit itself.\n\n| Test Case | Input N   | Expected Output  | Notes                        |\n|-----------|-----------|------------------|------------------------------|\n| 1         | 1         | \"1\"              | The first term is \"1\"       |\n| 2         | 2         | \"11\"             | Describes \"1\"               |\n| 3         | 3         | \"21\"             | Describes \"11\"              |\n| 4         | 4         | \"1211\"           | Describes \"21\"              |\n| 5         | 5         | \"111221\"         | Describes \"1211\"            |\n| 6         | 6         | \"312211\"         | Describes \"111221\"          |\n| 7         | 7         | \"13112221\"       | Describes \"312211\"          |\n| 8         | 8         | \"1113213211\"     | Describes \"13112221\"        |\n| 9         | 9         | \"31131211131221\" | Describes \"1113213211\"      |\n| 10        | 10        | \"13211311123113112211\" | Describes \"31131211131221\" |\n| 11        | 11        | \"11131221133112132113212221\" | Describes \"13211311123113112211\" |\n| 12        | 12        | \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" | Describes \"11131221133112132113212221\" |\n| 13        | 13        | \"132113213221133112132113311211131221131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 14        | 14        | \"11131221133112132113212221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 15        | 15        | \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" | Describes \"132113213221133112132113311211131221131221\" |\n| 16        | 16        | \"132113213221133112132113311211131221131221131221\" | Describes \"11131221133112132113212221\" |\n| 17        | 17        | \"132113213221133112132113311211131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 18        | 18        | \"11131221133112132113212221\" | Describes \"11131221133112132113212221\" |\n| 19        | 19        | \"132113213221133112132113311211131221131221131221\" | Describes \"11131221133112132113212221\" |\n| 20        | 20        | \"312211322212221131221131221\" | Describes \"132113213221133112132113311211131221\" |\n| 21        | 21        | \"132113213221133112132113311211131221131221131221\" | Describes \"11131221133112132113212221\" |\n| 22        | 22        | \"132113213221133112132113311211131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 23        | 23        | \"11131221133112132113212221\" | Describes \"132113213221133112132113311211131221131221\" |\n| 24        | 24        | \"132113213221133112132113311211131221131221131221\" | Describes \"11131221133112132113212221\" |\n| 25        | 25        | \"311312111312211312113211231221232221232112311321322112111312211312111322212311322113212221\" | Describes \"11131221133112132113212221\" |\n| 26        | 26        | \"132113213221133112132113311211131221131221\" | Describes \"11131221133112132113212221\" |\n| 27        | 27        | \"132113213221133112132113311211131221131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 28        | 28        | \"11131221133112132113212221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 29        | 29        | \"132113213221133112132113311211131221131221131221\" | Describes \"11131221133112132113212221\" |\n| 30        | 30        | \"11131221133112132113212221\" | Describes \"11131221133112132113212221\" |\n| 31        | 31        | \"132113213221133112132113311211131221131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 32        | 32        | \"132113213221133112132113311211131221131221131221\" | Describes \"311311222113111231131112132112311321322112111312211312111322212311322113212221\" |\n| 33        | 33        | \"132113213221133112132113311211131221131221131221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 34        | 34        | \"132113213221133112132113311211131221131221\" | Describes \"132113213221133112132113311211131221131221\" |\n| 35        | 35        | \"11131221133112132113212221\" | Describes \"11131221133112132113212221\" |\n| 36        | 36        | \"132113213221133112132113311211131221131221131221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 37        | 37        | \"132113213221133112132113311211131221131221131221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 38        | 38        | \"132113213221133112132113311211131221131221131221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 39        | 39        | \"11131221133112132113212221\" | Describes \"132113213221133112132113311211131221131221131221\" |\n| 40        | 40        | \"132113213221133112132113311211131221131221131221\" | Describes \"132113213221133112132113311211131221131221131221\" |",
      "example": {
        "input": "4",
        "output": "\"1211\""
      },
      "answer": "def count_and_say(n):\n    if n == 1:\n        return \"1\"\n    prev = \"1\"\n    for _ in range(2, n + 1):\n        curr = \"\"\n        count = 1\n        for i in range(1, len(prev)):\n            if prev[i] == prev[i - 1]:\n                count += 1\n            else:\n                curr += str(count) + prev[i - 1]\n                count = 1\n        curr += str(count) + prev[-1]\n        prev = curr\n    return prev"
    },
    {
      "id": 12,
      "title": "Count Character Occurrences",
      "description": "Given a string s and a character c, count the number of occurrences of c in s. Return the count as an integer.\n\n| Test Case | Input s           | Input c | Expected Output | Notes                          |\n|-----------|-------------------|---------|-----------------|-------------------------------|\n| 1         | \"hello\"          | \"l\"     | 2               | \"l\" appears twice           |\n| 2         | \"world\"          | \"o\"     | 1               | \"o\" appears once            |\n| 3         | \"abcabc\"         | \"a\"     | 2               | \"a\" appears twice           |\n| 4         | \"testcase\"       | \"t\"     | 2               | \"t\" appears twice           |\n| 5         | \"python\"         | \"p\"     | 1               | \"p\" appears once            |\n| 6         | \"aaaaaa\"         | \"a\"     | 6               | \"a\" appears six times       |\n| 7         | \"xyzxyz\"         | \"w\"     | 0               | \"w\" does not appear         |\n| 8         | \"mississippi\"    | \"s\"     | 4               | \"s\" appears four times      |\n| 9         | \"banana\"         | \"n\"     | 2               | \"n\" appears twice           |\n| 10        | \"empty\"          | \"e\"     | 1               | \"e\" appears once            |",
      "example": {
        "input": "\"hello\", \"l\"",
        "output": "2"
      },
      "answer": "def count_char(s, c):\n    return s.count(c)\n\ns = input().strip()\nc = input().strip()\nprint(count_char(s, c))"
    },
    {
      "id": 13,
      "title": "Reverse String",
      "description": "Given a string s, return the string obtained by reversing s.\n\n| Test Case | Input s           | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | \"hello\"          | \"olleh\"        | Reversed string              |\n| 2         | \"world\"          | \"dlrow\"        | Reversed string              |\n| 3         | \"abc\"            | \"cba\"          | Reversed string              |\n| 4         | \"a\"              | \"a\"            | Single character             |\n| 5         | \"python\"         | \"nohtyp\"       | Reversed string              |\n| 6         | \"test\"           | \"tset\"         | Reversed string              |\n| 7         | \"xyzxyz\"         | \"zyxzyx\"       | Reversed string              |\n| 8         | \"aaa\"            | \"aaa\"          | Reversed palindrome          |\n| 9         | \"12345\"          | \"54321\"        | Reversed string              |\n| 10        | \"empty\"          | \"ytpme\"        | Reversed string              |",
      "example": {
        "input": "\"hello\"",
        "output": "\"olleh\""
      },
      "answer": "def reverse_string(s):\n    return s[::-1]\n\ns = input().strip()\nprint(reverse_string(s))"
    },
    {
      "id": 14,
      "title": "Check if String is Palindrome",
      "description": "Given a string s, determine if it is a palindrome (reads the same forward and backward). Return 'True' if it is a palindrome, otherwise return 'False'. Ignore case and non-alphanumeric characters.\n\n| Test Case | Input s           | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | \"racecar\"        | True            | Is a palindrome              |\n| 2         | \"hello\"          | False           | Not a palindrome             |\n| 3         | \"A man a plan a canal Panama\" | True | Palindrome after cleaning |\n| 4         | \"abc\"            | False           | Not a palindrome             |\n| 5         | \"aaa\"            | True            | Is a palindrome              |\n| 6         | \"12321\"          | True            | Is a palindrome              |\n| 7         | \"xyz\"            | False           | Not a palindrome             |\n| 8         | \"Madam\"          | True            | Case-insensitive palindrome  |\n| 9         | \"a\"              | True            | Single character palindrome  |\n| 10        | \"abca\"           | False           | Not a palindrome             |",
      "example": {
        "input": "\"racecar\"",
        "output": "True"
      },
      "answer": "def is_palindrome(s):\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return str(cleaned == cleaned[::-1])\n\ns = input().strip()\nprint(is_palindrome(s))"
    },
    {
      "id": 15,
      "title": "Capitalize First Letter",
      "description": "Given a string s, capitalize the first letter of the string and return the modified string. If the string is empty, return it as is.\n\n| Test Case | Input s           | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | \"hello\"          | \"Hello\"        | First letter capitalized     |\n| 2         | \"world\"          | \"World\"        | First letter capitalized     |\n| 3         | \"abc\"            | \"Abc\"          | First letter capitalized     |\n| 4         | \"a\"              | \"A\"            | Single letter capitalized    |\n| 5         | \"python\"         | \"Python\"       | First letter capitalized     |\n| 6         | \"\"               | \"\"             | Empty string                 |\n| 7         | \"xyzxyz\"         | \"Xyzxyz\"       | First letter capitalized     |\n| 8         | \"test\"           | \"Test\"         | First letter capitalized     |\n| 9         | \"123abc\"         | \"123abc\"       | Non-letter start unchanged   |\n| 10        | \"already\"        | \"Already\"      | First letter capitalized     |",
      "example": {
        "input": "\"hello\"",
        "output": "\"Hello\""
      },
      "answer": "def capitalize_first(s):\n    if not s:\n        return s\n    return s[0].upper() + s[1:]\n\ns = input().strip()\nprint(capitalize_first(s))"
    },
    {
      "id": 16,
      "title": "Word Break",
      "description": "Given a string s and a dictionary of words, determine if s can be segmented into a space-separated sequence of dictionary words.\n\n| Test Case | Input String | Input Dictionary | Expected Output | Notes                        |\n|-----------|--------------|------------------|-----------------|------------------------------|\n| 1         | \"leetcode\"  | [\"leet\", \"code\"] | true           | Can be segmented into 'leet' and 'code' |\n| 2         | \"applepenapple\" | [\"apple\", \"pen\"] | true           | Can be segmented into 'apple', 'pen', 'apple' |\n| 3         | \"catsandog\"  | [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"] | false          | Cannot be segmented         |\n| 4         | \"car\"        | [\"ca\", \"car\"]    | true           | Can be segmented into 'ca' and 'r' |\n| 5         | \"aaaaaaa\"    | [\"aaa\", \"aaaa\"]  | true           | Can be segmented into repeated 'aaa' and 'aaaa' |\n| 6         | \"babab\"      | [\"ba\", \"b\", \"ab\"] | true           | Can be segmented into 'b', 'ab', 'ab' |\n| 7         | \"abcd\"       | [\"a\", \"ab\", \"cd\"] | false          | Cannot be segmented         |\n| 8         | \"applepie\"   | [\"apple\", \"pie\"] | true           | Can be segmented into 'apple' and 'pie' |\n| 9         | \"dogcat\"     | [\"dog\", \"cat\"]   | true           | Can be segmented into 'dog' and 'cat' |\n| 10        | \"catsanddogs\" | [\"cats\", \"and\", \"dog\", \"sand\"] | true           | Can be segmented into 'cats', 'and', 'dog', 'sand' |\n| 11        | \"helloworld\" | [\"hello\", \"world\"] | true           | Can be segmented into 'hello' and 'world' |\n| 12        | \"ilovecoding\" | [\"i\", \"love\", \"coding\"] | true           | Can be segmented into 'i', 'love', 'coding' |\n| 13        | \"hellohello\" | [\"hello\"]         | true           | Can be segmented into 'hello' and 'hello' |\n| 14        | \"applepieapple\" | [\"apple\", \"pie\"] | true           | Can be segmented into 'apple', 'pie', 'apple' |\n| 15        | \"abcdef\"     | [\"ab\", \"abc\", \"cd\", \"def\"] | true           | Can be segmented into 'ab', 'cd', 'ef' |\n| 16        | \"hackthecode\" | [\"hack\", \"the\", \"code\"] | true           | Can be segmented into 'hack', 'the', 'code' |\n| 17        | \"world\"      | [\"word\", \"hello\"] | false          | Cannot be segmented         |\n| 18        | \"wordsandmore\" | [\"words\", \"and\", \"more\"] | true           | Can be segmented into 'words', 'and', 'more' |\n| 19        | \"helloworldhello\" | [\"hello\", \"world\"] | true           | Can be segmented into 'hello', 'world', 'hello' |\n| 20        | \"thisisacooltest\" | [\"this\", \"is\", \"a\", \"cool\", \"test\"] | true           | Can be segmented into 'this', 'is', 'a', 'cool', 'test' |\n| 21        | \"abcdabcd\"   | [\"abc\", \"d\"]     | true           | Can be segmented into 'abc', 'd', 'abc', 'd' |\n| 22        | \"applepen\"   | [\"apple\", \"pen\"] | true           | Can be segmented into 'apple' and 'pen' |\n| 23        | \"catsanddogs\" | [\"cat\", \"sand\", \"dog\"] | false          | Cannot be segmented         |\n| 24        | \"applepie\"   | [\"pie\", \"apple\"] | true           | Can be segmented into 'pie', 'apple' |\n| 25        | \"abcdefgh\"   | [\"a\", \"ab\", \"bc\", \"cd\", \"ef\"] | true           | Can be segmented into 'a', 'b', 'cd', 'ef' |\n| 26        | \"hippopotamus\" | [\"hip\", \"pop\", \"tamus\"] | true           | Can be segmented into 'hip', 'pop', 'tamus' |\n| 27        | \"grapefruit\" | [\"grape\", \"fruit\"] | true           | Can be segmented into 'grape' and 'fruit' |\n| 28        | \"orangeapple\" | [\"orange\", \"apple\"] | true           | Can be segmented into 'orange' and 'apple' |\n| 29        | \"testingwords\" | [\"testing\", \"words\"] | true           | Can be segmented into 'testing' and 'words' |\n| 30        | \"flowerpot\"  | [\"flower\", \"pot\"]  | true           | Can be segmented into 'flower' and 'pot' |\n| 31        | \"holidayjoy\" | [\"holiday\", \"joy\"] | true           | Can be segmented into 'holiday' and 'joy' |\n| 32        | \"interviewpreparation\" | [\"interview\", \"preparation\"] | true | Can be segmented into 'interview' and 'preparation' |\n| 33        | \"applepieapplepie\" | [\"apple\", \"pie\"] | true           | Can be segmented into repeated 'apple' and 'pie' |\n| 34        | \"catsdogsdog\" | [\"cats\", \"dogs\"] | false          | Cannot be segmented         |\n| 35        | \"quickbrownfox\" | [\"quick\", \"brown\", \"fox\"] | true | Can be segmented into 'quick', 'brown', 'fox' |\n| 36        | \"hellodogcat\" | [\"hello\", \"dog\", \"cat\"] | true | Can be segmented into 'hello', 'dog', 'cat' |\n| 37        | \"mangoesbananas\" | [\"mangoes\", \"bananas\"] | true | Can be segmented into 'mangoes', 'bananas' |\n| 38        | \"appleappleapple\" | [\"apple\"] | true | Repeated 'apple' word matches pattern |\n| 39        | \"worldtest\"   | [\"world\", \"test\"] | true | Can be segmented into 'world' and 'test' |\n| 40        | \"antelopezebra\" | [\"antelope\", \"zebra\"] | true | Can be segmented into 'antelope' and 'zebra' |",
      "example": {
        "input": "\"leetcode\", [\"leet\", \"code\"]",
        "output": "true"
      },
      "answer": "def word_break(s, word_dict):\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_dict:\n                dp[i] = True\n                break\n    return dp[len(s)]"
    },
    {
      "id": 17,
      "title": "Word Pattern",
      "description": "Given a pattern and a string str, find if str follows the same pattern.\n\n| Test Case | Input Pattern | Input String | Expected Output | Notes                       |\n|-----------|---------------|--------------|-----------------|-----------------------------|\n| 1         | \"abba\"        | \"dog cat cat dog\" | true           | Follows the same pattern  |\n| 2         | \"abba\"        | \"dog cat cat fish\" | false          | Does not follow the pattern |\n| 3         | \"abc\"         | \"dog dog dog\"     | false          | Each letter must map to a unique word |\n| 4         | \"a\"           | \"dog\"            | true           | Single character pattern   |\n| 5         | \"abab\"        | \"dog cat cat dog\" | true           | Maps correctly             |\n| 6         | \"abcde\"       | \"dog cat fish dog\" | false          | Not enough words for pattern |\n| 7         | \"xyz\"         | \"a b a\"          | false          | Does not follow pattern    |\n| 8         | \"ab\"          | \"a a a\"          | false          | Letters must map uniquely  |\n| 9         | \"aaa\"         | \"dog dog dog\"    | true           | Maps correctly             |\n| 10        | \"abcd\"        | \"one two three four\" | true          | Each pattern corresponds to a unique word |\n| 11        | \"aabb\"        | \"dog cat cat dog\" | true           | Follows the pattern         |\n| 12        | \"abc\"         | \"apple banana cherry\" | true         | Each letter maps to a unique word |\n| 13        | \"aabbcc\"       | \"cat dog dog cat\"  | false          | Does not match the pattern   |\n| 14        | \"aaaa\"        | \"hello hello hello hello\" | true        | Same word repetition        |\n| 15        | \"abab\"        | \"apple banana apple banana\" | true        | Alternating pattern         |\n| 16        | \"abcd\"        | \"dog dog cat dog\" | false          | Does not match pattern      |\n| 17        | \"abb\"          | \"one two two one\" | true           | Repeats letters for words  |\n| 18        | \"abcabc\"      | \"dog cat fish dog cat fish\" | true         | Repeating pattern of 3    |\n| 19        | \"xyxy\"        | \"cat cat dog dog\" | true           | Same alternating pattern   |\n| 20        | \"abc\"         | \"apple banana carrot\" | true         | Each word is distinct        |\n| 21        | \"abcd\"        | \"dog cat fish hen\" | true          | Each pattern matches words |\n| 22        | \"abac\"        | \"a b a c\"        | true           | Matches single letter to words  |\n| 23        | \"abc\"         | \"x y z\"          | true           | Uniquely mapped letters    |\n| 24        | \"a\"           | \"x\"              | true           | Single character pattern    |\n| 25        | \"ababab\"      | \"x y x y x y\"    | true           | Repeated alternating pattern |\n| 26        | \"abab\"        | \"apple banana apple banana\" | true        | Same alternating pattern   |\n| 27        | \"abcabcabc\"   | \"apple banana cherry apple banana cherry apple\" | true | Repeated pattern           |\n| 28        | \"abca\"        | \"a b a c\"        | true           | Correct alternating pattern |\n| 29        | \"aaaa\"        | \"cat cat cat cat\" | true           | Same word repeated         |\n| 30        | \"aab\"          | \"dog dog dog\"    | false          | Does not match pattern    |\n| 31        | \"abcd\"        | \"apple apple orange orange\" | false        | Does not match the pattern |\n| 32        | \"aabbcc\"       | \"cat dog dog cat\"  | false          | Does not match pattern     |\n| 33        | \"abc\"         | \"dog cat fish\"    | true           | All words follow the pattern |\n| 34        | \"a\"           | \"dog dog dog\"    | false          | Pattern repeats more than expected |\n| 35        | \"aaaaa\"        | \"hello hello hello hello hello\" | true       | Same word repeated         |\n| 36        | \"abcde\"       | \"dog dog dog dog dog\" | false         | Does not match the pattern  |\n| 37        | \"abb\"          | \"cat dog dog cat\" | true           | Matches pattern correctly  |\n| 38        | \"aab\"          | \"one two one\"    | false          | Does not follow the pattern |\n| 39        | \"ab\"          | \"hello hello\"     | false          | Pattern does not repeat correctly |\n| 40        | \"abac\"         | \"x y x y x y\"     | false          | Does not match pattern    |",
      "example": {
        "input": "\"abba\", \"dog cat cat dog\"",
        "output": "true"
      },
      "answer": "def word_pattern(pattern, str):\n    words = str.split()\n    if len(pattern) != len(words):\n        return False\n    pattern_map = {}\n    word_map = {}\n    for p, w in zip(pattern, words):\n        if pattern_map.get(p, w) != w or word_map.get(w, p) != p:\n            return False\n        pattern_map[p] = w\n        word_map[w] = p\n    return True"
    },
    {
      "id": 18,
      "title": "Remove Vowels",
      "description": "Given a string s, remove all vowels (a, e, i, o, u, A, E, I, O, U) from it and return the resulting string.\n\n| Test Case | Input s           | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | \"hello\"          | \"hll\"          | Removed 'e', 'o'             |\n| 2         | \"world\"          | \"wrld\"         | Removed 'o'                  |\n| 3         | \"aeiou\"          | \"\"             | All vowels removed           |\n| 4         | \"ABC\"            | \"BC\"           | Removed 'A'                  |\n| 5         | \"python\"         | \"pythn\"        | Removed 'o'                  |\n| 6         | \"testcase\"       | \"tstcs\"        | Removed 'e', 'a', 'e'        |\n| 7         | \"xyzxyz\"         | \"xyzxyz\"       | No vowels                    |\n| 8         | \"HELLO\"          | \"HLL\"          | Removed 'E', 'O'             |\n| 9         | \"aA\"             | \"\"             | Removed 'a', 'A'             |\n| 10        | \"consonant\"      | \"cnsnnt\"       | Removed 'o', 'a'             |",
      "example": {
        "input": "\"hello\"",
        "output": "\"hll\""
      },
      "answer": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in s if c not in vowels)\n\ns = input().strip()\nprint(remove_vowels(s))"
    },
    {
      "id": 19,
      "title": "Palindrome Permutation",
      "description": "Given a string, determine if it can be rearranged to form a palindrome. A palindrome is a word that reads the same forward and backward.\n\n| Test Case | Input      | Expected Output | Notes                        |\n|-----------|------------|-----------------|------------------------------|\n| 1         | \"civic\"   | true            | Palindrome itself            |\n| 2         | \"ivicc\"   | true            | Can be rearranged as palindrome |\n| 3         | \"hello\"   | false           | Cannot form a palindrome    |\n| 4         | \"racecar\" | true            | Palindrome                   |\n| 5         | \"level\"   | true            | Palindrome                   |\n| 6         | \"world\"   | false           | Cannot form palindrome      |\n| 7         | \"aabbcc\"  | false           | More than one character with odd frequency |\n| 8         | \"aabbccdde\" | true           | Can form palindrome         |\n| 9         | \"abcabc\"  | true            | Can be rearranged as palindrome |\n| 10        | \"aaa\"     | true            | Palindrome                   |\n| 11        | \"deified\" | true            | Palindrome                   |\n| 12        | \"noon\"    | true            | Palindrome                   |\n| 13        | \"radar\"   | true            | Palindrome                   |\n| 14        | \"abba\"    | true            | Palindrome                   |\n| 15        | \"abc\"     | false           | Cannot form palindrome      |\n| 16        | \"xyz\"     | false           | Cannot form palindrome      |\n| 17        | \"deed\"    | true            | Palindrome                   |\n| 18        | \"aabbaa\"  | true            | Palindrome                   |\n| 19        | \"madam\"   | true            | Palindrome                   |\n| 20        | \"racecar\" | true            | Palindrome                   |\n| 21        | \"redder\"  | true            | Palindrome                   |\n| 22        | \"rotator\" | true            | Palindrome                   |\n| 23        | \"civicd\"  | false           | Cannot form palindrome      |\n| 24        | \"abccba\"  | true            | Palindrome                   |\n| 25        | \"notapalindrome\" | false       | Cannot form palindrome      |\n| 26        | \"madamimadam\" | true         | Palindrome                   |\n| 27        | \"yooy\"    | true            | Palindrome                   |\n| 28        | \"abacaba\" | true            | Palindrome                   |\n| 29        | \"aceca\"   | true            | Palindrome                   |\n| 30        | \"detartrated\" | true         | Palindrome                   |\n| 31        | \"abccba\"  | true            | Palindrome                   |\n| 32        | \"abcdefg\" | false           | Cannot form palindrome      |\n| 33        | \"a\"       | true            | Single letter is always a palindrome |\n| 34        | \"xyzxyz\"  | true            | Can be rearranged as palindrome |\n| 35        | \"abcd\"    | false           | Cannot form palindrome      |\n| 36        | \"abccba\"  | true            | Palindrome                   |\n| 37        | \"permutation\" | false        | Cannot form palindrome      |\n| 38        | \"levelracecar\" | true         | Can form palindrome         |\n| 39        | \"redivider\" | true           | Palindrome                   |\n| 40        | \"xyzxyzxyz\" | true           | Can be rearranged as palindrome |\n",
      "example": {
        "input": "\"civic\"",
        "output": "true"
      },
      "answer": "def can_permute_palindrome(s):\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    odd_count = sum(1 for count in freq.values() if count % 2 != 0)\n    return odd_count <= 1"
    },
    {
      "id": 20,
      "title": "Group Anagrams",
      "description": "Given an array of strings, group the anagrams together.\n\n| Test Case | Input Array                          | Expected Output                       | Notes                       |\n|-----------|--------------------------------------|-------------------------------------|-----------------------------|\n| 1         | [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"] | [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]] | Anagrams grouped together |\n| 2         | [\"abc\", \"bca\", \"cab\", \"xyz\"]   | [[\"abc\", \"bca\", \"cab\"], [\"xyz\"]] | Anagrams grouped            |\n| 3         | [\"hello\", \"oellh\", \"world\"]      | [[\"hello\", \"oellh\"], [\"world\"]]  | Anagrams grouped            |\n| 4         | [\"a\", \"b\", \"c\", \"d\"]           | [[\"a\"], [\"b\"], [\"c\"], [\"d\"]]    | No anagrams                  |\n| 5         | [\"eat\", \"tea\", \"tan\"]            | [[\"eat\", \"tea\"], [\"tan\"]]        | Grouped anagrams            |\n| 6         | [\"madam\", \"dama\", \"dam\", \"mad\"] | [[\"madam\", \"dama\", \"mad\"], [\"dam\"]] | Grouped anagrams           |\n| 7         | [\"one\", \"none\", \"neo\"]           | [[\"one\", \"neo\"], [\"none\"]]        | Grouped anagrams            |\n| 8         | [\"abc\", \"xyz\", \"cab\", \"yzx\"]    | [[\"abc\", \"cab\"], [\"xyz\", \"yzx\"]] | Grouped anagrams            |\n| 9         | [\"food\", \"odf\", \"doff\"]          | [[\"food\", \"odf\"], [\"doff\"]]       | Grouped anagrams            |\n| 10        | [\"fool\", \"loof\", \"foo\"]          | [[\"fool\", \"loof\"], [\"foo\"]]       | Grouped anagrams            |\n| 11        | [\"cat\", \"act\", \"tac\"]            | [[\"cat\", \"act\", \"tac\"]]           | Grouped anagrams            |\n| 12        | [\"bat\", \"tab\", \"tap\"]            | [[\"bat\", \"tab\"], [\"tap\"]]         | Grouped anagrams            |\n| 13        | [\"dormitory\", \"dirty room\", \"room dirty\"] | [[\"dormitory\"], [\"dirty room\", \"room dirty\"]] | Grouped anagrams           |\n| 14        | [\"god\", \"dog\", \"odg\"]            | [[\"god\", \"dog\", \"odg\"]]           | Anagrams grouped together   |\n| 15        | [\"abcd\", \"bcda\", \"cdab\"]         | [[\"abcd\", \"bcda\", \"cdab\"]]        | Anagrams grouped            |\n| 16        | [\"tea\", \"eat\", \"ate\"]            | [[\"tea\", \"eat\", \"ate\"]]           | Grouped anagrams            |\n| 17        | [\"cat\", \"rat\", \"car\"]            | [[\"cat\", \"rat\", \"car\"]]           | Grouped anagrams            |\n| 18        | [\"god\", \"dog\", \"god\", \"odg\"]    | [[\"god\", \"dog\", \"odg\", \"god\"]]   | Grouped anagrams            |\n| 19        | [\"abc\", \"cab\", \"bac\"]            | [[\"abc\", \"cab\", \"bac\"]]           | Grouped anagrams            |\n| 20        | [\"hello\", \"hi\", \"oh\"]            | [[\"hello\"], [\"hi\"], [\"oh\"]]       | No anagrams                  |\n| 21        | [\"vampire\", \"ampirev\", \"vapirem\"] | [[\"vampire\", \"ampirev\"], [\"vapirem\"]] | Grouped anagrams          |\n| 22        | [\"god\", \"dog\", \"god\", \"ogd\"]    | [[\"god\", \"dog\", \"ogd\", \"god\"]]   | Grouped anagrams            |\n| 23        | [\"python\", \"typhon\", \"onpyth\"]    | [[\"python\", \"typhon\", \"onpyth\"]]  | Grouped anagrams            |\n| 24        | [\"madam\", \"damam\", \"madma\"]       | [[\"madam\", \"damam\", \"madma\"]]      | Grouped anagrams            |\n| 25        | [\"hello\", \"helol\", \"ohell\"]       | [[\"hello\", \"helol\", \"ohell\"]]      | Grouped anagrams            |\n| 26        | [\"rat\", \"art\", \"tar\"]            | [[\"rat\", \"art\", \"tar\"]]           | Grouped anagrams            |\n| 27        | [\"dog\", \"god\", \"odg\", \"dog\"]    | [[\"dog\", \"god\", \"odg\", \"dog\"]]   | Grouped anagrams            |\n| 28        | [\"tea\", \"ate\", \"eat\"]            | [[\"tea\", \"ate\", \"eat\"]]           | Grouped anagrams            |\n| 29        | [\"xyz\", \"zyx\", \"yxz\"]            | [[\"xyz\", \"zyx\", \"yxz\"]]           | Grouped anagrams            |\n| 30        | [\"help\", \"pleh\", \"epul\"]          | [[\"help\", \"pleh\", \"epul\"]]         | Grouped anagrams            |\n| 31        | [\"bat\", \"tab\", \"tab\"]            | [[\"bat\", \"tab\", \"tab\"]]           | Grouped anagrams            |\n| 32        | [\"power\", \"repow\", \"worep\"]       | [[\"power\", \"repow\", \"worep\"]]      | Grouped anagrams            |\n| 33        | [\"pet\", \"tep\", \"opt\"]            | [[\"pet\", \"tep\", \"opt\"]]           | Grouped anagrams            |\n| 34        | [\"bat\", \"tab\", \"tab\", \"bat\"]    | [[\"bat\", \"tab\", \"tab\", \"bat\"]]    | Grouped anagrams            |\n| 35        | [\"tar\", \"rat\", \"art\"]            | [[\"tar\", \"rat\", \"art\"]]           | Grouped anagrams            |\n| 36        | [\"mine\", \"mien\", \"mine\"]          | [[\"mine\", \"mien\", \"mine\"]]         | Grouped anagrams            |\n| 37        | [\"hello\", \"holl\", \"lohl\"]         | [[\"hello\", \"holl\", \"lohl\"]]        | Grouped anagrams            |\n| 38        | [\"dog\", \"god\", \"odg\"]            | [[\"dog\", \"god\", \"odg\"]]           | Grouped anagrams            |\n| 39        | [\"apple\", \"ppale\", \"alep\"]        | [[\"apple\", \"ppale\", \"alep\"]]       | Grouped anagrams            |\n| 40        | [\"hello\", \"world\", \"how\", \"are\"]| [[\"hello\"], [\"world\"], [\"how\"], [\"are\"]] | No anagrams             |",
      "example": {
        "input": "[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]"
      },
      "answer": "from collections import defaultdict\n\ndef group_anagrams(strs):\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_str = ''.join(sorted(s))\n        anagrams[sorted_str].append(s)\n    return list(anagrams.values())"
    }
  ]
}