{
    "questions": [
      {
        "id": 1,
        "title": "Check for Anagrams",
        "description": "Given two strings `s` and `t`, return true if `t` is an anagram of `s`, and false otherwise.\n\n### Test Cases\n\n| s       | t         | Output |\n|---------|-----------|--------|\n| \"anagram\" | \"nagaram\" | true   |\n| \"rat\"     | \"car\"     | false  |\n| \"a\"       | \"ab\"      | false  |\n| \"listen\" | \"silent\"  | true   |\n| \"abc\"     | \"cba\"     | true   |\n| \"abcd\"    | \"dcba\"    | true   |\n| \"aabbcc\"  | \"bbaacc\"  | true   |\n| \"xyz\"     | \"zyx\"     | true   |\n| \"hello\"   | \"bello\"   | false  |\n| \"aabb\"    | \"bbaa\"    | true   |\n| \"hello\"   | \"olleh\"   | true   |\n| \"hello\"   | \"helol\"   | true   |\n| \"test\"    | \"tset\"    | true   |\n| \"test\"    | \"tess\"    | false  |\n| \"school\"  | \"choosl\"  | true   |\n| \"loop\"    | \"pool\"    | true   |\n| \"python\"  | \"typhon\"  | true   |\n| \"java\"    | \"avaj\"    | true   |\n| \"earth\"   | \"heart\"   | true   |\n| \"dusty\"   | \"study\"   | true   |\n| \"binary\"  | \"brainy\"  | true   |\n| \"night\"   | \"thing\"   | true   |\n| \"inch\"    | \"chin\"    | true   |\n| \"angel\"   | \"glean\"   | true   |\n| \"state\"   | \"taste\"   | true   |\n| \"evil\"    | \"vile\"    | true   |\n| \"elbow\"   | \"below\"   | true   |\n| \"listen\"  | \"enlist\"  | true   |\n| \"fired\"   | \"fried\"   | true   |\n| \"dusty\"   | \"study\"   | true   |\n| \"save\"    | \"vase\"    | true   |\n| \"stressed\"| \"desserts\"| true   |\n| \"forty\"   | \"fort\"    | false  |\n| \"abcdef\"  | \"abcfde\"  | true   |\n| \"abcdef\"  | \"abcdeg\"  | false  |\n| \"moon\"    | \"noom\"    | true   |\n| \"moon\"    | \"mooo\"    | false  |\n| \"looped\"  | \"poodle\"  | false  |\n| \"silent\"  | \"listen\"  | true   |\n| \"abcde\"   | \"edcba\"   | true   |",
        "example": {
          "input": "\"anagram\", \"nagaram\"",
          "output": "true",
          "explanation": "\"nagaram\" is a rearrangement of \"anagram\"."
        },
        "answer": "from collections import Counter\ndef is_anagram(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    return Counter(s) == Counter(t)\ns = input().strip()\nt = input().strip()\nprint(is_anagram(s, t))"
      },
      {
        "id": 2,
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string `s`, find the length of the longest substring without repeating characters.\n\n### Test Cases\n\n| s                     | Output |\n|-----------------------|--------|\n| \"abcabcbb\"            | 3      |\n| \"bbbbb\"               | 1      |\n| \"pwwkew\"              | 3      |\n| \"\"                    | 0      |\n| \"abcdef\"              | 6      |\n| \"aabbcc\"              | 2      |\n| \"abcdeafgh\"           | 8      |\n| \"abccba\"              | 3      |\n| \"dvdf\"                | 3      |\n| \"abba\"                | 2      |\n| \"abcdabcde\"           | 5      |\n| \"tmmzuxt\"             | 5      |\n| \"ohvhjdml\"            | 6      |\n| \"nfpdmpi\"             | 5      |\n| \"aabaab!bb\"           | 3      |\n| \"abcbdaac\"            | 4      |\n| \"anviaj\"              | 5      |\n| \"abccdefgh\"           | 6      |\n| \"abcdedcba\"           | 5      |\n| \"abcabcabcabc\"        | 3      |\n| \"abcdefghijklmnopqrstuvwxyz\" | 26 |\n| \"aaaaaaa\"             | 1      |\n| \"abcabcbb\"            | 3      |\n| \"abba\"                | 2      |\n| \"aab\"                 | 2      |\n| \"aabcda\"              | 5      |\n| \"abcdefa\"             | 6      |\n| \"aabcdef\"             | 6      |\n| \"xyzxyza\"             | 4      |\n| \"pwwkewxyz\"           | 6      |\n| \"abcdeabcdabcaba\"     | 5      |\n| \"abcadcbefa\"          | 6      |\n| \"kjasdhfakls\"         | 9      |\n| \"abbaabba\"            | 2      |\n| \"abacddc\"             | 3      |\n| \"abacddefgh\"          | 7      |\n| \"zxcvbnmasdfg\"        | 12     |\n| \"abcadefggh\"          | 7      |\n| \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx\" | 24 |",
        "example": {
          "input": "\"abcabcbb\"",
          "output": "3",
          "explanation": "The answer is \"abc\", with the length of 3."
        },
"answer" :"def length_of_longest_substring(s: str) -> int:\n    if s == \"null\":\n        return 0\n    char_index = {}\n    left = max_len = 0\n    for right in range(len(s)):\n        if s[right] in char_index and char_index[s[right]] >= left:\n            left = char_index[s[right]] + 1\n        char_index[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\ns = input().strip()\nprint(length_of_longest_substring(s))"
      },
      {
        "id": 3,
        "title": "Valid Palindrome",
        "description": "Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n### Test Cases\n\n| s                                 | Output |\n|-----------------------------------|--------|\n| \"A man, a plan, a canal: Panama\"  | true   |\n| \"race a car\"                      | false  |\n| \" \"                               | true   |\n| \"0P\"                              | false  |\n| \"madam\"                           | true   |\n| \"step on no pets\"                 | true   |\n| \"Was it a car or a cat I saw?\"    | true   |\n| \"No 'x' in Nixon\"                 | true   |\n| \"Eva, can I see bees in a cave?\"  | true   |\n| \"Red rum, sir, is murder\"         | true   |\n| \"not a palindrome\"                | false  |\n| \"12321\"                           | true   |\n| \"123456\"                          | false  |\n| \"Able was I ere I saw Elba\"       | true   |\n| \"Never odd or even\"               | true   |\n| \"Doc, note, I dissent. A fast never prevents a fatness. I diet on cod.\" | true |\n| \"Was it Eliot's toilet I saw?\"    | true   |\n| \"Murder for a jar of red rum\"     | true   |\n| \"Go hang a salami, I'm a lasagna hog\" | true |\n| \"Yo, Banana Boy!\"                 | true   |\n| \"No lemon, no melon\"              | true   |\n| \"Hello, World!\"                   | false  |\n| \"Palindrome\"                      | false  |\n| \"1234567890987654321\"             | true   |\n| \"1234567899876543210\"             | false  |\n| \"rotor\"                           | true   |\n| \"reviver\"                         | true   |\n| \"racecar\"                         | true   |\n| \"deified\"                         | true   |\n| \"civic\"                           | true   |\n| \"level\"                           | true   |\n| \"radar\"                           | true   |\n| \"refer\"                           | true   |\n| \"tenet\"                           | true   |\n| \"banana\"                          | false  |\n| \"apple\"                           | false  |\n| \"abcba\"                           | true   |\n| \"abccba\"                          | true   |\n| \"abcdba\"                          | false  |",
        "example": {
          "input": "\"A man, a plan, a canal: Panama\"",
          "output": "true",
          "explanation": "After cleaning: \"amanaplanacanalpanama\", which is a palindrome."
        },
        "answer": "def is_palindrome(s: str) -> bool:\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return cleaned == cleaned[::-1]\n\ns = input().strip()\nprint(is_palindrome(s))"

      },
      {
        "id": 4,
        "title": "Group Anagrams",
        "description": "Given an array of strings, group the anagrams together.\n\n### Test Cases\n\n| strs | Output |\n|------|--------|\n| [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] | [[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]] |\n| [\"\"] | [[\"\"]] |\n| [\"a\"] | [[\"a\"]] |\n| [\"ab\",\"ba\"] | [[\"ab\",\"ba\"]] |\n| [\"abc\",\"bca\",\"cab\"] | [[\"abc\",\"bca\",\"cab\"]] |\n| [\"abc\",\"def\",\"ghi\"] | [[\"abc\"],[\"def\"],[\"ghi\"]] |\n| [\"aab\",\"aba\",\"baa\"] | [[\"aab\",\"aba\",\"baa\"]] |\n| [\"abcd\",\"dcba\",\"bcad\"] | [[\"abcd\",\"dcba\",\"bcad\"]] |\n| [\"\",\"\",\"a\"] | [[\"\",\"\"],[\"a\"]] |\n| [\"z\",\"z\"] | [[\"z\",\"z\"]] |\n| [\"xyz\",\"zyx\",\"yxz\"] | [[\"xyz\",\"zyx\",\"yxz\"]] |\n| [\"listen\",\"silent\",\"enlist\"] | [[\"listen\",\"silent\",\"enlist\"]] |\n| [\"rat\",\"tar\",\"art\"] | [[\"rat\",\"tar\",\"art\"]] |\n| [\"abcde\",\"edcba\"] | [[\"abcde\",\"edcba\"]] |\n| [\"xy\",\"yx\",\"x\"] | [[\"xy\",\"yx\"],[\"x\"]] |\n| [\"apple\",\"papel\"] | [[\"apple\",\"papel\"]] |\n| [\"loop\",\"pool\"] | [[\"loop\",\"pool\"]] |\n| [\"god\",\"dog\",\"odg\"] | [[\"god\",\"dog\",\"odg\"]] |\n| [\"car\",\"arc\",\"rac\"] | [[\"car\",\"arc\",\"rac\"]] |\n| [\"dusty\",\"study\"] | [[\"dusty\",\"study\"]] |\n| [\"night\",\"thing\"] | [[\"night\",\"thing\"]] |\n| [\"evil\",\"vile\",\"live\"] | [[\"evil\",\"vile\",\"live\"]] |\n| [\"angel\",\"glean\"] | [[\"angel\",\"glean\"]] |\n| [\"inch\",\"chin\"] | [[\"inch\",\"chin\"]] |\n| [\"brag\",\"grab\"] | [[\"brag\",\"grab\"]] |\n| [\"cat\",\"tac\",\"act\"] | [[\"cat\",\"tac\",\"act\"]] |\n| [\"elbow\",\"below\"] | [[\"elbow\",\"below\"]] |\n| [\"bored\",\"robed\"] | [[\"bored\",\"robed\"]] |\n| [\"save\",\"vase\"] | [[\"save\",\"vase\"]] |\n| [\"state\",\"taste\"] | [[\"state\",\"taste\"]] |\n| [\"rescue\",\"secure\"] | [[\"rescue\",\"secure\"]] |\n| [\"forty\",\"fort\"] | [[\"forty\"],[\"fort\"]] |\n| [\"conversation\",\"voicesranton\"] | [[\"conversation\",\"voicesranton\"]] |\n| [\"debitcard\",\"badcredit\"] | [[\"debitcard\",\"badcredit\"]] |\n| [\"schoolmaster\",\"theclassroom\"] | [[\"schoolmaster\",\"theclassroom\"]] |\n| [\"binary\",\"brainy\"] | [[\"binary\",\"brainy\"]] |\n| [\"listen\",\"enlist\",\"inlets\"] | [[\"listen\",\"enlist\",\"inlets\"]] |\n| [\"google\",\"glegoo\"] | [[\"google\",\"glegoo\"]] |\n| [\"fired\",\"fried\"] | [[\"fired\",\"fried\"]] |\n| [\"admirer\",\"married\"] | [[\"admirer\",\"married\"]] |\n| [\"dusty\",\"study\"] | [[\"dusty\",\"study\"]] |",
        "example": {
          "input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
          "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
          "explanation": "Each group contains anagrams of one another."
        },
        "answer": "from collections import defaultdict\nwords = input().split()\nanagrams = defaultdict(list)\norder = {}\nfor word in words:\n    key = ''.join(sorted(word))\n    if key not in order:\n        order[key] = len(order)\n    anagrams[key].append(word)\nsorted_groups = sorted(anagrams.items(), key=lambda x: order[x[0]])\nfor _, group in sorted_groups:\n    print(' '.join(group))"

      },
      {
        "id": 5,
        "title": "Valid Parentheses",
        "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\n### Test Cases\n\n| s | Output |\n|----|--------|\n| \"()\" | true |\n| \"()[]{}\" | true |\n| \"(]\" | false |\n| \"([)]\" | false |\n| \"{[]}\" | true |\n| \"\" | true |\n| \"((((((\" | false |\n| \"({[()]})\" | true |\n| \"[(])\" | false |\n| \"({})[]\" | true |\n| \"[{()}]()\" | true |\n| \"[{(})]\" | false |\n| \"[[[]]]\" | true |\n| \"{{{{\" | false |\n| \"{{}}[[()]]\" | true |\n| \"[[\" | false |\n| \"]\" | false |\n| \"(()\" | false |\n| \"{}[]()\" | true |\n| \"([{}])\" | true |\n| \"((({{{[[[]]]}}})))\" | true |\n| \"(((((((((((())))))))))\" | true |\n| \"(}{)\" | false |\n| \"([)\" | false |\n| \"(()())\" | true |\n| \"([{}[()()]])\" | true |\n| \"([{}[()()]])}\" | false |\n| \"[({(())}[()])])\" | false |\n| \"([[]])([]){}\" | true |\n| \"(({{[[]]}}))\" | true |\n| \"(()(()))\" | true |\n| \"(((((())))))\" | true |\n| \"[[[[[[[]]]]]]]\" | true |\n| \"(()(()(())))\" | true |\n| \"{[()]}}\" | false |\n| \"[(])\" | false |\n| \"{[(])}\" | false |\n| \"([]){[()]}\" | true |\n| \"(([]){}{[]}(()))\" | true |",
        "example": {
          "input": "\"()[]{}\"",
          "output": "true",
          "explanation": "All brackets are correctly closed and nested."
        },
        "answer": "s = input()\nstack = []\nmapping = {')': '(', '}': '{', ']': '['}\n\nfor char in s:\n    if char in mapping:\n        top = stack.pop() if stack else '#'\n        if mapping[char] != top:\n            print(False)\n            break\n    else:\n        stack.append(char)\nelse:\n    print(not stack)"

      },
      {
        "id": 6,
        "title": "Implement strStr()",
        "description": "Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\n### Test Cases\n\n| haystack | needle | Output |\n|----------|--------|--------|\n| \"hello\" | \"ll\" | 2 |\n| \"aaaaa\" | \"bba\" | -1 |\n| \"\" | \"\" | 0 |\n| \"abc\" | \"c\" | 2 |\n| \"abc\" | \"d\" | -1 |\n| \"abcabcabc\" | \"cab\" | 2 |\n| \"mississippi\" | \"issip\" | 4 |\n| \"mississippi\" | \"issipi\" | -1 |\n| \"abc\" | \"abc\" | 0 |\n| \"aaa\" | \"aaaa\" | -1 |\n| \"a\" | \"a\" | 0 |\n| \"abcabcabcabc\" | \"abcabc\" | 0 |\n| \"abc\" | \"\" | 0 |\n| \"abcde\" | \"e\" | 4 |\n| \"abcde\" | \"de\" | 3 |\n| \"abcde\" | \"cd\" | 2 |\n| \"aaaaa\" | \"aa\" | 0 |\n| \"abababab\" | \"bab\" | 1 |\n| \"xyz\" | \"z\" | 2 |\n| \"xyz\" | \"y\" | 1 |\n| \"abcdefg\" | \"g\" | 6 |\n| \"abcdefg\" | \"fg\" | 5 |\n| \"abcdefg\" | \"gh\" | -1 |\n| \"loremipsum\" | \"ipsum\" | 5 |\n| \"abcdabc\" | \"dab\" | 3 |\n| \"abcdef\" | \"bc\" | 1 |\n| \"12345\" | \"345\" | 2 |\n| \"needle\" | \"needle\" | 0 |\n| \"findneedle\" | \"needle\" | 4 |\n| \"searchthis\" | \"this\" | 6 |\n| \"aabaaabaaac\" | \"aabaaac\" | 4 |\n| \"test\" | \"testing\" | -1 |\n| \"match\" | \"match\" | 0 |\n| \"xyxyxyx\" | \"yxyx\" | 1 |\n| \"ababcab\" | \"abc\" | 2 |\n| \"a\" | \"aa\" | -1 |\n| \"aaaaaaa\" | \"aaa\" | 0 |\n| \"aaaaa\" | \"aab\" | -1 |\n| \"same\" | \"same\" | 0 |\n| \"aabbaabbaabb\" | \"bbaa\" | 1 |",
        "example": {
          "input": "haystack = \"hello\", needle = \"ll\"",
          "output": "2",
          "explanation": "\"ll\" is found in \"hello\" at index 2."
        },
        "answer": "haystack, needle = input().split()\nif needle == \"\":\n    print(0)\nelse:\n    found = False\n    for i in range(len(haystack) - len(needle) + 1):\n        if haystack[i:i+len(needle)] == needle:\n            print(i)\n            found = True\n            break\n    if not found:\n        print(-1)"

      },
      {
        "id": 7,
        "title": "Reverse Words in a String",
        "description": "Given an input string s, reverse the order of the words.\n\n### Test Cases\n\n| s                          | Output                  |\n|----------------------------|--------------------------|\n| \"the sky is blue\"         | \"blue is sky the\"       |\n| \"  hello world  \"         | \"world hello\"           |\n| \"a good   example\"        | \"example good a\"        |\n| \"  Bob    Loves  Alice   \"| \"Alice Loves Bob\"       |\n| \"Alice does not even like bob\" | \"bob like even not does Alice\" |\n| \"Hello\"                   | \"Hello\"                 |\n| \"    Hello\"               | \"Hello\"                 |\n| \"Hello    \"               | \"Hello\"                 |\n| \"\"                        | \"\"                      |\n| \"  \"                      | \"\"                      |\n| \"word\"                    | \"word\"                  |\n| \"one two\"                 | \"two one\"               |\n| \"a b c d e\"               | \"e d c b a\"             |\n| \"  a  b  \"                | \"b a\"                   |\n| \"to be or not to be\"      | \"be to not or be to\"    |\n| \"   quick brown fox\"      | \"fox brown quick\"       |\n| \"lazy dog  \"              | \"dog lazy\"              |\n| \"run fast run far\"        | \"far run fast run\"      |\n| \"  keep going  \"          | \"going keep\"            |\n| \"coding in python\"        | \"python in coding\"      |\n| \"hi\"                      | \"hi\"                    |\n| \"hi there\"                | \"there hi\"              |\n| \"up and down\"             | \"down and up\"           |\n| \"just one more test\"      | \"test more one just\"    |\n| \"only spaces     \"        | \"spaces only\"           |\n| \" double  spaces\"         | \"spaces double\"         |\n| \"multiple   words   here\" | \"here words multiple\"   |\n| \"leading and trailing\"    | \"trailing and leading\"  |\n| \"  test case here\"        | \"here case test\"        |\n| \"same words same words\"   | \"words same words same\" |\n| \"split this sentence\"     | \"sentence this split\"   |\n| \"abc def ghi\"             | \"ghi def abc\"           |\n| \"end   test    \"          | \"test end\"              |\n| \"1 2 3 4 5\"               | \"5 4 3 2 1\"             |\n| \"mix  of spaces \"         | \"spaces of mix\"         |\n| \"Test Case upper\"         | \"upper Case Test\"       |\n| \"Case  insensitive\"       | \"insensitive Case\"      |\n| \"   A   B   C   \"         | \"C B A\"                 |\n| \"123 456 789\"             | \"789 456 123\"           |\n| \"one-word\"                | \"one-word\"              |\n| \"  final case  \"          | \"case final\"            |",
        "example": {
          "input": "s = \"the sky is blue\"",
          "output": "\"blue is sky the\"",
          "explanation": "Words are reversed with single space between them."
        },
        "answer": "s = input()\nprint(' '.join(s.strip().split()[::-1]))"

      },
      {
        "id": 8,
        "title": "Longest Palindromic Substring",
        "description": "Given a string s, return the longest palindromic substring.\n\n### Test Cases\n\n| s           | Output       |\n|-------------|--------------|\n| \"babad\"     | \"bab\" or \"aba\" |\n| \"cbbd\"      | \"bb\"         |\n| \"a\"         | \"a\"          |\n| \"ac\"        | \"a\" or \"c\"   |\n| \"racecar\"   | \"racecar\"    |\n| \"noon\"      | \"noon\"       |\n| \"forgeeksskeegfor\" | \"geeksskeeg\" |\n| \"abacdfgdcaba\" | \"aba\"        |\n| \"aaaabaaa\"  | \"aaabaaa\"    |\n| \"abcd\"      | \"a\" or \"b\"...|\n| \"abcba\"     | \"abcba\"      |\n| \"abacdfgdcabba\" | \"abba\"    |\n| \"abcdcba\"   | \"abcdcba\"    |\n| \"abccba\"    | \"abccba\"     |\n| \"aabbaa\"    | \"aabbaa\"     |\n| \"abaaba\"    | \"abaaba\"     |\n| \"xyzzyx\"    | \"xyzzyx\"     |\n| \"xyz\"       | \"x\" or \"y\" or \"z\" |\n| \"madam\"     | \"madam\"      |\n| \"redivider\" | \"redivider\"  |\n| \"deified\"   | \"deified\"    |\n| \"civic\"     | \"civic\"      |\n| \"radar\"     | \"radar\"      |\n| \"level\"     | \"level\"      |\n| \"rotor\"     | \"rotor\"      |\n| \"kayak\"     | \"kayak\"      |\n| \"refer\"     | \"refer\"      |\n| \"tenet\"     | \"tenet\"      |\n| \"wow\"       | \"wow\"        |\n| \"noonmadam\" | \"noon\" or \"madam\" |\n| \"step on no pets\" | \"step on no pets\" |\n| \"tattarrattat\" | \"tattarrattat\" |\n| \"abcdxyzyxabcda\" | \"xyzyx\" |\n| \"abbaabba\"  | \"abbaabba\"   |\n| \"aabbaacc\"  | \"aabbaa\"     |\n| \"\"          | \"\"           |\n| \"a\"          | \"a\"          |\n| \"bb\"         | \"bb\"         |\n| \"abcddcba\"   | \"abcddcba\"   |\n| \"abacdfgdcabba\" | \"abba\"    |",
        "example": {
          "input": "babad",
          "output": "bab (or aba)",
          "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings."
        },
        "answer": "def longestPalindrome(s: str) -> str:\n    res = ''\n    for i in range(len(s)):\n        temp = expand(s, i, i)\n        if len(temp) > len(res): res = temp\n        temp = expand(s, i, i + 1)\n        if len(temp) > len(res): res = temp\n    return res\n\ndef expand(s, left, right):\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return s[left + 1:right]"
      },
      {
        "id": 9,
        "title": "String Compression",
        "description": "Given an array of characters chars, compress it in-place.\n\n### Test Cases\n\n| chars                     | Output                    |\n|---------------------------|---------------------------|\n| [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] | [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]  |\n| [\"a\"]                      | [\"a\"]                      |\n| [\"a\",\"b\",\"b\",\"b\",\"b\"]       | [\"a\",\"b\",\"4\"]              |\n| [\"a\",\"a\",\"a\"]             | [\"a\",\"3\"]                  |\n| [\"a\",\"b\",\"c\"]             | [\"a\",\"b\",\"c\"]              |\n| [\"a\",\"a\",\"a\",\"b\"]         | [\"a\",\"3\",\"b\"]              |\n| [\"a\",\"a\",\"b\",\"b\"]         | [\"a\",\"2\",\"b\",\"2\"]          |\n| [\"a\",\"b\",\"b\",\"a\"]         | [\"a\",\"b\",\"2\",\"a\"]          |\n| [\"a\",\"a\",\"a\",\"a\",\"a\"]     | [\"a\",\"5\"]                  |\n| [\"b\",\"b\",\"b\",\"b\",\"b\"]     | [\"b\",\"5\"]                  |\n| [\"a\",\"a\",\"b\",\"a\"]         | [\"a\",\"2\",\"b\",\"a\"]          |\n| [\"x\"]                      | [\"x\"]                      |\n| [\"x\",\"x\"]                  | [\"x\",\"2\"]                  |\n| [\"y\",\"y\",\"y\",\"z\"]         | [\"y\",\"3\",\"z\"]              |\n| [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\"] | [\"a\",\"3\",\"b\",\"2\",\"a\"]      |\n| [\"a\",\"a\",\"b\",\"a\",\"a\"]     | [\"a\",\"2\",\"b\",\"a\",\"2\"]      |\n| [\"z\",\"z\",\"z\",\"z\",\"z\"]     | [\"z\",\"5\"]                  |\n| [\"a\",\"a\",\"b\",\"b\",\"c\"]     | [\"a\",\"2\",\"b\",\"2\",\"c\"]      |\n| [\"m\",\"m\",\"m\",\"m\"]         | [\"m\",\"4\"]                  |\n| [\"q\",\"w\",\"e\",\"e\",\"e\"]     | [\"q\",\"w\",\"e\",\"3\"]          |\n| [\"a\",\"a\",\"a\",\"b\",\"c\"]     | [\"a\",\"3\",\"b\",\"c\"]          |\n| [\"r\"]                      | [\"r\"]                      |\n| [\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"] | [\"a\",\"b\",\"3\",\"c\",\"3\"] |\n| [\"c\",\"c\",\"c\",\"c\"]         | [\"c\",\"4\"]                  |\n| [\"f\",\"f\"]                  | [\"f\",\"2\"]                  |\n| [\"g\",\"g\",\"g\",\"g\",\"h\"]     | [\"g\",\"4\",\"h\"]              |\n| [\"i\",\"i\",\"i\",\"j\",\"j\"]     | [\"i\",\"3\",\"j\",\"2\"]          |\n| [\"k\",\"l\",\"l\"]             | [\"k\",\"l\",\"2\"]              |\n| [\"m\",\"m\",\"m\",\"m\",\"m\"]     | [\"m\",\"5\"]                  |\n| [\"n\",\"n\",\"n\"]             | [\"n\",\"3\"]                  |\n| [\"o\"]                      | [\"o\"]                      |\n| [\"p\",\"p\"]                  | [\"p\",\"2\"]                  |\n| [\"r\",\"r\",\"s\",\"s\"]         | [\"r\",\"2\",\"s\",\"2\"]          |\n| [\"t\",\"t\",\"t\",\"t\"]         | [\"t\",\"4\"]                  |\n| [\"u\",\"u\",\"u\",\"v\"]         | [\"u\",\"3\",\"v\"]              |\n| [\"w\",\"x\",\"x\"]             | [\"w\",\"x\",\"2\"]              |\n| [\"y\",\"z\",\"z\"]             | [\"y\",\"z\",\"2\"]              |\n| [\"z\",\"z\"]                  | [\"z\",\"2\"]                  |\n| [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\"] | [\"a\",\"b\",\"5\"]             |\n| [\"c\",\"c\",\"c\",\"c\",\"c\"]     | [\"c\",\"5\"]                  |",
        "example": {
          "input": "[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]",
          "output": "[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]",
          "explanation": "Characters are grouped and counts are added."
        },
        "answer": "def compress(chars):\n    i = 0\n    res = 0\n    while i < len(chars):\n        char = chars[i]\n        count = 0\n        while i < len(chars) and chars[i] == char:\n            i += 1\n            count += 1\n        chars[res] = char\n        res += 1\n        if count > 1:\n            for c in str(count):\n                chars[res] = c\n                res += 1\n    return res\n\nchars = input().split()\nlength = compress(chars)\nprint(*chars[:length])"

      },
      {
        "id": 10,
        "title": "Multiply Strings",
        "description": "Given two non-negative integers num1 and num2 represented as strings, return the product as a string.\n\n### Test Cases\n\n| Test Case | Input               | Output  |\n|-----------|---------------------|---------|\n| 1         | num1 = \"2\", num2 = \"3\"     | \"6\"     |\n| 2         | num1 = \"123\", num2 = \"456\" | \"56088\" |\n| 3         | num1 = \"0\", num2 = \"0\"     | \"0\"     |\n| 4         | num1 = \"1\", num2 = \"9999\"  | \"9999\"  |\n| 5         | num1 = \"999\", num2 = \"0\"   | \"0\"     |\n| 6         | num1 = \"12\", num2 = \"34\"   | \"408\"   |\n| 7         | num1 = \"15\", num2 = \"5\"    | \"75\"    |\n| 8         | num1 = \"100\", num2 = \"25\"  | \"2500\"  |\n| 9         | num1 = \"500\", num2 = \"200\" | \"100000\"|\n| 10        | num1 = \"11\", num2 = \"12\"   | \"132\"   |\n| 11        | num1 = \"9\", num2 = \"9\"     | \"81\"    |\n| 12        | num1 = \"0\", num2 = \"999\"   | \"0\"     |\n| 13        | num1 = \"1\", num2 = \"1\"     | \"1\"     |\n| 14        | num1 = \"1000\", num2 = \"1000\"| \"1000000\"|\n| 15        | num1 = \"234\", num2 = \"567\" | \"132678\"|\n| 16        | num1 = \"87\", num2 = \"65\"   | \"5655\"  |\n| 17        | num1 = \"36\", num2 = \"48\"   | \"1728\"  |\n| 18        | num1 = \"8\", num2 = \"8\"     | \"64\"    |\n| 19        | num1 = \"13\", num2 = \"11\"   | \"143\"   |\n| 20        | num1 = \"10\", num2 = \"10\"   | \"100\"   |\n| 21        | num1 = \"33\", num2 = \"99\"   | \"3267\"  |\n| 22        | num1 = \"200\", num2 = \"150\" | \"30000\" |\n| 23        | num1 = \"24\", num2 = \"75\"   | \"1800\"  |\n| 24        | num1 = \"45\", num2 = \"50\"   | \"2250\"  |\n| 25        | num1 = \"999\", num2 = \"999\" | \"998001\"|\n| 26        | num1 = \"12\", num2 = \"9\"    | \"108\"   |\n| 27        | num1 = \"100\", num2 = \"15\"  | \"1500\"  |\n| 28        | num1 = \"30\", num2 = \"10\"   | \"300\"   |\n| 29        | num1 = \"45\", num2 = \"20\"   | \"900\"   |\n| 30        | num1 = \"50\", num2 = \"2\"    | \"100\"   |\n| 31        | num1 = \"8\", num2 = \"6\"     | \"48\"    |\n| 32        | num1 = \"98\", num2 = \"32\"   | \"3136\"  |\n| 33        | num1 = \"5\", num2 = \"5\"     | \"25\"    |\n| 34        | num1 = \"11\", num2 = \"99\"   | \"1089\"  |\n| 35        | num1 = \"20\", num2 = \"3\"    | \"60\"    |\n| 36        | num1 = \"7\", num2 = \"10\"    | \"70\"    |\n| 37        | num1 = \"77\", num2 = \"6\"    | \"462\"   |\n| 38        | num1 = \"500\", num2 = \"500\" | \"250000\"|\n| 39        | num1 = \"7\", num2 = \"15\"    | \"105\"   |\n| 40        | num1 = \"33\", num2 = \"22\"   | \"726\"   |",
        "example": {
          "input": "num1 = \"123\", num2 = \"456\"",
          "output": "\"56088\"",
          "explanation": "123 * 456 = 56088"
        },
        "answer":"def multiply(num1: str, num2: str) -> str:\n    if num1 == \"0\" or num2 == \"0\":\n        return \"0\"\n    res = [0] * (len(num1) + len(num2))\n    for i in range(len(num1) - 1, -1, -1):\n        for j in range(len(num2) - 1, -1, -1):\n            mul = int(num1[i]) * int(num2[j])\n            p1, p2 = i + j, i + j + 1\n            total = mul + res[p2]\n            res[p2] = total % 10\n            res[p1] += total // 10\n    result = ''.join(map(str, res)).lstrip('0')\n    return result\n\nnum1, num2 = input().split()\nprint(multiply(num1, num2))"

      },
      {
        "id": 11,
        "title": "Count Set Bits",
        "description": "Given a non-negative integer `n`, return the number of set bits (1s) in its binary representation.\n\n### Test Cases\n\n| Test Case | Input | Output |\n|-----------|-------|--------|\n| 1         | 0     | 0      |\n| 2         | 1     | 1      |\n| 3         | 2     | 1      |\n| 4         | 3     | 2      |\n| 5         | 4     | 1      |\n| 6         | 5     | 2      |\n| 7         | 6     | 2      |\n| 8         | 7     | 3      |\n| 9         | 8     | 1      |\n| 10        | 15    | 4      |\n| 11        | 16    | 1      |\n| 12        | 31    | 5      |\n| 13        | 32    | 1      |\n| 14        | 63    | 6      |\n| 15        | 255   | 8      |\n| 16        | 128   | 1      |\n| 17        | 64    | 1      |\n| 18        | 1023  | 10     |\n| 19        | 512   | 1      |\n| 20        | 255   | 8      |\n| 21        | 511   | 9      |\n| 22        | 1024  | 1      |\n| 23        | 2555  | 12     |\n| 24        | 1234  | 7      |\n| 25        | 15    | 4      |\n| 26        | 16    | 1      |\n| 27        | 7     | 3      |\n| 28        | 100   | 3      |\n| 29        | 32    | 1      |\n| 30        | 250   | 6      |\n| 31        | 35    | 3      |\n| 32        | 10    | 2      |\n| 33        | 12    | 2      |\n| 34        | 7     | 3      |\n| 35        | 56    | 3      |\n| 36        | 63    | 6      |\n| 37        | 40    | 3      |\n| 38        | 15    | 4      |\n| 39        | 7     | 3      |\n| 40        | 128   | 1      |",
        "example": {
          "input": "5",
          "output": "2",
          "explanation": "Binary of 5 is 101, which has 2 set bits."
        },
        "answer": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Input and output\nn = int(input())  # Taking a single integer input\n\n# Printing the count of set bits for that single number\nprint(count_set_bits(n))"

      },
      {
        "id": 12,
        "title": "Check if Power of Two",
        "description": "Given an integer n, write a function to determine if n is a power of two.\n\n### Test Cases\n\n| Test Case | Input  | Output  |\n|-----------|--------|---------|\n| 1         | 1      | true    |\n| 2         | 2      | true    |\n| 3         | 3      | false   |\n| 4         | 4      | true    |\n| 5         | 5      | false   |\n| 6         | 6      | false   |\n| 7         | 8      | true    |\n| 8         | 16     | true    |\n| 9         | 32     | true    |\n| 10        | 64     | true    |\n| 11        | 128    | true    |\n| 12        | 256    | true    |\n| 13        | 512    | true    |\n| 14        | 1024   | true    |\n| 15        | 2048   | true    |\n| 16        | 4096   | true    |\n| 17        | 8192   | true    |\n| 18        | 16384  | true    |\n| 19        | 32768  | true    |\n| 20        | 65536  | true    |\n| 21        | 131072 | true    |\n| 22        | 262144 | true    |\n| 23        | 524288 | true    |\n| 24        | 1048576| true    |\n| 25        | 2097152| true    |\n| 26        | 3      | false   |\n| 27        | 9      | false   |\n| 28        | 11     | false   |\n| 29        | 13     | false   |\n| 30        | 15     | false   |\n| 31        | 19     | false   |\n| 32        | 21     | false   |\n| 33        | 33     | false   |\n| 34        | 63     | false   |\n| 35        | 7      | false   |\n| 36        | 6      | false   |\n| 37        | 10     | false   |\n| 38        | 12     | false   |\n| 39        | 17     | false   |\n| 40        | 14     | false   |",
        "example": {
          "input": "16",
          "output": "true",
          "explanation": "16 is a power of 2"
        },
        "answer": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\n# Input and output\nn = int(input())\nprint(is_power_of_two(n))"

      },
      {
        "id": 13,
        "title": "Find the Only Non-Repeating Element",
        "description": "Given a list where every element appears twice except one, find that one element.\n\n### Test Cases\n\n| Test Case | Input             | Output |\n|-----------|------------------|--------|\n| 1         | [2, 2, 1]         | 1      |\n| 2         | [4, 1, 2, 1, 2]   | 4      |\n| 3         | [1]               | 1      |\n| 4         | [0, 1, 0]         | 1      |\n| 5         | [17, 12, 17]      | 12     |\n| 6         | [5, 3, 3, 5, 7]   | 7      |\n| 7         | [8, 8, 9]         | 9      |\n| 8         | [13, 13, 42]      | 42     |\n| 9         | [100]             | 100    |\n| 10        | [1, 1, 2, 2, 3]   | 3      |\n| 11        | [11, 22, 11]      | 22     |\n| 12        | [44, 44, 88]      | 88     |\n| 13        | [99, 1, 1, 2, 2]  | 99     |\n| 14        | [0, 0, 10]        | 10     |\n| 15        | [3, 3, 3, 3, 6]   | 6      |\n| 16        | [2, 1, 2]         | 1      |\n| 17        | [4, 3, 2, 1, 3, 2] | 4      |\n| 18        | [7, 6, 5, 7]      | 6      |\n| 19        | [1, 2, 1, 2, 0]   | 0      |\n| 20        | [1, 5, 5, 2, 2]   | 1      |\n| 21        | [11, 11, 33, 33, 44, 55, 55] | 44     |\n| 22        | [20, 30, 40, 30, 40] | 20     |\n| 23        | [2, 5, 8, 5, 2]   | 8      |\n| 24        | [1, 3, 3, 5, 6, 6, 1] | 5      |\n| 25        | [15, 15, 23, 23, 12] | 12     |\n| 26        | [8, 7, 9, 7, 8, 10] | 9      |\n| 27        | [3, 5, 2, 2, 3]   | 5      |\n| 28        | [100, 200, 300, 200, 300] | 100    |\n| 29        | [6, 1, 5, 1, 5, 6] | 0      |\n| 30        | [4, 5, 4, 7, 7]   | 5      |\n| 31        | [12, 13, 13, 12, 14] | 14     |\n| 32        | [33, 44, 44]      | 33     |\n| 33        | [10, 20, 10]      | 20     |\n| 34        | [18, 24, 18, 24]  | 0      |\n| 35        | [55, 22, 55, 22]  | 0      |\n| 36        | [5, 5, 3, 2, 3]   | 2      |\n| 37        | [17, 14, 17, 14]  | 0      |\n| 38        | [21, 22, 22, 21, 20] | 20     |\n| 39        | [10, 15, 10, 15, 25] | 25     |\n| 40        | [6, 8, 8, 6, 9]   | 9      |",
        "example": {
          "input": "[4, 1, 2, 1, 2]",
          "output": "4",
          "explanation": "All other numbers appear twice, except 4."
        },
        "answer": "def single_number(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n\n# Input and output\nnums = list(map(int, input().split()))  # Taking a list of numbers as input\nprint(single_number(nums))"

      },
      {
        "id": 14,
        "title": "Single Number (Every element appears twice except one)",
        "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n### Test Cases\n\n| Test Case | Input             | Output |\n|-----------|------------------|--------|\n| 1         | [2, 2, 1]         | 1      |\n| 2         | [4, 1, 2, 1, 2]   | 4      |\n| 3         | [1]               | 1      |\n| 4         | [1, 1, 2]         | 2      |\n| 5         | [17, 12, 17]      | 12     |\n| 6         | [0, 1, 0]         | 1      |\n| 7         | [99]              | 99     |\n| 8         | [7, 3, 5, 4, 5, 3, 4] | 7      |\n| 9         | [6, 1, 3, 3, 6, 1, 7] | 7      |\n| 10        | [11, 22, 22, 33, 11] | 33     |\n| 11        | [100, 100, 200]   | 200    |\n| 12        | [15, 15, 25, 30, 30] | 25     |\n| 13        | [50, 75, 75, 50, 10] | 10     |\n| 14        | [1, 2, 2, 1, 3]   | 3      |\n| 15        | [9, 9, 10]        | 10     |\n| 16        | [2, 1, 2]         | 1      |\n| 17        | [4, 3, 2, 1, 3, 2] | 4      |\n| 18        | [7, 6, 5, 7]      | 6      |\n| 19        | [1, 2, 1, 2, 0]   | 0      |\n| 20        | [1, 5, 5, 2, 2]   | 1      |\n| 21        | [11, 11, 33, 33, 44, 55, 55] | 44     |\n| 22        | [20, 30, 40, 30, 40] | 20     |\n| 23        | [2, 5, 8, 5, 2]   | 8      |\n| 24        | [1, 3, 3, 5, 6, 6, 1] | 5      |\n| 25        | [15, 15, 23, 23, 12] | 12     |\n| 26        | [8, 7, 9, 7, 8, 10] | 9      |\n| 27        | [3, 5, 2, 2, 3]   | 5      |\n| 28        | [100, 200, 300, 200, 300] | 100    |\n| 29        | [6, 1, 5, 1, 5, 6] | 0      |\n| 30        | [4, 5, 4, 7, 7]   | 5      |\n| 31        | [12, 13, 13, 12, 14] | 14     |\n| 32        | [33, 44, 44]      | 33     |\n| 33        | [10, 20, 10]      | 20     |\n| 34        | [18, 24, 18, 24]  | 0      |\n| 35        | [55, 22, 55, 22]  | 0      |\n| 36        | [5, 5, 3, 2, 3]   | 2      |\n| 37        | [17, 14, 17, 14]  | 0      |\n| 38        | [21, 22, 22, 21, 20] | 20     |\n| 39        | [10, 15, 10, 15, 25] | 25     |\n| 40        | [6, 8, 8, 6, 9]   | 9      |",
        "example": {
          "input": "[2, 2, 1]",
          "output": "1",
          "explanation": "Only 1 appears once; all others appear twice."
        },
        "answer": "def singleNumber(nums):\n    res = 0\n    for num in nums:\n        res ^= num\n    return res\n\n# Input and output\nnums = list(map(int, input().split()))  # Taking a list of integers as input\nprint(singleNumber(nums))"

      },
      {
        "id": 15,
        "title": "Count Total Set Bits in Numbers from 1 to N",
        "description": "Count the total number of set bits (1s) in binary representation of all numbers from 1 to N.\n\n### Test Cases\n\n| Test Case | Input | Output |\n|-----------|-------|--------|\n| 1         | 1     | 1      |\n| 2         | 2     | 2      |\n| 3         | 3     | 4      |\n| 4         | 4     | 5      |\n| 5         | 5     | 7      |\n| 6         | 6     | 9      |\n| 7         | 7     | 12     |\n| 8         | 8     | 13     |\n| 9         | 9     | 15     |\n| 10        | 10    | 17     |\n| 11        | 11    | 20     |\n| 12        | 12    | 23     |\n| 13        | 13    | 26     |\n| 14        | 14    | 29     |\n| 15        | 15    | 32     |\n| 16        | 16    | 33     |\n| 17        | 17    | 36     |\n| 18        | 18    | 39     |\n| 19        | 19    | 42     |\n| 20        | 20    | 45     |\n| 21        | 21    | 48     |\n| 22        | 22    | 51     |\n| 23        | 23    | 54     |\n| 24        | 24    | 57     |\n| 25        | 25    | 60     |\n| 26        | 26    | 63     |\n| 27        | 27    | 66     |\n| 28        | 28    | 69     |\n| 29        | 29    | 72     |\n| 30        | 30    | 75     |\n| 31        | 31    | 78     |\n| 32        | 32    | 79     |\n| 33        | 33    | 82     |\n| 34        | 34    | 85     |\n| 35        | 35    | 88     |\n| 36        | 36    | 91     |\n| 37        | 37    | 94     |\n| 38        | 38    | 97     |\n| 39        | 39    | 100    |\n| 40        | 40    | 103    |",
        "example": {
          "input": "5",
          "output": "7",
          "explanation": "Binary of numbers: 1 (1), 10 (1), 11 (2), 100 (1), 101 (2). Total: 7"
        },
        "answer": "def countSetBits(n):\n    count = 0\n    i = 0\n    while (1 << i) <= n:\n        total_pairs = n + 1\n        total_pairs //= (1 << (i + 1))\n        count += total_pairs * (1 << i)\n        count += max(0, n + 1 - total_pairs * (1 << (i + 1)))\n        i += 1\n    return count"
      },      
      {
        "id": 16,
        "title": "Find the Missing Number (0 to N)",
        "description": "You are given an array containing `n` distinct numbers from the range `0` to `n`. Find the missing number.\n\n### Test Cases\n\n| Test Cases | Input | Output |\n|------------|-------|--------|\n| 1 | [3, 0, 1] | 2 |\n| 2 | [0, 1] | 2 |\n| 3 | [9,6,4,2,3,5,7,0,1] | 8 |\n| 4 | [0] | 1 |\n| 5 | [1] | 0 |\n| 6 | [2, 0] | 1 |\n| 7 | [1, 2] | 0 |\n| 8 | [0, 1, 2, 3, 5] | 4 |\n| 9 | [0, 2, 3, 4, 5] | 1 |\n| 10 | [5, 4, 3, 2, 1] | 0 |\n| 11 | [1, 2, 3, 4, 5] | 0 |\n| 12 | [0, 1, 2, 4] | 3 |\n| 13 | [0, 1, 3, 4] | 2 |\n| 14 | [0, 2, 4] | 1 |\n| 15 | [2, 1] | 0 |\n| 16 | [10, 7, 5, 6, 8, 9, 0, 3, 1, 4] | 2 |\n| 17 | [4, 3, 1, 2, 0] | 5 |\n| 18 | [1, 3, 2, 4] | 0 |\n| 19 | [7, 5, 2, 3, 4, 0, 1, 6] | 8 |\n| 20 | [10, 8, 7, 9, 0, 2, 4, 6, 5] | 3 |\n| 21 | [2, 1, 4, 0, 5] | 3 |\n| 22 | [1, 0, 2, 4] | 3 |\n| 23 | [1, 4, 2, 0, 3] | 5 |\n| 24 | [0, 1, 2] | 3 |\n| 25 | [0, 2, 3, 4] | 1 |\n| 26 | [2, 3, 4, 1] | 0 |\n| 27 | [10, 1, 3, 5, 0, 6, 2, 4, 7, 9] | 8 |\n| 28 | [0, 1, 3, 5, 6, 2, 4] | 7 |\n| 29 | [0, 1, 2, 4, 5, 6] | 3 |\n| 30 | [3, 0, 1, 2, 4] | 5 |\n| 31 | [0, 2, 1, 3] | 4 |\n| 32 | [3, 2, 1, 4] | 0 |\n| 33 | [5, 4, 3, 0, 2] | 1 |\n| 34 | [0, 1, 3, 5, 6, 2, 4] | 7 |\n| 35 | [4, 3, 2, 1, 0] | 5 |\n| 36 | [0, 1, 2, 3, 5, 6] | 4 |\n| 37 | [0, 3, 1, 2] | 4 |\n| 38 | [0, 3, 2, 1] | 4 |\n| 39 | [2, 0, 1, 4, 3] | 5 |\n| 40 | [9, 8, 7, 6, 5, 3, 4, 1, 0, 2] | 10 |",
        "example": {
          "input": "[3, 0, 1]",
          "output": "2",
          "explanation": "Numbers 0 to 3 are expected, but 2 is missing."
        },
        "answer": "def missingNumber(nums):\n    n = len(nums)\n    xor_all = 0\n    xor_arr = 0\n    for i in range(n + 1):\n        xor_all ^= i\n    for num in nums:\n        xor_arr ^= num\n    return xor_all ^ xor_arr\n\n# Input and output\nnums = list(map(int, input().split()))  # Take space-separated input and convert to integers\nprint(missingNumber(nums))"

      }           
    ]
  }
  