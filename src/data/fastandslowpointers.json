{
  "questions": [
    {
      "id": 1,
      "title": "Detect a cycle in linked list",
      "description": "Given the head of a linked list, determine if the list has a cycle in it.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|---------------------|----------------|-----------------------------|\n| 1  | [1,2,3,4,5], pos=-1         | False | No cycle                    |\n| 2  | [1,2,3,4,5], pos=2          | True  | Cycle at node 3             |\n| 3  | [1], pos=-1                 | False | Single node, no cycle       |\n| 4  | [1], pos=0                  | True  | Single node, cycle to self  |\n| 5  | [], pos=-1                  | False | Empty list                  |\n| 6  | [1,2], pos=-1               | False | Two nodes, no cycle         |\n| 7  | [1,2], pos=0                | True  | Two nodes, cycle to head    |\n| 8  | [1,2], pos=1                | True  | Two nodes, cycle to tail    |\n| 9  | [1,2,3], pos=-1             | False | Three nodes, no cycle       |\n| 10 | [1,2,3], pos=1              | True  | Cycle at node 2             |\n| 11 | [1,2,3,4], pos=0            | True  | Cycle to head               |\n| 12 | [1,2,3,4], pos=2            | True  | Cycle at node 3             |\n| 13 | [1,2,3,4], pos=-1           | False | No cycle                    |\n| 14 | [1,2,3,4,5,6], pos=3        | True  | Cycle at node 4             |\n| 15 | [1,2,3,4,5,6], pos=-1       | False | No cycle                    |\n| 16 | [1,2,3,4,5,6,7], pos=6      | True  | Cycle at last node          |\n| 17 | [1,2,3,4,5,6,7], pos=0      | True  | Cycle to head               |\n| 18 | [1,2,3,4,5,6,7], pos=-1     | False | No cycle                    |\n| 19 | [1,2,3,4,5,6,7,8], pos=4    | True  | Cycle at node 5             |\n| 20 | [1,2,3,4,5,6,7,8], pos=-1   | False | No cycle                    |\n| 21 | [1,2,3,4,5,6,7,8,9], pos=2  | True  | Cycle at node 3             |\n| 22 | [1,2,3,4,5,6,7,8,9], pos=-1 | False | No cycle                    |\n| 23 | [1,2,3,4,5,6,7,8,9,10], pos=9 | True | Cycle at last node        |\n| 24 | [1,2,3,4,5,6,7,8,9,10], pos=0 | True | Cycle to head             |\n| 25 | [1,2,3,4,5,6,7,8,9,10], pos=-1 | False | No cycle                |\n| 26 | [1,2,3,4,5], pos=4           | True  | Cycle at last node          |\n| 27 | [1,2,3,4,5], pos=1           | True  | Cycle at node 2             |\n| 28 | [1,2,3,4,5], pos=0           | True  | Cycle to head               |\n| 29 | [1,2,3,4,5], pos=-1          | False | No cycle                    |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11], pos=5 | True | Cycle at node 6         |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11], pos=-1 | False | No cycle               |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=11 | True | Cycle at last node   |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=0 | True | Cycle to head         |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=-1 | False | No cycle            |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13], pos=6 | True | Cycle at node 7    |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13], pos=-1 | False | No cycle          |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=13 | True | Cycle at last node |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=0 | True | Cycle to head     |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=-1 | False | No cycle        |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], pos=7 | True | Cycle at node 8 |\n",
      "example": {
        "input": "[1,2,3,4,5], pos=2",
        "output": "True",
        "explanation": "Cycle at node 3."
      },
      "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef hasCycle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False"
    },
    {
      "id": 2,
      "title": "Find the start of the cycle",
      "description": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return None.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|---------------------|----------------|-----------------------------|\n| 1  | [1,2,3,4,5], pos=-1         | None | No cycle                    |\n| 2  | [1,2,3,4,5], pos=2          | 3    | Cycle at node 3             |\n| 3  | [1], pos=-1                 | None | Single node, no cycle       |\n| 4  | [1], pos=0                  | 1    | Single node, cycle to self  |\n| 5  | [], pos=-1                  | None | Empty list                  |\n| 6  | [1,2], pos=-1               | None | Two nodes, no cycle         |\n| 7  | [1,2], pos=0                | 1    | Two nodes, cycle to head    |\n| 8  | [1,2], pos=1                | 2    | Two nodes, cycle to tail    |\n| 9  | [1,2,3], pos=-1             | None | Three nodes, no cycle       |\n| 10 | [1,2,3], pos=1              | 2    | Cycle at node 2             |\n| 11 | [1,2,3,4], pos=0            | 1    | Cycle to head               |\n| 12 | [1,2,3,4], pos=2            | 3    | Cycle at node 3             |\n| 13 | [1,2,3,4], pos=-1           | None | No cycle                    |\n| 14 | [1,2,3,4,5,6], pos=3        | 4    | Cycle at node 4             |\n| 15 | [1,2,3,4,5,6], pos=-1       | None | No cycle                    |\n| 16 | [1,2,3,4,5,6,7], pos=6      | 7    | Cycle at last node          |\n| 17 | [1,2,3,4,5,6,7], pos=0      | 1    | Cycle to head               |\n| 18 | [1,2,3,4,5,6,7], pos=-1     | None | No cycle                    |\n| 19 | [1,2,3,4,5,6,7,8], pos=4    | 5    | Cycle at node 5             |\n| 20 | [1,2,3,4,5,6,7,8], pos=-1   | None | No cycle                    |\n| 21 | [1,2,3,4,5,6,7,8,9], pos=2  | 3    | Cycle at node 3             |\n| 22 | [1,2,3,4,5,6,7,8,9], pos=-1 | None | No cycle                    |\n| 23 | [1,2,3,4,5,6,7,8,9,10], pos=9 | 10 | Cycle at last node        |\n| 24 | [1,2,3,4,5,6,7,8,9,10], pos=0 | 1 | Cycle to head             |\n| 25 | [1,2,3,4,5,6,7,8,9,10], pos=-1 | None | No cycle                |\n| 26 | [1,2,3,4,5], pos=4           | 5    | Cycle at last node          |\n| 27 | [1,2,3,4,5], pos=1           | 2    | Cycle at node 2             |\n| 28 | [1,2,3,4,5], pos=0           | 1    | Cycle to head               |\n| 29 | [1,2,3,4,5], pos=-1          | None | No cycle                    |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11], pos=5 | 6 | Cycle at node 6         |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11], pos=-1 | None | No cycle               |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=11 | 12 | Cycle at last node   |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=0 | 1 | Cycle to head         |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12], pos=-1 | None | No cycle            |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13], pos=6 | 7 | Cycle at node 7    |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13], pos=-1 | None | No cycle          |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=13 | 14 | Cycle at last node |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=0 | 1 | Cycle to head     |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], pos=-1 | None | No cycle        |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], pos=7 | 8 | Cycle at node 8 |\n",
      "example": {
        "input": "[1,2,3,4,5], pos=2",
        "output": "3",
        "explanation": "Cycle at node 3."
      },
      "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef detectCycle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            break\n    else:\n        return None\n    slow = head\n    while slow != fast:\n        slow = slow.next\n        fast = fast.next\n    return slow"
    },
    {
      "id": 3,
      "title": "Find the middle of the linked list",
      "description": "Given the head of a singly linked list, return the value of the middle node. If there are two middle nodes, return the second middle node.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|---------------------|----------------|-----------------------------|\n| 1  | [1,2,3,4,5]           | 3    | Odd length                |\n| 2  | [1,2,3,4,5,6]         | 4    | Even length               |\n| 3  | [1]                   | 1    | Single node               |\n| 4  | [1,2]                 | 2    | Two nodes                 |\n| 5  | [1,2,3]               | 2    | Three nodes               |\n| 6  | [1,2,3,4]             | 3    | Four nodes                |\n| 7  | [1,2,3,4,5,6,7]       | 4    | Seven nodes               |\n| 8  | [1,2,3,4,5,6,7,8]     | 5    | Eight nodes               |\n| 9  | [1,2,3,4,5,6,7,8,9]   | 5    | Nine nodes                |\n| 10 | [1,2,3,4,5,6,7,8,9,10]| 6    | Ten nodes                 |\n| 11 | [10,20,30,40,50]      | 30   | Odd, non-sequential       |\n| 12 | [10,20,30,40,50,60]   | 40   | Even, non-sequential      |\n| 13 | [5,4,3,2,1]           | 3    | Descending                |\n| 14 | [5,4,3,2,1,0]         | 2    | Descending even           |\n| 15 | [1,3,5,7,9]           | 5    | Odd, skip pattern         |\n| 16 | [2,4,6,8,10,12]       | 8    | Even, skip pattern        |\n| 17 | [1,1,1,1,1]           | 1    | All same                  |\n| 18 | [1,1,1,1,1,1]         | 1    | All same, even            |\n| 19 | [2,2,2,2,2,2,2]       | 2    | All same, odd             |\n| 20 | [2,2,2,2,2,2,2,2]     | 2    | All same, even            |\n| 21 | [1,2,1,2,1]           | 1    | Palindrome, odd           |\n| 22 | [1,2,1,2,1,2]         | 2    | Palindrome, even          |\n| 23 | [1,2,3,2,1]           | 3    | Palindrome, odd           |\n| 24 | [1,2,3,3,2,1]         | 3    | Palindrome, even          |\n| 25 | [1,2,3,4,3,2,1]       | 4    | Palindrome, odd           |\n| 26 | [1,2,3,4,4,3,2,1]     | 4    | Palindrome, even          |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11] | 6 | Eleven nodes         |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12] | 7 | Twelve nodes        |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13] | 7 | Thirteen nodes   |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14] | 8 | Fourteen nodes |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] | 8 | Fifteen nodes |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] | 9 | Sixteen nodes |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17] | 9 | Seventeen nodes |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] | 10 | Eighteen nodes |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19] | 10 | Nineteen nodes |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | 11 | Twenty nodes |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21] | 11 | Twenty-one nodes |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22] | 12 | Twenty-two nodes |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23] | 12 | Twenty-three nodes |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] | 13 | Twenty-four nodes |\n",
      "example": {
        "input": "[1,2,3,4,5]",
        "output": "3",
        "explanation": "Middle node is 3."
      },
      "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef middleNode(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow"
    },
    {
      "id": 4,
      "title": "Check if linked list is palindrome",
      "description": "Given the head of a singly linked list, return True if it is a palindrome, else False.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|---------------------|----------------|-----------------------------|\n| 1  | [1,2,3,2,1]           | True   | Odd palindrome              |\n| 2  | [1,2,2,1]             | True   | Even palindrome             |\n| 3  | [1,2,3,4,5]           | False  | Not palindrome              |\n| 4  | [1]                   | True   | Single node                 |\n| 5  | [1,2]                 | False  | Two nodes, not palindrome   |\n| 6  | [1,1]                 | True   | Two nodes, palindrome       |\n| 7  | [1,2,3,4,3,2,1]       | True   | Odd palindrome              |\n| 8  | [1,2,3,3,2,1]         | True   | Even palindrome             |\n| 9  | [1,2,3,4,5,6]         | False  | Even, not palindrome        |\n| 10 | [1,2,3,4,5,4,3,2,1]   | True   | Odd palindrome              |\n| 11 | [1,2,3,4,5,5,4,3,2,1] | True   | Even palindrome             |\n| 12 | [1,2,3,4,5,6,7,8,9,10]| False  | Not palindrome              |\n| 13 | [1,2,3,4,3,2,1]       | True   | Odd palindrome              |\n| 14 | [1,2,3,2,1]           | True   | Odd palindrome              |\n| 15 | [1,2,3,4,5,4,3,2,1]   | True   | Odd palindrome              |\n| 16 | [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 17 | [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 18 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | False | Not palindrome |\n| 19 | [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 20 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | True | Very long palindrome |\n| 21 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | False | Not palindrome |\n| 22 | [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | True | Very long palindrome |\n| 24 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | True | Very long palindrome |\n| 25 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] | False | Not palindrome |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | True | Very long palindrome |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100] | False | Not palindrome |\n| 28 | [1,2,3,2,1]           | True   | Odd palindrome              |\n| 29 | [1,2,2,1]             | True   | Even palindrome             |\n| 30 | [1,2,3,4,5]           | False  | Not palindrome              |\n| 31 | [1,2,3,4,5,4,3,2,1]   | True   | Odd palindrome              |\n| 32 | [1,2,3,4,5,5,4,3,2,1] | True   | Even palindrome             |\n| 33 | [1,2,3,4,5,6,7,8,9,10]| False  | Not palindrome              |\n| 34 | [1,2,3,4,3,2,1]       | True   | Odd palindrome              |\n| 35 | [1,2,3,2,1]           | True   | Odd palindrome              |\n| 36 | [1,2,3,4,5,4,3,2,1]   | True   | Odd palindrome              |\n| 37 | [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 38 | [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | False | Not palindrome |\n| 40 | [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1] | True | Long palindrome |\n",
      "example": {
        "input": "[1,2,3,2,1]",
        "output": "True",
        "explanation": "Odd palindrome."
      },
      "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef isPalindrome(head):\n    vals = []\n    while head:\n        vals.append(head.val)\n        head = head.next\n    return vals == vals[::-1]"
    },
    {
      "id": 5,
      "title": "Happy Number",
      "description": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-----------------------------|\n| 1  | 19    | True   | Classic happy number         |\n| 2  | 2     | False  | Not happy                   |\n| 3  | 7     | True   | Happy number                |\n| 4  | 4     | False  | Not happy                   |\n| 5  | 1     | True   | Trivially happy             |\n| 6  | 10    | True   | Happy number                |\n| 7  | 13    | True   | Happy number                |\n| 8  | 20    | False  | Not happy                   |\n| 9  | 23    | True   | Happy number                |\n| 10 | 28    | True   | Happy number                |\n| 11 | 31    | True   | Happy number                |\n| 12 | 32    | False  | Not happy                   |\n| 13 | 44    | True   | Happy number                |\n| 14 | 49    | False  | Not happy                   |\n| 15 | 68    | True   | Happy number                |\n| 16 | 70    | True   | Happy number                |\n| 17 | 79    | True   | Happy number                |\n| 18 | 82    | True   | Happy number                |\n| 19 | 86    | True   | Happy number                |\n| 20 | 91    | True   | Happy number                |\n| 21 | 94    | True   | Happy number                |\n| 22 | 97    | True   | Happy number                |\n| 23 | 100   | True   | Happy number                |\n| 24 | 103   | False  | Not happy                   |\n| 25 | 109   | False  | Not happy                   |\n| 26 | 129   | True   | Happy number                |\n| 27 | 130   | True   | Happy number                |\n| 28 | 133   | False  | Not happy                   |\n| 29 | 139   | False  | Not happy                   |\n| 30 | 167   | False  | Not happy                   |\n| 31 | 176   | False  | Not happy                   |\n| 32 | 188   | False  | Not happy                   |\n| 33 | 192   | False  | Not happy                   |\n| 34 | 193   | True   | Happy number                |\n| 35 | 203   | False  | Not happy                   |\n| 36 | 208   | False  | Not happy                   |\n| 37 | 219   | False  | Not happy                   |\n| 38 | 226   | False  | Not happy                   |\n| 39 | 236   | False  | Not happy                   |\n| 40 | 239   | False  | Not happy                   |\n",
      "example": {
        "input": "19",
        "output": "True",
        "explanation": "19 is a happy number."
      },
      "answer": "def isHappy(n):\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = sum(int(x) ** 2 for x in str(n))\n    return n == 1"
    }
  ]
}