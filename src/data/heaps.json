{
    "questions": [
        {
            "id": 1,
            "title": "Kth Largest Element in an Array",
            "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\n\n| Test Cases | nums                | k   | Expected Output | Notes                        |\n|------------|---------------------|-----|-----------------|------------------------------|\n| 1          | [3,2,1,5,6,4]       | 2   | 5               | Basic test case             |\n| 2          | [3,2,3,1,2,4,5,5,6] | 4   | 4               | With duplicates             |\n| 3          | [1]                 | 1   | 1               | Single element              |\n| 4          | [1,2,3,4,5]         | 3   | 3               | kth largest in sorted array |\n| 5          | [5,4,3,2,1]         | 2   | 4               | Reverse sorted array        |\n| 6          | [1,1,1,1]           | 2   | 1               | All elements same           |\n| 7          | [-1,-2,-3,-4,-5]    | 3   | -2              | All negative numbers        |\n| 8          | [0,0,0,0]           | 1   | 0               | All zeros                   |\n| 9          | [1,2,3,4,5]         | 1   | 5               | Largest element             |\n| 10         | [1,2,3,4,5]         | 5   | 1               | Smallest element            |\n| 11         | [10,20,30,40,50]    | 3   | 30              | Larger numbers              |\n| 12         | [-10,-20,-30,-40,-50] | 2 | -20             | Larger negative numbers     |\n| 13         | [1,3,5,7,9]         | 4   | 3               | Odd numbers                 |\n| 14         | [2,4,6,8,10]        | 3   | 6               | Even numbers                |\n| 15         | [1,2,3,4,5,6,7,8,9,10] | 5 | 6             | Larger array                |\n| 16         | [10,9,8,7,6,5,4,3,2,1] | 5 | 6             | Reverse larger array        |\n| 17         | [1,1,2,2,3,3,4,4,5,5] | 7 | 3             | Duplicates in pairs         |\n| 18         | [5,5,5,5,5]         | 3   | 5               | All same, k > 1             |\n| 19         | [1,2,3]             | 2   | 2               | Small array                 |\n| 20         | [3,2,1]             | 1   | 3               | Small reverse array         |\n| 21         | [4,5,6,7,8]         | 4   | 5               | Consecutive numbers         |\n| 22         | [1,3,2,4,5]         | 3   | 3               | Random order                |\n| 23         | [100,99,98,97,96]   | 2   | 98              | High numbers                |\n| 24         | [-100,-99,-98,-97,-96] | 3 | -98            | Low negative numbers        |\n| 25         | [0,1,2,3,4]         | 1   | 4               | Including zero              |\n| 26         | [-1,0,1]            | 2   | 0               | Mixed signs                 |\n| 27         | [2,2,2,2,2]         | 1   | 2               | All same, k=1               |\n| 28         | [1,2,3,4,5,6]       | 6   | 1               | k = n                       |\n| 29         | [6,5,4,3,2,1]       | 6   | 1               | Reverse, k = n              |\n| 30         | [1,3,5,7,9,11,13,15,17,19] | 5 | 11            | Larger odd numbers          |\n| 31         | [2,4,6,8,10,12,14,16,18,20] | 7 | 10           | Larger even numbers         |\n| 32         | [10,20,30,40,50,60,70,80,90,100] | 10 | 10       | k = n for large n           |\n| 33         | [100,90,80,70,60,50,40,30,20,10] | 1 | 100       | Largest in large array      |\n| 34         | [-5,-4,-3,-2,-1,0,1,2,3,4] | 5 | -1           | Mixed positive and negative |\n| 35         | [1,1,1,2,2,2,3,3,3,4] | 6 | 2             | Duplicates                  |\n| 36         | [5,4,3,2,1,0,-1,-2,-3,-4] | 4 | 2            | From positive to negative   |\n| 37         | [-4,-3,-2,-1,0,1,2,3,4] | 3 | 2             | Symmetric around zero       |\n| 38         | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] | 8 | 8      | Larger array, k in middle   |\n| 39         | [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 8 | 8      | Reverse larger array        |\n| 40         | [1,2,2,3,3,4,4,5,5,6] | 7 | 3             | Duplicates                  |",
            "example": {
                "input": "[3,2,1,5,6,4], k = 2",
                "output": "5",
                "explanation": "The sorted array is [1,2,3,4,5,6], so the 2nd largest element is 5."
            },
            "answer": "import heapq\nclass Solution:\n    def findKthLargest(self, nums, k):\n        return heapq.nlargest(k, nums)[-1]"
        },
        {
            "id": 2,
            "title": "Top K Frequent Elements",
            "description": "Given an integer array nums and an integer k, return the k most frequent elements.\n\n| Test Cases | nums                | k   | Expected Output | Notes                        |\n|------------|---------------------|-----|-----------------|------------------------------|\n| 1          | [1,1,1,2,2,3]       | 2   | [1,2]           | Basic test case             |\n| 2          | [1]                 | 1   | [1]             | Single element              |\n| 3          | [1,1,2]             | 1   | [1]             | With duplicates             |\n| 4          | [1,2,2,3,3,3]       | 2   | [3,2]           | Different frequencies        |\n| 5          | [4,1,-1,2,-1,2,3]   | 2   | [-1,2]          | With negative numbers        |\n| 6          | [1,1,1,1,1]         | 1   | [1]             | All same                    |\n| 7          | [1,1,2,2,3,3,4,5,6] | 3   | [1,2,3]         | Mixed frequencies           |\n| 8          | [5,5,5,4,4,3]       | 2   | [5,4]           | Decreasing order            |\n| 9          | [-1,-1,-1,-2,-2,-3] | 2   | [-1,-2]         | All negative                |\n| 10         | [0,0,0,1,1,2]       | 2   | [0,1]           | Includes zero               |\n| 11         | [10,20,30,20,30,40] | 2   | [20,30]         | Ties in frequency           |\n| 12         | [7,7,7,7,6,6,6,5,5] | 3   | [7,6,5]         | Decreasing with duplicates  |\n| 13         | [100,100,99,99,98]  | 2   | [100,99]        | High numbers                |\n| 14         | [-5,-5,-4,-4,-3,-3,-2,-1] | 3 | [-5,-4,-3]     | Negative with duplicates    |\n| 15         | [2,2,2,1,1,0,0]     | 2   | [2,1]           | Zero included               |\n| 16         | [1,1,3,3,5,5,7,7,9] | 4   | [1,3,5,7]       | Even frequencies            |\n| 17         | [1,1,1,2,2]         | 1   | [1]             | Small array                 |\n| 18         | [3,2,1]             | 2   | [2,3]           | Small reverse array         |\n| 19         | [4,5,6,7,8]         | 3   | [6,7,8]         | Consecutive numbers         |\n| 20         | [1,3,2,4,5]         | 3   | [1,2,3]         | Random order                |\n| 21         | [100,99,98,97,96]   | 3   | [98,99,100]     | High numbers                |\n| 22         | [-100,-99,-98,-97,-96] | 3 | [-98,-99,-100] | Low negative numbers        |\n| 23         | [0,1,2,3,4]         | 2   | [3,4]           | Including zero              |\n| 24         | [-1,0,1]            | 2   | [-1,0]          | Mixed signs                 |\n| 25         | [2,2,2,2,2]         | 1   | [2]             | All same, k=1               |\n| 26         | [1,2,3,4,5,6]       | 4   | [3,4,5,6]       | k > n/2                     |\n| 27         | [6,5,4,3,2,1]       | 3   | [4,5,6]         | Reverse order               |\n| 28         | [1,3,5,7,9,11,13]   | 4   | [7,9,11,13]     | Larger odd numbers          |\n| 29         | [2,4,6,8,10]        | 3   | [6,8,10]        | Larger even numbers         |\n| 30         | [10,20,30,40,50]    | 3   | [30,40,50]      | Large numbers               |\n| 31         | [-5,-4,-3,-2,-1]    | 3   | [-3,-4,-5]      | Negative numbers            |\n| 32         | [1,1,2,2,3,3]       | 2   | [1,2]           | Ties in frequency           |\n| 33         | [1,2,3,4]           | 2   | [3,4]           | Small array                 |\n| 34         | [5,4,3,2,1]         | 3   | [3,4,5]         | Reverse order               |\n| 35         | [1,1,1,2,2]         | 2   | [1,2]           | Small with duplicates       |\n| 36         | [10,20,30]          | 2   | [20,30]         | Small unique                |\n| 37         | [1,2,3]             | 1   | [1]             | Smallest k=1                |\n| 38         | [1,1,2,2,3]         | 3   | [1,2,3]         | All have same frequency     |\n| 39         | [1,1,1,2,2,2,3]     | 2   | [1,2]           | Equal frequencies           |\n| 40         | [4,4,4,3,3,2,2,1]   | 3   | [4,3,2]         | Decreasing frequencies      |",
            "example": {
                "input": "[1,1,1,2,2,3], k = 2",
                "output": "[1,2]",
                "explanation": "1 appears 3 times, 2 appears 2 times, so the top 2 frequent elements are 1 and 2."
            },
            "answer": "from collections import Counter\nimport heapq\nclass Solution:\n    def topKFrequent(self, nums, k):\n        count = Counter(nums)\n        return heapq.nlargest(k, count.keys(), key=count.get)"
        },
        {
            "id": 3,
            "title": "Find Kth Largest Element",
            "description": "Given an array of integers and an integer k, find the kth largest element in the array. You can assume k is valid (1 <= k <= array length).\n\n| Test Case | Input Array       | Input k | Expected Output | Notes                          |\n|-----------|-------------------|---------|-----------------|-------------------------------|\n| 1         | [3,2,1,5,6,4]     | 2       | 5               | 2nd largest is 5             |\n| 2         | [3,2,3,1,2,4,5]   | 4       | 3               | 4th largest is 3             |\n| 3         | [1]               | 1       | 1               | Only one element             |\n| 4         | [7,4,6,3,9,1]     | 3       | 6               | 3rd largest is 6             |\n| 5         | [2,1,3]           | 1       | 3               | 1st largest is 3             |\n| 6         | [5,5,5,5]         | 2       | 5               | 2nd largest is 5             |\n| 7         | [10,7,8,9,1,5]    | 5       | 5               | 5th largest is 5             |\n| 8         | [4,2,7,1,3]       | 2       | 4               | 2nd largest is 4             |\n| 9         | [1,2,3,4,5]       | 3       | 3               | 3rd largest is 3             |\n| 10        | [9,8,7,6,5]       | 1       | 9               | 1st largest is 9             |",
            "example": {
                "input": "[3,2,1,5,6,4], 2",
                "output": "5"
            },
            "answer": "import heapq\n\ndef kth_largest(arr, k):\n    return heapq.nlargest(k, arr)[-1]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nk = int(input().strip())\nprint(kth_largest(arr, k))"
        },
        {
            "id": 4,
            "title": "Find Median from Data Stream",
            "description": "Design a data structure that supports adding numbers and finding the median of all numbers added so far.\n\n| Test Cases | Operations                              | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | add(1), add(2), findMedian()            | 1.5             | Basic test case             |\n| 2          | add(3), findMedian()                    | 3.0             | Single element              |\n| 3          | add(1), add(2), add(3), findMedian()    | 2.0             | Three elements              |\n| 4          | add(4), add(4), findMedian()            | 4.0             | Duplicates                  |\n| 5          | add(-1), add(-2), findMedian()          | -1.5            | Negative numbers            |\n| 6          | add(0), add(0), findMedian()            | 0.0             | Zeros                       |\n| 7          | add(1), add(3), add(2), findMedian()    | 2.0             | Random order                |\n| 8          | add(10), add(20), add(30), findMedian() | 20.0            | Large numbers               |\n| 9          | add(-10), add(-20), findMedian()        | -15.0           | Large negative numbers      |\n| 10         | add(1), add(1), add(1), findMedian()    | 1.0             | All same                    |\n| 11         | add(5), add(4), add(3), findMedian()    | 4.0             | Reverse order               |\n| 12         | add(2), add(2), add(2), findMedian()    | 2.0             | All same                    |\n| 13         | add(1), add(2), add(3), add(4), findMedian() | 2.5        | Even number of elements     |\n| 14         | add(-5), add(-4), add(-3), findMedian() | -4.0            | Negative numbers            |\n| 15         | add(0), add(1), add(2), findMedian()    | 1.0             | Includes zero               |\n| 16         | add(-1), add(0), add(1), findMedian()   | 0.0             | Mixed signs                 |\n| 17         | add(10), add(9), add(8), findMedian()   | 9.0             | Decreasing order            |\n| 18         | add(1), add(3), add(5), add(7), findMedian() | 4.0        | Odd numbers                 |\n| 19         | add(2), add(4), add(6), add(8), findMedian() | 5.0        | Even numbers                |\n| 20         | add(100), add(99), findMedian()         | 99.5            | High numbers                |\n| 21         | add(-100), add(-99), findMedian()       | -99.5           | Low negative numbers        |\n| 22         | add(1), add(2), add(3), add(4), add(5), findMedian() | 3.0 | Five elements              |\n| 23         | add(5), add(4), add(3), add(2), add(1), findMedian() | 3.0 | Reverse five elements      |\n| 24         | add(1), add(1), add(2), add(2), findMedian() | 1.5    | Duplicates                 |\n| 25         | add(-1), add(-1), add(-2), add(-2), findMedian() | -1.5 | Negative duplicates        |\n| 26         | add(0), add(0), add(1), add(1), findMedian() | 0.5 | Zeros and ones            |\n| 27         | add(10), add(20), add(30), add(40), findMedian() | 25.0 | Large numbers             |\n| 28         | add(-10), add(-20), add(-30), add(-40), findMedian() | -25.0 | Large negative numbers   |\n| 29         | add(1), add(2), add(3), add(4), add(5), add(6), findMedian() | 3.5 | Six elements             |\n| 30         | add(6), add(5), add(4), add(3), add(2), add(1), findMedian() | 3.5 | Reverse six elements     |\n| 31         | add(1), add(3), add(5), add(7), add(9), findMedian() | 5.0 | Odd numbers               |\n| 32         | add(2), add(4), add(6), add(8), add(10), findMedian() | 6.0 | Even numbers             |\n| 33         | add(100), add(200), add(300), add(400), findMedian() | 250.0 | Large numbers            |\n| 34         | add(-100), add(-200), add(-300), add(-400), findMedian() | -250.0 | Large negative numbers  |\n| 35         | add(1), add(1), add(1), add(2), add(2), findMedian() | 1.0 | Duplicates               |\n| 36         | add(-1), add(-1), add(-1), add(-2), add(-2), findMedian() | -1.0 | Negative duplicates     |\n| 37         | add(0), add(0), add(0), add(1), add(1), findMedian() | 0.0 | Zeros and ones           |\n| 38         | add(10), add(20), add(30), add(40), add(50), findMedian() | 30.0 | Large numbers           |\n| 39         | add(-10), add(-20), add(-30), add(-40), add(-50), findMedian() | -30.0 | Large negative numbers |\n| 40         | add(1), add(2), add(3), add(4), add(5), add(6), add(7), findMedian() | 4.0 | Seven elements         |",
            "example": {
                "input": "add(1), add(2), findMedian()",
                "output": "1.5",
                "explanation": "The median of [1,2] is (1+2)/2 = 1.5."
            },
            "answer": "import heapq\nclass MedianFinder:\n    def __init__(self):\n        self.small = []  # max heap\n        self.large = []  # min heap\n    def addNum(self, num):\n        if len(self.small) == 0 or num < -self.small[0]:\n            heapq.heappush(self.small, -num)\n        else:\n            heapq.heappush(self.large, num)\n        if len(self.small) > len(self.large) + 1:\n            heapq.heappush(self.large, -heapq.heappop(self.small))\n        elif len(self.large) > len(self.small):\n            heapq.heappush(self.small, -heapq.heappop(self.large))\n    def findMedian(self):\n        if len(self.small) > len(self.large):\n            return float(-self.small[0])\n        return (-self.small[0] + self.large[0]) / 2.0"
        },
        {
            "id": 5,
            "title": "Kth Smallest Element in a Sorted Matrix",
            "description": "Given an n x n matrix where each row and column is sorted in ascending order, find the kth smallest element.\n\n| Test Cases | matrix                                  | k   | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----|-----------------|------------------------------|\n| 1          | [[1,5,9],[10,11,13],[12,13,15]]         | 8   | 13              | Basic test case             |\n| 2          | [[1,2],[3,4]]                           | 2   | 2               | Small matrix                |\n| 3          | [[1]]                                   | 1   | 1               | Single element              |\n| 4          | [[1,2,3],[4,5,6],[7,8,9]]               | 5   | 5               | 3x3 matrix                  |\n| 5          | [[-5,-4],[-3,-2]]                       | 3   | -3              | Negative numbers            |\n| 6          | [[0,0],[0,0]]                           | 2   | 0               | All zeros                   |\n| 7          | [[1,1],[1,1]]                           | 1   | 1               | All same                    |\n| 8          | [[10,20,30],[40,50,60],[70,80,90]]      | 9   | 90              | Large numbers               |\n| 9          | [[-10,-9,-8],[-7,-6,-5],[-4,-3,-2]]     | 6   | -6              | Negative numbers            |\n| 10         | [[1,2],[3,4]]                           | 4   | 4               | k = n*n                     |\n| 11         | [[1,3,5],[6,7,8],[9,10,11]]             | 7   | 8               | Mixed numbers               |\n| 12         | [[2,4,6],[8,10,12],[14,16,18]]          | 3   | 6               | Even numbers                |\n| 13         | [[1,1,1],[2,2,2],[3,3,3]]               | 5   | 2               | Duplicates                  |\n| 14         | [[-1,0,1],[2,3,4],[5,6,7]]              | 4   | 2               | Mixed signs                 |\n| 15         | [[10,11,12],[13,14,15],[16,17,18]]      | 1   | 10              | Smallest element            |\n| 16         | [[1,5,9],[2,6,10],[3,7,11]]             | 9   | 9               | Non-standard sorting        |\n| 17         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]]      | 10  | 10              | 4x4 matrix                  |\n| 18         | [[0,1],[2,3]]                           | 3   | 2               | Small matrix                |\n| 19         | [[100,200],[300,400]]                   | 2   | 200             | Large numbers               |\n| 20         | [[-100,-200],[-300,-400]]               | 3   | -200            | Large negative numbers      |\n| 21         | [[1,3,5,7],[9,11,13,15],[17,19,21,23]]  | 12  | 13              | Larger matrix               |\n| 22         | [[2,4,6,8],[10,12,14,16],[18,20,22,24]] | 8   | 14              | Even numbers                |\n| 23         | [[1,1],[2,2]]                           | 3   | 2               | Duplicates                  |\n| 24         | [[-5,-4,-3],[-2,-1,0],[1,2,3]]         | 7   | 0               | Mixed signs                 |\n| 25         | [[10,20],[30,40]]                       | 1   | 10              | Smallest element            |\n| 26         | [[1,2,3],[4,5,6],[7,8,9]]               | 9   | 9               | Largest element             |\n| 27         | [[0,0,0],[0,0,0],[0,0,0]]               | 5   | 0               | All zeros                   |\n| 28         | [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]] | 15 | 15         | 5x5 matrix                  |\n| 29         | [[-5,-4,-3,-2,-1],[-10,-9,-8,-7,-6],[-15,-14,-13,-12,-11]] | 10 | -6 | Negative numbers           |\n| 30         | [[1,1,1,1],[2,2,2,2],[3,3,3,3]]         | 7   | 2               | Duplicates                  |\n| 31         | [[10,20,30,40],[50,60,70,80],[90,100,110,120]] | 12 | 90     | Large numbers               |\n| 32         | [[-10,-9,-8,-7],[-6,-5,-4,-3],[-2,-1,0,1]] | 8 | -4        | Mixed signs                 |\n| 33         | [[1,2,3],[4,5,6],[7,8,9]]               | 3   | 3               | Small k                     |\n| 34         | [[1,5,9],[2,6,10],[3,7,11]]             | 6   | 6               | Non-standard sorting        |\n| 35         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]]      | 5   | 5               | 4x4 matrix                  |\n| 36         | [[0,1],[2,3]]                           | 2   | 1               | Small matrix                |\n| 37         | [[100,200],[300,400]]                   | 4   | 400             | Largest element             |\n| 38         | [[-100,-200],[-300,-400]]               | 1   | -400            | Smallest negative           |\n| 39         | [[1,3,5,7],[9,11,13,15],[17,19,21,23]]  | 6   | 7               | Medium k                    |\n| 40         | [[2,4,6,8],[10,12,14,16],[18,20,22,24]] | 10  | 12              | Even numbers                |",
            "example": {
                "input": "[[1,5,9],[10,11,13],[12,13,15]], k = 8",
                "output": "13",
                "explanation": "The sorted elements are [1,5,9,10,11,12,13,13,15], so the 8th smallest is 13."
            },
            "answer": "import heapq\nclass Solution:\n    def kthSmallest(self, matrix, k):\n        n = len(matrix)\n        heap = []\n        for i in range(min(n, k)):\n            heapq.heappush(heap, (matrix[i][0], i, 0))\n        while k > 1:\n            val, row, col = heapq.heappop(heap)\n            if col + 1 < n:\n                heapq.heappush(heap, (matrix[row][col + 1], row, col + 1))\n            k -= 1\n        return heapq.heappop(heap)[0]"
        },
        {
            "id": 6,
            "title": "Min Cost to Connect All Points",
            "description": "Given an array points representing integer coordinates of points on a 2D plane, find the minimum cost to connect all points.\n\n| Test Cases | points                                  | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | [[0,0],[2,2],[3,10],[5,2],[7,0]]        | 20              | Basic test case             |\n| 2          | [[0,0],[1,1]]                           | 2               | Two points                  |\n| 3          | [[0,0]]                                 | 0               | Single point                |\n| 4          | [[1,1],[2,2],[3,3]]                     | 4               | Points in line              |\n| 5          | [[-1,-1],[1,1]]                         | 4               | Negative coordinates        |\n| 6          | [[0,0],[0,1],[0,2]]                     | 2               | Vertical line               |\n| 7          | [[0,0],[1,0],[2,0]]                     | 2               | Horizontal line             |\n| 8          | [[10,10],[20,20],[30,30]]               | 40              | Large coordinates           |\n| 9          | [[-10,-10],[-20,-20],[-30,-30]]         | 40              | Large negative coordinates  |\n| 10         | [[0,0],[0,0]]                           | 0               | Same point                  |\n| 11         | [[1,2],[3,4],[5,6]]                     | 8               | Diagonal points             |\n| 12         | [[0,0],[1,1],[2,2],[3,3],[4,4]]         | 8               | Five points in line         |\n| 13         | [[0,0],[-1,-1],[1,1]]                   | 4               | Mixed signs                 |\n| 14         | [[0,0],[10,10],[20,20]]                 | 40              | Large distances             |\n| 15         | [[0,0],[0,1],[1,0],[1,1]]               | 3               | Square                      |\n| 16         | [[0,0],[2,0],[0,2],[2,2]]               | 6               | Square with distance 2      |\n| 17         | [[1,1],[1,2],[2,1],[2,2]]               | 3               | Square with distance 1      |\n| 18         | [[0,0],[0,10],[10,0],[10,10]]           | 30              | Large square                |\n| 19         | [[-1,0],[0,-1],[1,0],[0,1]]             | 4               | Cross pattern               |\n| 20         | [[0,0],[1,2],[2,4],[3,6]]               | 9               | Points on a line            |\n| 21         | [[10,10],[11,11],[12,12]]               | 4               | Close points                |\n| 22         | [[-10,-10],[-11,-11],[-12,-12]]         | 4               | Close negative points       |\n| 23         | [[0,0],[100,100],[200,200]]             | 400             | Large distances             |\n| 24         | [[0,0],[-100,-100],[-200,-200]]         | 400             | Large negative distances    |\n| 25         | [[0,0],[0,0],[0,0]]                     | 0               | All same point              |\n| 26         | [[1,1],[2,2],[3,3],[4,4],[5,5]]         | 8               | Diagonal line               |\n| 27         | [[0,0],[1,0],[0,1],[1,1],[2,2]]         | 5               | Mixed points                |\n| 28         | [[10,10],[20,20],[30,30],[40,40]]       | 60              | Large diagonal              |\n| 29         | [[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 60            | Large negative diagonal     |\n| 30         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]   | 10              | Six points in line          |\n| 31         | [[0,0],[0,1],[0,2],[0,3],[0,4]]         | 4               | Vertical line               |\n| 32         | [[0,0],[1,0],[2,0],[3,0],[4,0]]         | 4               | Horizontal line             |\n| 33         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]   | 10              | Diagonal line               |\n| 34         | [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]] | 8            | Negative diagonal           |\n| 35         | [[0,0],[10,10],[20,20],[30,30],[40,40]] | 80              | Large diagonal              |\n| 36         | [[0,0],[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 80     | Large negative diagonal     |\n| 37         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]] | 12         | Seven points in line        |\n| 38         | [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]]   | 5               | Vertical line               |\n| 39         | [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]   | 5               | Horizontal line             |\n| 40         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]] | 12         | Diagonal line               |",
            "example": {
                "input": "[[0,0],[2,2],[3,10],[5,2],[7,0]]",
                "output": "20",
                "explanation": "The minimum cost to connect all points is achieved by connecting points with Manhattan distances, totaling 20."
            },
            "answer": "import heapq\nclass Solution:\n    def minCostConnectPoints(self, points):\n        n = len(points)\n        if n <= 1:\n            return 0\n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                cost = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n                adj[i].append((cost, j))\n                adj[j].append((cost, i))\n        visited = set()\n        heap = [(0, 0)]\n        total_cost = 0\n        while heap and len(visited) < n:\n            cost, u = heapq.heappop(heap)\n            if u in visited:\n                continue\n            visited.add(u)\n            total_cost += cost\n            for next_cost, v in adj[u]:\n                if v not in visited:\n                    heapq.heappush(heap, (next_cost, v))\n        return total_cost"
        },
        {
            "id": 7,
            "title": "K Closest Points to Origin",
            "description": "Given an array of points on a 2D plane and an integer k, return the k points closest to the origin (0,0).\n\n| Test Cases | points                                  | k   | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----|-----------------|------------------------------|\n| 1          | [[1,3],[-2,2]]                          | 1   | [[-2,2]]        | Basic test case             |\n| 2          | [[3,3],[5,-1],[-2,4]]                   | 2   | [[3,3],[-2,4]]  | Three points                |\n| 3          | [[0,0]]                                 | 1   | [[0,0]]         | Single point                |\n| 4          | [[1,1],[2,2],[3,3]]                     | 2   | [[1,1],[2,2]]   | Points in line              |\n| 5          | [[-1,-1],[1,1]]                         | 1   | [[-1,-1]]       | Negative coordinates        |\n| 6          | [[0,1],[0,2],[0,3]]                     | 2   | [[0,1],[0,2]]   | Vertical line               |\n| 7          | [[1,0],[2,0],[3,0]]                     | 2   | [[1,0],[2,0]]   | Horizontal line             |\n| 8          | [[10,10],[20,20],[30,30]]               | 1   | [[10,10]]       | Large coordinates           |\n| 9          | [[-10,-10],[-20,-20],[-30,-30]]         | 2   | [[-10,-10],[-20,-20]] | Large negative coordinates |\n| 10         | [[0,0],[0,0]]                           | 1   | [[0,0]]         | Same point                  |\n| 11         | [[1,2],[3,4],[5,6]]                     | 2   | [[1,2],[3,4]]   | Diagonal points             |\n| 12         | [[0,0],[1,1],[2,2],[3,3],[4,4]]         | 3   | [[0,0],[1,1],[2,2]] | Five points in line        |\n| 13         | [[0,0],[-1,-1],[1,1]]                   | 2   | [[0,0],[-1,-1]] | Mixed signs                 |\n| 14         | [[0,0],[10,10],[20,20]]                 | 2   | [[0,0],[10,10]] | Large distances             |\n| 15         | [[0,0],[0,1],[1,0],[1,1]]               | 3   | [[0,0],[0,1],[1,0]] | Square                     |\n| 16         | [[0,0],[2,0],[0,2],[2,2]]               | 3   | [[0,0],[2,0],[0,2]] | Square with distance 2     |\n| 17         | [[1,1],[1,2],[2,1],[2,2]]               | 3   | [[1,1],[1,2],[2,1]] | Square with distance 1     |\n| 18         | [[0,0],[0,10],[10,0],[10,10]]           | 2   | [[0,0],[0,10]]  | Large square                |\n| 19         | [[-1,0],[0,-1],[1,0],[0,1]]             | 3   | [[-1,0],[0,-1],[1,0]] | Cross pattern              |\n| 20         | [[0,0],[1,2],[2,4],[3,6]]               | 2   | [[0,0],[1,2]]   | Points on a line            |\n| 21         | [[10,10],[11,11],[12,12]]               | 2   | [[10,10],[11,11]] | Close points               |\n| 22         | [[-10,-10],[-11,-11],[-12,-12]]         | 2   | [[-10,-10],[-11,-11]] | Close negative points      |\n| 23         | [[0,0],[100,100],[200,200]]             | 2   | [[0,0],[100,100]] | Large distances            |\n| 24         | [[0,0],[-100,-100],[-200,-200]]         | 2   | [[0,0],[-100,-100]] | Large negative distances  |\n| 25         | [[0,0],[0,0],[0,0]]                     | 2   | [[0,0],[0,0]]   | All same point              |\n| 26         | [[1,1],[2,2],[3,3],[4,4],[5,5]]         | 3   | [[1,1],[2,2],[3,3]] | Diagonal line              |\n| 27         | [[0,0],[1,0],[0,1],[1,1],[2,2]]         | 3   | [[0,0],[1,0],[0,1]] | Mixed points               |\n| 28         | [[10,10],[20,20],[30,30],[40,40]]       | 2   | [[10,10],[20,20]] | Large diagonal             |\n| 29         | [[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 2 | [[-10,-10],[-20,-20]] | Large negative diagonal   |\n| 30         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]   | 3   | [[0,0],[1,1],[2,2]] | Six points in line         |\n| 31         | [[0,0],[0,1],[0,2],[0,3],[0,4]]         | 3   | [[0,0],[0,1],[0,2]] | Vertical line              |\n| 32         | [[0,0],[1,0],[2,0],[3,0],[4,0]]         | 3   | [[0,0],[1,0],[2,0]] | Horizontal line            |\n| 33         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]   | 3   | [[1,1],[2,2],[3,3]] | Diagonal line              |\n| 34         | [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]] | 3 | [[-1,-1],[-2,-2],[-3,-3]] | Negative diagonal          |\n| 35         | [[0,0],[10,10],[20,20],[30,30],[40,40]] | 3   | [[0,0],[10,10],[20,20]] | Large diagonal             |\n| 36         | [[0,0],[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 3 | [[0,0],[-10,-10],[-20,-20]] | Large negative diagonal   |\n| 37         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]] | 4 | [[0,0],[1,1],[2,2],[3,3]] | Seven points in line       |\n| 38         | [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]]   | 4   | [[0,0],[0,1],[0,2],[0,3]] | Vertical line              |\n| 39         | [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]   | 4   | [[0,0],[1,0],[2,0],[3,0]] | Horizontal line            |\n| 40         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]] | 4 | [[1,1],[2,2],[3,3],[4,4]] | Diagonal line             |",
            "example": {
                "input": "points = [[1,3],[-2,2]], k = 1",
                "output": "[[-2,2]]",
                "explanation": "The point [-2,2] has distance sqrt(8) from origin, which is less than sqrt(10) for [1,3]."
            },
            "answer": "import heapq\nclass Solution:\n    def kClosest(self, points, k):\n        heap = []\n        for x, y in points:\n            dist = -(x*x + y*y)  # Max heap for smallest distances\n            heapq.heappush(heap, (dist, x, y))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return [[x, y] for dist, x, y in heap]"
        },
        {
            "id": 8,
            "title": "Meeting Rooms II",
            "description": "Given an array of meeting time intervals consisting of start and end times, find the minimum number of conference rooms required.\n\n| Test Cases | intervals                               | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | [[0,30],[5,10],[15,20]]                 | 2               | Basic test case             |\n| 2          | [[7,10],[2,4]]                          | 1               | Non-overlapping             |\n| 3          | [[1,5]]                                 | 1               | Single meeting              |\n| 4          | [[1,2],[2,3],[3,4]]                     | 1               | Non-overlapping sequential  |\n| 5          | [[1,3],[2,4],[3,5]]                     | 2               | Overlapping meetings        |\n| 6          | [[0,1],[0,1],[0,1]]                     | 3               | All overlapping             |\n| 7          | [[10,20],[20,30],[30,40]]               | 1               | Sequential meetings         |\n| 8          | [[5,15],[10,20],[15,25]]                | 2               | Partial overlaps            |\n| 9          | [[1,10],[2,7],[3,19],[8,12],[10,20],[11,30]] | 3           | Complex overlaps            |\n| 10         | [[0,5],[5,10],[10,15]]                  | 1               | Sequential                  |\n| 11         | [[1,4],[2,5],[3,6]]                     | 3               | All overlapping             |\n| 12         | [[10,11],[11,12],[12,13]]               | 1               | Short sequential meetings   |\n| 13         | [[0,10],[5,15],[10,20]]                 | 2               | Overlap in middle           |\n| 14         | [[1,3],[4,6],[7,9]]                     | 1               | No overlaps                 |\n| 15         | [[2,4],[4,6],[6,8]]                     | 1               | Sequential                  |\n| 16         | [[1,10],[2,3],[4,5]]                    | 2               | Nested intervals            |\n| 17         | [[0,2],[1,3],[2,4]]                     | 2               | Small overlaps              |\n| 18         | [[10,30],[11,12],[13,14]]               | 2               | Short meetings inside long  |\n| 19         | [[5,10],[6,11],[7,12]]                  | 3               | Tight overlaps              |\n| 20         | [[0,100],[10,20],[30,40]]               | 2               | Large interval              |\n| 21         | [[1,2],[1,2],[1,2]]                     | 3               | Identical intervals         |\n| 22         | [[10,15],[15,20],[20,25]]               | 1               | Sequential                  |\n| 23         | [[1,5],[2,6],[3,7],[4,8]]               | 4               | All overlapping             |\n| 24         | [[5,7],[7,9],[9,11]]                    | 1               | Sequential                  |\n| 25         | [[0,1],[1,2],[2,3],[3,4]]               | 1               | Sequential                  |\n| 26         | [[10,20],[15,25],[20,30]]               | 2               | Overlapping meetings        |\n| 27         | [[1,10],[2,9],[3,8]]                    | 3               | Nested overlaps             |\n| 28         | [[5,15],[10,20],[15,25],[20,30]]        | 2               | Multiple overlaps           |\n| 29         | [[0,5],[5,10],[10,15],[15,20]]          | 1               | Sequential                  |\n| 30         | [[1,3],[2,4],[3,5],[4,6]]               | 3               | Tight overlaps              |\n| 31         | [[10,12],[12,14],[14,16],[16,18]]       | 1               | Sequential                  |\n| 32         | [[0,10],[5,15],[10,20],[15,25]]         | 2               | Overlapping                 |\n| 33         | [[1,4],[4,7],[7,10],[10,13]]            | 1               | Sequential                  |\n| 34         | [[2,6],[3,7],[4,8],[5,9]]               | 4               | All overlapping             |\n| 35         | [[0,2],[2,4],[4,6],[6,8]]               | 1               | Sequential                  |\n| 36         | [[10,30],[12,14],[16,18]]               | 2               | Short inside long           |\n| 37         | [[5,10],[6,11],[7,12],[8,13]]           | 4               | Tight overlaps              |\n| 38         | [[0,100],[10,20],[30,40],[50,60]]       | 2               | Large interval              |\n| 39         | [[1,2],[1,2],[1,2],[1,2]]               | 4               | Identical intervals         |\n| 40         | [[10,15],[15,20],[20,25],[25,30]]       | 1               | Sequential                  |",
            "example": {
                "input": "[[0,30],[5,10],[15,20]]",
                "output": "2",
                "explanation": "The meetings overlap, requiring 2 rooms."
            },
            "answer": "import heapq\nclass Solution:\n    def minMeetingRooms(self, intervals):\n        if not intervals:\n            return 0\n        intervals.sort(key=lambda x: x[0])\n        heap = []\n        for start, end in intervals:\n            if heap and heap[0] <= start:\n                heapq.heappop(heap)\n            heapq.heappush(heap, end)\n        return len(heap)"
        },
        {
            "id": 9,
            "title": "Find Minimum Element in Heap",
            "description": "Given an array of integers representing a min-heap, return the smallest element (root of the heap).\n\n| Test Case | Input Array       | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | [1,2,3,4,5]       | 1               | Smallest is 1                |\n| 2         | [2,3,4,5,6]       | 2               | Smallest is 2                |\n| 3         | [5,6,7,8,9]       | 5               | Smallest is 5                |\n| 4         | [1,1,1,1]         | 1               | Smallest is 1                |\n| 5         | [3,4,5,6,7,8]     | 3               | Smallest is 3                |\n| 6         | [10,20,30]        | 10              | Smallest is 10               |\n| 7         | [2,5,10,15,20]    | 2               | Smallest is 2                |\n| 8         | [1,2,3]           | 1               | Smallest is 1                |\n| 9         | [7,8,9,10]        | 7               | Smallest is 7                |\n| 10        | [4,5,6,7,8]       | 4               | Smallest is 4                |",
            "example": {
                "input": "[1,2,3,4,5]",
                "output": "1"
            },
            "answer": "def find_min_heap(arr):\n    return arr[0]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nprint(find_min_heap(arr))"
        },
        {
            "id": 10,
            "title": "Reorganize String",
            "description": "Given a string, reorganize it so that no two adjacent characters are the same. If not possible, return an empty string.\n\n| Test Cases | s                    | Expected Output | Notes                        |\n|------------|----------------------|-----------------|------------------------------|\n| 1          | 'aab'                | 'aba'           | Basic test case             |\n| 2          | 'aaab'               | ''              | Impossible case             |\n| 3          | 'a'                  | 'a'             | Single character            |\n| 4          | 'aabb'               | 'abab'          | Balanced characters         |\n| 5          | 'aaaabbbb'           | 'abababab'      | Equal counts                |\n| 6          | 'abcabc'             | 'abcabc'        | Already valid               |\n| 7          | 'aabbcc'             | 'abcabc'        | Three characters            |\n| 8          | 'aaaaaa'             | ''              | All same                    |\n| 9          | 'abcd'               | 'abcd'          | All unique                  |\n| 10         | 'aabbccddee'         | 'abcdeabcde'    | Multiple characters         |\n| 11         | 'aaa'                | ''              | Three same characters       |\n| 12         | 'aabbccdd'           | 'abcdabcd'      | Four characters             |\n| 13         | 'abcdeabcde'         | 'abcdeabcde'    | Already alternating         |\n| 14         | 'aabbc'              | 'ababc'         | Slightly unbalanced         |\n| 15         | 'aaaabb'             | ''              | Too many 'a's               |\n| 16         | 'aabbccdda'          | 'abcdabcad'     | Complex case                |\n| 17         | 'z'                  | 'z'             | Single character            |\n| 18         | 'zzzzaaaa'           | ''              | Too many 'z's               |\n| 19         | 'aabbccddeeff'       | 'abcdefabcdef'  | Six characters              |\n| 20         | 'abcdef'             | 'abcdef'        | All unique                  |\n| 21         | 'aaaabbbcc'          | ''              | Too many 'a's               |\n| 22         | 'aabbccdd'           | 'abcdabcd'      | Balanced                    |\n| 23         | 'abcdabcd'           | 'abcdabcd'      | Already valid               |\n| 24         | 'aabbccee'           | 'abceabce'      | Four characters             |\n| 25         | 'aaaaabbbbb'         | 'ababababab'    | Equal counts                |\n| 26         | 'aabbccddaabb'       | 'abcdabcadba'   | Longer string               |\n| 27         | 'abc'                | 'abc'           | Short valid                 |\n| 28         | 'aaaaa'              | ''              | Impossible                  |\n| 29         | 'aabbccdd'           | 'abcdabcd'      | Four pairs                  |\n| 30         | 'aabbccdda'          | 'abcdabcad'     | Extra character             |\n| 31         | 'aabbccddaabbcc'     | 'abcadbcadbcab' | Longer balanced             |\n| 32         | 'aaaabbbbcccc'       | 'abcabcabcabc'  | Three equal counts          |\n| 33         | 'abcdabcdabcd'       | 'abcdabcdabcd'  | Already valid               |\n| 34         | 'aabbccddaabbccdd'   | 'abcdabcadbcabdc' | Long balanced              |\n| 35         | 'aaaabbbcccddd'      | ''              | Too many 'a's               |\n| 36         | 'aabbccddaabbccdda'  | 'abcdabcadbcadabc' | Very long balanced         |\n| 37         | 'abcabcabc'          | 'abcabcabc'     | Already valid               |\n| 38         | 'aabb'               | 'abab'          | Simple balanced             |\n| 39         | 'aaaabbcc'           | ''              | Impossible                  |\n| 40         | 'aabbccddaabbccddaabb' | 'abcdabcadbcadabcaba' | Very long                  |",
            "example": {
                "input": "'aab'",
                "output": "'aba'",
                "explanation": "The string can be reorganized as 'aba' so that no two adjacent characters are the same."
            },
            "answer": "import heapq\nfrom collections import Counter\nclass Solution:\n    def reorganizeString(self, s):\n        count = Counter(s)\n        if max(count.values()) > (len(s) + 1) // 2:\n            return ''\n        heap = [(-freq, char) for char, freq in count.items()]\n        heapq.heapify(heap)\n        result = []\n        while len(heap) >= 2:\n            freq1, char1 = heapq.heappop(heap)\n            freq2, char2 = heapq.heappop(heap)\n            result.extend([char1, char2])\n            if freq1 + 1 < 0:\n                heapq.heappush(heap, (freq1 + 1, char1))\n            if freq2 + 1 < 0:\n                heapq.heappush(heap, (freq2 + 1, char2))\n        if heap:\n            result.append(heap[0][1])\n        return ''.join(result)"
        },
        {
            "id": 11,
            "title": "Pop K Elements from Heap",
            "description": "Given an array of integers representing a min-heap and an integer k, pop the k smallest elements and return the kth smallest element. Assume k is valid.\n\n| Test Case | Input Array       | Input k | Expected Output | Notes                          |\n|-----------|-------------------|---------|-----------------|-------------------------------|\n| 1         | [1,2,3,4,5]       | 2       | 2               | 2nd smallest is 2            |\n| 2         | [2,3,4,5,6]       | 1       | 2               | 1st smallest is 2            |\n| 3         | [5,6,7,8,9]       | 3       | 7               | 3rd smallest is 7            |\n| 4         | [1,1,1,1]         | 2       | 1               | 2nd smallest is 1            |\n| 5         | [3,4,5,6,7]       | 4       | 6               | 4th smallest is 6            |\n| 6         | [10,20,30,40]     | 1       | 10              | 1st smallest is 10           |\n| 7         | [2,5,10,15]       | 3       | 10              | 3rd smallest is 10           |\n| 8         | [1,2,3]           | 2       | 2               | 2nd smallest is 2            |\n| 9         | [7,8,9,10]        | 4       | 10              | 4th smallest is 10           |\n| 10        | [4,5,6,7]         | 3       | 6               | 3rd smallest is 6            |",
            "example": {
                "input": "[1,2,3,4,5], 2",
                "output": "2"
            },
            "answer": "import heapq\n\ndef pop_k_elements(arr, k):\n    return heapq.nsmallest(k, arr)[-1]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nk = int(input().strip())\nprint(pop_k_elements(arr, k))"
        },
        {
            "id": 12,
            "title": "Kth Smallest Sum of Pairs from Two Arrays",
            "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, and an integer k, return the kth smallest sum of pairs (nums1[i] + nums2[j]).\n\n| Test Cases | nums1                | nums2                | k   | Expected Output | Notes                        |\n|------------|----------------------|----------------------|-----|-----------------|------------------------------|\n| 1          | [1,7,11]             | [2,4,6]              | 3   | 7               | Basic test case             |\n| 2          | [1,2]                | [3,4]                | 2   | 5               | Small arrays                |\n| 3          | [1]                  | [1]                  | 1   | 2               | Single elements             |\n| 4          | [1,2,3]              | [1,2,3]              | 5   | 4               | Equal arrays                |\n| 5          | [-2,-1]              | [-3,-2]              | 2   | -4              | Negative numbers            |\n| 6          | [0,0]                | [0,0]                | 2   | 0               | All zeros                   |\n| 7          | [10,20,30]           | [5,15,25]            | 4   | 25              | Larger numbers              |\n| 8          | [1,5,10]             | [2,7,12]             | 6   | 12              | Spread out numbers          |\n| 9          | [-5,-3,-1]           | [-4,-2,0]            | 3   | -7              | Negative numbers            |\n| 10         | [1,2,3]              | [4,5,6]              | 2   | 6               | Sequential arrays           |\n| 11         | [1,1,1]              | [1,1,1]              | 3   | 2               | All same                    |\n| 12         | [0,10,20]            | [0,10,20]            | 4   | 10              | Common elements             |\n| 13         | [1,3,5]              | [2,4,6]              | 7   | 9               | Overlapping sums            |\n| 14         | [-1,0,1]             | [-2,-1,0]            | 5   | -1              | Mixed signs                 |\n| 15         | [100,200]            | [150,250]            | 2   | 250             | Large numbers               |\n| 16         | [-100,-50]           | [-75,-25]            | 3   | -125            | Large negative numbers      |\n| 17         | [1,5,10]             | [2,6,11]             | 8   | 16              | Sequential increments       |\n| 18         | [0,1]                | [0,1]                | 3   | 1               | Small arrays                |\n| 19         | [10,20]              | [30,40]              | 2   | 40              | Non-overlapping             |\n| 20         | [-5,-3]              | [-2,-1]              | 3   | -5              | Negative numbers            |\n| 21         | [1,2,3,4]            | [5,6,7,8]            | 6   | 8               | Larger arrays               |\n| 22         | [0,0,0]              | [0,0,0]              | 4   | 0               | All zeros                   |\n| 23         | [100,101,102]        | [103,104,105]        | 5   | 205             | Close numbers               |\n| 24         | [-100,-99,-98]       | [-97,-96,-95]        | 4   | -195            | Negative close numbers      |\n| 25         | [0,1,2]              | [0,1,2]              | 6   | 3               | Identical arrays            |\n| 26         | [1,10,100]           | [2,20,200]           | 3   | 21              | Large gaps                  |\n| 27         | [-10,-5,0]           | [-5,0,5]             | 5   | -5              | Zero common                 |\n| 28         | [1,2,3,4,5]          | [6,7,8,9,10]         | 10  | 11              | Sequential arrays           |\n| 29         | [-5,-4,-3,-2,-1]    | [0,1,2,3,4]          | 8   | -1              | Negative to positive        |\n| 30         | [10,20,30,40]        | [15,25,35,45]        | 6   | 35              | Overlapping sums            |\n| 31         | [1,3,5,7,9]          | [2,4,6,8,10]         | 12  | 11              | Close sums                  |\n| 32         | [0,10]               | [0,10]               | 3   | 10              | Common points               |\n| 33         | [1,2,3,4]            | [5,6,7,8]            | 8   | 10              | Four elements               |\n| 34         | [-1,-1]              | [-1,-1]              | 3   | -2              | Negative same               |\n| 35         | [100,200,300]        | [150,250,350]        | 4   | 250             | Large sums                  |\n| 36         | [-100,-90,-80]       | [-90,-80,-70]        | 5   | -170            | Negative sums               |\n| 37         | [1,5,10,15]          | [2,6,11,16]          | 7   | 11              | Sequential increments       |\n| 38         | [0,0]                | [0,0]                | 3   | 0               | All zeros                   |\n| 39         | [10,20,30,40]        | [15,25,35,45]        | 10  | 45              | Large sums                  |\n| 40         | [1,2,3,4,5,6]        | [7,8,9,10,11,12]    | 12  | 13              | Large arrays                |",
            "example": {
                "input": "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
                "output": "7",
                "explanation": "The possible sums are [3,5,7,9,11,13,13,15,17], and the 3rd smallest is 7."
            },
            "answer": "import heapq\nclass Solution:\n    def kthSmallest(self, nums1, nums2, k):\n        m, n = len(nums1), len(nums2)\n        heap = [(nums1[0] + nums2[0], 0, 0)]\n        visited = {(0, 0)}\n        for _ in range(k - 1):\n            sum_val, i, j = heapq.heappop(heap)\n            if i + 1 < m and (i + 1, j) not in visited:\n                heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n                visited.add((i + 1, j))\n            if j + 1 < n and (i, j + 1) not in visited:\n                heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n                visited.add((i, j + 1))\n        return heapq.heappop(heap)[0]"
        },
        {
            "id": 13,
            "title": "Sum of K Smallest Elements",
            "description": "Given an array of integers and an integer k, return the sum of the k smallest elements in the array. Assume k is valid.\n\n| Test Case | Input Array       | Input k | Expected Output | Notes                          |\n|-----------|-------------------|---------|-----------------|-------------------------------|\n| 1         | [1,2,3,4,5]       | 2       | 3               | Sum of [1,2] = 3             |\n| 2         | [3,1,4,1,5]       | 3       | 5               | Sum of [1,1,3] = 5           |\n| 3         | [5,6,7,8,9]       | 1       | 5               | Sum of [5] = 5               |\n| 4         | [2,2,2,2]         | 2       | 4               | Sum of [2,2] = 4             |\n| 5         | [4,3,2,1]         | 4       | 10              | Sum of [1,2,3,4] = 10        |\n| 6         | [10,20,30]        | 2       | 30              | Sum of [10,20] = 30          |\n| 7         | [1,5,10,15]       | 3       | 16              | Sum of [1,5,10] = 16         |\n| 8         | [3,2,1]           | 2       | 3               | Sum of [1,2] = 3             |\n| 9         | [7,8,9,10]        | 1       | 7               | Sum of [7] = 7               |\n| 10        | [6,5,4,3,2]       | 3       | 12              | Sum of [2,4,6] = 12          |",
            "example": {
                "input": "[1,2,3,4,5], 2",
                "output": "3"
            },
            "answer": "import heapq\n\ndef sum_k_smallest(arr, k):\n    return sum(heapq.nsmallest(k, arr))\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nk = int(input().strip())\nprint(sum_k_smallest(arr, k))"
        },
        {
            "id": 14,
            "title": "Furthest Building You Can Reach",
            "description": "Given an array of building heights, a number of bricks, and ladders, find the furthest building index you can reach.\n\n| Test Cases | heights              | bricks | ladders | Expected Output | Notes                        |\n|------------|----------------------|--------|---------|-----------------|------------------------------|\n| 1          | [4,2,7,6,9,14,12]    | 5      | 1       | 4               | Basic test case             |\n| 2          | [4,12,2,7,3,18,20,3,19] | 10 | 2       | 7               | Complex case                |\n| 3          | [1]                  | 0      | 0       | 0               | Single building             |\n| 4          | [1,2,3,4]            | 10     | 0       | 3               | Only bricks                 |\n| 5          | [10,9,8,7]           | 0      | 0       | 0               | No resources                |\n| 6          | [1,1,1,1]            | 0      | 0       | 3               | No climbs                   |\n| 7          | [1,5,10,15]          | 10     | 1       | 3               | Use ladder and bricks       |\n| 8          | [100,200,300,400]    | 100    | 0       | 0               | Insufficient bricks         |\n| 9          | [1,2,3,4,5]          | 100    | 0       | 4               | Enough bricks               |\n| 10         | [10,20,30,40]        | 0      | 2       | 2               | Use ladders only            |\n| 11         | [1,10,20,30,40]      | 20     | 1       | 3               | Mixed resources             |\n| 12         | [5,5,5,5,5]          | 0      | 0       | 4               | No climbs                   |\n| 13         | [1,100,200,300]      | 50     | 1       | 1               | Limited bricks              |\n| 14         | [10,9,8,7,6]         | 0      | 0       | 4               | Decreasing heights          |\n| 15         | [1,2,3,4,5,6,7]      | 10     | 1       | 6               | Sequential climbs           |\n| 16         | [100,100,100,100]    | 0      | 0       | 3               | No climbs                   |\n| 17         | [1,10,100,1000]      | 100    | 1       | 2               | Large jumps                 |\n| 18         | [5,10,15,20,25]      | 10     | 1       | 3               | Limited resources           |\n| 19         | [1,2,3,4,5,6]        | 100    | 0       | 5               | Enough bricks               |\n| 20         | [10,20,30,40,50]     | 0      | 3       | 3               | Use ladders only            |\n| 21         | [1,100,200,300,400]  | 150    | 1       | 2               | Large climb                 |\n| 22         | [5,10,15,20]         | 5      | 1       | 3               | Tight resources             |\n| 23         | [1,1,1,1,1,1]        | 0      | 0       | 5               | No climbs                   |\n| 24         | [100,200,300,400,500] | 100   | 0       | 0               | No affordable climbs        |\n| 25         | [1,2,3,4,5,6,7,8]    | 15     | 1       | 7               | Sequential climbs           |\n| 26         | [10,9,8,7,6,5]       | 0      | 0       | 5               | Decreasing heights          |\n| 27         | [1,10,100,1000,10000] | 100   | 1       | 2               | Very large jumps            |\n| 28         | [5,10,15,20,25,30]   | 10     | 2       | 4               | Mixed resources             |\n| 29         | [1,2,3,4,5,6,7,8,9]  | 100    | 0       | 8               | Enough bricks               |\n| 30         | [10,20,30,40,50,60]  | 0      | 4       | 4               | Use ladders only            |\n| 31         | [1,100,200,300,400,500] | 200 | 1       | 2               | Large climb                 |\n| 32         | [5,10,15,20,25,30,35] | 15    | 1       | 5               | Tight resources             |\n| 33         | [1,1,1,1,1,1,1]      | 0      | 0       | 6               | No climbs                   |\n| 34         | [100,200,300,400,500,600] | 100 | 0       | 0               | No affordable climbs        |\n| 35         | [1,2,3,4,5,6,7,8,9,10] | 20   | 1       | 9               | Sequential climbs           |\n| 36         | [10,9,8,7,6,5,4]     | 0      | 0       | 6               | Decreasing heights          |\n| 37         | [1,10,100,1000,10000,100000] | 100 | 1       | 2               | Very large jumps            |\n| 38         | [5,10,15,20,25,30,35,40] | 15 | 2       | 5               | Mixed resources             |\n| 39         | [1,2,3,4,5,6,7,8,9,10,11] | 100 | 0       | 10              | Enough bricks               |\n| 40         | [10,20,30,40,50,60,70] | 0    | 5       | 5               | Use ladders only            |",
            "example": {
                "input": "heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
                "output": "4",
                "explanation": "Use bricks for height 2->7 (3 bricks), ladder for 6->9, then bricks for 9->14 (2 bricks), reach index 4."
            },
            "answer": "import heapq\nclass Solution:\n    def furthestBuilding(self, heights, bricks, ladders):\n        heap = []\n        for i in range(len(heights) - 1):\n            diff = heights[i + 1] - heights[i]\n            if diff > 0:\n                heapq.heappush(heap, diff)\n                if len(heap) > ladders:\n                    bricks -= heapq.heappop(heap)\n                if bricks < 0:\n                    return i\n        return len(heights) - 1"
        },
        {
            "id": 15,
            "title": "Minimum Cost to Hire K Workers",
            "description": "Given arrays quality and wage representing workers' quality and minimum wage expectation, find the minimum cost to hire exactly k workers.\n\n| Test Cases | quality              | wage                 | k   | Expected Output | Notes                        |\n|------------|----------------------|----------------------|-----|-----------------|------------------------------|\n| 1          | [10,20,5]            | [70,50,30]           | 2   | 105.0           | Basic test case             |\n| 2          | [3,1,10,10,1]        | [4,8,2,2,7]          | 3   | 30.0            | Complex case                |\n| 3          | [1]                  | [10]                 | 1   | 10.0            | Single worker               |\n| 4          | [5,5,5]              | [10,10,10]           | 2   | 10.0            | Equal quality and wage      |\n| 5          | [10,20,30]           | [100,200,300]        | 2   | 200.0           | High wages                  |\n| 6          | [1,1,1]              | [1,1,1]              | 2   | 1.0             | All same                    |\n| 7          | [3,4,5,6]            | [15,20,25,30]        | 3   | 45.0            | Sequential values           |\n| 8          | [10,10,10]           | [50,60,70]           | 2   | 100.0           | Same quality                |\n| 9          | [1,2,3,4]            | [10,20,30,40]        | 3   | 60.0            | Linear increase             |\n| 10         | [5,5]                | [10,20]              | 1   | 10.0            | Two workers, pick one       |\n| 11         | [10,20,30,40]        | [50,100,150,200]     | 3   | 225.0           | Large values                |\n| 12         | [1,1,1,1]            | [5,5,5,5]            | 3   | 5.0             | All same                    |\n| 13         | [3,5,7,9]            | [15,25,35,45]        | 2   | 30.0            | Sequential values           |\n| 14         | [10,10,10,10]        | [40,50,60,70]        | 3   | 120.0           | Same quality                |\n| 15         | [1,2,3,4,5]          | [10,20,30,40,50]     | 4   | 80.0            | Linear increase             |\n| 16         | [5,5,5,5]            | [10,20,30,40]        | 3   | 30.0            | Same quality                |\n| 17         | [10,20,30,40,50]     | [100,200,300,400,500] | 4  | 800.0           | Large values                |\n| 18         | [1,1,1,1,1]          | [5,5,5,5,5]          | 4   | 5.0             | All same                    |\n| 19         | [2,4,6,8]            | [10,20,30,40]        | 3   | 45.0            | Sequential values           |\n| 20         | [10,10,10,10,10]     | [50,60,70,80,90]     | 4   | 200.0           | Same quality                |\n| 21         | [1,2,3,4,5,6]        | [10,20,30,40,50,60]  | 5   | 100.0           | Linear increase             |\n| 22         | [5,5,5,5,5]          | [10,20,30,40,50]     | 4   | 40.0            | Same quality                |\n| 23         | [10,20,30,40,50,60]  | [100,200,300,400,500,600] | 5 | 1000.0         | Large values                |\n| 24         | [1,1,1,1,1,1]        | [5,5,5,5,5,5]        | 5   | 5.0             | All same                    |\n| 25         | [2,4,6,8,10]         | [10,20,30,40,50]     | 4   | 60.0            | Sequential values           |\n| 26         | [10,10,10,10,10,10]  | [50,60,70,80,90,100] | 5   | 250.0           | Same quality                |\n| 27         | [1,2,3,4,5,6,7]      | [10,20,30,40,50,60,70] | 6 | 120.0           | Linear increase             |\n| 28         | [5,5,5,5,5,5]        | [10,20,30,40,50,60]  | 5   | 50.0            | Same quality                |\n| 29         | [10,20,30,40,50,60,70] | [100,200,300,400,500,600,700] | 6 | 1050.0       | Large values                |\n| 30         | [1,1,1,1,1,1,1]      | [5,5,5,5,5,5,5]      | 6   | 5.0             | All same                    |\n| 31         | [2,4,6,8,10,12]      | [10,20,30,40,50,60]  | 5   | 75.0            | Sequential values           |\n| 32         | [10,10,10,10,10,10,10] | [50,60,70,80,90,100,110] | 6 | 300.0           | Same quality                |\n| 33         | [1,2,3,4,5,6,7,8]    | [10,20,30,40,50,60,70,80] | 7 | 140.0           | Linear increase             |\n| 34         | [5,5,5,5,5,5,5]      | [10,20,30,40,50,60,70] | 6 | 60.0            | Same quality                |\n| 35         | [10,20,30,40,50,60,70,80] | [100,200,300,400,500,600,700,800] | 7 | 1400.0     | Large values                |\n| 36         | [1,1,1,1,1,1,1,1]    | [5,5,5,5,5,5,5,5]    | 7   | 5.0             | All same                    |\n| 37         | [2,4,6,8,10,12,14]   | [10,20,30,40,50,60,70] | 6 | 90.0            | Sequential values           |\n| 38         | [10,10,10,10,10,10,10,10] | [50,60,70,80,90,100,110,120] | 7 | 350.0       | Same quality                |\n| 39         | [1,2,3,4,5,6,7,8,9]  | [10,20,30,40,50,60,70,80,90] | 8 | 160.0       | Linear increase             |\n| 40         | [5,5,5,5,5,5,5,5]    | [10,20,30,40,50,60,70,80] | 7 | 70.0           | Same quality                |",
            "example": {
                "input": "quality = [10,20,5], wage = [70,50,30], k = 2",
                "output": "105.0",
                "explanation": "Hire workers with quality 10 (wage 70) and quality 5 (wage 30), paying at least 7 per quality unit, total cost = 7 * (10 + 5) = 105."
            },
            "answer": "import heapq\nclass Solution:\n    def mincostToHireWorkers(self, quality, wage, k):\n        workers = sorted((w / q, q) for q, w in zip(quality, wage))\n        heap = []\n        total_quality = 0\n        min_cost = float('inf')\n        for ratio, q in workers:\n            heapq.heappush(heap, -q)\n            total_quality += q\n            if len(heap) > k:\n                total_quality += heapq.heappop(heap)\n            if len(heap) == k:\n                min_cost = min(min_cost, ratio * total_quality)\n        return min_cost"
        },
        {
            "id": 16,
            "title": "Maximum Element in Array",
            "description": "Given an array of integers, return the maximum element using a max-heap approach.\n\n| Test Case | Input Array       | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | [1,2,3,4,5]       | 5               | Maximum is 5                 |\n| 2         | [3,1,4,1,5]       | 5               | Maximum is 5                 |\n| 3         | [5,6,7,8,9]       | 9               | Maximum is 9                 |\n| 4         | [2,2,2,2]         | 2               | Maximum is 2                 |\n| 5         | [4,3,2,1]         | 4               | Maximum is 4                 |\n| 6         | [10,20,30]        | 30              | Maximum is 30                |\n| 7         | [1,5,10,15]       | 15              | Maximum is 15                |\n| 8         | [3,2,1]           | 3               | Maximum is 3                 |\n| 9         | [7,8,9,10]        | 10              | Maximum is 10                |\n| 10        | [6,5,4,3,2]       | 6               | Maximum is 6                 |",
            "example": {
                "input": "[1,2,3,4,5]",
                "output": "5"
            },
            "answer": "import heapq\n\ndef max_element(arr): return -heapq.nlargest(1, arr)[0]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nprint(max_element(arr))"
        },
        {
            "id": 17,
            "title": "Push Element to Heap",
            "description": "Given a min-heap (array of integers) and a new element, push the element to the heap and return the smallest element in the updated heap.\n\n| Test Case | Input Array       | Input Element | Expected Output | Notes                          |\n|-----------|-------------------|---------------|-----------------|-------------------------------|\n| 1         | [1,2,3]           | 4             | 1               | Smallest after push is 1     |\n| 2         | [2,3,4]           | 1             | 1               | Smallest after push is 1     |\n| 3         | [5,6,7]           | 8             | 5               | Smallest after push is 5     |\n| 4         | [1,1,1]           | 2             | 1               | Smallest after push is 1     |\n| 5         | [3,4,5]           | 2             | 2               | Smallest after push is 2     |\n| 6         | [10,20]           | 15            | 10              | Smallest after push is 10    |\n| 7         | [2,5,10]          | 1             | 1               | Smallest after push is 1     |\n| 8         | [3,4]             | 5             | 3               | Smallest after push is 3     |\n| 9         | [7,8,9]           | 6             | 6               | Smallest after push is 6     |\n| 10        | [4,5,6]           | 3             | 3               | Smallest after push is 3     |",
            "example": {
                "input": "[1,2,3], 4",
                "output": "1"
            },
            "answer": "import heapq\n\ndef push_to_heap(arr, elem):\n    heap = arr[:]\n    heapq.heappush(heap, elem)\n    return heap[0]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nelem = int(input().strip())\nprint(push_to_heap(arr, elem))"
        },
        {
            "id": 18,
            "title": "Check if Array is Min-Heap",
            "description": "Given an array of integers, check if it represents a valid min-heap (parent is less than or equal to its children). Return 'True' if it is a min-heap, 'False' otherwise.\n\n| Test Case | Input Array       | Expected Output | Notes                          |\n|-----------|-------------------|-----------------|-------------------------------|\n| 1         | [1,2,3,4,5]       | True            | Valid min-heap               |\n| 2         | [2,4,3,5,6]       | True            | Valid min-heap               |\n| 3         | [5,4,3,2,1]       | False           | Not a min-heap               |\n| 4         | [1,3,2,5,4]       | True            | Valid min-heap               |\n| 5         | [3,5,4,6,7]       | True            | Valid min-heap               |\n| 6         | [10,15,20,17]     | True            | Valid min-heap               |\n| 7         | [2,5,1,10,15]     | False           | Not a min-heap               |\n| 8         | [1,2,3]           | True            | Valid min-heap               |\n| 9         | [7,9,8,10]        | True            | Valid min-heap               |\n| 10        | [4,6,5,8,7]       | True            | Valid min-heap               |",
            "example": {
                "input": "[1,2,3,4,5]",
                "output": "True"
            },
            "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nprint(is_min_heap(arr))"
        },
        {
            "id": 19,
            "title": "Merge Two Min-Heaps",
            "description": "Given two arrays representing min-heaps, merge them into a single min-heap and return the smallest element of the merged heap.\n\n| Test Case | Input Array1      | Input Array2      | Expected Output | Notes                           |\n|-----------|-------------------|-------------------|-----------------|---------------|\n| 1         | [1,3,5]           | [2,4,6]           | 1               | Smallest is 1 |\n| 2         | [2,4]             | [3,5]             | 2               | Smallest is 2 |\n| 3         | [5,7,9]           | [6,8,10]          | 5               | Smallest is 5 |\n| 4         | [1,1,1]           | [2,2,2]           | 1               | Smallest is 1 |\n| 5         | [3,5,7]           | [2,4,6]           | 2               | Smallest is 2 |\n| 6         | [10,20]           | [15,25]           | 10              | Smallest is 10|\n| 7         | [2,5,10]          | [1,3,7]           | 1               | Smallest is 1 |\n| 8         | [3,4]             | [5,6]             | 3               | Smallest is 3 |\n| 9         | [7,8,9]           | [6,10,11]         | 6               | Smallest is 6 |\n| 10        | [4,5,6]           | [3,7,8]           | 3               | Smallest is 3 |",
            "example": {
                "input": "[1,3,5], [2,4,6]",
                "output": "1"
            },
            "answer": "import heapq\n\ndef merge_heaps(arr1, arr2):\n    merged = arr1 + arr2\n    heapq.heapify(merged)\n    return merged[0]\n\n# Read input\narr1 = list(map(int, input().strip()[1:-1].split(',')))\narr2 = list(map(int, input().strip()[1:-1].split(',')))\nprint(merge_heaps(arr1, arr2))"
        },
        {
            "id": 20,
            "title": "Find Kth Smallest Element in Array",
            "description": "Given an array of integers and an integer k, find the kth smallest element in the array. Assume k is valid.\n\n| Test Case | Input Array       | Input k | Expected Output | Notes                          |\n|-----------|-------------------|---------|-----------------|-------------------------------|\n| 1         | [3,2,1,5,6,4]     | 2       | 2               | 2nd smallest is 2            |\n| 2         | [3,2,3,1,2,4,5]   | 4       | 3               | 4th smallest is 3            |\n| 3         | [1]               | 1       | 1               | Only one element             |\n| 4         | [7,4,6,3,9,1]     | 3       | 4               | 3rd smallest is 4            |\n| 5         | [2,1,3]           | 1       | 1               | 1st smallest is 1            |\n| 6         | [5,5,5,5]         | 2       | 5               | 2nd smallest is 5            |\n| 7         | [10,7,8,9,1,5]    | 5       | 8               | 5th smallest is 8            |\n| 8         | [4,2,7,1,3]       | 2       | 2               | 2nd smallest is 2            |\n| 9         | [1,2,3,4,5]       | 3       | 3               | 3rd smallest is 3            |\n| 10        | [9,8,7,6,5]       | 1       | 5               | 1st smallest is 5            |",
            "example": {
                "input": "[3,2,1,5,6,4], 2",
                "output": "2"
            },
            "answer": "import heapq\n\ndef kth_smallest(arr, k):\n    return heapq.nsmallest(k, arr)[-1]\n\n# Read input\narr = list(map(int, input().strip()[1:-1].split(',')))\nk = int(input().strip())\nprint(kth_smallest(arr, k))"
        }
    ]
}