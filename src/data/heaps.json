{
    "questions": [
        {
            "id": 1,
            "title": "Kth Largest Element in an Array",
            "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\n\n| Test Cases | nums                | k   | Expected Output | Notes                        |\n|------------|---------------------|-----|-----------------|------------------------------|\n| 1          | [3,2,1,5,6,4]       | 2   | 5               | Basic test case             |\n| 2          | [3,2,3,1,2,4,5,5,6] | 4   | 4               | With duplicates             |\n| 3          | [1]                 | 1   | 1               | Single element              |\n| 4          | [1,2,3,4,5]         | 3   | 3               | kth largest in sorted array |\n| 5          | [5,4,3,2,1]         | 2   | 4               | Reverse sorted array        |\n| 6          | [1,1,1,1]           | 2   | 1               | All elements same           |\n| 7          | [-1,-2,-3,-4,-5]    | 3   | -2              | All negative numbers        |\n| 8          | [0,0,0,0]           | 1   | 0               | All zeros                   |\n| 9          | [1,2,3,4,5]         | 1   | 5               | Largest element             |\n| 10         | [1,2,3,4,5]         | 5   | 1               | Smallest element            |\n| 11         | [10,20,30,40,50]    | 3   | 30              | Larger numbers              |\n| 12         | [-10,-20,-30,-40,-50] | 2 | -20             | Larger negative numbers     |\n| 13         | [1,3,5,7,9]         | 4   | 3               | Odd numbers                 |\n| 14         | [2,4,6,8,10]        | 3   | 6               | Even numbers                |\n| 15         | [1,2,3,4,5,6,7,8,9,10] | 5 | 6             | Larger array                |\n| 16         | [10,9,8,7,6,5,4,3,2,1] | 5 | 6             | Reverse larger array        |\n| 17         | [1,1,2,2,3,3,4,4,5,5] | 7 | 3             | Duplicates in pairs         |\n| 18         | [5,5,5,5,5]         | 3   | 5               | All same, k > 1             |\n| 19         | [1,2,3]             | 2   | 2               | Small array                 |\n| 20         | [3,2,1]             | 1   | 3               | Small reverse array         |\n| 21         | [4,5,6,7,8]         | 4   | 5               | Consecutive numbers         |\n| 22         | [1,3,2,4,5]         | 3   | 3               | Random order                |\n| 23         | [100,99,98,97,96]   | 2   | 98              | High numbers                |\n| 24         | [-100,-99,-98,-97,-96] | 3 | -98            | Low negative numbers        |\n| 25         | [0,1,2,3,4]         | 1   | 4               | Including zero              |\n| 26         | [-1,0,1]            | 2   | 0               | Mixed signs                 |\n| 27         | [2,2,2,2,2]         | 1   | 2               | All same, k=1               |\n| 28         | [1,2,3,4,5,6]       | 6   | 1               | k = n                       |\n| 29         | [6,5,4,3,2,1]       | 6   | 1               | Reverse, k = n              |\n| 30         | [1,3,5,7,9,11,13,15,17,19] | 5 | 11            | Larger odd numbers          |\n| 31         | [2,4,6,8,10,12,14,16,18,20] | 7 | 10           | Larger even numbers         |\n| 32         | [10,20,30,40,50,60,70,80,90,100] | 10 | 10       | k = n for large n           |\n| 33         | [100,90,80,70,60,50,40,30,20,10] | 1 | 100       | Largest in large array      |\n| 34         | [-5,-4,-3,-2,-1,0,1,2,3,4] | 5 | -1           | Mixed positive and negative |\n| 35         | [1,1,1,2,2,2,3,3,3,4] | 6 | 2             | Duplicates                  |\n| 36         | [5,4,3,2,1,0,-1,-2,-3,-4] | 4 | 2            | From positive to negative   |\n| 37         | [-4,-3,-2,-1,0,1,2,3,4] | 3 | 2             | Symmetric around zero       |\n| 38         | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] | 8 | 8      | Larger array, k in middle   |\n| 39         | [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 8 | 8      | Reverse larger array        |\n| 40         | [1,2,2,3,3,4,4,5,5,6] | 7 | 3             | Duplicates                  |",
            "example": {
                "input": "[3,2,1,5,6,4], k = 2",
                "output": "5",
                "explanation": "The sorted array is [1,2,3,4,5,6], so the 2nd largest element is 5."
            },
            "answer": "import heapq\nclass Solution:\n    def findKthLargest(self, nums, k):\n        return heapq.nlargest(k, nums)[-1]"
        },
        {
            "id": 2,
            "title": "Top K Frequent Elements",
            "description": "Given an integer array nums and an integer k, return the k most frequent elements.\n\n| Test Cases | nums                | k   | Expected Output | Notes                        |\n|------------|---------------------|-----|-----------------|------------------------------|\n| 1          | [1,1,1,2,2,3]       | 2   | [1,2]           | Basic test case             |\n| 2          | [1]                 | 1   | [1]             | Single element              |\n| 3          | [1,1,2]             | 1   | [1]             | With duplicates             |\n| 4          | [1,2,2,3,3,3]       | 2   | [3,2]           | Different frequencies        |\n| 5          | [4,1,-1,2,-1,2,3]   | 2   | [-1,2]          | With negative numbers        |\n| 6          | [1,1,1,1,1]         | 1   | [1]             | All same                    |\n| 7          | [1,1,2,2,3,3,4,5,6] | 3   | [1,2,3]         | Mixed frequencies           |\n| 8          | [5,5,5,4,4,3]       | 2   | [5,4]           | Decreasing order            |\n| 9          | [-1,-1,-1,-2,-2,-3] | 2   | [-1,-2]         | All negative                |\n| 10         | [0,0,0,1,1,2]       | 2   | [0,1]           | Includes zero               |\n| 11         | [10,20,30,20,30,40] | 2   | [20,30]         | Ties in frequency           |\n| 12         | [7,7,7,7,6,6,6,5,5] | 3   | [7,6,5]         | Decreasing with duplicates  |\n| 13         | [100,100,99,99,98]  | 2   | [100,99]        | High numbers                |\n| 14         | [-5,-5,-4,-4,-3,-3,-2,-1] | 3 | [-5,-4,-3]     | Negative with duplicates    |\n| 15         | [2,2,2,1,1,0,0]     | 2   | [2,1]           | Zero included               |\n| 16         | [1,1,3,3,5,5,7,7,9] | 4   | [1,3,5,7]       | Even frequencies            |\n| 17         | [1,1,1,2,2]         | 1   | [1]             | Small array                 |\n| 18         | [3,2,1]             | 2   | [2,3]           | Small reverse array         |\n| 19         | [4,5,6,7,8]         | 3   | [6,7,8]         | Consecutive numbers         |\n| 20         | [1,3,2,4,5]         | 3   | [1,2,3]         | Random order                |\n| 21         | [100,99,98,97,96]   | 3   | [98,99,100]     | High numbers                |\n| 22         | [-100,-99,-98,-97,-96] | 3 | [-98,-99,-100] | Low negative numbers        |\n| 23         | [0,1,2,3,4]         | 2   | [3,4]           | Including zero              |\n| 24         | [-1,0,1]            | 2   | [-1,0]          | Mixed signs                 |\n| 25         | [2,2,2,2,2]         | 1   | [2]             | All same, k=1               |\n| 26         | [1,2,3,4,5,6]       | 4   | [3,4,5,6]       | k > n/2                     |\n| 27         | [6,5,4,3,2,1]       | 3   | [4,5,6]         | Reverse order               |\n| 28         | [1,3,5,7,9,11,13]   | 4   | [7,9,11,13]     | Larger odd numbers          |\n| 29         | [2,4,6,8,10]        | 3   | [6,8,10]        | Larger even numbers         |\n| 30         | [10,20,30,40,50]    | 3   | [30,40,50]      | Large numbers               |\n| 31         | [-5,-4,-3,-2,-1]    | 3   | [-3,-4,-5]      | Negative numbers            |\n| 32         | [1,1,2,2,3,3]       | 2   | [1,2]           | Ties in frequency           |\n| 33         | [1,2,3,4]           | 2   | [3,4]           | Small array                 |\n| 34         | [5,4,3,2,1]         | 3   | [3,4,5]         | Reverse order               |\n| 35         | [1,1,1,2,2]         | 2   | [1,2]           | Small with duplicates       |\n| 36         | [10,20,30]          | 2   | [20,30]         | Small unique                |\n| 37         | [1,2,3]             | 1   | [1]             | Smallest k=1                |\n| 38         | [1,1,2,2,3]         | 3   | [1,2,3]         | All have same frequency     |\n| 39         | [1,1,1,2,2,2,3]     | 2   | [1,2]           | Equal frequencies           |\n| 40         | [4,4,4,3,3,2,2,1]   | 3   | [4,3,2]         | Decreasing frequencies      |",
            "example": {
                "input": "[1,1,1,2,2,3], k = 2",
                "output": "[1,2]",
                "explanation": "1 appears 3 times, 2 appears 2 times, so the top 2 frequent elements are 1 and 2."
            },
            "answer": "from collections import Counter\nimport heapq\nclass Solution:\n    def topKFrequent(self, nums, k):\n        count = Counter(nums)\n        return heapq.nlargest(k, count.keys(), key=count.get)"
        },
        {
            "id": 3,
            "title": "Merge K Sorted Lists",
            "description": "Merge k sorted linked lists and return it as one sorted list.\n\n| Test Cases | lists                                    | Expected Output | Notes                        |\n|------------|------------------------------------------|-----------------|------------------------------|\n| 1          | [[1,4,5],[1,3,4],[2,6]]                  | [1,1,2,3,4,4,5,6] | Basic test case             |\n| 2          | []                                       | []              | Empty list                  |\n| 3          | [[]]                                     | []              | List with empty list        |\n| 4          | [[1]]                                    | [1]             | Single list with one element|\n| 5          | [[1,2,3],[4,5,6]]                        | [1,2,3,4,5,6]   | Two sorted lists            |\n| 6          | [[1,1,1],[2,2,2]]                        | [1,1,1,2,2,2]   | Lists with duplicates       |\n| 7          | [[-1,-2],[-3,-4]]                        | [-4,-3,-2,-1]   | Negative numbers            |\n| 8          | [[0,0,0],[0,0,0]]                        | [0,0,0,0,0,0]   | Lists with zeros            |\n| 9          | [[1,3,5],[2,4,6],[7,8,9]]                | [1,2,3,4,5,6,7,8,9] | Three lists                |\n| 10         | [[10,20],[30,40]]                        | [10,20,30,40]   | Larger numbers              |\n| 11         | [[1],[2],[3]]                            | [1,2,3]         | Single element lists        |\n| 12         | [[1,2],[],[3,4]]                         | [1,2,3,4]       | Includes empty list         |\n| 13         | [[1,1],[2,2],[3,3]]                      | [1,1,2,2,3,3]   | Duplicates across lists     |\n| 14         | [[-5,-4],[-3,-2],[-1,0]]                 | [-5,-4,-3,-2,-1,0] | Negative numbers           |\n| 15         | [[1,2,3,4,5],[6,7,8,9,10]]               | [1,2,3,4,5,6,7,8,9,10] | Longer lists              |\n| 16         | [[10,9,8],[7,6,5]]                       | [5,6,7,8,9,10]  | Reverse sorted lists        |\n| 17         | [[1,1,1],[1,1,1]]                        | [1,1,1,1,1,1]   | All same elements           |\n| 18         | [[0],[0],[0]]                            | [0,0,0]         | Zero single element lists   |\n| 19         | [[1,2],[3,4],[5,6]]                      | [1,2,3,4,5,6]   | Three short lists           |\n| 20         | [[3,2,1],[6,5,4]]                        | [1,2,3,4,5,6]   | Reverse order lists         |\n| 21         | [[4,5,6],[7,8,9]]                        | [4,5,6,7,8,9]   | Consecutive numbers         |\n| 22         | [[1,3,2],[4,6,5]]                        | [1,2,3,4,5,6]   | Random order                |\n| 23         | [[100,99,98],[97,96,95]]                 | [95,96,97,98,99,100] | High numbers               |\n| 24         | [[-100,-99,-98],[-97,-96,-95]]           | [-100,-99,-98,-97,-96,-95] | Low negative numbers       |\n| 25         | [[0,1,2],[3,4,5]]                        | [0,1,2,3,4,5]   | Including zero              |\n| 26         | [[-1,0,1],[-2,-3,-4]]                    | [-4,-3,-2,-1,0,1] | Mixed signs                 |\n| 27         | [[2,2,2],[2,2,2]]                        | [2,2,2,2,2,2]   | All same                    |\n| 28         | [[1,2,3,4,5,6],[7,8,9,10,11,12]]         | [1,2,3,4,5,6,7,8,9,10,11,12] | Large lists                |\n| 29         | [[6,5,4,3,2,1],[12,11,10,9,8,7]]         | [1,2,3,4,5,6,7,8,9,10,11,12] | Reverse large lists        |\n| 30         | [[1,3,5,7,9],[11,13,15,17,19]]           | [1,3,5,7,9,11,13,15,17,19] | Odd numbers                 |\n| 31         | [[2,4,6,8,10],[12,14,16,18,20]]          | [2,4,6,8,10,12,14,16,18,20] | Even numbers               |\n| 32         | [[10,20,30,40,50],[60,70,80,90,100]]     | [10,20,30,40,50,60,70,80,90,100] | Large numbers             |\n| 33         | [[100,90,80,70,60],[50,40,30,20,10]]     | [10,20,30,40,50,60,70,80,90,100] | Reverse large numbers      |\n| 34         | [[-5,-4,-3,-2,-1],[0,1,2,3,4]]          | [-5,-4,-3,-2,-1,0,1,2,3,4] | Mixed positive/negative     |\n| 35         | [[1,1,1,2,2,2],[3,3,3,4]]                | [1,1,1,2,2,2,3,3,3,4] | Duplicates                 |\n| 36         | [[5,4,3,2,1],[0,-1,-2,-3,-4]]           | [-4,-3,-2,-1,0,1,2,3,4,5] | Pos to neg                |\n| 37         | [[-4,-3,-2,-1,0],[1,2,3,4]]             | [-4,-3,-2,-1,0,1,2,3,4] | Symmetric around zero      |\n| 38         | [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15]] | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] | Large array               |\n| 39         | [[15,14,13,12,11],[10,9,8,7,6]]          | [6,7,8,9,10,11,12,13,14,15] | Reverse large array        |\n| 40         | [[1,2,2,3,3],[4,4,5,5,6]]                | [1,2,2,3,3,4,4,5,5,6] | Duplicates                 |",
            "example": {
                "input": "[[1,4,5],[1,3,4],[2,6]]",
                "output": "[1,1,2,3,4,4,5,6]",
                "explanation": "Merging all lists gives a sorted list with all elements."
            },
            "answer": "import heapq\nclass Solution:\n    def mergeKLists(self, lists):\n        heap = []\n        for i, lst in enumerate(lists):\n            if lst:\n                heapq.heappush(heap, (lst[0], i, 0))\n        result = []\n        while heap:\n            val, list_idx, element_idx = heapq.heappop(heap)\n            result.append(val)\n            if element_idx + 1 < len(lists[list_idx]):\n                heapq.heappush(heap, (lists[list_idx][element_idx + 1], list_idx, element_idx + 1))\n        return result"
        },
        {
            "id": 4,
            "title": "Find Median from Data Stream",
            "description": "Design a data structure that supports adding numbers and finding the median of all numbers added so far.\n\n| Test Cases | Operations                              | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | add(1), add(2), findMedian()            | 1.5             | Basic test case             |\n| 2          | add(3), findMedian()                    | 3.0             | Single element              |\n| 3          | add(1), add(2), add(3), findMedian()    | 2.0             | Three elements              |\n| 4          | add(4), add(4), findMedian()            | 4.0             | Duplicates                  |\n| 5          | add(-1), add(-2), findMedian()          | -1.5            | Negative numbers            |\n| 6          | add(0), add(0), findMedian()            | 0.0             | Zeros                       |\n| 7          | add(1), add(3), add(2), findMedian()    | 2.0             | Random order                |\n| 8          | add(10), add(20), add(30), findMedian() | 20.0            | Large numbers               |\n| 9          | add(-10), add(-20), findMedian()        | -15.0           | Large negative numbers      |\n| 10         | add(1), add(1), add(1), findMedian()    | 1.0             | All same                    |\n| 11         | add(5), add(4), add(3), findMedian()    | 4.0             | Reverse order               |\n| 12         | add(2), add(2), add(2), findMedian()    | 2.0             | All same                    |\n| 13         | add(1), add(2), add(3), add(4), findMedian() | 2.5        | Even number of elements     |\n| 14         | add(-5), add(-4), add(-3), findMedian() | -4.0            | Negative numbers            |\n| 15         | add(0), add(1), add(2), findMedian()    | 1.0             | Includes zero               |\n| 16         | add(-1), add(0), add(1), findMedian()   | 0.0             | Mixed signs                 |\n| 17         | add(10), add(9), add(8), findMedian()   | 9.0             | Decreasing order            |\n| 18         | add(1), add(3), add(5), add(7), findMedian() | 4.0        | Odd numbers                 |\n| 19         | add(2), add(4), add(6), add(8), findMedian() | 5.0        | Even numbers                |\n| 20         | add(100), add(99), findMedian()         | 99.5            | High numbers                |\n| 21         | add(-100), add(-99), findMedian()       | -99.5           | Low negative numbers        |\n| 22         | add(1), add(2), add(3), add(4), add(5), findMedian() | 3.0 | Five elements              |\n| 23         | add(5), add(4), add(3), add(2), add(1), findMedian() | 3.0 | Reverse five elements      |\n| 24         | add(1), add(1), add(2), add(2), findMedian() | 1.5    | Duplicates                 |\n| 25         | add(-1), add(-1), add(-2), add(-2), findMedian() | -1.5 | Negative duplicates        |\n| 26         | add(0), add(0), add(1), add(1), findMedian() | 0.5 | Zeros and ones            |\n| 27         | add(10), add(20), add(30), add(40), findMedian() | 25.0 | Large numbers             |\n| 28         | add(-10), add(-20), add(-30), add(-40), findMedian() | -25.0 | Large negative numbers   |\n| 29         | add(1), add(2), add(3), add(4), add(5), add(6), findMedian() | 3.5 | Six elements             |\n| 30         | add(6), add(5), add(4), add(3), add(2), add(1), findMedian() | 3.5 | Reverse six elements     |\n| 31         | add(1), add(3), add(5), add(7), add(9), findMedian() | 5.0 | Odd numbers               |\n| 32         | add(2), add(4), add(6), add(8), add(10), findMedian() | 6.0 | Even numbers             |\n| 33         | add(100), add(200), add(300), add(400), findMedian() | 250.0 | Large numbers            |\n| 34         | add(-100), add(-200), add(-300), add(-400), findMedian() | -250.0 | Large negative numbers  |\n| 35         | add(1), add(1), add(1), add(2), add(2), findMedian() | 1.0 | Duplicates               |\n| 36         | add(-1), add(-1), add(-1), add(-2), add(-2), findMedian() | -1.0 | Negative duplicates     |\n| 37         | add(0), add(0), add(0), add(1), add(1), findMedian() | 0.0 | Zeros and ones           |\n| 38         | add(10), add(20), add(30), add(40), add(50), findMedian() | 30.0 | Large numbers           |\n| 39         | add(-10), add(-20), add(-30), add(-40), add(-50), findMedian() | -30.0 | Large negative numbers |\n| 40         | add(1), add(2), add(3), add(4), add(5), add(6), add(7), findMedian() | 4.0 | Seven elements         |",
            "example": {
                "input": "add(1), add(2), findMedian()",
                "output": "1.5",
                "explanation": "The median of [1,2] is (1+2)/2 = 1.5."
            },
            "answer": "import heapq\nclass MedianFinder:\n    def __init__(self):\n        self.small = []  # max heap\n        self.large = []  # min heap\n    def addNum(self, num):\n        if len(self.small) == 0 or num < -self.small[0]:\n            heapq.heappush(self.small, -num)\n        else:\n            heapq.heappush(self.large, num)\n        if len(self.small) > len(self.large) + 1:\n            heapq.heappush(self.large, -heapq.heappop(self.small))\n        elif len(self.large) > len(self.small):\n            heapq.heappush(self.small, -heapq.heappop(self.large))\n    def findMedian(self):\n        if len(self.small) > len(self.large):\n            return float(-self.small[0])\n        return (-self.small[0] + self.large[0]) / 2.0"
        },
        {
            "id": 5,
            "title": "Kth Smallest Element in a Sorted Matrix",
            "description": "Given an n x n matrix where each row and column is sorted in ascending order, find the kth smallest element.\n\n| Test Cases | matrix                                  | k   | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----|-----------------|------------------------------|\n| 1          | [[1,5,9],[10,11,13],[12,13,15]]         | 8   | 13              | Basic test case             |\n| 2          | [[1,2],[3,4]]                           | 2   | 2               | Small matrix                |\n| 3          | [[1]]                                   | 1   | 1               | Single element              |\n| 4          | [[1,2,3],[4,5,6],[7,8,9]]               | 5   | 5               | 3x3 matrix                  |\n| 5          | [[-5,-4],[-3,-2]]                       | 3   | -3              | Negative numbers            |\n| 6          | [[0,0],[0,0]]                           | 2   | 0               | All zeros                   |\n| 7          | [[1,1],[1,1]]                           | 1   | 1               | All same                    |\n| 8          | [[10,20,30],[40,50,60],[70,80,90]]      | 9   | 90              | Large numbers               |\n| 9          | [[-10,-9,-8],[-7,-6,-5],[-4,-3,-2]]     | 6   | -6              | Negative numbers            |\n| 10         | [[1,2],[3,4]]                           | 4   | 4               | k = n*n                     |\n| 11         | [[1,3,5],[6,7,8],[9,10,11]]             | 7   | 8               | Mixed numbers               |\n| 12         | [[2,4,6],[8,10,12],[14,16,18]]          | 3   | 6               | Even numbers                |\n| 13         | [[1,1,1],[2,2,2],[3,3,3]]               | 5   | 2               | Duplicates                  |\n| 14         | [[-1,0,1],[2,3,4],[5,6,7]]              | 4   | 2               | Mixed signs                 |\n| 15         | [[10,11,12],[13,14,15],[16,17,18]]      | 1   | 10              | Smallest element            |\n| 16         | [[1,5,9],[2,6,10],[3,7,11]]             | 9   | 9               | Non-standard sorting        |\n| 17         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]]      | 10  | 10              | 4x4 matrix                  |\n| 18         | [[0,1],[2,3]]                           | 3   | 2               | Small matrix                |\n| 19         | [[100,200],[300,400]]                   | 2   | 200             | Large numbers               |\n| 20         | [[-100,-200],[-300,-400]]               | 3   | -200            | Large negative numbers      |\n| 21         | [[1,3,5,7],[9,11,13,15],[17,19,21,23]]  | 12  | 13              | Larger matrix               |\n| 22         | [[2,4,6,8],[10,12,14,16],[18,20,22,24]] | 8   | 14              | Even numbers                |\n| 23         | [[1,1],[2,2]]                           | 3   | 2               | Duplicates                  |\n| 24         | [[-5,-4,-3],[-2,-1,0],[1,2,3]]         | 7   | 0               | Mixed signs                 |\n| 25         | [[10,20],[30,40]]                       | 1   | 10              | Smallest element            |\n| 26         | [[1,2,3],[4,5,6],[7,8,9]]               | 9   | 9               | Largest element             |\n| 27         | [[0,0,0],[0,0,0],[0,0,0]]               | 5   | 0               | All zeros                   |\n| 28         | [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]] | 15 | 15         | 5x5 matrix                  |\n| 29         | [[-5,-4,-3,-2,-1],[-10,-9,-8,-7,-6],[-15,-14,-13,-12,-11]] | 10 | -6 | Negative numbers           |\n| 30         | [[1,1,1,1],[2,2,2,2],[3,3,3,3]]         | 7   | 2               | Duplicates                  |\n| 31         | [[10,20,30,40],[50,60,70,80],[90,100,110,120]] | 12 | 90     | Large numbers               |\n| 32         | [[-10,-9,-8,-7],[-6,-5,-4,-3],[-2,-1,0,1]] | 8 | -4        | Mixed signs                 |\n| 33         | [[1,2,3],[4,5,6],[7,8,9]]               | 3   | 3               | Small k                     |\n| 34         | [[1,5,9],[2,6,10],[3,7,11]]             | 6   | 6               | Non-standard sorting        |\n| 35         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]]      | 5   | 5               | 4x4 matrix                  |\n| 36         | [[0,1],[2,3]]                           | 2   | 1               | Small matrix                |\n| 37         | [[100,200],[300,400]]                   | 4   | 400             | Largest element             |\n| 38         | [[-100,-200],[-300,-400]]               | 1   | -400            | Smallest negative           |\n| 39         | [[1,3,5,7],[9,11,13,15],[17,19,21,23]]  | 6   | 7               | Medium k                    |\n| 40         | [[2,4,6,8],[10,12,14,16],[18,20,22,24]] | 10  | 12              | Even numbers                |",
            "example": {
                "input": "[[1,5,9],[10,11,13],[12,13,15]], k = 8",
                "output": "13",
                "explanation": "The sorted elements are [1,5,9,10,11,12,13,13,15], so the 8th smallest is 13."
            },
            "answer": "import heapq\nclass Solution:\n    def kthSmallest(self, matrix, k):\n        n = len(matrix)\n        heap = []\n        for i in range(min(n, k)):\n            heapq.heappush(heap, (matrix[i][0], i, 0))\n        while k > 1:\n            val, row, col = heapq.heappop(heap)\n            if col + 1 < n:\n                heapq.heappush(heap, (matrix[row][col + 1], row, col + 1))\n            k -= 1\n        return heapq.heappop(heap)[0]"
        },
        {
            "id": 6,
            "title": "Min Cost to Connect All Points",
            "description": "Given an array points representing integer coordinates of points on a 2D plane, find the minimum cost to connect all points.\n\n| Test Cases | points                                  | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | [[0,0],[2,2],[3,10],[5,2],[7,0]]        | 20              | Basic test case             |\n| 2          | [[0,0],[1,1]]                           | 2               | Two points                  |\n| 3          | [[0,0]]                                 | 0               | Single point                |\n| 4          | [[1,1],[2,2],[3,3]]                     | 4               | Points in line              |\n| 5          | [[-1,-1],[1,1]]                         | 4               | Negative coordinates        |\n| 6          | [[0,0],[0,1],[0,2]]                     | 2               | Vertical line               |\n| 7          | [[0,0],[1,0],[2,0]]                     | 2               | Horizontal line             |\n| 8          | [[10,10],[20,20],[30,30]]               | 40              | Large coordinates           |\n| 9          | [[-10,-10],[-20,-20],[-30,-30]]         | 40              | Large negative coordinates  |\n| 10         | [[0,0],[0,0]]                           | 0               | Same point                  |\n| 11         | [[1,2],[3,4],[5,6]]                     | 8               | Diagonal points             |\n| 12         | [[0,0],[1,1],[2,2],[3,3],[4,4]]         | 8               | Five points in line         |\n| 13         | [[0,0],[-1,-1],[1,1]]                   | 4               | Mixed signs                 |\n| 14         | [[0,0],[10,10],[20,20]]                 | 40              | Large distances             |\n| 15         | [[0,0],[0,1],[1,0],[1,1]]               | 3               | Square                      |\n| 16         | [[0,0],[2,0],[0,2],[2,2]]               | 6               | Square with distance 2      |\n| 17         | [[1,1],[1,2],[2,1],[2,2]]               | 3               | Square with distance 1      |\n| 18         | [[0,0],[0,10],[10,0],[10,10]]           | 30              | Large square                |\n| 19         | [[-1,0],[0,-1],[1,0],[0,1]]             | 4               | Cross pattern               |\n| 20         | [[0,0],[1,2],[2,4],[3,6]]               | 9               | Points on a line            |\n| 21         | [[10,10],[11,11],[12,12]]               | 4               | Close points                |\n| 22         | [[-10,-10],[-11,-11],[-12,-12]]         | 4               | Close negative points       |\n| 23         | [[0,0],[100,100],[200,200]]             | 400             | Large distances             |\n| 24         | [[0,0],[-100,-100],[-200,-200]]         | 400             | Large negative distances    |\n| 25         | [[0,0],[0,0],[0,0]]                     | 0               | All same point              |\n| 26         | [[1,1],[2,2],[3,3],[4,4],[5,5]]         | 8               | Diagonal line               |\n| 27         | [[0,0],[1,0],[0,1],[1,1],[2,2]]         | 5               | Mixed points                |\n| 28         | [[10,10],[20,20],[30,30],[40,40]]       | 60              | Large diagonal              |\n| 29         | [[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 60            | Large negative diagonal     |\n| 30         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]   | 10              | Six points in line          |\n| 31         | [[0,0],[0,1],[0,2],[0,3],[0,4]]         | 4               | Vertical line               |\n| 32         | [[0,0],[1,0],[2,0],[3,0],[4,0]]         | 4               | Horizontal line             |\n| 33         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]   | 10              | Diagonal line               |\n| 34         | [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]] | 8            | Negative diagonal           |\n| 35         | [[0,0],[10,10],[20,20],[30,30],[40,40]] | 80              | Large diagonal              |\n| 36         | [[0,0],[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 80     | Large negative diagonal     |\n| 37         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]] | 12         | Seven points in line        |\n| 38         | [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]]   | 5               | Vertical line               |\n| 39         | [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]   | 5               | Horizontal line             |\n| 40         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]] | 12         | Diagonal line               |",
            "example": {
                "input": "[[0,0],[2,2],[3,10],[5,2],[7,0]]",
                "output": "20",
                "explanation": "The minimum cost to connect all points is achieved by connecting points with Manhattan distances, totaling 20."
            },
            "answer": "import heapq\nclass Solution:\n    def minCostConnectPoints(self, points):\n        n = len(points)\n        if n <= 1:\n            return 0\n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                cost = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n                adj[i].append((cost, j))\n                adj[j].append((cost, i))\n        visited = set()\n        heap = [(0, 0)]\n        total_cost = 0\n        while heap and len(visited) < n:\n            cost, u = heapq.heappop(heap)\n            if u in visited:\n                continue\n            visited.add(u)\n            total_cost += cost\n            for next_cost, v in adj[u]:\n                if v not in visited:\n                    heapq.heappush(heap, (next_cost, v))\n        return total_cost"
        },
        {
            "id": 7,
            "title": "K Closest Points to Origin",
            "description": "Given an array of points on a 2D plane and an integer k, return the k points closest to the origin (0,0).\n\n| Test Cases | points                                  | k   | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----|-----------------|------------------------------|\n| 1          | [[1,3],[-2,2]]                          | 1   | [[-2,2]]        | Basic test case             |\n| 2          | [[3,3],[5,-1],[-2,4]]                   | 2   | [[3,3],[-2,4]]  | Three points                |\n| 3          | [[0,0]]                                 | 1   | [[0,0]]         | Single point                |\n| 4          | [[1,1],[2,2],[3,3]]                     | 2   | [[1,1],[2,2]]   | Points in line              |\n| 5          | [[-1,-1],[1,1]]                         | 1   | [[-1,-1]]       | Negative coordinates        |\n| 6          | [[0,1],[0,2],[0,3]]                     | 2   | [[0,1],[0,2]]   | Vertical line               |\n| 7          | [[1,0],[2,0],[3,0]]                     | 2   | [[1,0],[2,0]]   | Horizontal line             |\n| 8          | [[10,10],[20,20],[30,30]]               | 1   | [[10,10]]       | Large coordinates           |\n| 9          | [[-10,-10],[-20,-20],[-30,-30]]         | 2   | [[-10,-10],[-20,-20]] | Large negative coordinates |\n| 10         | [[0,0],[0,0]]                           | 1   | [[0,0]]         | Same point                  |\n| 11         | [[1,2],[3,4],[5,6]]                     | 2   | [[1,2],[3,4]]   | Diagonal points             |\n| 12         | [[0,0],[1,1],[2,2],[3,3],[4,4]]         | 3   | [[0,0],[1,1],[2,2]] | Five points in line        |\n| 13         | [[0,0],[-1,-1],[1,1]]                   | 2   | [[0,0],[-1,-1]] | Mixed signs                 |\n| 14         | [[0,0],[10,10],[20,20]]                 | 2   | [[0,0],[10,10]] | Large distances             |\n| 15         | [[0,0],[0,1],[1,0],[1,1]]               | 3   | [[0,0],[0,1],[1,0]] | Square                     |\n| 16         | [[0,0],[2,0],[0,2],[2,2]]               | 3   | [[0,0],[2,0],[0,2]] | Square with distance 2     |\n| 17         | [[1,1],[1,2],[2,1],[2,2]]               | 3   | [[1,1],[1,2],[2,1]] | Square with distance 1     |\n| 18         | [[0,0],[0,10],[10,0],[10,10]]           | 2   | [[0,0],[0,10]]  | Large square                |\n| 19         | [[-1,0],[0,-1],[1,0],[0,1]]             | 3   | [[-1,0],[0,-1],[1,0]] | Cross pattern              |\n| 20         | [[0,0],[1,2],[2,4],[3,6]]               | 2   | [[0,0],[1,2]]   | Points on a line            |\n| 21         | [[10,10],[11,11],[12,12]]               | 2   | [[10,10],[11,11]] | Close points               |\n| 22         | [[-10,-10],[-11,-11],[-12,-12]]         | 2   | [[-10,-10],[-11,-11]] | Close negative points      |\n| 23         | [[0,0],[100,100],[200,200]]             | 2   | [[0,0],[100,100]] | Large distances            |\n| 24         | [[0,0],[-100,-100],[-200,-200]]         | 2   | [[0,0],[-100,-100]] | Large negative distances  |\n| 25         | [[0,0],[0,0],[0,0]]                     | 2   | [[0,0],[0,0]]   | All same point              |\n| 26         | [[1,1],[2,2],[3,3],[4,4],[5,5]]         | 3   | [[1,1],[2,2],[3,3]] | Diagonal line              |\n| 27         | [[0,0],[1,0],[0,1],[1,1],[2,2]]         | 3   | [[0,0],[1,0],[0,1]] | Mixed points               |\n| 28         | [[10,10],[20,20],[30,30],[40,40]]       | 2   | [[10,10],[20,20]] | Large diagonal             |\n| 29         | [[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 2 | [[-10,-10],[-20,-20]] | Large negative diagonal   |\n| 30         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]   | 3   | [[0,0],[1,1],[2,2]] | Six points in line         |\n| 31         | [[0,0],[0,1],[0,2],[0,3],[0,4]]         | 3   | [[0,0],[0,1],[0,2]] | Vertical line              |\n| 32         | [[0,0],[1,0],[2,0],[3,0],[4,0]]         | 3   | [[0,0],[1,0],[2,0]] | Horizontal line            |\n| 33         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]   | 3   | [[1,1],[2,2],[3,3]] | Diagonal line              |\n| 34         | [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]] | 3 | [[-1,-1],[-2,-2],[-3,-3]] | Negative diagonal          |\n| 35         | [[0,0],[10,10],[20,20],[30,30],[40,40]] | 3   | [[0,0],[10,10],[20,20]] | Large diagonal             |\n| 36         | [[0,0],[-10,-10],[-20,-20],[-30,-30],[-40,-40]] | 3 | [[0,0],[-10,-10],[-20,-20]] | Large negative diagonal   |\n| 37         | [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]] | 4 | [[0,0],[1,1],[2,2],[3,3]] | Seven points in line       |\n| 38         | [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]]   | 4   | [[0,0],[0,1],[0,2],[0,3]] | Vertical line              |\n| 39         | [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]   | 4   | [[0,0],[1,0],[2,0],[3,0]] | Horizontal line            |\n| 40         | [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]] | 4 | [[1,1],[2,2],[3,3],[4,4]] | Diagonal line             |",
            "example": {
                "input": "points = [[1,3],[-2,2]], k = 1",
                "output": "[[-2,2]]",
                "explanation": "The point [-2,2] has distance sqrt(8) from origin, which is less than sqrt(10) for [1,3]."
            },
            "answer": "import heapq\nclass Solution:\n    def kClosest(self, points, k):\n        heap = []\n        for x, y in points:\n            dist = -(x*x + y*y)  # Max heap for smallest distances\n            heapq.heappush(heap, (dist, x, y))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return [[x, y] for dist, x, y in heap]"
        },
        {
            "id": 8,
            "title": "Meeting Rooms II",
            "description": "Given an array of meeting time intervals consisting of start and end times, find the minimum number of conference rooms required.\n\n| Test Cases | intervals                               | Expected Output | Notes                        |\n|------------|-----------------------------------------|-----------------|------------------------------|\n| 1          | [[0,30],[5,10],[15,20]]                 | 2               | Basic test case             |\n| 2          | [[7,10],[2,4]]                          | 1               | Non-overlapping             |\n| 3          | [[1,5]]                                 | 1               | Single meeting              |\n| 4          | [[1,2],[2,3],[3,4]]                     | 1               | Non-overlapping sequential  |\n| 5          | [[1,3],[2,4],[3,5]]                     | 2               | Overlapping meetings        |\n| 6          | [[0,1],[0,1],[0,1]]                     | 3               | All overlapping             |\n| 7          | [[10,20],[20,30],[30,40]]               | 1               | Sequential meetings         |\n| 8          | [[5,15],[10,20],[15,25]]                | 2               | Partial overlaps            |\n| 9          | [[1,10],[2,7],[3,19],[8,12],[10,20],[11,30]] | 3           | Complex overlaps            |\n| 10         | [[0,5],[5,10],[10,15]]                  | 1               | Sequential                  |\n| 11         | [[1,4],[2,5],[3,6]]                     | 3               | All overlapping             |\n| 12         | [[10,11],[11,12],[12,13]]               | 1               | Short sequential meetings   |\n| 13         | [[0,10],[5,15],[10,20]]                 | 2               | Overlap in middle           |\n| 14         | [[1,3],[4,6],[7,9]]                     | 1               | No overlaps                 |\n| 15         | [[2,4],[4,6],[6,8]]                     | 1               | Sequential                  |\n| 16         | [[1,10],[2,3],[4,5]]                    | 2               | Nested intervals            |\n| 17         | [[0,2],[1,3],[2,4]]                     | 2               | Small overlaps              |\n| 18         | [[10,30],[11,12],[13,14]]               | 2               | Short meetings inside long  |\n| 19         | [[5,10],[6,11],[7,12]]                  | 3               | Tight overlaps              |\n| 20         | [[0,100],[10,20],[30,40]]               | 2               | Large interval              |\n| 21         | [[1,2],[1,2],[1,2]]                     | 3               | Identical intervals         |\n| 22         | [[10,15],[15,20],[20,25]]               | 1               | Sequential                  |\n| 23         | [[1,5],[2,6],[3,7],[4,8]]               | 4               | All overlapping             |\n| 24         | [[5,7],[7,9],[9,11]]                    | 1               | Sequential                  |\n| 25         | [[0,1],[1,2],[2,3],[3,4]]               | 1               | Sequential                  |\n| 26         | [[10,20],[15,25],[20,30]]               | 2               | Overlapping meetings        |\n| 27         | [[1,10],[2,9],[3,8]]                    | 3               | Nested overlaps             |\n| 28         | [[5,15],[10,20],[15,25],[20,30]]        | 2               | Multiple overlaps           |\n| 29         | [[0,5],[5,10],[10,15],[15,20]]          | 1               | Sequential                  |\n| 30         | [[1,3],[2,4],[3,5],[4,6]]               | 3               | Tight overlaps              |\n| 31         | [[10,12],[12,14],[14,16],[16,18]]       | 1               | Sequential                  |\n| 32         | [[0,10],[5,15],[10,20],[15,25]]         | 2               | Overlapping                 |\n| 33         | [[1,4],[4,7],[7,10],[10,13]]            | 1               | Sequential                  |\n| 34         | [[2,6],[3,7],[4,8],[5,9]]               | 4               | All overlapping             |\n| 35         | [[0,2],[2,4],[4,6],[6,8]]               | 1               | Sequential                  |\n| 36         | [[10,30],[12,14],[16,18]]               | 2               | Short inside long           |\n| 37         | [[5,10],[6,11],[7,12],[8,13]]           | 4               | Tight overlaps              |\n| 38         | [[0,100],[10,20],[30,40],[50,60]]       | 2               | Large interval              |\n| 39         | [[1,2],[1,2],[1,2],[1,2]]               | 4               | Identical intervals         |\n| 40         | [[10,15],[15,20],[20,25],[25,30]]       | 1               | Sequential                  |",
            "example": {
                "input": "[[0,30],[5,10],[15,20]]",
                "output": "2",
                "explanation": "The meetings overlap, requiring 2 rooms."
            },
            "answer": "import heapq\nclass Solution:\n    def minMeetingRooms(self, intervals):\n        if not intervals:\n            return 0\n        intervals.sort(key=lambda x: x[0])\n        heap = []\n        for start, end in intervals:\n            if heap and heap[0] <= start:\n                heapq.heappop(heap)\n            heapq.heappush(heap, end)\n        return len(heap)"
        },
        {
            "id": 9,
            "title": "Smallest Range Covering Elements from K Lists",
            "description": "Given k sorted lists of integers, find the smallest range that includes at least one number from each list.\n\n| Test Cases | lists                                    | Expected Output | Notes                        |\n|------------|------------------------------------------|-----------------|------------------------------|\n| 1          | [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] | [20,24]        | Basic test case             |\n| 2          | [[1,2,3],[1,2,3],[1,2,3]]                | [1,1]           | Identical lists             |\n| 3          | [[1],[2],[3]]                            | [1,3]           | Single element lists        |\n| 4          | [[1,5],[2,6],[3,7]]                      | [3,5]           | Short lists                 |\n| 5          | [[-5,-3,-1],[-2,0,2],[-4,-2,0]]         | [-2,0]          | Negative numbers            |\n| 6          | [[0,0],[0,0],[0,0]]                      | [0,0]           | All zeros                   |\n| 7          | [[10,20,30],[15,25,35],[5,15,25]]        | [15,25]         | Larger numbers              |\n| 8          | [[1,10],[2,20],[3,30]]                   | [3,10]          | Spread out numbers          |\n| 9          | [[-10,-5],[-8,-3],[-6,-1]]              | [-6,-5]         | Negative numbers            |\n| 10         | [[1,2],[3,4],[5,6]]                      | [3,5]           | Sequential lists            |\n| 11         | [[1,1,1],[2,2,2],[3,3,3]]                | [1,3]           | All same in each list       |\n| 12         | [[0,10,20],[10,20,30],[20,30,40]]        | [20,20]         | Common element              |\n| 13         | [[1,3,5],[2,4,6],[3,5,7]]                | [3,5]           | Overlapping ranges          |\n| 14         | [[-1,0,1],[0,1,2],[1,2,3]]               | [1,1]           | Mixed signs                 |\n| 15         | [[100,200],[150,250],[125,225]]          | [150,200]       | Large numbers               |\n| 16         | [[-100,-50],[-75,-25],[-60,-10]]        | [-60,-50]       | Large negative numbers      |\n| 17         | [[1,5,10],[2,6,11],[3,7,12]]            | [6,7]           | Sequential increments       |\n| 18         | [[0,1],[1,2],[2,3]]                      | [1,2]           | Small lists                 |\n| 19         | [[10,20],[20,30],[30,40]]                | [20,30]         | Non-overlapping             |\n| 20         | [[-5,-4,-3],[-3,-2,-1],[-1,0,1]]        | [-3,-1]         | Negative to positive        |\n| 21         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]]      | [8,9]           | Larger lists                |\n| 22         | [[0,0,0],[1,1,1],[2,2,2]]                | [0,2]           | Same within lists           |\n| 23         | [[100,101,102],[103,104,105],[106,107,108]] | [103,106]     | Close numbers               |\n| 24         | [[-100,-99,-98],[-97,-96,-95],[-94,-93,-92]] | [-97,-94]     | Negative close numbers      |\n| 25         | [[0,1,2],[0,1,2],[0,1,2]]                | [0,2]           | Identical lists             |\n| 26         | [[1,10,100],[2,20,200],[3,30,300]]      | [3,10]          | Large gaps                  |\n| 27         | [[-10,-5,0],[-5,0,5],[0,5,10]]          | [0,0]           | Zero common                 |\n| 28         | [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]] | [10,11]       | Sequential lists            |\n| 29         | [[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9]] | [4,5]         | Negative to positive        |\n| 30         | [[10,20,30,40],[15,25,35,45],[20,30,40,50]] | [30,40]       | Overlapping ranges         |\n| 31         | [[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11]] | [7,9]           | Close ranges                |\n| 32         | [[0,10],[10,20],[20,30]]                 | [10,20]         | Common points               |\n| 33         | [[1,2],[3,4],[5,6],[7,8]]                | [4,7]           | Four lists                  |\n| 34         | [[-1,-1],[-2,-2],[-3,-3]]               | [-3,-1]         | Negative same               |\n| 35         | [[100,200,300],[150,250,350],[200,300,400]] | [200,300]     | Large overlapping           |\n| 36         | [[-100,-90,-80],[-90,-80,-70],[-80,-70,-60]] | [-80,-70]     | Negative overlapping        |\n| 37         | [[1,5,10,15],[2,6,11,16],[3,7,12,17]]   | [7,12]          | Sequential increments       |\n| 38         | [[0,0],[1,1],[2,2],[3,3]]                | [1,3]           | Single elements             |\n| 39         | [[10,20,30],[15,25,35],[20,30,40],[25,35,45]] | [25,35]       | Four lists                  |\n| 40         | [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]] | [12,13] | Large lists               |",
            "example": {
                "input": "[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
                "output": "[20,24]",
                "explanation": "The smallest range that includes at least one number from each list is [20,24]."
            },
            "answer": "import heapq\nclass Solution:\n    def smallestRange(self, nums):\n        heap = [(row[0], i, 0) for i, row in enumerate(nums)]\n        heapq.heapify(heap)\n        result = [float('-inf'), float('inf')]\n        max_val = max(row[0] for row in nums)\n        while heap:\n            min_val, row, idx = heapq.heappop(heap)\n            if max_val - min_val < result[1] - result[0]:\n                result = [min_val, max_val]\n            if idx + 1 == len(nums[row]):\n                return result\n            next_val = nums[row][idx + 1]\n            heapq.heappush(heap, (next_val, row, idx + 1))\n            max_val = max(max_val, next_val)\n        return result"
        },
        {
            "id": 10,
            "title": "Reorganize String",
            "description": "Given a string, reorganize it so that no two adjacent characters are the same. If not possible, return an empty string.\n\n| Test Cases | s                    | Expected Output | Notes                        |\n|------------|----------------------|-----------------|------------------------------|\n| 1          | 'aab'                | 'aba'           | Basic test case             |\n| 2          | 'aaab'               | ''              | Impossible case             |\n| 3          | 'a'                  | 'a'             | Single character            |\n| 4          | 'aabb'               | 'abab'          | Balanced characters         |\n| 5          | 'aaaabbbb'           | 'abababab'      | Equal counts                |\n| 6          | 'abcabc'             | 'abcabc'        | Already valid               |\n| 7          | 'aabbcc'             | 'abcabc'        | Three characters            |\n| 8          | 'aaaaaa'             | ''              | All same                    |\n| 9          | 'abcd'               | 'abcd'          | All unique                  |\n| 10         | 'aabbccddee'         | 'abcdeabcde'    | Multiple characters         |\n| 11         | 'aaa'                | ''              | Three same characters       |\n| 12         | 'aabbccdd'           | 'abcdabcd'      | Four characters             |\n| 13         | 'abcdeabcde'         | 'abcdeabcde'    | Already alternating         |\n| 14         | 'aabbc'              | 'ababc'         | Slightly unbalanced         |\n| 15         | 'aaaabb'             | ''              | Too many 'a's               |\n| 16         | 'aabbccdda'          | 'abcdabcad'     | Complex case                |\n| 17         | 'z'                  | 'z'             | Single character            |\n| 18         | 'zzzzaaaa'           | ''              | Too many 'z's               |\n| 19         | 'aabbccddeeff'       | 'abcdefabcdef'  | Six characters              |\n| 20         | 'abcdef'             | 'abcdef'        | All unique                  |\n| 21         | 'aaaabbbcc'          | ''              | Too many 'a's               |\n| 22         | 'aabbccdd'           | 'abcdabcd'      | Balanced                    |\n| 23         | 'abcdabcd'           | 'abcdabcd'      | Already valid               |\n| 24         | 'aabbccee'           | 'abceabce'      | Four characters             |\n| 25         | 'aaaaabbbbb'         | 'ababababab'    | Equal counts                |\n| 26         | 'aabbccddaabb'       | 'abcdabcadba'   | Longer string               |\n| 27         | 'abc'                | 'abc'           | Short valid                 |\n| 28         | 'aaaaa'              | ''              | Impossible                  |\n| 29         | 'aabbccdd'           | 'abcdabcd'      | Four pairs                  |\n| 30         | 'aabbccdda'          | 'abcdabcad'     | Extra character             |\n| 31         | 'aabbccddaabbcc'     | 'abcadbcadbcab' | Longer balanced             |\n| 32         | 'aaaabbbbcccc'       | 'abcabcabcabc'  | Three equal counts          |\n| 33         | 'abcdabcdabcd'       | 'abcdabcdabcd'  | Already valid               |\n| 34         | 'aabbccddaabbccdd'   | 'abcdabcadbcabdc' | Long balanced              |\n| 35         | 'aaaabbbcccddd'      | ''              | Too many 'a's               |\n| 36         | 'aabbccddaabbccdda'  | 'abcdabcadbcadabc' | Very long balanced         |\n| 37         | 'abcabcabc'          | 'abcabcabc'     | Already valid               |\n| 38         | 'aabb'               | 'abab'          | Simple balanced             |\n| 39         | 'aaaabbcc'           | ''              | Impossible                  |\n| 40         | 'aabbccddaabbccddaabb' | 'abcdabcadbcadabcaba' | Very long                  |",
            "example": {
                "input": "'aab'",
                "output": "'aba'",
                "explanation": "The string can be reorganized as 'aba' so that no two adjacent characters are the same."
            },
            "answer": "import heapq\nfrom collections import Counter\nclass Solution:\n    def reorganizeString(self, s):\n        count = Counter(s)\n        if max(count.values()) > (len(s) + 1) // 2:\n            return ''\n        heap = [(-freq, char) for char, freq in count.items()]\n        heapq.heapify(heap)\n        result = []\n        while len(heap) >= 2:\n            freq1, char1 = heapq.heappop(heap)\n            freq2, char2 = heapq.heappop(heap)\n            result.extend([char1, char2])\n            if freq1 + 1 < 0:\n                heapq.heappush(heap, (freq1 + 1, char1))\n            if freq2 + 1 < 0:\n                heapq.heappush(heap, (freq2 + 1, char2))\n        if heap:\n            result.append(heap[0][1])\n        return ''.join(result)"
        },
        {
            "id": 11,
            "title": "Task Scheduler",
            "description": "Given a char array representing tasks CPU needs to do and a cooldown period n, return the least number of intervals the CPU will take to finish all tasks.\n\n| Test Cases | tasks                | n   | Expected Output | Notes                        |\n|------------|----------------------|-----|-----------------|------------------------------|\n| 1          | ['A','A','A','B','B','B'] | 2 | 8               | Basic test case             |\n| 2          | ['A','A','A']            | 2   | 7               | Single task type            |\n| 3          | ['A','B','C']            | 1   | 3               | No cooldown needed          |\n| 4          | ['A','A','B','B']        | 2   | 6               | Two task types              |\n| 5          | ['A','A','A','A']        | 3   | 10              | High cooldown               |\n| 6          | ['A','B']                | 0   | 2               | No cooldown                 |\n| 7          | ['A','A','A','B','B','C'] | 2  | 8               | Mixed tasks                 |\n| 8          | ['A','A','A','A','B']    | 2   | 8               | Unbalanced tasks            |\n| 9          | ['A','B','C','D']        | 2   | 4               | All unique                  |\n| 10         | ['A','A','A','A','A']    | 4   | 13              | Long cooldown               |\n| 11         | ['A','B','A','B']        | 1   | 4               | Alternating tasks           |\n| 12         | ['A','A','B','B','C','C'] | 2  | 8               | Three task types            |\n| 13         | ['A','A','A','B']        | 3   | 7               | High cooldown, few tasks    |\n| 14         | ['A','B','C','A','B','C'] | 1  | 6               | Low cooldown                |\n| 15         | ['A','A','A','A','A','B'] | 5  | 11              | Long cooldown, unbalanced   |\n| 16         | ['A','B','C','D','E']    | 2   | 5               | All unique                  |\n| 17         | ['A','A','B','B','A','B'] | 2  | 8               | Mixed tasks                 |\n| 18         | ['A','A','A','B','C','D'] | 2  | 8               | More unique tasks           |\n| 19         | ['A','A','A','A','B','B'] | 3  | 10              | High cooldown               |\n| 20         | ['A','B','A','B','A','B'] | 0  | 6               | No cooldown                 |\n| 21         | ['A','A','A','B','B','B','C'] | 2 | 9             | Extra task                  |\n| 22         | ['A','A','B','C','D','E'] | 2  | 6               | Few duplicates              |\n| 23         | ['A','A','A','A','A','A'] | 5  | 16              | All same, long cooldown     |\n| 24         | ['A','B','C','A','B','C','A'] | 2 | 8             | Balanced tasks              |\n| 25         | ['A','A','B','B','C','C','D'] | 2 | 8             | Four task types             |\n| 26         | ['A','A','A','B','B','C','C'] | 3 | 10            | High cooldown               |\n| 27         | ['A','B','C','D','E','F'] | 2  | 6               | All unique                  |\n| 28         | ['A','A','A','A','B','C','D'] | 4 | 11            | Long cooldown               |\n| 29         | ['A','A','B','B','C','D','E'] | 2 | 7             | More unique tasks           |\n| 30         | ['A','A','A','B','B','B','C','C'] | 2 | 10        | Balanced tasks              |\n| 31         | ['A','A','A','A','A','B','B'] | 5 | 12            | Long cooldown               |\n| 32         | ['A','B','C','A','B','C','D','E'] | 2 | 8         | Mixed tasks                 |\n| 33         | ['A','A','A','B','C','D','E','F'] | 2 | 8         | More unique tasks           |\n| 34         | ['A','A','A','A','B','B','C','C'] | 3 | 11        | High cooldown               |\n| 35         | ['A','A','B','B','C','C','D','D'] | 2 | 8         | Four pairs                  |\n| 36         | ['A','A','A','A','A','A','B'] | 6 | 13            | Long cooldown, unbalanced   |\n| 37         | ['A','B','C','D','E','F','G'] | 2 | 7             | All unique                  |\n| 38         | ['A','A','A','B','B','C','D','E'] | 2 | 8         | Mixed tasks                 |\n| 39         | ['A','A','A','A','B','B','B','C'] | 4 | 12        | High cooldown               |\n| 40         | ['A','A','B','B','C','C','D','D','E'] | 2 | 9     | Five task types             |",
            "example": {
                "input": "tasks = ['A','A','A','B','B','B'], n = 2",
                "output": "8",
                "explanation": "A possible schedule is A -> B -> idle -> A -> B -> idle -> A -> B, taking 8 intervals."
            },
            "answer": "import heapq\nfrom collections import Counter\nclass Solution:\n    def leastInterval(self, tasks, n):\n        count = Counter(tasks)\n        heap = [-freq for freq in count.values()]\n        heapq.heapify(heap)\n        time = 0\n        while heap:\n            temp = []\n            for _ in range(n + 1):\n                if heap:\n                    freq = heapq.heappop(heap)\n                    if freq + 1 < 0:\n                        temp.append(freq + 1)\n                time += 1\n                if not heap and not temp:\n                    break\n            for freq in temp:\n                heapq.heappush(heap, freq)\n        return time"
        },
        {
            "id": 12,
            "title": "Kth Smallest Sum of Pairs from Two Arrays",
            "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, and an integer k, return the kth smallest sum of pairs (nums1[i] + nums2[j]).\n\n| Test Cases | nums1                | nums2                | k   | Expected Output | Notes                        |\n|------------|----------------------|----------------------|-----|-----------------|------------------------------|\n| 1          | [1,7,11]             | [2,4,6]              | 3   | 7               | Basic test case             |\n| 2          | [1,2]                | [3,4]                | 2   | 5               | Small arrays                |\n| 3          | [1]                  | [1]                  | 1   | 2               | Single elements             |\n| 4          | [1,2,3]              | [1,2,3]              | 5   | 4               | Equal arrays                |\n| 5          | [-2,-1]              | [-3,-2]              | 2   | -4              | Negative numbers            |\n| 6          | [0,0]                | [0,0]                | 2   | 0               | All zeros                   |\n| 7          | [10,20,30]           | [5,15,25]            | 4   | 25              | Larger numbers              |\n| 8          | [1,5,10]             | [2,7,12]             | 6   | 12              | Spread out numbers          |\n| 9          | [-5,-3,-1]           | [-4,-2,0]            | 3   | -7              | Negative numbers            |\n| 10         | [1,2,3]              | [4,5,6]              | 2   | 6               | Sequential arrays           |\n| 11         | [1,1,1]              | [1,1,1]              | 3   | 2               | All same                    |\n| 12         | [0,10,20]            | [0,10,20]            | 4   | 10              | Common elements             |\n| 13         | [1,3,5]              | [2,4,6]              | 7   | 9               | Overlapping sums            |\n| 14         | [-1,0,1]             | [-2,-1,0]            | 5   | -1              | Mixed signs                 |\n| 15         | [100,200]            | [150,250]            | 2   | 250             | Large numbers               |\n| 16         | [-100,-50]           | [-75,-25]            | 3   | -125            | Large negative numbers      |\n| 17         | [1,5,10]             | [2,6,11]             | 8   | 16              | Sequential increments       |\n| 18         | [0,1]                | [0,1]                | 3   | 1               | Small arrays                |\n| 19         | [10,20]              | [30,40]              | 2   | 40              | Non-overlapping             |\n| 20         | [-5,-3]              | [-2,-1]              | 3   | -5              | Negative numbers            |\n| 21         | [1,2,3,4]            | [5,6,7,8]            | 6   | 8               | Larger arrays               |\n| 22         | [0,0,0]              | [0,0,0]              | 4   | 0               | All zeros                   |\n| 23         | [100,101,102]        | [103,104,105]        | 5   | 205             | Close numbers               |\n| 24         | [-100,-99,-98]       | [-97,-96,-95]        | 4   | -195            | Negative close numbers      |\n| 25         | [0,1,2]              | [0,1,2]              | 6   | 3               | Identical arrays            |\n| 26         | [1,10,100]           | [2,20,200]           | 3   | 21              | Large gaps                  |\n| 27         | [-10,-5,0]           | [-5,0,5]             | 5   | -5              | Zero common                 |\n| 28         | [1,2,3,4,5]          | [6,7,8,9,10]         | 10  | 11              | Sequential arrays           |\n| 29         | [-5,-4,-3,-2,-1]    | [0,1,2,3,4]          | 8   | -1              | Negative to positive        |\n| 30         | [10,20,30,40]        | [15,25,35,45]        | 6   | 35              | Overlapping sums            |\n| 31         | [1,3,5,7,9]          | [2,4,6,8,10]         | 12  | 11              | Close sums                  |\n| 32         | [0,10]               | [0,10]               | 3   | 10              | Common points               |\n| 33         | [1,2,3,4]            | [5,6,7,8]            | 8   | 10              | Four elements               |\n| 34         | [-1,-1]              | [-1,-1]              | 3   | -2              | Negative same               |\n| 35         | [100,200,300]        | [150,250,350]        | 4   | 250             | Large sums                  |\n| 36         | [-100,-90,-80]       | [-90,-80,-70]        | 5   | -170            | Negative sums               |\n| 37         | [1,5,10,15]          | [2,6,11,16]          | 7   | 11              | Sequential increments       |\n| 38         | [0,0]                | [0,0]                | 3   | 0               | All zeros                   |\n| 39         | [10,20,30,40]        | [15,25,35,45]        | 10  | 45              | Large sums                  |\n| 40         | [1,2,3,4,5,6]        | [7,8,9,10,11,12]    | 12  | 13              | Large arrays                |",
            "example": {
                "input": "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
                "output": "7",
                "explanation": "The possible sums are [3,5,7,9,11,13,13,15,17], and the 3rd smallest is 7."
            },
            "answer": "import heapq\nclass Solution:\n    def kthSmallest(self, nums1, nums2, k):\n        m, n = len(nums1), len(nums2)\n        heap = [(nums1[0] + nums2[0], 0, 0)]\n        visited = {(0, 0)}\n        for _ in range(k - 1):\n            sum_val, i, j = heapq.heappop(heap)\n            if i + 1 < m and (i + 1, j) not in visited:\n                heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n                visited.add((i + 1, j))\n            if j + 1 < n and (i, j + 1) not in visited:\n                heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n                visited.add((i, j + 1))\n        return heapq.heappop(heap)[0]"
        },
        {
            "id": 13,
            "title": "Maximize Capital",
            "description": "Given a set of projects with their profits and required capital, and an initial capital w, find the maximum capital after completing at most k projects.\n\n| Test Cases | k   | w   | profits              | capital              | Expected Output | Notes                        |\n|------------|-----|-----|----------------------|----------------------|-----------------|------------------------------|\n| 1          | 2   | 0   | [1,2,3]              | [0,1,1]              | 4               | Basic test case             |\n| 2          | 1   | 0   | [1,2,3]              | [1,1,1]              | 0               | Insufficient capital        |\n| 3          | 1   | 10  | [1]                  | [0]                  | 11              | Single project              |\n| 4          | 2   | 1   | [1,2,3]              | [1,1,2]              | 4               | Limited capital             |\n| 5          | 2   | 0   | [10,20,30]           | [0,0,0]              | 60              | High profits                |\n| 6          | 1   | 0   | [0,0,0]              | [0,0,0]              | 0               | Zero profits                |\n| 7          | 3   | 5   | [1,2,3,4]            | [2,3,4,5]            | 9               | Sequential projects         |\n| 8          | 2   | 0   | [5,10,15]            | [1,2,3]              | 0               | No affordable projects      |\n| 9          | 2   | 10  | [100,200,300]        | [5,5,5]              | 510             | Large profits               |\n| 10         | 1   | 0   | [1,1,1]              | [0,0,0]              | 1               | Equal profits               |\n| 11         | 2   | 2   | [2,3,4]              | [1,2,3]              | 7               | Balanced case               |\n| 12         | 3   | 0   | [10,20,30,40]        | [0,0,0,0]            | 100             | All affordable              |\n| 13         | 2   | 5   | [1,2,3]              | [6,7,8]              | 5               | No projects affordable      |\n| 14         | 2   | 0   | [100,200]            | [0,0]                | 300             | Two projects                |\n| 15         | 1   | 10  | [50,100,150]         | [5,10,15]            | 160             | Single choice               |\n| 16         | 2   | 0   | [1,2,3,4]            | [0,1,2,3]            | 7               | Sequential projects         |\n| 17         | 3   | 0   | [10,20,30]           | [1,2,3]              | 0               | No affordable projects      |\n| 18         | 2   | 100 | [1000,2000,3000]     | [50,50,50]           | 5100            | High initial capital        |\n| 19         | 1   | 0   | [0,0]                | [0,0]                | 0               | Zero profits                |\n| 20         | 2   | 1   | [5,10,15,20]         | [1,1,1,1]            | 36              | All affordable              |\n| 21         | 2   | 0   | [100,200,300,400]    | [0,0,0,0]            | 700             | High profits                |\n| 22         | 3   | 5   | [1,2,3,4,5]          | [2,3,4,5,6]          | 10              | Limited affordable          |\n| 23         | 2   | 0   | [1000,2000]          | [0,0]                | 3000            | Large profits               |\n| 24         | 1   | 10  | [100,200,300,400]    | [5,5,5,5]            | 410             | Single project              |\n| 25         | 2   | 0   | [1,1,1,1]            | [0,0,0,0]            | 2               | Equal profits               |\n| 26         | 3   | 0   | [10,20,30,40,50]     | [0,0,0,0,0]          | 120             | All affordable              |\n| 27         | 2   | 5   | [1,2,3]              | [10,10,10]           | 5               | No projects affordable      |\n| 28         | 2   | 0   | [100,200,300,400,500] | [0,0,0,0,0]          | 900             | Five projects               |\n| 29         | 1   | 10  | [50,100,150,200]     | [5,10,15,20]         | 210             | Single choice               |\n| 30         | 2   | 0   | [1,2,3,4,5]          | [0,1,2,3,4]          | 9               | Sequential projects         |\n| 31         | 3   | 0   | [10,20,30,40]        | [1,2,3,4]            | 0               | No affordable projects      |\n| 32         | 2   | 100 | [1000,2000,3000,4000] | [50,50,50,50]        | 7100            | High initial capital        |\n| 33         | 1   | 0   | [0,0,0,0]            | [0,0,0,0]            | 0               | Zero profits                |\n| 34         | 2   | 1   | [5,10,15,20,25]      | [1,1,1,1,1]          | 46              | All affordable              |\n| 35         | 2   | 0   | [100,200,300,400,500,600] | [0,0,0,0,0,0]    | 1100            | Six projects                |\n| 36         | 3   | 5   | [1,2,3,4,5,6]        | [2,3,4,5,6,7]        | 11              | Limited affordable          |\n| 37         | 2   | 0   | [1000,2000,3000]     | [0,0,0]              | 5000            | Large profits               |\n| 38         | 1   | 10  | [100,200,300,400,500] | [5,5,5,5,5]          | 510             | Single project              |\n| 39         | 2   | 0   | [1,1,1,1,1]          | [0,0,0,0,0]          | 2               | Equal profits               |\n| 40         | 3   | 0   | [10,20,30,40,50,60]  | [0,0,0,0,0,0]        | 150             | All affordable              |",
            "example": {
                "input": "k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
                "output": "4",
                "explanation": "Start with w=0, do project with capital 0 (profit 1), then w=1, do project with capital 1 (profit 3), total capital = 4."
            },
            "answer": "import heapq\nclass Solution:\n    def findMaximizedCapital(self, k, w, profits, capital):\n        n = len(profits)\n        projects = sorted(zip(capital, profits))\n        available = []\n        ptr = 0\n        for _ in range(k):\n            while ptr < n and projects[ptr][0] <= w:\n                heapq.heappush(available, -projects[ptr][1])\n                ptr += 1\n            if available:\n                w += -heapq.heappop(available)\n        return w"
        },
        {
            "id": 14,
            "title": "Furthest Building You Can Reach",
            "description": "Given an array of building heights, a number of bricks, and ladders, find the furthest building index you can reach.\n\n| Test Cases | heights              | bricks | ladders | Expected Output | Notes                        |\n|------------|----------------------|--------|---------|-----------------|------------------------------|\n| 1          | [4,2,7,6,9,14,12]    | 5      | 1       | 4               | Basic test case             |\n| 2          | [4,12,2,7,3,18,20,3,19] | 10 | 2       | 7               | Complex case                |\n| 3          | [1]                  | 0      | 0       | 0               | Single building             |\n| 4          | [1,2,3,4]            | 10     | 0       | 3               | Only bricks                 |\n| 5          | [10,9,8,7]           | 0      | 0       | 0               | No resources                |\n| 6          | [1,1,1,1]            | 0      | 0       | 3               | No climbs                   |\n| 7          | [1,5,10,15]          | 10     | 1       | 3               | Use ladder and bricks       |\n| 8          | [100,200,300,400]    | 100    | 0       | 0               | Insufficient bricks         |\n| 9          | [1,2,3,4,5]          | 100    | 0       | 4               | Enough bricks               |\n| 10         | [10,20,30,40]        | 0      | 2       | 2               | Use ladders only            |\n| 11         | [1,10,20,30,40]      | 20     | 1       | 3               | Mixed resources             |\n| 12         | [5,5,5,5,5]          | 0      | 0       | 4               | No climbs                   |\n| 13         | [1,100,200,300]      | 50     | 1       | 1               | Limited bricks              |\n| 14         | [10,9,8,7,6]         | 0      | 0       | 4               | Decreasing heights          |\n| 15         | [1,2,3,4,5,6,7]      | 10     | 1       | 6               | Sequential climbs           |\n| 16         | [100,100,100,100]    | 0      | 0       | 3               | No climbs                   |\n| 17         | [1,10,100,1000]      | 100    | 1       | 2               | Large jumps                 |\n| 18         | [5,10,15,20,25]      | 10     | 1       | 3               | Limited resources           |\n| 19         | [1,2,3,4,5,6]        | 100    | 0       | 5               | Enough bricks               |\n| 20         | [10,20,30,40,50]     | 0      | 3       | 3               | Use ladders only            |\n| 21         | [1,100,200,300,400]  | 150    | 1       | 2               | Large climb                 |\n| 22         | [5,10,15,20]         | 5      | 1       | 3               | Tight resources             |\n| 23         | [1,1,1,1,1,1]        | 0      | 0       | 5               | No climbs                   |\n| 24         | [100,200,300,400,500] | 100   | 0       | 0               | No affordable climbs        |\n| 25         | [1,2,3,4,5,6,7,8]    | 15     | 1       | 7               | Sequential climbs           |\n| 26         | [10,9,8,7,6,5]       | 0      | 0       | 5               | Decreasing heights          |\n| 27         | [1,10,100,1000,10000] | 100   | 1       | 2               | Very large jumps            |\n| 28         | [5,10,15,20,25,30]   | 10     | 2       | 4               | Mixed resources             |\n| 29         | [1,2,3,4,5,6,7,8,9]  | 100    | 0       | 8               | Enough bricks               |\n| 30         | [10,20,30,40,50,60]  | 0      | 4       | 4               | Use ladders only            |\n| 31         | [1,100,200,300,400,500] | 200 | 1       | 2               | Large climb                 |\n| 32         | [5,10,15,20,25,30,35] | 15    | 1       | 5               | Tight resources             |\n| 33         | [1,1,1,1,1,1,1]      | 0      | 0       | 6               | No climbs                   |\n| 34         | [100,200,300,400,500,600] | 100 | 0       | 0               | No affordable climbs        |\n| 35         | [1,2,3,4,5,6,7,8,9,10] | 20   | 1       | 9               | Sequential climbs           |\n| 36         | [10,9,8,7,6,5,4]     | 0      | 0       | 6               | Decreasing heights          |\n| 37         | [1,10,100,1000,10000,100000] | 100 | 1       | 2               | Very large jumps            |\n| 38         | [5,10,15,20,25,30,35,40] | 15 | 2       | 5               | Mixed resources             |\n| 39         | [1,2,3,4,5,6,7,8,9,10,11] | 100 | 0       | 10              | Enough bricks               |\n| 40         | [10,20,30,40,50,60,70] | 0    | 5       | 5               | Use ladders only            |",
            "example": {
                "input": "heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
                "output": "4",
                "explanation": "Use bricks for height 2->7 (3 bricks), ladder for 6->9, then bricks for 9->14 (2 bricks), reach index 4."
            },
            "answer": "import heapq\nclass Solution:\n    def furthestBuilding(self, heights, bricks, ladders):\n        heap = []\n        for i in range(len(heights) - 1):\n            diff = heights[i + 1] - heights[i]\n            if diff > 0:\n                heapq.heappush(heap, diff)\n                if len(heap) > ladders:\n                    bricks -= heapq.heappop(heap)\n                if bricks < 0:\n                    return i\n        return len(heights) - 1"
        },
        {
            "id": 15,
            "title": "Minimum Cost to Hire K Workers",
            "description": "Given arrays quality and wage representing workers' quality and minimum wage expectation, find the minimum cost to hire exactly k workers.\n\n| Test Cases | quality              | wage                 | k   | Expected Output | Notes                        |\n|------------|----------------------|----------------------|-----|-----------------|------------------------------|\n| 1          | [10,20,5]            | [70,50,30]           | 2   | 105.0           | Basic test case             |\n| 2          | [3,1,10,10,1]        | [4,8,2,2,7]          | 3   | 30.0            | Complex case                |\n| 3          | [1]                  | [10]                 | 1   | 10.0            | Single worker               |\n| 4          | [5,5,5]              | [10,10,10]           | 2   | 10.0            | Equal quality and wage      |\n| 5          | [10,20,30]           | [100,200,300]        | 2   | 200.0           | High wages                  |\n| 6          | [1,1,1]              | [1,1,1]              | 2   | 1.0             | All same                    |\n| 7          | [3,4,5,6]            | [15,20,25,30]        | 3   | 45.0            | Sequential values           |\n| 8          | [10,10,10]           | [50,60,70]           | 2   | 100.0           | Same quality                |\n| 9          | [1,2,3,4]            | [10,20,30,40]        | 3   | 60.0            | Linear increase             |\n| 10         | [5,5]                | [10,20]              | 1   | 10.0            | Two workers, pick one       |\n| 11         | [10,20,30,40]        | [50,100,150,200]     | 3   | 225.0           | Large values                |\n| 12         | [1,1,1,1]            | [5,5,5,5]            | 3   | 5.0             | All same                    |\n| 13         | [3,5,7,9]            | [15,25,35,45]        | 2   | 30.0            | Sequential values           |\n| 14         | [10,10,10,10]        | [40,50,60,70]        | 3   | 120.0           | Same quality                |\n| 15         | [1,2,3,4,5]          | [10,20,30,40,50]     | 4   | 80.0            | Linear increase             |\n| 16         | [5,5,5,5]            | [10,20,30,40]        | 3   | 30.0            | Same quality                |\n| 17         | [10,20,30,40,50]     | [100,200,300,400,500] | 4  | 800.0           | Large values                |\n| 18         | [1,1,1,1,1]          | [5,5,5,5,5]          | 4   | 5.0             | All same                    |\n| 19         | [2,4,6,8]            | [10,20,30,40]        | 3   | 45.0            | Sequential values           |\n| 20         | [10,10,10,10,10]     | [50,60,70,80,90]     | 4   | 200.0           | Same quality                |\n| 21         | [1,2,3,4,5,6]        | [10,20,30,40,50,60]  | 5   | 100.0           | Linear increase             |\n| 22         | [5,5,5,5,5]          | [10,20,30,40,50]     | 4   | 40.0            | Same quality                |\n| 23         | [10,20,30,40,50,60]  | [100,200,300,400,500,600] | 5 | 1000.0         | Large values                |\n| 24         | [1,1,1,1,1,1]        | [5,5,5,5,5,5]        | 5   | 5.0             | All same                    |\n| 25         | [2,4,6,8,10]         | [10,20,30,40,50]     | 4   | 60.0            | Sequential values           |\n| 26         | [10,10,10,10,10,10]  | [50,60,70,80,90,100] | 5   | 250.0           | Same quality                |\n| 27         | [1,2,3,4,5,6,7]      | [10,20,30,40,50,60,70] | 6 | 120.0           | Linear increase             |\n| 28         | [5,5,5,5,5,5]        | [10,20,30,40,50,60]  | 5   | 50.0            | Same quality                |\n| 29         | [10,20,30,40,50,60,70] | [100,200,300,400,500,600,700] | 6 | 1050.0       | Large values                |\n| 30         | [1,1,1,1,1,1,1]      | [5,5,5,5,5,5,5]      | 6   | 5.0             | All same                    |\n| 31         | [2,4,6,8,10,12]      | [10,20,30,40,50,60]  | 5   | 75.0            | Sequential values           |\n| 32         | [10,10,10,10,10,10,10] | [50,60,70,80,90,100,110] | 6 | 300.0           | Same quality                |\n| 33         | [1,2,3,4,5,6,7,8]    | [10,20,30,40,50,60,70,80] | 7 | 140.0           | Linear increase             |\n| 34         | [5,5,5,5,5,5,5]      | [10,20,30,40,50,60,70] | 6 | 60.0            | Same quality                |\n| 35         | [10,20,30,40,50,60,70,80] | [100,200,300,400,500,600,700,800] | 7 | 1400.0     | Large values                |\n| 36         | [1,1,1,1,1,1,1,1]    | [5,5,5,5,5,5,5,5]    | 7   | 5.0             | All same                    |\n| 37         | [2,4,6,8,10,12,14]   | [10,20,30,40,50,60,70] | 6 | 90.0            | Sequential values           |\n| 38         | [10,10,10,10,10,10,10,10] | [50,60,70,80,90,100,110,120] | 7 | 350.0       | Same quality                |\n| 39         | [1,2,3,4,5,6,7,8,9]  | [10,20,30,40,50,60,70,80,90] | 8 | 160.0       | Linear increase             |\n| 40         | [5,5,5,5,5,5,5,5]    | [10,20,30,40,50,60,70,80] | 7 | 70.0           | Same quality                |",
            "example": {
                "input": "quality = [10,20,5], wage = [70,50,30], k = 2",
                "output": "105.0",
                "explanation": "Hire workers with quality 10 (wage 70) and quality 5 (wage 30), paying at least 7 per quality unit, total cost = 7 * (10 + 5) = 105."
            },
            "answer": "import heapq\nclass Solution:\n    def mincostToHireWorkers(self, quality, wage, k):\n        workers = sorted((w / q, q) for q, w in zip(quality, wage))\n        heap = []\n        total_quality = 0\n        min_cost = float('inf')\n        for ratio, q in workers:\n            heapq.heappush(heap, -q)\n            total_quality += q\n            if len(heap) > k:\n                total_quality += heapq.heappop(heap)\n            if len(heap) == k:\n                min_cost = min(min_cost, ratio * total_quality)\n        return min_cost"
        },
        {
            "id": 16,
            "title": "Kth Largest Sum in a Binary Tree",
            "description": "Given a binary tree and an integer k, find the kth largest sum of all possible subtree sums.\n\n| Test Cases | root                                   | k   | Expected Output | Notes                        |\n|------------|----------------------------------------|-----|-----------------|------------------------------|\n| 1          | [5,2,-3,4,1]                           | 2   | 8               | Basic test case             |\n| 2          | [1]                                    | 1   | 1               | Single node                 |\n| 3          | [10,5,-5,3,2]                          | 3   | 10              | Negative values             |\n| 4          | [4,2,3,1]                              | 2   | 9               | Small tree                  |\n| 5          | [-1,-2,-3]                             | 1   | -1              | All negative                |\n| 6          | [0,0,0]                                | 2   | 0               | All zeros                   |\n| 7          | [100,50,50]                            | 1   | 200             | Large values                |\n| 8          | [1,1,1,1,1]                            | 3   | 3               | Balanced tree               |\n| 9          | [10,-5,-5,2,3]                         | 2   | 10              | Mixed signs                 |\n| 10         | [5,2,3]                                | 1   | 10              | Small tree                  |\n| 11         | [1,2,3,4,5]                            | 4   | 5               | Sequential values           |\n| 12         | [0,0,0,0,0]                            | 3   | 0               | All zeros                   |\n| 13         | [100,200,300]                          | 2   | 300             | Large values                |\n| 14         | [-10,-20,-30]                          | 2   | -20             | Negative values             |\n| 15         | [1,-1,1,-1,1]                          | 3   | 1               | Alternating signs           |\n| 16         | [10,5,5,2,2]                           | 2   | 20              | Balanced tree               |\n| 17         | [1,2,3,4,5,6]                          | 5   | 5               | Larger tree                 |\n| 18         | [0,1,0,1,0]                            | 3   | 1               | Mixed zeros                 |\n| 19         | [100,100,100]                          | 1   | 300             | Equal values                |\n| 20         | [-100,-100,-100]                       | 1   | -100            | Negative equal values       |\n| 21         | [1,2,3,4,5,6,7]                        | 4   | 14              | Larger tree                 |\n| 22         | [0,0,0,0,0,0,0]                        | 4   | 0               | All zeros                   |\n| 23         | [1000,500,500]                         | 1   | 2000            | Large values                |\n| 24         | [-1000,-500,-500]                      | 1   | -500            | Negative large values       |\n| 25         | [1,1,1,1,1,1,1]                        | 5   | 3               | All ones                    |\n| 26         | [10,20,30,40,50]                       | 3   | 50              | Sequential values           |\n| 27         | [-10,-20,-30,-40,-50]                  | 3   | -20             | Negative sequential         |\n| 28         | [1,2,3,4,5,6,7,8]                      | 6   | 6               | Larger tree                 |\n| 29         | [0,0,0,0,0,0,0,0]                      | 5   | 0               | All zeros                   |\n| 30         | [100,200,300,400,500]                  | 2   | 900             | Large values                |\n| 31         | [-100,-200,-300,-400,-500]             | 2   | -200            | Negative large values       |\n| 32         | [1,2,3,4,5,6,7,8,9]                    | 7   | 7               | Sequential values           |\n| 33         | [0,1,0,1,0,1,0,1]                      | 4   | 1               | Alternating zeros           |\n| 34         | [10,10,10,10,10]                       | 3   | 30              | Equal values                |\n| 35         | [-10,-10,-10,-10,-10]                  | 3   | -10             | Negative equal values       |\n| 36         | [1,2,3,4,5,6,7,8,9,10]                 | 8   | 8               | Larger tree                 |\n| 37         | [0,0,0,0,0,0,0,0,0,0]                  | 6   | 0               | All zeros                   |\n| 38         | [1000,2000,3000,4000,5000]             | 2   | 9000            | Large values                |\n| 39         | [-1000,-2000,-3000,-4000,-5000]        | 2   | -2000           | Negative large values       |\n| 40         | [1,2,3,4,5,6,7,8,9,10,11]              | 9   | 9               | Sequential values           |",
            "example": {
                "input": "root = [5,2,-3,4,1], k = 2",
                "output": "8",
                "explanation": "Subtree sums are [5, 7, -3, 8, 1], the 2nd largest is 8."
            },
            "answer": "import heapq\nclass Solution:\n    def kthLargestSubtreeSum(self, root, k):\n        sums = []\n        def dfs(node):\n            if not node:\n                return 0\n            left_sum = dfs(node.left)\n            right_sum = dfs(node.right)\n            total = node.val + left_sum + right_sum\n            heapq.heappush(sums, total)\n            if len(sums) > k:\n                heapq.heappop(sums)\n            return total\n        dfs(root)\n        return sums[0] if sums else 0"
        },
        {
            "id": 17,
            "title": "Minimum Time to Collect Apples",
            "description": "Given an undirected tree with n nodes, edges, and a boolean array hasApple, find the minimum time to collect all apples and return to node 0. Each edge traversal takes 1 unit of time, and each edge must be traversed twice (to reach the apple and return). You only need to traverse paths leading to nodes with apples or nodes that lie on the path to an apple.\n\n| Test Cases | n   | edges                                  | hasApple                            | Expected Output | Notes                        |\n|------------|-----|----------------------------------------|-------------------------------------|-----------------|------------------------------|\n| 1          | 7   | [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]] | [false,false,true,false,true,true,false] | 8          | Basic test case             |\n| 2          | 4   | [[0,1],[1,2],[2,3]]                   | [false,false,false,true]            | 6               | Linear path                 |\n| 3          | 1   | []                                    | [false]                            | 0               | Single node, no apple       |\n| 4          | 3   | [[0,1],[0,2]]                         | [false,true,true]                  | 4               | Two children                |\n| 5          | 5   | [[0,1],[0,2],[1,3],[2,4]]             | [true,false,false,false,false]     | 2               | Apple at root               |\n| 6          | 4   | [[0,1],[0,2],[0,3]]                   | [false,false,false,false]          | 0               | No apples                   |\n| 7          | 6   | [[0,1],[1,2],[2,3],[3,4],[4,5]]       | [false,false,true,false,false,true]| 10              | Deep tree                   |\n| 8          | 3   | [[0,1],[1,2]]                         | [true,true,true]                   | 4               | All apples                  |\n| 9          | 5   | [[0,1],[1,2],[2,3],[3,4]]             | [false,true,false,false,true]      | 8               | Apples at ends              |\n| 10         | 2   | [[0,1]]                               | [false,true]                       | 2               | Single edge                 |\n| 11         | 4   | [[0,1],[0,2],[0,3]]                   | [true,false,false,true]            | 4               | Apples at leaves            |\n| 12         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [false,false,true,true,false,true] | 8               | Mixed apples                |\n| 13         | 3   | [[0,1],[0,2]]                         | [false,false,false]                | 0               | No apples                   |\n| 14         | 5   | [[0,1],[1,2],[2,3],[3,4]]             | [true,false,true,false,true]       | 8               | Apples at ends              |\n| 15         | 4   | [[0,1],[0,2],[0,3]]                   | [false,true,true,true]             | 6               | All leaves have apples      |\n| 16         | 6   | [[0,1],[1,2],[2,3],[3,4],[4,5]]       | [false,false,false,true,false,true]| 10              | Deep tree                   |\n| 17         | 3   | [[0,1],[1,2]]                         | [false,true,false]                 | 4               | Single apple                |\n| 18         | 5   | [[0,1],[0,2],[1,3],[2,4]]             | [true,true,false,false,true]       | 6               | Mixed apples                |\n| 19         | 4   | [[0,1],[0,2],[0,3]]                   | [false,false,true,false]           | 4               | Single apple                |\n| 20         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [true,false,false,true,true,false] | 8               | Mixed apples                |\n| 21         | 7   | [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] | [false,true,true,true,true,true,true] | 12         | Many apples                 |\n| 22         | 3   | [[0,1],[0,2]]                         | [true,false,false]                 | 2               | Apple at root               |\n| 23         | 5   | [[0,1],[1,2],[2,3],[3,4]]             | [false,false,false,false,true]     | 8               | Apple at end                |\n| 24         | 4   | [[0,1],[0,2],[0,3]]                   | [true,true,true,true]              | 6               | All nodes have apples       |\n| 25         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [false,false,false,false,false,true] | 6             | Single apple                |\n| 26         | 7   | [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] | [true,false,true,false,true,false,true] | 10       | Mixed apples                |\n| 27         | 3   | [[0,1],[0,2]]                         | [false,true,false]                 | 4               | Single apple                |\n| 28         | 5   | [[0,1],[0,2],[1,3],[2,4]]             | [false,true,true,true,false]       | 6               | Mixed apples                |\n| 29         | 4   | [[0,1],[0,2],[0,3]]                   | [false,false,false,true]           | 4               | Single apple                |\n| 30         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [true,true,true,true,true,true]    | 10              | All apples                  |\n| 31         | 7   | [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] | [false,false,false,true,false,true,false] | 8        | Mixed apples                |\n| 32         | 3   | [[0,1],[0,2]]                         | [true,true,true]                   | 4               | All apples                  |\n| 33         | 5   | [[0,1],[1,2],[2,3],[3,4]]             | [false,true,false,true,false]      | 8               | Apples at middle            |\n| 34         | 4   | [[0,1],[0,2],[0,3]]                   | [false,true,false,false]           | 4               | Single apple                |\n| 35         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [true,false,true,false,true,false] | 8               | Mixed apples                |\n| 36         | 7   | [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] | [false,true,false,true,false,true,true] | 10       | Mixed apples                |\n| 37         | 3   | [[0,1],[0,2]]                         | [false,false,true]                 | 4               | Single apple                |\n| 38         | 5   | [[0,1],[0,2],[1,3],[2,4]]             | [true,false,true,false,true]       | 6               | Mixed apples                |\n| 39         | 4   | [[0,1],[0,2],[0,3]]                   | [true,false,false,false]           | 2               | Apple at root               |\n| 40         | 6   | [[0,1],[0,2],[1,3],[1,4],[2,5]]       | [false,true,true,true,true,true]   | 10              | Many apples                 |",
            "example": {
                "input": "n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
                "output": "8",
                "explanation": "To collect all apples, traverse from node 0 to node 2 (2 units), node 2 to node 3 (2 units), node 0 to node 1 (2 units), node 1 to node 5 (2 units). Total time is 2 + 2 + 2 + 2 = 8."
            },
            "answer": "import heapq\nfrom collections import defaultdict\nclass Solution:\n    def minTime(self, n, edges, hasApple):\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        def dfs(node, parent):\n            total_time = 0\n            heap = []\n            for child in graph[node]:\n                if child != parent:\n                    child_time = dfs(child, node)\n                    if child_time > 0 or hasApple[child]:\n                        heapq.heappush(heap, -(child_time + 2))\n            \n            while heap:\n                time = -heapq.heappop(heap)\n                total_time += time\n            \n            return total_time\n        \n        result = dfs(0, -1)\n        return result"
        },
        {
            "id": 18,
            "title": "Minimum Cost to Merge Stones",
            "description": "Given an array of stones where stones[i] represents the number of stones in the i-th pile, and an integer k, find the minimum cost to merge all piles into one pile. In each merge, exactly k consecutive piles can be merged, and the cost is the sum of the stones in those piles. If it is impossible to merge into one pile, return -1.\n\n| Test Cases | stones                          | k   | Expected Output | Notes                        |\n|------------|---------------------------------|-----|-----------------|------------------------------|\n| 1          | [3,2,4,1]                      | 2   | 20              | Basic test case             |\n| 2          | [3,5,1,2,6]                    | 3   | 25              | Three-way merge             |\n| 3          | [1]                            | 2   | -1              | Single pile, impossible     |\n| 4          | [1,2,3,4]                      | 2   | 23              | Sequential piles            |\n| 5          | [4,3,2,1]                      | 2   | 20              | Reverse order               |\n| 6          | [1,1,1,1]                      | 2   | 8               | All same                    |\n| 7          | [10,20,30,40]                  | 2   | 150             | Large numbers               |\n| 8          | [1,2,3]                        | 3   | 6               | Exact merge                 |\n| 9          | [5,5,5,5,5]                    | 2   | 50              | Equal piles                 |\n| 10         | [1,2]                          | 2   | 3               | Two piles                   |\n| 11         | [1,2,3,4,5]                    | 3   | 27              | Five piles                  |\n| 12         | [10,10,10]                     | 3   | 30              | Three equal piles           |\n| 13         | [1,2,3,4,5,6]                  | 2   | 45              | Six piles                   |\n| 14         | [100,200,300]                  | 3   | 600             | Large numbers               |\n| 15         | [1,1]                          | 2   | 2               | Two piles                   |\n| 16         | [5,10,15,20]                   | 2   | 70              | Increasing piles            |\n| 17         | [1,2,3,4,5,6,7]                | 3   | 49              | Seven piles                 |\n| 18         | [10,20,30,40,50]               | 2   | 230             | Five piles                  |\n| 19         | [1,1,1]                        | 3   | 3               | Three piles                 |\n| 20         | [2,3,4,5]                      | 2   | 24              | Four piles                  |\n| 21         | [100,100,100,100]              | 2   | 600             | Equal large piles           |\n| 22         | [1,2,3,4,5,6,7,8]              | 3   | 72              | Eight piles                 |\n| 23         | [10,20]                        | 2   | 30              | Two piles                   |\n| 24         | [5,5,5]                        | 3   | 15              | Three equal piles           |\n| 25         | [1,2,3,4,5,6,7,8,9]            | 3   | 90              | Nine piles                  |\n| 26         | [10,10,10,10]                  | 2   | 60              | Four equal piles            |\n| 27         | [1,2,3]                        | 2   | 8               | Three piles                 |\n| 28         | [100,200,300,400]              | 2   | 1000            | Four large piles            |\n| 29         | [1,1,1,1,1]                    | 3   | 8               | Five equal piles            |\n| 30         | [5,10,15]                      | 3   | 30              | Three piles                 |\n| 31         | [1,2,3,4,5,6,7,8,9,10]         | 3   | 110             | Ten piles                   |\n| 32         | [10,20,30]                     | 3   | 60              | Three piles                 |\n| 33         | [1,2,3,4]                      | 3   | 10              | Four piles                  |\n| 34         | [100,100,100]                  | 3   | 300             | Three equal piles           |\n| 35         | [1,2,3,4,5,6,7,8,9,10,11]      | 3   | 132             | Eleven piles                |\n| 36         | [5,5,5,5]                      | 2   | 30              | Four equal piles            |\n| 37         | [1,2]                          | 3   | -1              | Impossible merge            |\n| 38         | [10,20,30,40,50,60]            | 2   | 350             | Six piles                   |\n| 39         | [1,1,1,1]                      | 3   | 4               | Four equal piles            |\n| 40         | [100,200,300,400,500]          | 2   | 1500            | Five large piles            |",
            "example": {
                "input": "stones = [3,2,4,1], k = 2",
                "output": "20",
                "explanation": "Merge [3,2] to get 5 (cost 5), then [5,4] to get 9 (cost 9), then [9,1] to get 10 (cost 6). Total cost = 5 + 9 + 6 = 20."
            },
            "answer": "import heapq\nclass Solution:\n    def mergeStones(self, stones, k):\n        n = len(stones)\n        if (n - 1) % (k - 1) != 0:\n            return -1\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + stones[i]\n        dp = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for length in range(k, n + 1):\n            for i in range(n - length + 1):\n                j = i + length - 1\n                for m in range(i, j, k - 1):\n                    dp[i][j] = min(dp[i][j], dp[i][m] + dp[m + 1][j])\n                if (j - i) % (k - 1) == 0:\n                    dp[i][j] += prefix_sum[j + 1] - prefix_sum[i]\n        return dp[0][n - 1] if dp[0][n - 1] != float('inf') else -1"
        },
        {
            "id": 19,
            "title": "Kth Smallest Product of Two Arrays",
            "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, and an integer k, return the kth smallest product of pairs (nums1[i] * nums2[j]).\n\n| Test Cases | nums1                | nums2                | k   | Expected Output | Notes                        |\n|------------|----------------------|----------------------|-----|-----------------|------------------------------|\n| 1          | [2,5]                | [3,4]                | 2   | 8               | Basic test case             |\n| 2          | [1,2,3]              | [2,3,4]              | 5   | 6               | Small arrays                |\n| 3          | [1]                  | [1]                  | 1   | 1               | Single elements             |\n| 4          | [-4,-2]              | [1,2]                | 3   | -8              | Negative numbers            |\n| 5          | [0,1]                | [0,1]                | 2   | 0               | Zeros                       |\n| 6          | [10,20]              | [5,15]               | 4   | 300             | Large numbers               |\n| 7          | [-3,-1]              | [-2,-1]              | 2   | 1               | All negative                |\n| 8          | [1,2,3]              | [1,2,3]              | 6   | 4               | Equal arrays                |\n| 9          | [-5,-2]              | [3,4]                | 4   | -8              | Mixed signs                 |\n| 10         | [1,2]                | [3,4]                | 1   | 3               | Smallest product            |\n| 11         | [5,5,5]              | [5,5,5]              | 3   | 25              | All same                    |\n| 12         | [0,0]                | [1,1]                | 2   | 0               | Zeros                       |\n| 13         | [-10,-5]             | [2,3]                | 3   | -20             | Negative and positive       |\n| 14         | [1,2,3,4]            | [2,3,4,5]            | 8   | 8               | Larger arrays               |\n| 15         | [100,200]            | [100,200]            | 4   | 40000           | Large numbers               |\n| 16         | [-100,-50]           | [-100,-50]           | 2   | 5000            | Large negative numbers      |\n| 17         | [1,2,3]              | [4,5,6]              | 7   | 10              | Sequential arrays           |\n| 18         | [-2,-1]              | [1,2]                | 2   | -4              | Mixed signs                 |\n| 19         | [10,20,30]           | [10,20,30]           | 5   | 200             | Equal arrays                |\n| 20         | [0,1,2]              | [0,1,2]              | 6   | 1               | Zeros and small numbers     |\n| 21         | [-5,-3,-1]           | [-5,-3,-1]           | 4   | 3               | All negative                |\n| 22         | [1,2,3,4,5]          | [1,2,3,4,5]          | 10  | 6               | Larger arrays               |\n| 23         | [100,100]            | [100,100]            | 2   | 10000           | Equal large numbers         |\n| 24         | [-10,-5]             | [10,5]               | 3   | -50             | Mixed signs                 |\n| 25         | [1,2,3,4,5,6]        | [1,2,3,4,5,6]        | 12  | 8               | Large arrays                |\n| 26         | [0,0,0]              | [1,1,1]              | 3   | 0               | All zeros                   |\n| 27         | [-100,-50,-25]       | [100,50,25]          | 5   | -5000           | Large mixed signs           |\n| 28         | [1,2]                | [1,2]                | 4   | 4               | Small arrays                |\n| 29         | [10,20,30,40]        | [10,20,30,40]        | 8   | 300             | Larger equal arrays         |\n| 30         | [-5,-4,-3]           | [1,2,3]              | 6   | -9              | Mixed signs                 |\n| 31         | [1,2,3,4,5,6,7]      | [1,2,3,4,5,6,7]      | 15  | 10              | Large arrays                |\n| 32         | [100,200,300]        | [100,200,300]        | 6   | 20000           | Large numbers               |\n| 33         | [-10,-5]             | [-10,-5]             | 3   | 50              | All negative                |\n| 34         | [1,2,3,4]            | [5,6,7,8]            | 9   | 12              | Sequential arrays           |\n| 35         | [0,1]                | [0,1]                | 3   | 0               | Zeros                       |\n| 36         | [10,20,30,40,50]     | [10,20,30,40,50]     | 10  | 400             | Large equal arrays          |\n| 37         | [-100,-50,-25]       | [-100,-50,-25]       | 4   | 2500            | Large negative numbers      |\n| 38         | [1,2,3]              | [4,5,6]              | 4   | 5               | Small arrays                |\n| 39         | [100,200,300,400]    | [100,200,300,400]    | 12  | 30000           | Large numbers               |\n| 40         | [-5,-3,-1]           | [5,3,1]              | 7   | -5              | Mixed signs                 |",
            "example": {
                "input": "nums1 = [2,5], nums2 = [3,4], k = 2",
                "output": "8",
                "explanation": "The possible products are [6,8,15,20], and the 2nd smallest is 8."
            },
            "answer": "import heapq\nclass Solution:\n    def kthSmallestProduct(self, nums1, nums2, k):\n        def count_products(mid):\n            count = 0\n            for x in nums1:\n                if x >= 0:\n                    j = len(nums2) - 1\n                    while j >= 0 and x * nums2[j] > mid:\n                        j -= 1\n                    count += j + 1\n                else:\n                    j = 0\n                    while j < len(nums2) and x * nums2[j] > mid:\n                        j += 1\n                    count += len(nums2) - j\n            return count\n        \n        left, right = -10**10, 10**10\n        while left < right:\n            mid = (left + right) // 2\n            if count_products(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
        },
        {
            "id": 20,
            "title": "Minimum Cost to Make Array Equal",
            "description": "Given an array of integers nums and a cost array where cost[i] is the cost to increase or decrease nums[i] by 1, find the minimum total cost to make all elements of nums equal. You can increase or decrease each element multiple times.\n\n| Test Cases | nums                   | cost                   | Expected Output | Notes                        |\n|------------|------------------------|------------------------|-----------------|------------------------------|\n| 1          | [1,3,5,2]             | [2,3,1,14]            | 8               | Basic test case             |\n| 2          | [2,2,2,2]             | [1,1,1,1]             | 0               | Already equal               |\n| 3          | [1]                   | [10]                  | 0               | Single element              |\n| 4          | [1,2,3]               | [1,2,3]               | 4               | Sequential numbers          |\n| 5          | [5,5,5]               | [10,20,30]            | 0               | Equal numbers               |\n| 6          | [1,10]                | [1,1]                 | 9               | Large difference            |\n| 7          | [100,200,300]         | [1,1,1]               | 200             | Large numbers               |\n| 8          | [1,2,3,4]             | [4,3,2,1]             | 10              | Reverse cost order          |\n| 9          | [10,10,10,10]         | [5,5,5,5]             | 0               | All equal                   |\n| 10         | [1,2]                 | [100,1]               | 1               | High cost for first         |\n| 11         | [1,3,5]               | [10,10,10]            | 40              | Equal costs                 |\n| 12         | [2,4,6,8]             | [1,1,1,1]             | 12              | Evenly spaced               |\n| 13         | [1,1,1,10]            | [1,1,1,1]             | 27              | One outlier                 |\n| 14         | [100,100,100]         | [100,200,300]         | 0               | Equal numbers, high cost    |\n| 15         | [1,5,10]              | [1,2,3]               | 14              | Increasing numbers          |\n| 16         | [10,20,30,40]         | [1,1,1,1]             | 60              | Large differences           |\n| 17         | [1,2,3,4,5]           | [5,4,3,2,1]           | 20              | Five elements               |\n| 18         | [5,5,5,5,5]           | [1,2,3,4,5]           | 0               | All equal                   |\n| 19         | [1,3,5,7,9]           | [1,1,1,1,1]           | 20              | Odd spaced numbers          |\n| 20         | [10,20]               | [10,1]                | 10              | Cost difference             |\n| 21         | [1,2,3,4,5,6]         | [1,1,1,1,1,1]         | 15              | Six elements                |\n| 22         | [100,200,300,400]     | [1,1,1,1]             | 300             | Large numbers               |\n| 23         | [1,1,1,1,10]          | [10,10,10,10,1]       | 9               | Low cost for outlier        |\n| 24         | [2,4,6]               | [3,2,1]               | 8               | Three elements              |\n| 25         | [1,2,3,4,5,6,7]       | [1,1,1,1,1,1,1]       | 21              | Seven elements              |\n| 26         | [10,10,20,20]         | [1,1,1,1]             | 20              | Two groups                  |\n| 27         | [1,5,10,15]           | [4,3,2,1]             | 22              | Decreasing costs            |\n| 28         | [100,100,100,100]     | [10,20,30,40]         | 0               | All equal, high cost        |\n| 29         | [1,3,5,7]             | [1,2,3,4]             | 18              | Four elements               |\n| 30         | [10,20,30]            | [1,1,1]               | 20              | Three large numbers         |\n| 31         | [1,2,3,4,5,6,7,8]     | [1,1,1,1,1,1,1,1]     | 28              | Eight elements              |\n| 32         | [5,10,15,20]          | [4,3,2,1]             | 30              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [1,1,1,1,1,1]         | 25              | One outlier                 |\n| 34         | [100,200,300,400,500] | [1,1,1,1,1]           | 400             | Five large numbers          |\n| 35         | [1,2,3]               | [10,10,10]            | 20              | Equal high costs            |\n| 36         | [10,20,30,40,50]      | [5,4,3,2,1]           | 100             | Five elements               |\n| 37         | [1,3,5,7,9,11]        | [1,1,1,1,1,1]         | 25              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [1,1,1,1]             | 200             | Two groups                  |\n| 39         | [1,5,10,15,20]        | [1,2,3,4,5]           | 54              | Five elements               |\n| 40         | [10,20,30,40,50,60]   | [1,1,1,1,1,1]         | 100             | Six large numbers           |",
            "example": {
                "input": "nums = [1,3,5,2], cost = [2,3,1,14]",
                "output": "8",
                "explanation": "Make all elements equal to 3. Cost = |1-3|*2 + |3-3|*3 + |5-3|*1 + |2-3|*14 = 4 + 0 + 2 + 14 = 8."
            },
            "answer": "import heapq\nclass Solution:\n    def minCost(self, nums, cost):\n        pairs = sorted(zip(nums, cost))\n        n = len(nums)\n        total_cost = 0\n        left_cost = 0\n        right_cost = sum(c for _, c in pairs)\n        left_count = 0\n        right_count = n\n        target = pairs[0][0]\n        min_cost = float('inf')\n        heap = []\n        for i in range(n):\n            if i > 0 and pairs[i][0] != pairs[i-1][0]:\n                curr_cost = left_cost * (pairs[i][0] - target) + right_cost * (target - pairs[i][0])\n                heapq.heappush(heap, -curr_cost)\n                if len(heap) > 1:\n                    heapq.heappop(heap)\n                target = pairs[i][0]\n            left_cost += pairs[i][1]\n            right_cost -= pairs[i][1]\n            left_count += 1\n            right_count -= 1\n        return -heap[0] if heap else 0"
        }
    ]
}