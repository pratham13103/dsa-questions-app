{
    "questions": [
        {
            "id": 1,
            "title": "Maximum Sum Subarray of Size K",
            "description": "Find the maximum sum of a subarray of size K.\n\n | Test Cases | Input              | Expected Output | Notes               |\n|------------|---------------------|-----------------|---------------------|\n| 1          | [2, 1, 5, 1, 3, 2], 3 | 9               | Basic test          |\n| 2          | [2, 3, 4, 1, 5], 2   | 7               | Simple subarray     |\n| 3          | [1, 2, 3, 4], 2      | 7               | Increasing numbers  |\n| 4          | [1, 2, 3, 4, 5], 3   | 12              | Larger subarray     |\n| 5          | [5, 1, 3, 2, 7], 4   | 12              | End of array        |\n| 6          | [1, 2, 3, 4, 5], 1   | 5               | One element         |\n| 7          | [4, 2, 1, 10], 2     | 14              | Subarray within range |\n| 8          | [1, 2, 3, 5], 4      | 11              | Maximum subarray    |\n| 9          | [3, 4, 5, 6], 3      | 15              | Equal-sized numbers |\n| 10         | [5, 1, 2, 6, 3], 3   | 13              | Combination case    |\n| 11         | [7, 8, 3, 9, 5], 3   | 24              | Mixed case          |\n| 12         | [1, 2, 3, 4, 5], 2   | 9               | Simple sliding      |\n| 13         | [6, 5, 4, 3, 2, 1], 3 | 15              | Decreasing numbers  |\n| 14         | [1, 2, 3, 4, 5], 4   | 14              | Equal sum case      |\n| 15         | [7, 8, 9, 10], 2     | 17              | Two-element window  |\n| 16         | [4, 1, 2, 3, 1], 5   | 11              | Entire array        |\n| 17         | [8, 7, 9, 6], 3      | 24              | Mixed values        |\n| 18         | [5, 5, 5, 5, 5], 3   | 15              | Same values         |\n| 19         | [1, 2, 3, 4, 5], 1   | 5               | Single element      |\n| 20         | [3, 5, 1, 2, 7], 3   | 14              | Combination case    |\n| 21         | [1, 3, 5, 7, 9], 2   | 12              | Increasing order    |\n| 22         | [2, 5, 7, 1, 4], 4   | 18              | Full array window   |\n| 23         | [10, 5, 6, 2, 3], 3  | 21              | Window within range |\n| 24         | [6, 5, 2, 1, 4], 2   | 11              | Sliding window      |\n| 25         | [2, 4, 3, 5, 6], 2   | 9               | Random order        |\n| 26         | [9, 3, 5, 1, 2], 3   | 17              | Random values       |\n| 27         | [5, 4, 6, 8, 2], 3   | 20              | Window increase     |\n| 28         | [3, 4, 6, 1, 9], 4   | 23              | Combination values  |\n| 29         | [8, 9, 10, 7, 1], 2  | 19              | Window at start     |\n| 30         | [10, 3, 5, 6, 9], 3  | 20              | Random mix          |\n| 31         | [1, 3, 5, 9, 7], 3   | 17              | Increased values    |\n| 32         | [6, 8, 4, 2, 1], 4   | 18              | End window          |\n| 33         | [5, 7, 2, 4, 6], 2   | 13              | Simple test         |\n| 34         | [2, 3, 4, 6, 8], 3   | 18              | Middle range        |\n| 35         | [8, 6, 9, 2, 4], 3   | 19              | Maximal case        |\n| 36         | [5, 3, 7, 1, 8], 4   | 21              | Larger subarray     |\n| 37         | [4, 6, 3, 2, 9], 2   | 15              | Sliding window      |\n| 38         | [7, 4, 8, 2, 1], 3   | 19              | Random values       |\n| 39         | [6, 1, 5, 4, 8], 2   | 11              | Mixed order         |\n| 40         | [3, 4, 5, 9, 6], 4   | 23              | Array with gaps     |",
            "example": {
              "input": "[2, 1, 5, 1, 3, 2]",
              "output": "9",
              "explanation": "The maximum sum of a subarray of size 3 is [5, 1, 3], which equals 9."
            },
            "answer": "def maxSumSubarray(arr, k):\n    window_sum, max_sum = sum(arr[:k]), sum(arr[:k])\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n    return max_sum"
          },
          {
            "id": 2,
            "title": "Smallest Subarray with Sum Greater than a Given Value",
            "description": "Find the smallest subarray with a sum greater than a given value.\n\n | Test Cases | Input          | Expected Output | Notes               |\n|------------|-----------------|-----------------|---------------------|\n| 1          | [2, 1, 5, 2, 3, 2], 7 | 2               | Basic case          |\n| 2          | [1, 2, 3, 4, 5], 11  | 3               | Subarray with sum greater than 11 |\n| 3          | [1, 1, 1, 1], 4     | 4               | Edge case           |\n| 4          | [4, 2, 1, 1, 1], 5   | 2               | Minimum window case  |\n| 5          | [1, 2, 3, 4, 5], 15  | 5               | Larger array        |\n| 6          | [10, 2, 3, 1], 8    | 2               | Large sum case      |\n| 7          | [1, 2, 3, 4], 7     | 3               | Simple subarray     |\n| 8          | [2, 3, 5, 2, 8], 10  | 2               | Middle large sum    |\n| 9          | [3, 1, 4, 1], 8     | 4               | Larger sum required |\n| 10         | [1, 1, 1, 10], 9    | 2               | End portion case    |\n| 11         | [6, 2, 5, 3], 11   | 2               | Edge case           |\n| 12         | [3, 4, 2, 1], 8    | 2               | Large sum required  |\n| 13         | [8, 1, 3, 2], 10   | 3               | Exact sum           |\n| 14         | [2, 6, 8, 3], 12   | 3               | Sliding window      |\n| 15         | [1, 2, 3, 4, 5], 16 | 5               | Largest array       |\n| 16         | [4, 3, 2, 1], 8    | 3               | Increasing case     |\n| 17         | [3, 5, 1, 2], 7    | 3               | Random array        |\n| 18         | [9, 4, 3, 2], 7    | 3               | Different numbers   |\n| 19         | [5, 7, 2, 1], 8    | 2               | Middle segment      |\n| 20         | [1, 1, 5, 1], 6    | 2               | Basic window        |\n| 21         | [2, 3, 1, 4], 6    | 3               | Edge case           |\n| 22         | [1, 2, 1, 3, 4], 7 | 3               | Regular case        |\n| 23         | [3, 1, 6, 8], 12   | 3               | Large window        |\n| 24         | [3, 1, 4, 5], 10   | 3               | Window sliding      |\n| 25         | [5, 3, 2, 1], 8    | 3               | Short case          |\n| 26         | [6, 1, 2, 5], 9    | 3               | Sum greater than sum |\n| 27         | [9, 2, 3, 5], 12   | 3               | Larger sum          |\n| 28         | [7, 6, 4, 2], 12   | 3               | Middle case         |\n| 29         | [1, 4, 2, 1], 6    | 2               | Smaller sum         |\n| 30         | [4, 1, 5, 6], 7    | 3               | Larger sum case     |\n| 31         | [4, 5, 1, 2], 7    | 3               | Case study          |\n| 32         | [1, 4, 6, 7], 8    | 3               | Middle numbers      |\n| 33         | [4, 5, 3, 2], 9    | 3               | Larger window       |\n| 34         | [8, 2, 6, 1], 9    | 3               | Sliding window      |\n| 35         | [7, 5, 3, 1], 7    | 3               | Sliding max         |\n| 36         | [1, 3, 5, 1], 7    | 3               | Multiple values     |\n| 37         | [4, 3, 1, 1], 8    | 3               | Regular test        |\n| 38         | [5, 6, 4, 2], 8    | 3               | Mixed array         |\n| 39         | [2, 3, 1, 8], 7    | 3               | Random input        |\n| 40         | [6, 5, 1, 2], 9    | 3               | Exact value         |",
            "example": {
              "input": "[2, 1, 5, 2, 3, 2]",
              "output": "2",
              "explanation": "The smallest subarray whose sum is greater than 7 is [5, 2]."
            },
            "answer": "def smallestSubarrayWithSumGreaterThanK(arr, k):\n    n = len(arr)\n    min_len = n + 1\n    window_sum = 0\n    start = 0\n    for end in range(n):\n        window_sum += arr[end]\n        while window_sum > k:\n            min_len = min(min_len, end - start + 1)\n            window_sum -= arr[start]\n            start += 1\n    return min_len if min_len <= n else 0"
          },          
          {
            "id": 3,
            "title": "Longest Substring with K Distinct Characters",
            "description": "Find the length of the longest substring with at most K distinct characters.\n\n | Test Cases | Input         | Expected Output | Notes               |\n|------------|----------------|-----------------|---------------------|\n| 1          | \"araaci\", 2    | 4               | Basic case          |\n| 2          | \"araaci\", 1    | 2               | Single character substring |\n| 3          | \"cbbebi\", 3    | 5               | Longer substring    |\n| 4          | \"abcbbbbcccbdddadacb\", 2 | 10        | Multiple characters |\n| 5          | \"abcba\", 3     | 3               | Mixed case          |\n| 6          | \"bbbbbbb\", 1   | 7               | Single repeating character |\n| 7          | \"aaabbbccc\", 2 | 6               | Balanced count      |\n| 8          | \"aabbcc\", 2    | 4               | Simple test case    |\n| 9          | \"abcde\", 3     | 3               | Multiple characters |\n| 10         | \"aaaaaaaaa\", 1 | 9               | One repeated character |\n| 11         | \"abacbacc\", 3  | 6               | Substring with 3 distinct chars |\n| 12         | \"abcabcabc\", 2 | 4               | Simple alternating pattern |\n| 13         | \"aaabbccdd\", 3 | 6               | Mixed case          |\n| 14         | \"bbbbbcba\", 3  | 5               | Center-based test case |\n| 15         | \"abcdefg\", 3   | 3               | Distinct characters  |\n| 16         | \"bcadfa\", 2    | 4               | Two distinct characters |\n| 17         | \"cbbccba\", 2   | 4               | Alternating pattern |\n| 18         | \"xyzxyx\", 2    | 4               | Substring with two letters |\n| 19         | \"jjjkkklll\", 2 | 4               | Repeating elements  |\n| 20         | \"abcabcabcabc\", 3 | 4            | Alternating three characters |\n| 21         | \"abbacbab\", 2   | 5               | Longest pattern      |\n| 22         | \"abcdedcba\", 3 | 5               | Balanced pattern     |\n| 23         | \"bcacacb\", 3    | 4               | Balanced substring   |\n| 24         | \"abacbbcbac\", 2 | 5               | Alternating with repeats |\n| 25         | \"xyxyxyxy\", 2   | 4               | Alternating letters  |\n| 26         | \"abccba\", 2     | 4               | Mixed repeating chars |\n| 27         | \"zzzzxyzzzz\", 3 | 5               | Substring with 3 types of chars |\n| 28         | \"ababababa\", 3  | 4               | Alternating substrings |\n| 29         | \"abcdabca\", 4   | 4               | Full alternating pattern |\n| 30         | \"zzzzyyzzzyy\", 2| 4               | Substring with distinct and repeating characters |\n| 31         | \"aabbccaa\", 3   | 5               | Middle substring     |\n| 32         | \"abcabcabcabc\", 2 | 4            | Alternating 2 chars  |\n| 33         | \"abcdefgabc\", 3 | 5               | Mixed alternating    |\n| 34         | \"aabbaaabbbb\", 2 | 6              | Repeated with mix    |\n| 35         | \"aaabbbbcbab\", 3 | 6              | Alternating center   |\n| 36         | \"xyxyxyxyxyx\", 2 | 4              | Alternating chars    |\n| 37         | \"abaacdcabc\", 3 | 6              | Repeating pattern    |\n| 38         | \"aabbccbccba\", 2 | 4              | Repeating edges      |\n| 39         | \"cabbacbbbca\", 3 | 6              | Pattern alternating   |\n| 40         | \"aabbccaaaab\", 3 | 6              | Mixed alternating    |",
            "example": {
                "input": "\"araaci\", 2",
                "output": "4",
                "explanation": "The longest substring with at most 2 distinct characters is \"araa\", which has a length of 4."
            },
            "answer": "def longestSubstringWithKDistinct(s, k):\n    start, max_len, char_map = 0, 0, {}\n    for end in range(len(s)):\n        char_map[s[end]] = char_map.get(s[end], 0) + 1\n        while len(char_map) > k:\n            char_map[s[start]] -= 1\n            if char_map[s[start]] == 0:\n                del char_map[s[start]]\n            start += 1\n        max_len = max(max_len, end - start + 1)\n    return max_len"
        },        
        {
            "id": 4,
            "title": "Longest Subarray with Sum Less Than or Equal to K",
            "description": "Find the length of the longest contiguous subarray with a sum less than or equal to K.\n\n | Test Cases | Input          | Expected Output | Notes                    |\n|------------|-----------------|-----------------|--------------------------|\n| 1          | [1, 2, 3, 4, 5], 11 | 4               | Basic case                |\n| 2          | [1, 2, 3, 4, 5], 6  | 3               | Subarray with sum <= 6    |\n| 3          | [1, 2, 3, 4, 5], 10 | 4               | Subarray with sum <= 10   |\n| 4          | [2, 1, 5, 2, 3, 2], 7 | 4               | Subarray with sum <= 7    |\n| 5          | [4, 2, 1, 1, 1], 5  | 3               | Subarray with sum <= 5    |\n| 6          | [1, 1, 1, 1], 4     | 4               | Subarray with sum <= 4    |\n| 7          | [1, 3, 5, 7], 8     | 3               | Subarray with sum <= 8    |\n| 8          | [2, 3, 4], 6        | 2               | Subarray with sum <= 6    |\n| 9          | [1, 2, 3, 4], 5     | 2               | Subarray with sum <= 5    |\n| 10         | [5, 3, 2, 1], 6     | 2               | Subarray with sum <= 6    |\n| 11         | [3, 1, 4, 1], 8     | 4               | Subarray with sum <= 8    |\n| 12         | [2, 3, 5, 2, 8], 10 | 3               | Subarray with sum <= 10   |\n| 13         | [1, 2, 3, 4], 4     | 2               | Subarray with sum <= 4    |\n| 14         | [10, 2, 3, 1], 6    | 3               | Subarray with sum <= 6    |\n| 15         | [4, 1, 3, 2], 5     | 2               | Subarray with sum <= 5    |\n| 16         | [6, 7, 1, 2], 8     | 3               | Subarray with sum <= 8    |\n| 17         | [3, 1, 4, 1], 5     | 3               | Subarray with sum <= 5    |\n| 18         | [2, 3, 5, 1], 7     | 3               | Subarray with sum <= 7    |\n| 19         | [1, 3, 6, 4], 7     | 3               | Subarray with sum <= 7    |\n| 20         | [1, 2, 3, 5], 9     | 4               | Subarray with sum <= 9    |\n| 21         | [1, 3, 2, 1], 6     | 3               | Subarray with sum <= 6    |\n| 22         | [1, 1, 1, 1], 2     | 2               | Small sum case            |\n| 23         | [4, 1, 2, 7], 10    | 4               | Larger sum case           |\n| 24         | [5, 2, 1, 3], 7     | 3               | Subarray with sum <= 7    |\n| 25         | [2, 1, 3, 4], 5     | 3               | Subarray with sum <= 5    |\n| 26         | [2, 1, 4, 2], 6     | 3               | Subarray with sum <= 6    |\n| 27         | [1, 2, 3], 4        | 2               | Simple subarray          |\n| 28         | [4, 5, 1], 8        | 3               | Subarray with sum <= 8    |\n| 29         | [2, 1, 5], 8        | 3               | Subarray with sum <= 8    |\n| 30         | [1, 2, 3, 4], 10    | 4               | Subarray with sum <= 10   |\n| 31         | [7, 5, 2, 1], 8     | 3               | Subarray with sum <= 8    |\n| 32         | [1, 2, 3, 4], 7     | 3               | Subarray with sum <= 7    |\n| 33         | [3, 4, 5, 6], 10    | 3               | Subarray with sum <= 10   |\n| 34         | [4, 2, 1, 1], 6     | 3               | Subarray with sum <= 6    |\n| 35         | [5, 1, 1, 2], 6     | 3               | Subarray with sum <= 6    |\n| 36         | [1, 1, 1], 3        | 3               | Subarray with sum <= 3    |\n| 37         | [3, 1, 4, 1], 6     | 4               | Subarray with sum <= 6    |\n| 38         | [1, 1, 1, 1], 4     | 4               | Subarray with sum <= 4    |\n| 39         | [3, 3, 3, 3], 6     | 2               | Subarray with sum <= 6    |\n| 40         | [5, 2, 3], 7        | 3               | Subarray with sum <= 7    |",
            "example": {
                "input": "[1, 2, 3, 4, 5], 11",
                "output": "4",
                "explanation": "The longest subarray with sum less than or equal to 11 is [2, 3, 4, 5], which has a sum of 11."
            },
            "answer": "s = input().strip()\n\nif s.lower() == 'null':\n    print(1)\nelse:\n    max_len = 0\n    start = 0\n    char_index = {}\n\n    for i in range(len(s)):\n        if s[i] in char_index and char_index[s[i]] >= start:\n            start = char_index[s[i]] + 1\n        char_index[s[i]] = i\n        max_len = max(max_len, i - start + 1)\n\n    print(max_len)"
        },               
        {
            "id": 5,
            "title": "Longest Substring Without Repeating Characters",
            "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n| Test Cases | s                               | Expected Output | Notes                                   |\n|------------|---------------------------------|-----------------|-----------------------------------------|\n| 1          | 'abcabcbb'                      | 3               | Substring 'abc' is the longest         |\n| 2          | 'bbbbb'                          | 1               | Single character repeated              |\n| 3          | 'pwwkew'                         | 3               | Substring 'wke' is the longest         |\n| 4          | 'au'                             | 2               | Two unique characters                   |\n| 5          | 'dvdf'                           | 3               | Substring 'vdf' is the longest         |\n| 6          | ' '                               | 1               | Single character space                  |\n| 7          | 'aaaa'                           | 1               | All characters are the same             |\n| 8          | 'abcde'                          | 5               | No repetition, full string              |\n| 9          | 'a'                               | 1               | Single character                       |\n| 10         | 'abcdefgh'                       | 8               | All unique characters                   |\n| 11         | 'aabbcc'                         | 2               | 'ab' is the longest                     |\n| 12         | 'xyzzxy'                         | 3               | 'xyz' is the longest                    |\n| 13         | 'zxcvbnm'                        | 7               | All unique characters                   |\n| 14         | 'abcabc'                         | 3               | 'abc' is the longest                    |\n| 15         | 'abababa'                        | 2               | 'ab' is the longest                     |\n| 16         | 'mnopqrs'                        | 7               | All unique characters                   |\n| 17         | 'qwerty'                         | 6               | All unique characters                   |\n| 18         | 'aaaaaabbcccc'                   | 2               | 'ab' is the longest                     |\n| 19         | 'abcdefgabcdefg'                 | 7               | 'abcdefg' is the longest                |\n| 20         | 'bbbbbabbbb'                     | 2               | 'ab' is the longest                     |\n| 21         | 'zyxwvutsrqponmlkjihgfedcba'     | 26              | All unique characters                   |\n| 22         | 'aaaabbbbcccc'                   | 2               | 'ab' is the longest                     |\n| 23         | 'xyyxyxyyyxyxyxyy'                | 4               | 'xyxy' is the longest                   |\n| 24         | 'asdasd'                          | 3               | 'asd' is the longest                    |\n| 25         | 'azazazazaz'                     | 2               | 'az' is the longest                     |\n| 26         | 'abcabcabc'                      | 3               | 'abc' is the longest                    |\n| 27         | 'tata'                            | 2               | 'ta' is the longest                     |\n| 28         | 'mnopqrst'                        | 7               | All unique characters                   |\n| 29         | 'ggggggg'                         | 1               | Single character repeated               |\n| 30         | 'aabbccdd'                        | 2               | 'ab' is the longest                     |\n| 31         | 'acde'                            | 4               | All unique characters                   |\n| 32         | 'abcdabc'                         | 4               | 'abcd' is the longest                   |\n| 33         | 'ababcdabcd'                      | 4               | 'abcd' is the longest                   |\n| 34         | 'xyzzyx'                          | 3               | 'xyz' is the longest                    |\n| 35         | 'tttttt'                          | 1               | Single repeated character               |\n| 36         | 'iwjlkd'                          | 6               | All unique characters                   |\n| 37         | 'caaaab'                          | 3               | 'cab' is the longest                    |\n| 38         | 'xxyyyz'                          | 3               | 'xyz' is the longest                    |\n| 39         | 'abbbbbbbb'                       | 2               | 'ab' is the longest                     |\n| 40         | 'rtyytrty'                        | 4               | 'rty' is the longest                    |",
            "example": {
              "input": "'abcabcbb'",
              "output": "3",
              "explanation": "The longest substring without repeating characters is 'abc', which has length 3."
            },
            "answer": "def lengthOfLongestSubstring(s):\n    char_map = {}\n    left = max_len = 0\n    for right, char in enumerate(s):\n        if char in char_map and char_map[char] >= left:\n            left = char_map[char] + 1\n        char_map[char] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len"
          },          
        {
            "id": 6,
            "title": "Container With Most Water",
            "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\n| Test Case | height                       | Expected Output | Notes                                   |\n|-----------|------------------------------|------------------|-----------------------------------------|\n| 1         | [1,8,6,2,5,4,8,3,7]           | 49               | Max area between index 1 and 8          |\n| 2         | [1,1]                         | 1                | Only two elements                       |\n| 3         | [4,3,2,1,4]                   | 16               | Max area between index 0 and 4          |\n| 4         | [1,2,1]                       | 2                | Middle is shortest                      |\n| 5         | [2,3,10,5,7,8,9]              | 36               | Max area between index 2 and 6          |\n| 6         | [1,3,2,5,25,24,5]             | 24               | Max area between index 4 and 6          |\n| 7         | [1,2,4,3]                     | 4                | Max area between index 1 and 2          |\n| 8         | [1,2,1,2]                     | 3                | Equal height variation                  |\n| 9         | [10,9,8,7,6,5,4,3,2,1]        | 25               | Descending heights                      |\n| 10        | [1,2,3,4,5,6,7,8,9,10]        | 25               | Ascending heights                       |\n| 11        | [2,2,2,2]                     | 4                | All equal values                        |\n| 12        | [1,100,1,100,1]               | 400              | Tall on both sides                      |\n| 13        | [1,3,2,5,25,24,5,7,8]         | 56               | Wider max case                          |\n| 14        | [5,5,1,1,5,5]                 | 25               | Plateaus                                |\n| 15        | [1,2,1,3,1]                   | 4                | Peak in middle                          |\n| 16        | [6,9,3,4,5,8]                 | 32               | Complex random                          |\n| 17        | [10,1,1,1,1,10]               | 50               | Best at edges                           |\n| 18        | [1,2,3,4,5,6,7,8,9,0]         | 20               | Zero at end                             |\n| 19        | [5,0,5]                       | 10               | Valley center                           |\n| 20        | [1,0,1,0,1]                   | 4                | Even with zero                          |\n| 21        | [3,2,1,3]                     | 9                | Mirror edge                             |\n| 22        | [6,7,8,1,8,7,6]               | 36               | Symmetrical                             |\n| 23        | [10,1,10]                     | 20               | Small between tall                      |\n| 24        | [1,1,100,1,1]                 | 4                | Narrow max                              |\n| 25        | [2,3,10,5,7,8,9,2,4,3,2,1]     | 36               | Multiple heights                        |\n| 26        | [1,3,2,4,1,2,3]               | 9                | In-between max                          |\n| 27        | [1,2]                         | 1                | Minimum input                           |\n| 28        | [100,1,1,1,100]               | 400              | Far apart tall                          |\n| 29        | [5,1,1,1,5]                   | 20               | Flat center                             |\n| 30        | [3,9,3,4,7,2,12,6]            | 45               | Complex structure                       |\n| 31        | [1,1,1,1,1,1]                 | 5                | All same height                         |\n| 32        | [6,1,2,3,4,5]                 | 24               | One tall first                          |\n| 33        | [1,2,1,1,100]                 | 4                | One tall end                            |\n| 34        | [1,100,1,1,1]                 | 4                | One tall beginning                      |\n| 35        | [7,1,2,3,9]                   | 28               | High end                                |\n| 36        | [9,8,7,6,5,4,3,2,1]           | 20               | Reversed decreasing                     |\n| 37        | [1,2,1,1,100,1,1]             | 6                | Wide between highs                      |\n| 38        | [1,2,100,2,1]                 | 4                | Narrow width of high                   |\n| 39        | [1,1,1,100]                   | 3                | Not much wide at tall                  |\n| 40        | [1,8,6,2,5,4,8,3,7,10,2,5]    | 80               | Complex and long list                  |",
            "example": {
              "input": "[1,8,6,2,5,4,8,3,7]",
              "output": "49",
              "explanation": "The vertical lines at index 1 and 8 form a container with the maximum area of 49."
            },
            "answer": "class Solution:\n    def maxArea(self, height):\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            h = min(height[left], height[right])\n            w = right - left\n            max_area = max(max_area, h * w)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
          },
          {
            "id": 7,
            "title": "Maximum Average Subarray I",
            "description": "Find the contiguous subarray of length k with the maximum average.\n\n| Test Cases | nums                        | k  | Expected Output | Notes                                        |\n|------------|-----------------------------|----|------------------|----------------------------------------------|\n| 1          | [1,12,-5,-6,50,3]           | 4  | 12.75            | Example case                                |\n| 2          | [5]                         | 1  | 5.0              | Single element                              |\n| 3          | [0,0,0,0]                   | 2  | 0.0              | All zeros                                   |\n| 4          | [1,2,3,4,5]                 | 1  | 5.0              | k = 1                                       |\n| 5          | [1,2,3,4,5]                 | 5  | 3.0              | k = len(nums)                               |\n| 6          | [10,2,3,4,50,0]             | 3  | 19.0             | Highest average in middle                   |\n| 7          | [-1,-12,-5,-6,-50,-3]       | 2  | -4.0             | All negatives                               |\n| 8          | [1,1,1,1,100]               | 2  | 50.5             | Large value affects average                 |\n| 9          | [1,3,2,6,-1,-4,-2,8,9]      | 5  | 6.4              | Mix of values                               |\n| 10         | [7,4,5,8,9,1,2,3,6]         | 4  | 7.5              | Random values                               |\n| 11         | [5,5,5,5,5]                 | 3  | 5.0              | All same values                             |\n| 12         | [10,9,8,7,6,5,4]            | 2  | 9.5              | Decreasing values                           |\n| 13         | [0,-1,-2,-3,-4]             | 3  | -1.0             | Increasing negatives                        |\n| 14         | [100,90,80,70]              | 2  | 95.0             | Large values                                |\n| 15         | [1,2,3,1,2,3]               | 3  | 2.0              | Repeated patterns                           |\n| 16         | [9,8,7,6,5,4,3,2,1]         | 4  | 7.5              | Peak at start                               |\n| 17         | [-10,0,10,20]               | 2  | 15.0             | Transition through 0                        |\n| 18         | [100,-100,100,-100]         | 2  | 0.0              | Fluctuating values                          |\n| 19         | [3,3,4,4,5,5,6,6]           | 4  | 5.5              | Duplicates                                  |\n| 20         | [10,9,8,7,6,5]              | 3  | 9.0              | Max subarray at beginning                   |\n| 21         | [1,0,1,0,1,0,1,0]           | 2  | 1.0              | Alternate values                            |\n| 22         | [2,2,2,2,10,2,2]            | 3  | 4.666666667      | One spike                                   |\n| 23         | [1]*1000                    | 100| 1.0              | Large input                                 |\n| 24         | [10]*500 + [20]*500         | 500| 15.0             | Transition in middle                        |\n| 25         | [i for i in range(1, 101)]  | 10 | 95.5             | Increasing sequence                         |\n| 26         | [-5]*50 + [5]*50            | 10 | 2.5              | Mixed negatives and positives               |\n| 27         | [0]*1000                    | 100| 0.0              | All zero large                              |\n| 28         | [2,3,4,5,6,7,8,9,10]        | 5  | 8.0              | Right end dominates                         |\n| 29         | [1,1,1,1,1,100]             | 3  | 34.0             | Spike at end                                |\n| 30         | [5,4,3,2,1,0,-1,-2]         | 3  | 4.0              | Descending with negatives                   |\n| 31         | [1,2,3,4,5,6,7,8,9]         | 9  | 5.0              | Entire array average                        |\n| 32         | [1,3,5,7,9]                 | 2  | 8.0              | End max                                     |\n| 33         | [1,3,5,7,9]                 | 4  | 6.0              | Multiple choices                            |\n| 34         | [-2,1,-3,4,-1,2,1,-5,4]     | 5  | 1.2              | Mix, classic test case                      |\n| 35         | [2,1]                       | 2  | 1.5              | Minimum length                              |\n| 36         | [10,20,30,40,50,60]         | 3  | 50.0             | Max at end                                  |\n| 37         | [10,20,30,40,50,60]         | 6  | 35.0             | Full average                                |\n| 38         | [10,-10,10,-10,10]          | 3  | 3.333333         | Alternating positives and negatives         |\n| 39         | [7,7,7,7,7,7,7,7]           | 4  | 7.0              | Constant average                            |\n| 40         | [1,2,3,4,5,6,7,8,9,10]      | 5  | 8.0              | Right-side window max                       |",
            "example": {
              "input": "[1,12,-5,-6,50,3], k = 4",
              "output": "12.75",
              "explanation": "The subarray [12,-5,-6,50] has the maximum average = 51/4 = 12.75"
            },
            "answer": "data = list(map(int, input().split()))\nk = data[0]\nnums = data[1:]\n\nwindow_sum = sum(nums[:k])\nmax_sum = window_sum\n\nfor i in range(k, len(nums)):\n    window_sum += nums[i] - nums[i - k]\n    if window_sum > max_sum:\n        max_sum = window_sum\n\nmax_avg = max_sum / k\nprint(max_avg)"
          },
          {
            "id": 8,
            "title": "Longest Subarray of 1's After Deleting One Element",
            "description": "Return the length of the longest subarray containing only 1's after deleting one element.\n\n| Test Cases | nums                                   | Expected Output | Notes                                      |\n|------------|----------------------------------------|------------------|--------------------------------------------|\n| 1          | [1,1,0,1]                              | 3                | Example case                              |\n| 2          | [1,1,1]                                | 2                | Only one can be deleted                   |\n| 3          | [0,0,0]                                | 0                | No 1s                                     |\n| 4          | [1,0,1,0,1]                            | 2                | Multiple deletions not allowed            |\n| 5          | [1,1,1,1,1]                            | 4                | All 1s                                    |\n| 6          | [0]                                    | 0                | Single zero                               |\n| 7          | [1]                                    | 0                | Single one (must delete)                  |\n| 8          | [1,0,1,1,1,0,1,1]                      | 5                | Middle zero split                         |\n| 9          | [1,1,0,0,1,1,1,0,1]                    | 4                | Two zeroes                                |\n| 10         | [0,1,1,1,0,1,1,1,1]                    | 5                | Max at end                                |\n| 11         | [1,1,0,1,1,0,1,1,1]                    | 5                | Max with two zeros                        |\n| 12         | [1,1,1,0,0,1,1,1,1,1]                  | 5                | Max after split                           |\n| 13         | [1,0,1,0,1,0,1]                        | 1                | Alternate zeros                           |\n| 14         | [0,1,0,1,0,1,0,1]                      | 1                | Zigzag                                    |\n| 15         | [1,1,0,1,1,0,1]                        | 4                | Two short breaks                          |\n| 16         | [1,1,1,1,0,0,0]                        | 3                | End with zeroes                           |\n| 17         | [0,0,0,1,1,1,1]                        | 4                | Start with zeros                          |\n| 18         | [1,1,1,1,1,0,1]                        | 5                | Max before zero                           |\n| 19         | [1,0,0,1,1,1,1]                        | 4                | Zero at beginning                         |\n| 20         | [0,1,1,1,1,1,0]                        | 5                | Surrounded by zeros                       |\n| 21         | [1,1,0,1,1,1,0,1,1]                    | 5                | Multiple max subarrays                    |\n| 22         | [1,0,0,0,1,1,1,1]                      | 4                | Max at end after zeros                    |\n| 23         | [1]*100 + [0] + [1]*50                 | 100              | Large subarray before one zero            |\n| 24         | [1]*10 + [0] + [1]*89                  | 98               | Long tail after a zero                    |\n| 25         | [0]*1000                              | 0                | All zeros                                 |\n| 26         | [1]*1000                              | 999              | All ones                                  |\n| 27         | [1,1,1,1,0,1,1,1,1,1]                  | 9                | One zero in center                        |\n| 28         | [1,0,1,1,0,1,1,0,1,1,1,0,1]            | 4                | Spread out zeros                          |\n| 29         | [1,0,1,1,1,1,0,1,0,1,1,1]              | 5                | Several zeros between 1s                  |\n| 30         | [1,1,0,0,0,1,1,1,0,1,1]                | 3                | Several clusters                          |\n| 31         | [1]*500 + [0] + [1]*499                | 999              | Two large 1-blocks                        |\n| 32         | [1,1,1,1,1,1,1,1,1,1]                  | 9                | No zero in input                          |\n| 33         | [1,0,1,0,1,0,1,1]                      | 3                | Multiple zeros near end                   |\n| 34         | [1,1,1,1,0,1,1,1,1,1,1]                | 10               | One zero early                            |\n| 35         | [1,1,1,0,1,0,1,1,1,1]                  | 5                | Overlapping good regions                  |\n| 36         | [0,1,1,1,0,0,1,1,1]                    | 3                | Clusters separated by zeros               |\n| 37         | [1,1,1,1,1,1,1,0,0,0]                  | 7                | Zeros only at end                         |\n| 38         | [0,0,1,1,1,1,1,1,0]                    | 6                | Surrounded by zero                        |\n| 39         | [1,1,0,1,1,1,1,1,0,1,1]                | 6                | Max in middle                             |\n| 40         | [1,0,1,1,1,1,1,0,1,1,1,1,1]            | 7                | Multiple candidates for deletion          |",
            "example": {
              "input": "[1,1,0,1]",
              "output": "3",
              "explanation": "Deleting the 0 yields [1,1,1], length = 3."
            },
            "answer": "def longest_subarray_after_deleting_one(nums):\n    if len(nums) == 1:\n        return 1 if nums[0] == 1 else 0\n    \n    left = 0\n    zeros_count = 0\n    max_len = 0\n    \n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zeros_count += 1\n        \n        while zeros_count > 1:\n            if nums[left] == 0:\n                zeros_count -= 1\n            left += 1\n        \n        max_len = max(max_len, right - left)\n    \n    if zeros_count == 0:\n        return len(nums) - 1\n    \n    return max_len\n\nnums = list(map(int, input().split()))\nprint(longest_subarray_after_deleting_one(nums))"
        },        
        {
            "id": 9,
            "title": "Count Number of Nice Subarrays",
            "description": "Count the number of subarrays with exactly k odd numbers.\n\n| Test Cases | nums                                   | k  | Expected Output | Notes                                   |\n|------------|----------------------------------------|----|------------------|-----------------------------------------|\n| 1          | [1,1,2,1,1]                            | 3  | 2                | Example case                            |\n| 2          | [2,4,6]                                | 1  | 0                | All even numbers                        |\n| 3          | [2,2,2,1,2,2,1,2,2,2]                  | 2  | 16               | Spread odd numbers                      |\n| 4          | [1,1,1,1,1]                            | 1  | 5                | All odds, k=1                           |\n| 5          | [1,1,1,1,1]                            | 2  | 4                | All odds, k=2                           |\n| 6          | [1,2,1,2,1]                            | 2  | 4                | Odds and evens alternate                |\n| 7          | [1]                                    | 1  | 1                | Single odd                              |\n| 8          | [2]                                    | 1  | 0                | Single even                             |\n| 9          | [1,2,1,2,1,2,1]                        | 3  | 4                | Multiple valid subarrays                |\n| 10         | [2,2,1,1,2,1,1,2,2]                    | 3  | 4                | Clustered odds                          |\n| 11         | [1]*100                                | 50 | 51               | All odds, large k                       |\n| 12         | [2]*100                                | 1  | 0                | All evens                               |\n| 13         | [1,2]*50                               | 25 | 26               | Alternating odds                        |\n| 14         | [1,2,2,1,2,2,1]                        | 2  | 2                | Spread out odds                         |\n| 15         | [1,2,1,2,1,2,1,2]                      | 3  | 3                | Alternating odds with more elements     |\n| 16         | [1,1,2,2,1,1,2,2,1]                    | 3  | 3                | Many possibilities                      |\n| 17         | [1,2,2,2,1,2,2,2,1]                    | 3  | 1                | Sparse odds                             |\n| 18         | [1,2,3,4,5]                            | 2  | 4                | Mixed even and odd                      |\n| 19         | [1,3,5,7]                              | 2  | 3                | All odds                                |\n| 20         | [2,4,1,1,1,4,2]                        | 3  | 1                | One nice subarray                       |\n| 21         | [1,2,2,2,2,2,1]                        | 2  | 0                | Only 2 odds not enough                  |\n| 22         | [1,2,1,2,1,2,1,2,1]                    | 4  | 5                | Many valid windows                      |\n| 23         | [1,2,2,1,2,2,1,2,2,1]                  | 4  | 1                | Few good combos                         |\n| 24         | [1]*50 + [2]*50                        | 25 | 26               | Large input, odd first                  |\n| 25         | [2]*50 + [1]*50                        | 25 | 26               | Large input, odd last                   |\n| 26         | [1]*25 + [2]*25 + [1]*25               | 25 | 26               | Large mid-evens                         |\n| 27         | [1,2,2,1,2,1,2,2,1,2]                  | 3  | 2                | Scattered pattern                       |\n| 28         | [1,1,2,2,1,2,1,1,2,1]                  | 4  | 3                | Moderate complexity                     |\n| 29         | [1,1,1,1,1,2,2,1,1,1]                  | 5  | 2                | Clustered odds                          |\n| 30         | [2,2,1,1,2,2,1,1,2,2]                  | 4  | 1                | Just enough odds                        |\n| 31         | [1,2,1,1,2,2,1,2,1,2]                  | 5  | 2                | Mixed subarrays                         |\n| 32         | [2,2,2,2,1,2,2,2,2,1]                  | 2  | 1                | Sparse placement                        |\n| 33         | [1,1,2,1,2,1,1,2,1]                    | 5  | 2                | Dense enough for result                 |\n| 34         | [1]*30                                 | 10 | 21               | All odds                                |\n| 35         | [1,2]*30                               | 15 | 16               | Alternating                             |\n| 36         | [2,1]*30                               | 15 | 16               | Alternating reverse                     |\n| 37         | [1]*10 + [2]*10 + [1]*10               | 10 | 11               | Structured chunks                       |\n| 38         | [1,2,1,1,2,1,1,2,1,2,1]                | 5  | 3                | Tight spacing                           |\n| 39         | [2,2,2,2,2]                            | 1  | 0                | No odds                                 |\n| 40         | [1,2,2,2,2,2,2,1]                      | 2  | 1                | Just right for one                      |",
            "example": {
              "input": "nums = [1,1,2,1,1], k = 3",
              "output": "2",
              "explanation": "Subarrays [1,1,2,1], [1,2,1,1] have exactly 3 odd numbers."
            },
            "answer": "def count_nice_subarrays(nums, k):\n    count = 0\n    odd_count = 0\n    prefix_counts = {0: 1}\n    for num in nums:\n        if num % 2 == 1:\n            odd_count += 1\n        if odd_count - k in prefix_counts:\n            count += prefix_counts[odd_count - k]\n        prefix_counts[odd_count] = prefix_counts.get(odd_count, 0) + 1\n    return count\n\ndata = list(map(int, input().split()))\nk = data[0]\nnums = data[1:]\n\nprint(count_nice_subarrays(nums, k))"
          },
          {
            "id": 10,
            "title": "Longest Substring with At Most Two Distinct Characters",
            "description": "Find the length of the longest substring with at most two distinct characters.\n\n | Test Cases | Input           | Expected Output | Notes                        |\n|------------|-----------------|-----------------|------------------------------|\n| 1          | 'eceba'          | 3               | Basic case                    |\n| 2          | 'aa'             | 2               | Identical characters          |\n| 3          | 'abcabc'         | 2               | Repeating patterns            |\n| 4          | 'aabbcc'         | 4               | Two distinct characters       |\n| 5          | 'abbacbbc'       | 4               | Mixed two characters          |\n| 6          | 'abcd'           | 2               | Substring with different characters |\n| 7          | 'abac'            | 3               | Alternating characters        |\n| 8          | 'xyyzxyyz'       | 3               | Substring in middle           |\n| 9          | 'bbaaabb'        | 4               | Substring with two characters |\n| 10         | 'abcabcabc'      | 2               | Short alternating substring   |\n| 11         | 'abcdabc'        | 3               | Long substring with two characters |\n| 12         | 'aaabbb'          | 3               | Balanced case                 |\n| 13         | 'aabbaa'          | 4               | Mixed characters              |\n| 14         | 'bbbbaaaa'        | 4               | Substring with max length     |\n| 15         | 'abcdabcd'        | 2               | Alternating characters        |\n| 16         | 'zzzyy'           | 3               | Edge case                     |\n| 17         | 'aabb'            | 4               | Two distinct characters       |\n| 18         | 'xyxzyz'          | 3               | Overlapping characters        |\n| 19         | 'aaaabbbaaa'      | 4               | Longer repeating characters   |\n| 20         | 'xxxyyy'          | 4               | Repeating in middle           |\n| 21         | 'abbabbabb'       | 4               | Multiple instances           |\n| 22         | 'ababa'           | 3               | Alternating characters        |\n| 23         | 'aaabbbbbaa'      | 4               | Long substring                |\n| 24         | 'aabbccaa'        | 4               | Mixed two characters          |\n| 25         | 'bbbaabb'         | 4               | Overlapping middle            |\n| 26         | 'abcdba'          | 3               | Simple alternating characters |\n| 27         | 'abccba'          | 3               | Middle substring              |\n| 28         | 'abaaa'           | 3               | Repeating characters          |\n| 29         | 'bbccaa'          | 4               | Large substring               |\n| 30         | 'aaaaabbbb'       | 4               | Multiple characters           |\n| 31         | 'abbabbbaa'       | 4               | Largest possible substring    |\n| 32         | 'abcdef'          | 2               | Simple case                   |\n| 33         | 'bbabbb'          | 3               | Short alternating characters  |\n| 34         | 'aaaabbb'         | 3               | Mixed set of characters       |\n| 35         | 'abbc'            | 3               | Alternating substring         |\n| 36         | 'abcabcabcabc'    | 2               | Simple alternating pattern    |\n| 37         | 'aabbbaaab'       | 4               | Balanced string               |\n| 38         | 'abb'             | 3               | Small alternating characters  |\n| 39         | 'aabab'           | 3               | Repeating characters          |\n| 40         | 'xyzxyzxy'        | 3               | Mixed repeating substring     |",
            "example": {
                "input": "'eceba'",
                "output": "3",
                "explanation": "The longest substring with at most two distinct characters is 'ece', which has a length of 3."
            },
            "answer": "def length_of_longest_substring_two_distinct(s: str) -> int:\n    from collections import defaultdict\n\n    left = 0\n    max_length = 0\n    char_count = defaultdict(int)\n\n    for right in range(len(s)):\n        char_count[s[right]] += 1\n\n        while len(char_count) > 2:\n            char_count[s[left]] -= 1\n            if char_count[s[left]] == 0:\n                del char_count[s[left]]\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\ns = input().strip()\nprint(length_of_longest_substring_two_distinct(s))"
        },        
          {
            "id": 11,
            "title": "Max Consecutive Ones III",
            "description": "Find the maximum number of consecutive 1's in the array if you can flip at most k 0's.\n\n| Test Cases | nums                                      | k  | Expected Output | Notes                                  |\n|------------|-------------------------------------------|----|------------------|----------------------------------------|\n| 1          | [1,1,1,0,0,0,1,1,1,1,0]                  | 2  | 6                | Example case                            |\n| 2          | [1,1,0,1,1,1,0,1,1,1]                    | 1  | 4                | One flip, maximum consecutive ones      |\n| 3          | [0,0,0,0,0]                              | 3  | 3                | Flipping zeros to ones                  |\n| 4          | [1,0,1,0,1,0,1]                          | 2  | 4                | Flip two zeros                          |\n| 5          | [1,1,1,0,0,1]                            | 2  | 5                | Flipping zeros                          |\n| 6          | [0,0,1,0,0,1]                            | 1  | 3                | Flip one zero                           |\n| 7          | [1,1,1,0,1,1,0,1]                        | 2  | 6                | Multiple flips                          |\n| 8          | [1,0,0,0,1,1,1,0,1]                      | 2  | 5                | Multiple flips                          |\n| 9          | [1,1,1,1,1]                              | 0  | 5                | No flips                               |\n| 10         | [1,0,0,0,0]                              | 1  | 2                | Flip one zero                           |\n| 11         | [1,1,1,1,0,1,1]                          | 2  | 6                | Flip zeros to make consecutive 1's      |\n| 12         | [0,0,1,1,0,1,1,1]                        | 2  | 5                | Flip two zeros                          |\n| 13         | [1,0,1,1,1,0,0,1]                        | 2  | 5                | Multiple flips                          |\n| 14         | [1,1,0,1,1]                              | 1  | 3                | Flip one zero                           |\n| 15         | [0,1,1,0,1,0,1,1]                        | 2  | 5                | Multiple flips                          |\n| 16         | [1,0,1,0,0,1]                            | 2  | 4                | Flip two zeros                          |\n| 17         | [1,0,1,0,0,0,1]                          | 2  | 4                | Flip two zeros                          |\n| 18         | [1,1,0,0,1,1,0]                          | 1  | 3                | One flip                                |\n| 19         | [0,1,1,1,0,1]                            | 1  | 4                | Flip one zero                           |\n| 20         | [0,0,0,1,1,1]                            | 2  | 5                | Multiple flips                          |\n| 21         | [1,1,0,1,1,1,1,0]                        | 2  | 5                | Flip two zeros                          |\n| 22         | [1,0,0,1,1,1,1,0,1]                      | 2  | 5                | Flip two zeros                          |\n| 23         | [1,1,1,1,1]                              | 0  | 5                | No flips                                |\n| 24         | [1,1,1,1,0,1,0]                          | 1  | 5                | Flip one zero                           |\n| 25         | [1,0,1,1,1,1,0]                          | 2  | 5                | Flip two zeros                          |\n| 26         | [1,0,0,1,1,1,1,1]                        | 2  | 6                | Flip two zeros                          |\n| 27         | [1,0,1,1,0,1,1]                          | 2  | 5                | Flip two zeros                          |\n| 28         | [0,1,0,1,0,1,0]                          | 1  | 3                | Flip one zero                           |\n| 29         | [1,0,1,0,1,1,1,1]                        | 2  | 5                | Flip two zeros                          |\n| 30         | [0,1,0,0,1,0,1]                          | 2  | 4                | Flip two zeros                          |\n| 31         | [1,1,0,1,0,1]                            | 1  | 3                | Flip one zero                           |\n| 32         | [0,0,0,1,1,1,0,1]                        | 2  | 5                | Flip two zeros                          |\n| 33         | [1,0,1,1,0,0,1,0]                        | 2  | 5                | Flip two zeros                          |\n| 34         | [0,1,0,0,1,1,1,0]                        | 2  | 4                | Flip two zeros                          |\n| 35         | [0,1,1,1,1,1]                            | 2  | 4                | Flip one zero                           |\n| 36         | [1,0,1,1,0,0,1]                          | 2  | 4                | Flip two zeros                          |\n| 37         | [1,1,1,0,1,1]                            | 1  | 4                | One flip                                |\n| 38         | [0,1,0,1,1]                              | 1  | 3                | Flip one zero                           |\n| 39         | [0,0,0,1,0,1]                            | 2  | 5                | Multiple flips                          |\n| 40         | [1,0,1,0,0,1,1]                          | 2  | 4                | Flip two zeros                          |",
            "example": {
                "input": "[1,1,1,0,0,0,1,1,1,1,0]",
                "k": 2,
                "output": "6",
                "explanation": "Flipping at most two zeros gives the maximum consecutive 1's: [1,1,1,1,1,1]."
            },
            "answer": "def longestOnes(nums, k):\n    left = 0\n    for right in range(len(nums)):\n        if nums[right] == 0:\n            k -= 1\n        if k < 0:\n            if nums[left] == 0:\n                k += 1\n            left += 1\n    return right - left + 1"
        },
        {
            "id": 12,
            "title": "Subarrays of Size K With Average Greater Than Threshold",
            "description": "Count subarrays of size k whose average is greater than or equal to threshold.\n\n| Test Cases | arr                                     | k  | threshold | Expected Output | Notes                          |\n|------------|-----------------------------------------|----|-----------|------------------|--------------------------------|\n | 1          | [2,1,3,4,1,2,3,6]                      | 3  | 3         | 3                | Example case                    |\n| 2          | [1,2,3,4,5,6]                          | 2  | 3         | 4                | Larger threshold                |\n| 3          | [1,1,1,1,1]                            | 3  | 1         | 5                | All elements are equal          |\n| 4          | [0,1,0,1,0,1]                          | 2  | 0.5       | 3                | Simple case                     |\n| 5          | [5,6,7,8,9]                            | 2  | 6         | 4                | High threshold                  |\n| 6          | [3,4,2,1,5,7,8]                        | 4  | 4         | 2                | Varying subarray sums           |\n| 7          | [3,2,1,3,4]                            | 2  | 2.5       | 2                | Small threshold                 |\n| 8          | [6,7,8,9,10]                           | 2  | 7         | 4                | Consecutive elements            |\n| 9          | [2,4,6,8,10]                           | 2  | 6         | 3                | Even numbers                     |\n| 10         | [1,1,1,1,1]                            | 1  | 1         | 5                | Single element                  |\n| 11         | [1,2,3,4,5,6,7,8]                      | 4  | 3         | 5                | Increasing order                 |\n| 12         | [10,9,8,7,6,5]                         | 3  | 7         | 2                | Decreasing order                 |\n| 13         | [2,2,2,2]                              | 2  | 2         | 4                | All same values                  |\n| 14         | [1,2,3,4]                              | 3  | 2.5       | 2                | Subarray with mixed values       |\n| 15         | [4,3,2,1]                              | 1  | 2         | 1                | Smaller threshold               |\n| 16         | [10,11,12]                             | 2  | 10        | 3                | High consecutive numbers         |\n| 17         | [1,0,1,0,1]                            | 3  | 0.5       | 4                | Alternating ones and zeros       |\n| 18         | [5,7,9,11]                             | 2  | 6.5       | 3                | Mixed even and odd               |\n| 19         | [8,9,5,6]                              | 4  | 6         | 1                | Different elements               |\n| 20         | [7,8,9,10,11]                          | 2  | 9         | 3                | High numbers                     |\n| 21         | [2,4,6,8,10]                           | 3  | 5         | 3                | Increasing order                 |\n| 22         | [3,6,9,12,15]                          | 5  | 8         | 2                | Multiple thresholds              |\n| 23         | [1,2,3,4,5,6]                          | 4  | 2         | 4                | Larger number of elements        |\n| 24         | [0,2,4,6,8,10]                         | 3  | 5         | 3                | Higher threshold                 |\n| 25         | [6,7,8,9,10,11]                        | 2  | 6         | 4                | Simple case                      |\n| 26         | [10,20,30,40,50]                       | 2  | 30        | 4                | Increasing values                |\n| 27         | [2,3,1,2,3,4]                          | 3  | 3         | 2                | Threshold equal to subarray sum  |\n| 28         | [1,1,2,3,4,5]                          | 2  | 3         | 4                | Varying numbers                  |\n| 29         | [1,0,0,1,1,0,1]                        | 3  | 0.5       | 4                | Alternating ones and zeros       |\n| 30         | [9,8,7,6,5]                             | 1  | 6         | 4                | Decreasing values                 |\n| 31         | [1,1,1,0,1,1]                          | 2  | 1         | 4                | Small array                      |\n| 32         | [5,5,5,5,5,5]                          | 3  | 5         | 6                | All same values                  |\n| 33         | [4,2,6,7]                              | 2  | 4         | 3                | Mixed range values               |\n| 34         | [6,6,6,6]                              | 2  | 6         | 4                | Equal values                      |\n| 35         | [3,2,1]                                | 2  | 2         | 1                | Smaller values                   |\n| 36         | [1,3,5,7,9,11]                         | 4  | 6         | 2                | Mixed odd values                 |\n| 37         | [8,10,12,14]                           | 3  | 10        | 2                | Even values                       |\n| 38         | [1,2,3,4,5,6]                          | 4  | 3.5       | 4                | Larger threshold                 |\n| 39         | [5,3,4,5,6]                            | 2  | 4         | 3                | Larger threshold                 |\n| 40         | [2,3,1,1,3]                            | 2  | 2.5       | 4                | Mixed range values               |",
            "example": {
              "input": "[2,1,3,4,1,2,3,6], 3, 3",
              "output": "3",
              "explanation": "There are 3 subarrays of size 3 with average >= 3: [3,4,1], [4,1,2], [2,3,6]."
            },
            "answer": "def numOfSubarrays(arr, k, threshold):\n    window_sum = sum(arr[:k])\n    count = 1 if window_sum / k >= threshold else 0\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        if window_sum / k >= threshold:\n            count += 1\n    return count"
          },
          {
            "id": 13,
            "title": "Max Sum of a Subarray of Size K",
            "description": "Return the maximum sum of any contiguous subarray of size k.\n\n| Test Cases | arr                                     | k  | Expected Output | Notes                          |\n|------------|-----------------------------------------|----|------------------|--------------------------------|\n| 1          | [1, 4, 2, 10, 23, 3, 1, 0, 20]          | 4  | 39               | Example case                    |\n| 2          | [1, 2, 3, 4, 5, 6]                      | 2  | 11               | Simple case                     |\n| 3          | [6, 7, 8, 9, 10]                        | 2  | 19               | Consecutive elements            |\n| 4          | [2, 4, 6, 8, 10]                        | 3  | 24               | Simple case                     |\n| 5          | [5, 5, 5, 5, 5]                         | 3  | 15               | All elements are equal          |\n| 6          | [1, 2, 3, 4, 5, 6]                      | 4  | 14               | Larger threshold                |\n| 7          | [9, 8, 7, 6, 5, 4, 3, 2]                | 3  | 24               | Decreasing order                 |\n| 8          | [1, 1, 1, 1, 1]                         | 1  | 1                | Single element                  |\n| 9          | [10, 9, 8, 7, 6, 5]                     | 4  | 34               | Decreasing order                 |\n| 10         | [3, 1, 4, 2, 5, 6, 7]                   | 2  | 11               | Mixed numbers                    |\n| 11         | [10, 9, 8, 7]                           | 2  | 17               | Larger threshold                |\n| 12         | [1, 2, 3, 4, 5]                         | 2  | 9                | All increasing                   |\n| 13         | [10, 20, 30, 40]                        | 2  | 70               | Larger numbers                   |\n| 14         | [7, 8, 9, 10]                           | 3  | 27               | Larger size                      |\n| 15         | [2, 4, 6, 8]                            | 3  | 18               | Even numbers                     |\n| 16         | [1, 3, 2, 4]                            | 2  | 6                | Mixed order                     |\n| 17         | [5, 7, 10, 1]                           | 2  | 17               | Mixed values                     |\n| 18         | [1, 5, 9, 4, 3]                         | 2  | 14               | Mixed values                     |\n| 19         | [8, 7, 6, 5]                            | 3  | 21               | Decreasing values                |\n| 20         | [3, 3, 3, 3, 3]                         | 2  | 6                | All same values                  |\n| 21         | [10, 20, 30, 40, 50]                    | 3  | 120              | Consecutive high values         |\n| 22         | [1, 2, 3, 4, 5, 6]                      | 3  | 12               | Small array                      |\n| 23         | [15, 14, 13, 12, 11]                    | 2  | 29               | Decreasing order                 |\n| 24         | [2, 3, 4, 5, 6]                         | 2  | 9                | Small case                       |\n| 25         | [9, 9, 9, 9]                            | 2  | 18               | All same values                  |\n| 26         | [7, 9, 5, 3]                            | 2  | 16               | Mixed case                       |\n| 27         | [6, 5, 4, 3, 2]                         | 3  | 15               | Decreasing order                 |\n| 28         | [5, 4, 3, 2, 1]                         | 2  | 9                | Decreasing order                 |\n| 29         | [10, 9, 8, 7, 6]                        | 3  | 24               | Decreasing order                 |\n| 30         | [1, 1, 1, 1, 1]                         | 3  | 3                | Small case                       |\n| 31         | [5, 10, 15, 20, 25]                     | 4  | 70               | Mixed values                     |\n| 32         | [2, 1, 3, 4, 6]                         | 2  | 7                | Mixed values                     |\n| 33         | [7, 6, 5, 4]                            | 2  | 13               | Decreasing order                 |\n| 34         | [4, 3, 5, 6]                            | 3  | 14               | Mixed order                      |\n| 35         | [9, 8, 7, 6]                            | 1  | 9                | Single element                  |\n| 36         | [5, 4, 6, 8]                            | 2  | 14               | Mixed values                     |\n| 37         | [6, 5, 4, 3]                            | 2  | 11               | Decreasing order                 |\n| 38         | [10, 12, 13, 14]                        | 3  | 39               | Increasing numbers               |\n| 39         | [4, 3, 2, 1]                            | 1  | 4                | Single element                  |\n| 40         | [8, 7, 5, 4]                            | 2  | 15               | Mixed values                     |",
            "example": {
              "input": "[1, 4, 2, 10, 23, 3, 1, 0, 20], 4",
              "output": "39",
              "explanation": "The maximum sum subarray of size 4 is [10, 23, 3, 1]."
            },
            "answer": "data = list(map(int, input().split()))\nk = data[0]\narr = data[1:]\n\nif len(arr) < k:\n    print(0)\nelse:\n    window_sum = sum(arr[:k])\n    max_sum = window_sum\n\n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i - k] + arr[i]\n        max_sum = max(max_sum, window_sum)\n\n    print(max_sum)"
          },
          {
            "id": 14,
            "title": "Max Consecutive Ones II",
            "description": "Find the maximum number of consecutive 1s if you can flip at most one 0.\n\n| Test Cases | nums                               | Expected Output | Notes                                      |\n|------------|------------------------------------|------------------|--------------------------------------------|\n| 1          | [1,0,1,1,0]                        | 4                | Flipping the middle 0                    |\n| 2          | [1,0,0,1,1,1,0]                    | 4                | Flip any one 0                            |\n| 3          | [1,1,1,0,1]                        | 4                | Flip the middle 0                        |\n| 4          | [0,0,0,0,0]                        | 1                | Flip any one 0                            |\n| 5          | [1,0,1,0,1,0]                      | 3                | Flip any one 0                            |\n| 6          | [1,1,1,1,1]                        | 5                | No flip required                          |\n| 7          | [0,1,0,1,0]                        | 3                | Flip the first or last 0                 |\n| 8          | [0]                                | 1                | Flip the single 0                        |\n| 9          | [1,1,0,0,1,1]                      | 4                | Flip one 0 to extend the subarray        |\n| 10         | [1,0,0,0,1]                        | 3                | Flip one 0                                |\n| 11         | [1,1,0,1,1,1,1,0,1]                | 5                | Flip one 0 at the end                    |\n| 12         | [0,0,1,1,1,0,1]                    | 4                | Flip first 0                             |\n| 13         | [1,0,1,0,1,0,1,0,1]                | 4                | Flip the first 0                         |\n| 14         | [1,1,1,0,0,1]                      | 4                | Flip the second 0                        |\n| 15         | [0,0,1,0,0,1,1]                    | 3                | Flip one 0                                |\n| 16         | [1,1,0,1,0,0,1]                    | 4                | Flip one 0                                |\n| 17         | [1,0,1,1,1,0]                      | 4                | Flip one 0                                |\n| 18         | [1,0,1,0,0,1]                      | 3                | Flip the middle 0                        |\n| 19         | [0,1,0,1,1,0]                      | 4                | Flip the first or last 0                 |\n| 20         | [1,1,1,0,0]                        | 4                | Flip the middle 0                        |\n| 21         | [1,0,0,0,1,0]                      | 3                | Flip the second 0                        |\n| 22         | [0,1,1,0,1,1]                      | 4                | Flip one 0                                |\n| 23         | [1,1,1,0,0,0]                      | 4                | Flip the second 0                        |\n| 24         | [1,0,1,1,0]                        | 4                | Flip the second 0                        |\n| 25         | [0,1,1,0,1]                        | 4                | Flip any one 0                            |\n| 26         | [1,0,1,0,1,1]                      | 4                | Flip the second 0                        |\n| 27         | [1,1,0,1,0,0]                      | 4                | Flip the last 0                          |\n| 28         | [1,0,1,1,1,1]                      | 5                | Flip one 0                                |\n| 29         | [0,0,0,1,0]                        | 2                | Flip the last 0                          |\n| 30         | [1,1,1,1,0,1]                      | 5                | No flip required                          |\n| 31         | [0,1,1,1,0,1,1]                    | 4                | Flip the first 0                         |\n| 32         | [1,0,1,0,0,1]                      | 3                | Flip any one 0                            |\n| 33         | [1,1,0,1,0,0]                      | 4                | Flip the last 0                          |\n| 34         | [0,0,1,1,1,0]                      | 4                | Flip the first 0                         |\n| 35         | [0,1,0,1,0,1,1]                    | 4                | Flip one 0                                |\n| 36         | [0,0,1,1,1,0,0]                    | 4                | Flip one 0                                |\n| 37         | [1,0,1,1,0,1]                      | 4                | Flip the first 0                         |\n| 38         | [0,0,1,1,0,0]                      | 3                | Flip one 0                                |\n| 39         | [1,0,1,0,0,1,1]                    | 4                | Flip the second 0                        |\n| 40         | [0,1,0,1,0,1,1,0]                  | 4                | Flip the last 0                          |",
            "example": {
              "input": "[1,0,1,1,0]",
              "output": "4",
              "explanation": "Flipping the middle 0 yields [1,1,1,1], length = 4."
            },
            "answer": "def findMaxConsecutiveOnes(nums):\n    left = zero_count = 0\n    max_len = 0\n    for right in range(len(nums)):\n        if nums[right] == 0:\n            zero_count += 1\n        while zero_count > 1:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len"
          },
          {
            "id": 15,
            "title": "Minimum Window Substring",
            "description": "Return the minimum window in s which contains all characters of t.\n\n| Test Cases | s                                   | t  | Expected Output | Notes                                      |\n|------------|-------------------------------------|----|------------------|--------------------------------------------|\n| 1          | 'ADOBECODEBANC'                     | 'ABC' | 'BANC'           | Example case                              |\n| 2          | 'AA'                                 | 'AA' | 'AA'             | Both strings are identical                |\n| 3          | 'ADOBECODEBANC'                     | 'A'   | 'A'              | Single character target                    |\n| 4          | 'AAABBBCCC'                         | 'ABC' | 'ABC'            | Target is spread throughout the string     |\n| 5          | 'A'                                  | 'A'   | 'A'              | Single character match                    |\n| 6          | 'BBAACCC'                            | 'ABC' | 'BBAAC'           | Substring contains all characters         |\n| 7          | 'BBAACCC'                            | 'CBA'  | 'ACCC'           | Scrambled target characters               |\n| 8          | 'ADOBECODEBANCC'                     | 'ABC' | 'BANC'            | Multiple occurrences of 'C' in string     |\n| 9          | 'XXYYZZ'                             | 'XYZ' | 'XYZ'             | Simple case with no repeats               |\n| 10         | 'ABCD'                               | 'CD'   | 'CD'              | Simple substring match                    |\n| 11         | 'AAAAABBBCC'                         | 'ABC' | 'ABBC'            | Overlapping characters                     |\n| 12         | 'ABCDE'                              | 'XYZ' | ''                | Target characters not found               |\n| 13         | 'AAAA'                               | 'AA'   | 'AA'              | Multiple occurrences of characters        |\n| 14         | 'XYYZABCXYZ'                         | 'ABC'  | 'ABC'             | Target substring in middle of string      |\n| 15         | 'AAAAABBBCCC'                        | 'AB'   | 'AB'              | Substring with mixed characters           |\n| 16         | 'AABACCC'                            | 'ABC'  | 'ACCC'            | One character is repeated several times   |\n| 17         | 'CCCC'                               | 'C'    | 'C'               | Single repeated character                 |\n| 18         | 'ABBBCCCC'                           | 'BC'   | 'BC'              | Multiple occurrences of both characters   |\n| 19         | 'WXYZ'                               | 'YZ'   | 'YZ'              | Last two characters in string match       |\n| 20         | 'AAABBBCCCDDD'                       | 'ADC'  | 'ADC'             | All characters must be present            |\n| 21         | 'AABBAABBAA'                         | 'ABA'  | 'ABA'             | Multiple matches                         |\n| 22         | 'BBAACAAABBB'                        | 'CAB'  | 'CBA'             | Single occurrence of each target character |\n| 23         | 'QQQWERR'                            | 'ER'   | 'ER'              | Overlapping characters                    |\n| 24         | 'BBBAAABBBBAAA'                      | 'ABA'  | 'ABA'             | Multiple occurrences of characters        |\n| 25         | 'LMNOPQ'                              | 'PQ'   | 'PQ'              | Substring in the end of string            |\n| 26         | 'FATZB'                               | 'AT'   | 'AT'              | Substring with characters at the start    |\n| 27         | 'XYZABC'                              | 'ABC'  | 'ABC'             | Target at the end                         |\n| 28         | 'ABCDABCDAB'                         | 'BCD'  | 'BCD'             | Repeated target substring                 |\n| 29         | 'AAAABCABAC'                         | 'CBA'  | 'CBA'             | Target characters in mixed order          |\n| 30         | 'ABCDE'                              | 'BCD'  | 'BCD'             | Substring within the original string      |\n| 31         | 'XYYZYYX'                             | 'YXY'  | 'YXY'             | Overlapping characters in target and string |\n| 32         | 'GGGGG'                               | 'G'    | 'G'               | Single repeated character                 |\n| 33         | 'XYZYXYZY'                            | 'XYZ'  | 'XYZ'             | Substring appears twice                    |\n| 34         | 'AAAACB'                              | 'CB'   | 'CB'              | Multiple characters, substring at end    |\n| 35         | 'RANDOMTEXT'                          | 'TEX'  | 'TEX'             | Random characters in string               |\n| 36         | 'ZZZYYZ'                              | 'Z'    | 'Z'                | Target character is last                  |\n| 37         | 'LABCABC'                             | 'ABC'  | 'ABC'             | Target at the end                         |\n| 38         | 'ZZZYYZZZ'                            | 'YZ'   | 'YZ'               | Repeated sequence of target characters    |\n| 39         | 'ALPHABETSOFMATH'                     | 'OF'   | 'OF'               | Middle substring                          |\n| 40         | 'QWERTYUIOP'                          | 'OP'   | 'OP'               | Simple target match                        |",
            "example": {
              "input": "'ADOBECODEBANC', 'ABC'",
              "output": "'BANC'",
              "explanation": "The minimum window in 'ADOBECODEBANC' that contains all characters of 'ABC' is 'BANC'."
            },
            "answer": "def minWindow(s, t):\n    from collections import Counter\n    need = Counter(t)\n    missing = len(t)\n    left = start = end = 0\n    for right, char in enumerate(s, 1):\n        if need[char] > 0:\n            missing -= 1\n        need[char] -= 1\n        if missing == 0:\n            while left < right and need[s[left]] < 0:\n                need[s[left]] += 1\n                left += 1\n            if end == 0 or right - left < end - start:\n                start, end = left, right\n            need[s[left]] += 1\n            missing += 1\n            left += 1\n    return s[start:end]"
          }
          
          
    
    
    
    ]
}