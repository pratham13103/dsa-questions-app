{
    "questions": [
        {
          "id": 1,
          "title": "Binary Search",
          "description": "Search element in a sorted array.\n\n| Test Case | Input Array         | Target | Expected Output | Notes                  |\n|-----------|----------------------|--------|------------------|-------------------------|\n| 1         | [1,3,5,7,9]          | 5      | 2                | Found at middle         |\n| 2         | [1,2,3,4,5,6]        | 1      | 0                | Found at beginning      |\n| 3         | [1,2,3,4,5,6]        | 6      | 5                | Found at end            |\n| 4         | [1,2,3,4,5,6]        | 4      | 3                | Middle element          |\n| 5         | [10,20,30,40,50]     | 35     | -1               | Not present             |\n| 6         | [2,4,6,8,10,12,14]   | 7      | -1               | Not found               |\n| 7         | [1]                  | 1      | 0                | Single element match    |\n| 8         | [1]                  | 0      | -1               | Single element no match |\n| 9         | []                   | 1      | -1               | Empty array             |\n| 10        | [1,2,3,4,5,6,7,8,9]  | 8      | 7                | Found at second last    |",
          "example": {
            "input": "[1,3,5,7,9], Target: 5",
            "output": "2",
            "explanation": "Element 5 is present at index 2."
          },
          "answer": "def binarySearch(arr, target):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1"
        },
        {
            "id": 2,
            "title": "Merge Sort",
            "description": "Sort array using merge sort.\n\n| Test Case | Input         | Expected Output | Notes                    |\n|-----------|---------------|-----------------|--------------------------|\n| 1         | [5,2,3,1]     | [1,2,3,5]       | Basic unsorted input     |\n| 2         | [1]           | [1]             | Single element           |\n| 3         | [2,1]         | [1,2]           | Two elements             |\n| 4         | [4,3,2,1]     | [1,2,3,4]       | Reversed list            |\n| 5         | []            | []              | Empty input              |\n| 6         | [10,9,8,7,6]  | [6,7,8,9,10]    | Odd-length reversed list |\n| 7         | [1,2,3,4]     | [1,2,3,4]       | Already sorted           |\n| 8         | [4,5,2,3,1]   | [1,2,3,4,5]     | Unordered list           |\n| 9         | [0,0,0]       | [0,0,0]         | Duplicates               |\n| 10        | [3,1,2,2]     | [1,2,2,3]       | Repeated elements        |",
            "example": {
              "input": "[5,2,3,1]",
              "output": "[1,2,3,5]",
              "explanation": "Merge sort recursively divides and merges arrays to sort them."
            },
            "answer": "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i=j=0\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            result.append(left[i])\n            i+=1\n        else:\n            result.append(right[j])\n            j+=1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
          },
          {
            "id": 3,
            "title": "Quick Sort",
            "description": "Sort using quick sort.\n\n| Test Case | Input                       | Expected Output    | Notes                        |\n|-----------|-----------------------------|---------------------|------------------------------|\n| 1         | [3,6,8,10,1,2,1]            | [1,1,2,3,6,8,10]    | Random unsorted array        |\n| 2         | [5,4,3,2,1]                 | [1,2,3,4,5]         | Reverse sorted               |\n| 3         | [1,2,3,4,5]                 | [1,2,3,4,5]         | Already sorted               |\n| 4         | [7]                         | [7]                | Single element               |\n| 5         | []                          | []                 | Empty array                  |\n| 6         | [10, -1, 2, 5, 0, -3]       | [-3,-1,0,2,5,10]    | Includes negatives           |\n| 7         | [5,5,5,5]                   | [5,5,5,5]          | All elements equal           |\n| 8         | [9,8,7,6,5,4,3,2,1,0]       | [0,1,2,3,4,5,6,7,8,9] | Large reverse sorted       |\n| 9         | [3,1,2,1,3,1,2]             | [1,1,1,2,2,3,3]     | Duplicates and random order  |\n| 10        | [100, 10, 1]                | [1,10,100]         | Power of 10 variation        |",
            "example": {
              "input": "[3,6,8,10,1,2,1]",
              "output": "[1,1,2,3,6,8,10]",
              "explanation": "Quick sort sorts the input array efficiently by recursive partitioning."
            },
            "answer": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quickSort(left) + middle + quickSort(right)"
          },
          {
            "id": 4,
            "title": "Find Minimum and Maximum in Array",
            "description": "Find the minimum and maximum values in an array using Divide & Conquer approach.\n\n| Test Case | Input                            | Expected Output  | Notes                        |\n|-----------|----------------------------------|------------------|------------------------------|\n| 1         | [100, 11, 445, 1, 330, 3000]     | Min: 1, Max: 3000| Example with random values   |\n| 2         | [5, 1, 4, 7, 3, 2]               | Min: 1, Max: 7   | Random values                |\n| 3         | [-10, -20, -30, -5]              | Min: -30, Max: -5 | All negative values          |\n| 4         | [1, 1, 1, 1]                    | Min: 1, Max: 1   | Identical elements           |\n| 5         | [9, 5, 3, 6, 8, 7]               | Min: 3, Max: 9   | Random values                |\n| 6         | [45, 67, 32, 89, 21, 3]          | Min: 3, Max: 89  | Random values                |\n| 7         | [0, -1, -5, -2, -3]              | Min: -5, Max: 0  | Mixed negative and zero      |\n| 8         | [1000, 500, 3000, 100, 900]      | Min: 100, Max: 3000| Example with large numbers  |\n| 9         | [10, 20, 30, 40, 50, 60]         | Min: 10, Max: 60 | Increasing order             |\n| 10        | [2, 3, 7, 9, 0, 1]               | Min: 0, Max: 9   | Random values                |",
            "example": {
              "input": "[100, 11, 445, 1, 330, 3000]",
              "output": "Min: 1, Max: 3000",
              "explanation": "The minimum value is 1, and the maximum value is 3000."
            },
            "answer": "def findMinMax(arr, low, high):\n    if low == high:\n        return (arr[low], arr[low])\n    if high == low+1:\n        return (min(arr[low], arr[high]), max(arr[low], arr[high]))\n    mid = (low + high)//2\n    min1, max1 = findMinMax(arr, low, mid)\n    min2, max2 = findMinMax(arr, mid+1, high)\n    return (min(min1, min2), max(max1, max2))"
          },
          {
            "id": 5,
            "title": "Find k-th Smallest Element",
            "description": "Find the k-th smallest element in an array using quick select.\n\n| Test Case | Input                                     | Expected Output | Notes                        |\n|-----------|-------------------------------------------|-----------------|------------------------------|\n| 1         | [7, 10, 4, 3, 20, 15], k=3              | 7               | Standard test case           |\n| 2         | [5, 2, 9, 1, 6, 3], k=4                 | 6               | Random values                |\n| 3         | [11, 12, 15, 13, 18, 14], k=2            | 12              | Small test case              |\n| 4         | [1, 3, 5, 7, 9, 2], k=5                 | 9               | Sorted array                 |\n| 5         | [100, 50, 75, 25, 10, 60, 35], k=4       | 50              | Unsorted values              |\n| 6         | [-5, -1, -3, -10, -2], k=3               | -3              | All negative numbers         |\n| 7         | [1, 1, 1, 1], k=3                       | 1               | All identical elements       |\n| 8         | [0, 5, 10, 15, 20], k=2                 | 5               | Increasing order             |\n| 9         | [6, 3, 8, 1, 4], k=1                    | 1               | Single smallest element      |\n| 10        | [10, 20, 30, 40, 50], k=5                | 50              | Largest element in sorted array |",
            "example": {
              "input": "[7, 10, 4, 3, 20, 15], k=3",
              "output": "7",
              "explanation": "The 3rd smallest element in the array is 7."
            },
            "answer": "def kthSmallest(arr, k):\n    arr.sort()\n    return arr[k-1]"
          },
          {
            "id": 6,
            "title": "Majority Element (More than n/2 times)",
            "description": "Find the majority element in an array, i.e., the element that appears more than n/2 times.\n\n| Test Case | Input                              | Expected Output | Notes               |\n|-----------|------------------------------------|-----------------|---------------------|\n| 1         | [2,2,1,1,1,2,2]                   | 2               | Standard test case   |\n| 2         | [3,3,4,2,4,4,2,4,4]               | 4               | Majority element     |\n| 3         | [1,2,3,4,5]                       | 1               | No majority element  |\n| 4         | [5,5,5,5,5,1,2,3]                 | 5               | Single majority      |\n| 5         | [10,10,10,20,20,30,30,10]         | 10              | Majority on left     |\n| 6         | [7,7,7,9,9,9,7,7]                 | 7               | Majority on right    |\n| 7         | [8,8,9,9,9,9,8]                   | 9               | Majority in middle   |\n| 8         | [4,4,4,4,1,1,1,1]                 | 4               | Majority of 4's      |\n| 9         | [2,2,2,2,1,1,1]                   | 2               | Majority of 2's      |\n| 10        | [1,1,1,2,3,4,5]                   | 1               | Clear majority       |",
            "example": {
              "input": "[2,2,1,1,1,2,2]",
              "output": "2",
              "explanation": "The majority element (appearing more than n/2 times) in the array is 2."
            },
            "answer": "def majorityElement(nums):\n    count, candidate = 0, None\n    for num in nums:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate"
          },
          {
            "id": 7,
            "title": "Count Inversions in Array",
            "description": "Count the number of pairs (i, j) such that arr[i] > arr[j] and i < j.\n\n| Test Case | Input                            | Expected Output | Notes                     |\n|-----------|----------------------------------|-----------------|---------------------------|\n| 1         | [2,4,1,3,5]                      | 3               | Standard test case         |\n| 2         | [1,20,6,4,5]                     | 5               | Inversions in sequence     |\n| 3         | [1,2,3,4,5]                      | 0               | No inversions              |\n| 4         | [5,4,3,2,1]                      | 10              | Reverse sorted             |\n| 5         | [10,9,8,7,6,5]                   | 15              | Reverse sorted large       |\n| 6         | [1,3,2,3,1]                      | 4               | Multiple inversions        |\n| 7         | [1,1,1,1,1]                      | 0               | All elements equal         |\n| 8         | [1,3,5,2,4,6]                    | 3               | Some inversions present    |\n| 9         | [7,5,6,4,3,2]                    | 10              | Larger number of inversions|\n| 10        | [9,8,7,6,5,4,3,2,1]              | 36              | Fully reversed sequence    |",
            "example": {
              "input": "[2,4,1,3,5]",
              "output": "3",
              "explanation": "There are 3 inversions: (2,1), (4,1), (4,3)."
            },
            "answer": "def mergeSortCount(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr)//2\n    left, invLeft = mergeSortCount(arr[:mid])\n    right, invRight = mergeSortCount(arr[mid:])\n    merged, invSplit = mergeCount(left, right)\n    return merged, invLeft + invRight + invSplit\n\ndef mergeCount(left, right):\n    result, i, j, inv = [], 0, 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            inv += len(left) - i\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result, inv"
          },
          {
            "id": 8,
            "title": "Median of Two Sorted Arrays",
            "description": "Find the median from two sorted arrays.\n\n| Test Case | Input                                          | Expected Output | Notes                      |\n|-----------|------------------------------------------------|-----------------|----------------------------|\n| 1         | [1,3] and [2]                                  | 2.0             | Simple case                |\n| 2         | [1,2] and [3,4]                                | 2.5             | Median is average of two middle elements |\n| 3         | [0,0] and [0,0]                                | 0.0             | Same elements              |\n| 4         | [1,2,3,4,5] and [6,7,8,9,10]                  | 5.5             | Larger arrays              |\n| 5         | [1, 4] and [2, 3]                              | 2.5             | Small arrays               |\n| 6         | [1,2,3] and [4,5]                              | 3.0             | Median is single element   |\n| 7         | [1,3,8,9] and [2,4,6,7]                        | 4.5             | Median is between two numbers |\n| 8         | [1, 3, 8] and [4, 5, 7]                        | 4.0             | Median is a single element |\n| 9         | [5,6] and [1, 2, 3, 4, 7]                      | 4.0             | Odd combined length        |\n| 10        | [1, 4, 6, 8] and [2, 3, 5, 7]                  | 4.5             | Even combined length       |",
            "example": {
              "input": "[1,3] and [2]",
              "output": "2.0",
              "explanation": "After merging the arrays, the combined list is [1, 2, 3]. The median is 2."
            },
            "answer": "def findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        return nums[n//2]"
          },
          {
            "id": 9,
            "title": "Power Function (x^n)",
            "description": "Calculate x^n.\n\n| Test Case | Input                | Expected Output | Notes                      |\n|-----------|----------------------|-----------------|----------------------------|\n| 1         | x=2, n=10             | 1024            | Simple case                |\n| 2         | x=3, n=3              | 27              | Small integers             |\n| 3         | x=5, n=0              | 1               | Power of 0                 |\n| 4         | x=1, n=1000           | 1               | Power with x = 1           |\n| 5         | x=10, n=2             | 100             | Square of 10               |\n| 6         | x=2, n=-3             | 0.125           | Negative exponent          |\n| 7         | x=7, n=4              | 2401            | Power with large exponent  |\n| 8         | x=0, n=5              | 0               | Power of 0                 |\n| 9         | x=4, n=0.5            | 2               | Square root calculation    |\n| 10        | x=2, n=1000           | 1073741824      | Large exponent             |",
            "example": {
              "input": "x=2, n=10",
              "output": "1024",
              "explanation": "The value of 2 raised to the power 10 is 1024."
            },
            "answer": "def power(x, n):\n    if n == 0:\n        return 1\n    temp = power(x, n//2)\n    if n % 2 == 0:\n        return temp * temp\n    else:\n        return x * temp * temp"
          },
          {
            "id": 10,
            "title": "Multiply Large Numbers",
            "description": "Multiply two big integers.\n\n| Test Case | Input                | Expected Output | Notes                      |\n|-----------|----------------------|-----------------|----------------------------|\n| 1         | '123', '456'          | 56088           | Simple multiplication      |\n| 2         | '999', '999'          | 998001          | Large numbers               |\n| 3         | '1', '1000'           | 1000            | One operand is small        |\n| 4         | '0', '1000'           | 0               | Multiplication with 0       |\n| 5         | '123456789', '987654321' | 121932631112635269 | Very large numbers         |\n| 6         | '1234', '5678'        | 7006652         | Large but manageable        |\n| 7         | '999999', '999999'    | 999998000001    | Test with multiple 9's      |\n| 8         | '1', '1'              | 1               | Both operands are 1         |\n| 9         | '50', '2'             | 100             | Small multiplication        |\n| 10        | '1000', '10000'       | 10000000        | Larger numbers              |",
            "example": {
              "input": "'123', '456'",
              "output": "56088",
              "explanation": "Multiplying 123 and 456 gives 56088."
            },
            "answer": "def multiply(num1, num2):\n    return str(int(num1)*int(num2))"
          },
          {
            "id": 11,
            "title": "Merge K Sorted Lists",
            "description": "Merge k sorted linked lists into one sorted list.\n\n| Test Case | Input                     | Expected Output     | Notes                         |\n|-----------|---------------------------|---------------------|-------------------------------|\n| 1         | [[1,4,5], [1,3,4], [2,6]]  | [1,1,2,3,4,4,5,6]   | Simple case                   |\n| 2         | [[1,2], [3,4], [5,6]]      | [1,2,3,4,5,6]       | Merging sorted lists          |\n| 3         | [[], [], []]               | []                  | Empty lists                   |\n| 4         | [[1], [1], [1]]            | [1,1,1]             | Identical lists               |\n| 5         | [[1,2,3], [1,3,5], [2,4]]  | [1,1,2,2,3,3,4,5]   | Lists with overlapping values |\n| 6         | [[1,2], [1,4], [2,5]]      | [1,1,2,2,4,5]       | Different ranges              |\n| 7         | [[2,3], [4,5], [1,2]]      | [1,2,2,3,4,5]       | Merging with different values |\n| 8         | [[0,1], [2,3], [4,5]]      | [0,1,2,3,4,5]       | Increasing sequences          |\n| 9         | [[1,1], [1,1], [1,1]]      | [1,1,1,1,1,1]       | Identical values in all lists |\n| 10        | [[10,20], [5,15], [0,30]]  | [0,5,10,15,20,30]   | Mixed numbers                 |",
            "example": {
              "input": "[[1,4,5], [1,3,4], [2,6]]",
              "output": "[1,1,2,3,4,4,5,6]",
              "explanation": "Merging the three sorted lists into one sorted list gives [1,1,2,3,4,4,5,6]."
            },
            "answer": "import heapq\n\ndef mergeKLists(lists):\n    heap = []\n    for l in lists:\n        for val in l:\n            heapq.heappush(heap, val)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
          },
          {
            "id": 13,
            "title": "Closest Pair of Points",
            "description": "Find the minimum distance between two points.\n\n| Test Case | Input                     | Expected Output | Notes                      |\n|-----------|---------------------------|-----------------|----------------------------|\n| 1         | [(2,3), (12,30), (40,50), (5,1), (12,10), (3,4)] | 1.4142          | Standard distance         |\n| 2         | [(1,1), (1,2), (2,2)]     | 1               | Simple distance            |\n| 3         | [(1,1), (5,5), (9,9)]     | 5.6569          | Larger distance            |\n| 4         | [(1,0), (2,0), (3,0)]     | 1               | Simple case                |\n| 5         | [(0,0), (0,1), (0,2)]     | 1               | Points in a vertical line  |\n| 6         | [(1,1), (4,5), (9,0)]     | 4.2426          | Random points              |\n| 7         | [(2,1), (2,5), (2,9)]     | 4               | Same x-coordinate          |\n| 8         | [(5,3), (6,1), (7,0)]     | 1.4142          | Close points               |\n| 9         | [(0,0), (10,10), (20,20)] | 14.1421         | Far points                 |\n| 10        | [(1,1), (1,2), (2,3)]     | 1.4142          | Points forming an angle    |",
            "example": {
              "input": "[(2,3), (12,30), (40,50), (5,1), (12,10), (3,4)]",
              "output": "1.4142",
              "explanation": "The closest pair of points is (2,3) and (3,4) with a distance of 1.4142."
            },
            "answer": "import math\n\ndef dist(p1, p2):\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\ndef closestPair(points):\n    points.sort()\n    return closestUtil(points)\n\ndef closestUtil(points):\n    n = len(points)\n    if n <= 3:\n        return min(dist(points[i], points[j]) for i in range(n) for j in range(i+1, n))\n    mid = n//2\n    d = min(closestUtil(points[:mid]), closestUtil(points[mid:]))\n    mid_x = points[mid][0]\n    strip = [p for p in points if abs(p[0]-mid_x) < d]\n    strip.sort(key=lambda x: x[1])\n    for i in range(len(strip)):\n        for j in range(i+1, len(strip)):\n            if (strip[j][1] - strip[i][1]) >= d:\n                break\n            d = min(d, dist(strip[i], strip[j]))\n    return d"
          },
          {
            "id": 14,
            "title": "Strassen’s Matrix Multiplication",
            "description": "Multiply two matrices faster than normal multiplication.\n\n| Test Case | Input                          | Expected Output      | Notes                      |\n|-----------|--------------------------------|----------------------|----------------------------|\n| 1         | A = [[1,2],[3,4]], B=[[5,6],[7,8]] | [[19,22], [43,50]] | Standard case               |\n| 2         | A = [[2,1],[1,2]], B=[[2,3],[3,4]] | [[7,10], [8,11]]    | Simple matrix              |\n| 3         | A = [[0,1],[1,0]], B=[[1,0],[0,1]] | [[0,1], [1,0]]      | Identity matrix            |\n| 4         | A = [[1,0,0],[0,1,0],[0,0,1]], B=[[1,2,3],[4,5,6],[7,8,9]] | [[1,2,3],[4,5,6],[7,8,9]] | Identity multiplication     |\n| 5         | A = [[1,2],[3,4],[5,6]], B=[[7,8],[9,10],[11,12]] | [[58,64],[139,154],[220,244]] | Higher dimensions         |\n| 6         | A = [[1,1,1],[1,1,1],[1,1,1]], B=[[1,1,1],[1,1,1],[1,1,1]] | [[3,3,3],[3,3,3],[3,3,3]] | All ones                   |\n| 7         | A = [[2,3,4],[5,6,7],[8,9,10]], B=[[1,0,0],[0,1,0],[0,0,1]] | [[2,3,4],[5,6,7],[8,9,10]] | Mixed numbers             |\n| 8         | A = [[1]], B=[[2]]              | [[2]]               | Single element matrices    |\n| 9         | A = [[5,6],[7,8]], B=[[1,1],[2,2]] | [[17,17],[23,23]]    | Small test case             |\n| 10        | A = [[1,1,1,1],[1,1,1,1]], B=[[2,2],[2,2]] | [[4,4],[4,4]]    | Non-square dimensions      |",
            "example": {
              "input": "A = [[1,2],[3,4]], B=[[5,6],[7,8]]",
              "output": "[[19,22], [43,50]]",
              "explanation": "Normal multiplication gives the result [[19,22], [43,50]]"
            },
            "answer": "def strassen(A, B):\n    if len(A) == 1:\n        return [[A[0][0] * B[0][0]]]\n    a, b, c, d = A[0][0], A[0][1], A[1][0], A[1][1]\n    e, f, g, h = B[0][0], B[0][1], B[1][0], B[1][1]\n    p1 = (a+d) * (e+h)\n    p2 = (c+d) * e\n    p3 = a * (f-h)\n    p4 = d * (g-e)\n    p5 = (a+b) * h\n    p6 = (c-a) * (e+f)\n    p7 = (b-d) * (g+h)\n    return [[p1 + p4 - p5 + p7, p3 + p5], [p2 + p4, p1 + p3 - p2 + p6]]"
          },
          {
            "id": 15,
            "title": "Karatsuba Multiplication",
            "description": "Multiply two large numbers using Karatsuba’s method.\n\n | Test Cases | Input      | Expected Output | Notes       |\n|------------|------------|-----------------|-------------|\n| 1          | 1234 * 5678| 7006652         | Basic test  |\n| 2          | 1 * 1234   | 1234            | Small values|\n| 3          | 9999 * 9999| 99980001        | Large numbers|\n| 4          | 987654 * 1234| 121932587956    | Medium size |\n| 5          | 12 * 34    | 408             | Small numbers|\n| 6          | 100 * 100  | 10000           | Round numbers|\n| 7          | 5678 * 1234| 7006652         | Different large numbers|\n| 8          | 5555 * 5555| 30858025        | Identical numbers|\n| 9          | 1000 * 1000| 1000000         | Round numbers with zeros|\n| 10         | 987 * 654  | 645258          | Medium numbers|\n| 11         | 1 * 0      | 0               | Zero case   |\n| 12         | 0 * 0      | 0               | Zero case   |\n| 13         | 101 * 202  | 20402           | Simple case |\n| 14         | 13 * 25    | 325             | Small case  |\n| 15         | 17 * 19    | 323             | Small prime numbers|\n| 16         | 4567 * 890 | 4069830         | Different sizes|\n| 17         | 999 * 999  | 998001          | Similar numbers|\n| 18         | 563 * 45   | 25335           | Small & medium|\n| 19         | 245 * 320  | 78400           | Small and medium|\n| 20         | 987 * 654  | 645258          | Medium case |\n| 21         | 10000 * 10000 | 100000000      | Large case  |\n| 22         | 2135 * 756 | 1615560         | Medium case |\n| 23         | 1212 * 3432 | 4164384         | Large numbers|\n| 24         | 12345 * 54321 | 670592745      | Large test  |\n| 25         | 1111 * 2222 | 2468642         | Repeated numbers|\n| 26         | 6789 * 345 | 2335505         | Large and medium|\n| 27         | 9 * 9      | 81              | Small case  |\n| 28         | 3 * 7      | 21              | Small numbers|\n| 29         | 102 * 103  | 10506           | Close numbers|\n| 30         | 18 * 16    | 288             | Small primes|\n| 31         | 1024 * 2048| 2097152         | Powers of 2|\n| 32         | 888 * 777  | 689736          | Medium case |\n| 33         | 1234 * 4321| 5332114         | Reverse digits|\n| 34         | 999999 * 1000000| 999999000000 | Large case  |\n| 35         | 8888 * 7777| 69118416        | Identical size|\n| 36         | 10001 * 1001 | 10011001       | Similar format|\n| 37         | 234 * 678  | 158052          | Small/medium |\n| 38         | 64 * 32    | 2048            | Small case  |\n| 39         | 123 * 987  | 121521          | Basic case  |\n| 40         | 3210 * 4321 | 13823721       | Larger numbers|\n",
            "example": {
                "input": "1234 * 5678",
                "output": "7006652",
                "explanation": "The multiplication result of 1234 and 5678 using Karatsuba’s method is 7006652."
            },
            "answer": "def karatsuba(x, y):\n    if x < 10 or y < 10:\n        return x * y\n    n = max(len(str(x)), len(str(y)))\n    half = n//2\n    a, b = divmod(x, 10**half)\n    c, d = divmod(y, 10**half)\n    ac = karatsuba(a, c)\n    bd = karatsuba(b, d)\n    ad_plus_bc = karatsuba(a+b, c+d) - ac - bd\n    return ac * 10**(2*half) + ad_plus_bc * 10**half + bd"
        },
        {
            "id": 16,
            "title": "Find Element in Rotated Sorted Array",
            "description": "Search an element in a rotated sorted array.\n\n | Test Cases | Input                     | Target | Expected Output | Notes                           |\n|------------|----------------------------|--------|-----------------|---------------------------------|\n| 1          | [4,5,6,7,0,1,2]             | 0      | 4               | Element present at rotated index|\n| 2          | [4,5,6,7,0,1,2]             | 5      | 1               | Element found in the rotated part|\n| 3          | [4,5,6,7,0,1,2]             | 2      | 6               | Element found at end             |\n| 4          | [7,0,1,2,3,4,5,6]           | 6      | 7               | Element present at start        |\n| 5          | [1,2,3,4,5,6,7]             | 4      | 3               | Element found in non-rotated part|\n| 6          | [3,4,5,6,7,8,9,10,1,2]      | 1      | 8               | Element in second rotated part  |\n| 7          | [1,2,3,4,5,6]               | 4      | 3               | Element in the first half        |\n| 8          | [8,9,10,11,12,13,14,15,16]   | 15     | 13              | Searching in sorted rotated array|\n| 9          | [1,2,3,4,5,6]               | 5      | 4               | Element found in second part    |\n| 10         | [1,2,3,4,5,6,7,8,9,10]      | 10     | 9               | Element at the end               |\n| 11         | [7,8,9,10,11,12]             | 9      | 2               | Searching through rotated sorted array|\n| 12         | [7,6,5,4,3,2,1]             | 3      | 2               | Searching reversed sorted array  |\n| 13         | [10,20,30,40,50]             | 40     | 3               | Test for unrotated array         |\n| 14         | [1]                         | 1      | 0               | Only one element                |\n| 15         | [1,2,3,4]                   | 2      | 1               | Simple sorted array             |\n| 16         | [8,7,6,5,4,3,2,1]            | 1      | 7               | Searching through reversed array|\n| 17         | [3,2,1,0,9,8,7,6,5,4]        | 5      | 9               | Reversed array search            |\n| 18         | [1,1,1,2,3,4,5]              | 5      | 6               | Test with duplicates            |\n| 19         | [2,4,6,8,10,12,14,16]        | 12     | 5               | Test with larger numbers         |\n| 20         | [1, 2, 3, 4, 5, 6, 7]        | 4      | 3               | Simple case                      |\n| 21         | [4,5,6,7,0,1,2]             | 1      | 5               | Testing rotated array again      |\n| 22         | [3,4,5,6,7,8,9,10]           | 6      | 3               | Array not rotated                |\n| 23         | [1,4,6,8,10,12,14]           | 10     | 4               | Sorted elements                  |\n| 24         | [2,4,5,6,7,8,10]             | 7      | 5               | Simple rotation test             |\n| 25         | [10,20,30,40,50]             | 20     | 1               | Test for larger numbers          |\n| 26         | [50, 40, 30, 20, 10]         | 30     | 2               | Reversed array search            |\n| 27         | [20,40,60,80,100]            | 100    | 4               | Test array with larger numbers   |\n| 28         | [2,4,6,8,10,12]              | 12     | 5               | Sorted array with larger numbers |",
            "example": {
                "input": "[4,5,6,7,0,1,2], Target: 0",
                "output": "4",
                "explanation": "The target 0 is found at index 4 in the rotated sorted array."
            },
            "answer": "def search(nums, target):\n    low, high = 0, len(nums)-1\n    while low <= high:\n        mid = (low+high)//2\n        if nums[mid]==target:\n            return mid\n        if nums[low]<=nums[mid]:\n            if nums[low]<=target<nums[mid]:\n                high = mid-1\n            else:\n                low = mid+1\n        else:\n            if nums[mid]<target<=nums[high]:\n                low = mid+1\n            else:\n                high = mid-1\n    return -1"
        },
        {
            "id": 17,
            "title": "Find Minimum in Rotated Sorted Array",
            "description": "Find minimum in a rotated sorted array.\n\n | Test Cases | Input                     | Expected Output | Notes                           |\n|------------|----------------------------|-----------------|---------------------------------|\n| 1          | [3,4,5,1,2]                | 1               | Minimum in rotated array        |\n| 2          | [1,2,3,4,5]                | 1               | Minimum in sorted array         |\n| 3          | [5,6,7,8,9,10,11,1,2,3,4]   | 1               | Minimum in rotated sorted array |\n| 4          | [2,3,4,5,6,7,8]            | 2               | Minimum in first part           |\n| 5          | [12,14,16,18,2,4,6,8,10]    | 2               | Rotation with larger numbers    |\n| 6          | [100,200,300,400,500]      | 100             | Already sorted                  |\n| 7          | [500,100,200,300,400]      | 100             | Rotated sorted                  |\n| 8          | [3,4,5,6,7,8]              | 3               | No rotation (sorted)            |\n| 9          | [2,4,5,6,7,8]              | 2               | Small rotation                  |\n| 10         | [10,20,30,40,50]           | 10              | Already sorted                  |\n| 11         | [30,40,50,10,20]           | 10              | Rotated                         |\n| 12         | [7,8,9,10,11,12,1]         | 1               | Minimum at the end              |\n| 13         | [8,9,10,11,12,1,2]         | 1               | Minimum rotated backwards       |\n| 14         | [1]                        | 1               | Single element                  |\n| 15         | [1, 2, 3, 4]               | 1               | Already sorted                  |\n| 16         | [9,10,11,12,1,2,3]         | 1               | Rotation with distinct elements |\n| 17         | [5,10,15,20,25,30]         | 5               | Non rotated (sorted)            |\n| 18         | [30,35,40,45,50,5]         | 5               | Minimum at the end              |\n| 19         | [100,200,300,50]           | 50              | Minimum in rotated               |\n| 20         | [2,3,4,5,6,7,8,1]          | 1               | Minimum after rotation          |\n| 21         | [7,6,5,4,3,2,1]            | 1               | Reversed sorted                 |\n| 22         | [30,40,50,60,70,80,10]     | 10              | Rotated sorted                  |\n| 23         | [80,90,100,10,20,30]       | 10              | Rotation with larger numbers    |\n| 24         | [100,200,50,60,70]         | 50              | Rotation                        |\n| 25         | [2,4,6,8,10,12,14,16]      | 2               | Small case                       |\n",
            "example": {
                "input": "[3,4,5,1,2]",
                "output": "1",
                "explanation": "The minimum element in the rotated sorted array [3,4,5,1,2] is 1."
            },
            "answer": "def findMin(nums):\n    low, high = 0, len(nums)-1\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] > nums[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return nums[low]"
        },
        {
          "id": 18,
          "title": "Kth Largest Element in an Array",
          "description": "Find the kth largest element in an unsorted array.\n\n | Test Cases | Input                           | k  | Expected Output | Notes                |\n|------------|---------------------------------|----|-----------------|----------------------|\n| 1          | [3,2,1,5,6,4]                   | 2  | 5               | Basic case            |\n| 2          | [1,2,3,4,5]                     | 2  | 4               | Sorted array          |\n| 3          | [7,10,4,3,20,15]                | 3  | 10              | Random case           |\n| 4          | [1,1,1,1,1]                     | 2  | 1               | Identical elements    |\n| 5          | [9,3,1,4,7,5]                   | 4  | 5               | Random case           |\n| 6          | [1,2,3,4,5,6]                   | 6  | 1               | Largest at end        |\n| 7          | [5,12,1,15,8,10]                | 5  | 1               | Random case           |\n| 8          | [3,3,3,3,3]                     | 3  | 3               | All elements same     |\n| 9          | [6,7,8,9,10]                    | 2  | 9               | Sorted in increasing  |\n| 10         | [10,9,8,7,6]                    | 1  | 10              | Sorted in decreasing  |\n| 11         | [10,20,30,40,50,60]             | 5  | 20              | First 5 elements      |\n| 12         | [20,15,30,25,10]                | 3  | 25              | Random values         |\n| 13         | [30,50,70,40,90]                | 4  | 40              | Random values         |\n| 14         | [12,14,16,18,20]                | 1  | 20              | Sorted ascending      |\n| 15         | [5,10,2,7,1]                    | 2  | 7               | Random values         |\n| 16         | [1,5,2,7,6,3]                   | 4  | 5               | Random values         |\n| 17         | [4,5,1,2,6]                     | 3  | 4               | Random values         |\n| 18         | [8,7,6,5,4]                     | 1  | 8               | Sorted in descending  |\n| 19         | [10,20,30,40,50,60,70]          | 7  | 10              | Sorted ascending      |\n| 20         | [25,30,35,40,45,50,55]          | 4  | 40              | Random sorted         |\n| 21         | [1,1,1,1,1,2,3,4]               | 3  | 3               | Multiple same values  |\n| 22         | [90,100,110,120,130]            | 5  | 90              | Sorted ascending      |\n| 23         | [0,0,0,0,0,0]                   | 2  | 0               | All elements are zero |\n| 24         | [1,2,3,4,5,6,7,8,9,10]          | 9  | 2               | Consecutive elements  |\n| 25         | [8,7,6,5,4,3,2,1]               | 1  | 8               | Reversed sorted       |\n| 26         | [5,5,5,5,5,5]                   | 4  | 5               | Identical values      |\n| 27         | [4,5,1,3,2]                     | 5  | 1               | Smallest element      |\n| 28         | [15,20,25,30,35,40,45]          | 2  | 35              | Random case           |\n| 29         | [10,9,8,7,6,5,4,3,2,1]          | 1  | 10              | Sorted in descending  |\n| 30         | [8,7,9,10,5,4,6,1,2,3]          | 3  | 8               | Random values         |\n| 31         | [1,2,3,4,5,6,7,8,9,10]          | 10 | 1               | Sorted ascending      |\n| 32         | [1,100,99,98,97]                | 4  | 97              | Random values         |\n| 33         | [1,3,4,5,6,7,8,9,2,10]          | 3  | 8               | Random values         |\n| 34         | [4,3,2,1,6,5]                   | 1  | 6               | Mixed values          |\n| 35         | [4,7,9,5,1,3,8,6,2]             | 9  | 1               | Random values         |\n| 36         | [2,3,4,5,6,7,8,9,10,11]         | 10 | 1               | Sorted ascending      |\n| 37         | [13,19,7,1,10]                  | 2  | 13              | Random case           |\n| 38         | [4,5,6,7,8]                     | 3  | 6               | Consecutive numbers   |\n| 39         | [30,20,50,40,10]                | 3  | 30              | Mixed values          |\n| 40         | [9,7,8,6,5,4,3,2,1]             | 2  | 8               | Reverse sorted        |\n",
          "example": {
              "input": "[3,2,1,5,6,4], k=2",
              "output": "5",
              "explanation": "The kth largest element in the array [3,2,1,5,6,4] when k=2 is 5."
          },
          "answer": "import heapq\n\ndef findKthLargest(nums, k):\n    return heapq.nlargest(k, nums)[-1]"
      },
      {
          "id": 19,
          "title": "Find Duplicate Number (Cycle Detection)",
          "description": "Find the duplicate number using slow/fast pointers.\n\n | Test Cases | Input             | Expected Output | Notes       |\n|------------|-------------------|-----------------|-------------|\n| 1          | [1,3,4,2,2]       | 2               | Basic case  |\n| 2          | [3,1,3,4,2]       | 3               | Cycle in list |\n| 3          | [1,2,3,4,5,6,7,8,9,10] | None         | No duplicate |\n| 4          | [1,1,1]           | 1               | All same values |\n| 5          | [5,1,2,3,4,5]     | 5               | Duplicate at end|\n| 6          | [8,9,7,9,6,10]    | 9               | Duplicate in the middle |\n| 7          | [12,13,12,14,15]  | 12              | Duplicate at start |\n| 8          | [5,5,5,5,5,5]     | 5               | All same values |\n| 9          | [1,2,3,4,4]       | 4               | Duplicate at end |\n| 10         | [10,11,12,13,14,15,16,17,18,19,20] | None | No duplicates |\n| 11         | [2,3,1,2]         | 2               | Small case |\n| 12         | [3,4,5,3]         | 3               | Duplicate at start |\n| 13         | [1,2,3,4,3,2]     | 3               | Duplicate in middle |\n| 14         | [6,7,8,9,7,6]     | 7               | Duplicates at start and end |\n| 15         | [1,1,2,3,1]       | 1               | Multiple same values |\n| 16         | [11,12,13,12,14]  | 12              | Duplicate in middle |\n| 17         | [5,6,7,8,5]       | 5               | Duplicate at start |\n| 18         | [4,5,6,4]         | 4               | Duplicate at start |\n| 19         | [1,2,3,4,5]       | None             | No duplicate |\n| 20         | [9,8,7,9]         | 9               | Duplicate at end |\n| 21         | [2,3,4,2]         | 2               | Duplicate in the middle |\n| 22         | [10,11,12,11]     | 11              | Duplicate in middle |\n| 23         | [100,200,300,400,100] | 100          | Duplicate in the start |\n| 24         | [20,30,40,50,30]  | 30              | Duplicate in the middle |\n| 25         | [1,2,3,4,5,6,2]   | 2               | Duplicate near end |\n| 26         | [6,8,7,6]         | 6               | Duplicate at start |\n| 27         | [100,200,300,400,500,600,700] | None   | No duplicates |\n| 28         | [11,12,13,14,12]  | 12              | Duplicate at the end |\n| 29         | [4,4,4,4]         | 4               | All elements same |\n| 30         | [2,1,3,4,3]       | 3               | Duplicate middle |\n| 31         | [1000,999,998,1000] | 1000           | Duplicate start |\n| 32         | [3,6,8,9,3]       | 3               | Duplicate middle |\n| 33         | [7,7,9,10]        | 7               | Duplicate start |\n| 34         | [1,2,3,4,5]       | None             | No duplicates |\n| 35         | [6,7,8,6,7]       | 6               | Duplicates at both ends |\n| 36         | [2,3,1,4,5]       | None             | No duplicates |\n| 37         | [10,10,10]        | 10              | All same values |\n| 38         | [4,3,2,1,2]       | 2               | Duplicate in the middle |\n| 39         | [5,5,5]           | 5               | All elements same |\n| 40         | [8,7,6,5,4,4]     | 4               | Duplicate at the end |\n",
          "example": {
              "input": "[1,3,4,2,2]",
              "output": "2",
              "explanation": "The duplicate number in the array [1,3,4,2,2] is 2."
          },
          "answer": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    slow = nums[0]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow"
      },
      {
        "id": 20,
        "title": "Search in Matrix",
        "description": "Search a target in a matrix.\n\n | Test Cases | Input                     | Expected Output | Notes         |\n|------------|---------------------------|-----------------|---------------|\n| 1          | [[1,4,7,11],[2,5,8,12],[3,6,9,16]], Target: 5 | True            | Target found |\n| 2          | [[1,4,7,11],[2,5,8,12],[3,6,9,16]], Target: 20 | False           | Target not found |\n| 3          | [[1,3,5,7],[2,4,6,8],[3,5,7,9]], Target: 4   | True            | Target found |\n| 4          | [[1,2,3],[4,5,6],[7,8,9]], Target: 9        | True            | Target found |\n| 5          | [[10,20,30],[40,50,60]], Target: 15          | False           | Target not found |\n| 6          | [[1,2],[3,4]], Target: 4                      | True            | Target found |\n| 7          | [[1,2,3],[4,5,6],[7,8,9]], Target: 0         | False           | Target not found |\n| 8          | [[1,4,7],[2,5,8],[3,6,9]], Target: 2         | True            | Target found |\n| 9          | [[1,2,3],[4,5,6],[7,8,9]], Target: 7         | True            | Target found |\n| 10         | [[1,2],[3,4],[5,6]], Target: 4               | True            | Target found |\n| 11         | [[1,3,5],[2,4,6]], Target: 5                 | True            | Target found |\n| 12         | [[1,1,1],[2,2,2],[3,3,3]], Target: 3         | True            | Target found |\n| 13         | [[1,2,3],[4,5,6],[7,8,9]], Target: 8         | True            | Target found |\n| 14         | [[1,4,7],[2,5,8],[3,6,9]], Target: 6         | True            | Target found |\n| 15         | [[1,2],[2,3]], Target: 2                     | True            | Target found |\n| 16         | [[10,20,30],[40,50,60]], Target: 60          | True            | Target found |\n| 17         | [[1,2,3],[4,5,6],[7,8,9]], Target: 1         | True            | Target found |\n| 18         | [[1,3,5,7],[2,4,6,8]], Target: 8            | True            | Target found |\n| 19         | [[1,4,7],[2,5,8],[3,6,9]], Target: 11        | False           | Target not found |\n| 20         | [[1,2,3,4],[5,6,7,8]], Target: 5             | True            | Target found |\n| 21         | [[1,2,3],[4,5,6]], Target: 2                 | True            | Target found |\n| 22         | [[10,20],[30,40]], Target: 40                | True            | Target found |\n| 23         | [[1,2,3],[4,5,6],[7,8,9]], Target: 3         | True            | Target found |\n| 24         | [[1,2,3],[4,5,6],[7,8,9]], Target: 12        | False           | Target not found |\n| 25         | [[1,2,3],[4,5,6],[7,8,9]], Target: 10        | False           | Target not found |\n| 26         | [[1,4,7],[2,5,8],[3,6,9]], Target: 9         | True            | Target found |\n| 27         | [[1,2,3],[4,5,6]], Target: 6                 | True            | Target found |\n| 28         | [[10,20,30],[40,50,60]], Target: 25          | False           | Target not found |\n| 29         | [[1,2],[2,3],[3,4]], Target: 1               | True            | Target found |\n| 30         | [[1,3,5,7],[2,4,6,8]], Target: 5            | True            | Target found |\n| 31         | [[1,2],[3,4]], Target: 5                     | False           | Target not found |\n| 32         | [[1,2],[3,4],[5,6]], Target: 2               | True            | Target found |\n| 33         | [[1,2,3],[4,5,6],[7,8,9]], Target: 4         | True            | Target found |\n| 34         | [[1,4,7],[2,5,8],[3,6,9]], Target: 7         | True            | Target found |\n| 35         | [[1,2,3],[4,5,6]], Target: 1                 | True            | Target found |\n| 36         | [[1,2],[3,4],[5,6]], Target: 7               | False           | Target not found |\n| 37         | [[1,2,3],[4,5,6],[7,8,9]], Target: 6         | True            | Target found |\n| 38         | [[1,2,3],[4,5,6]], Target: 9                 | True            | Target found |\n| 39         | [[1,4,7],[2,5,8],[3,6,9]], Target: 4         | True            | Target found |\n| 40         | [[1,2,3],[4,5,6]], Target: 5                 | True            | Target found |\n",
        "example": {
            "input": "[[1,4,7,11],[2,5,8,12],[3,6,9,16]], Target: 5",
            "output": "True",
            "explanation": "The target 5 is found in the matrix at position [1][1]."
        },
        "answer": "def searchMatrix(matrix, target):\n    if not matrix:\n        return False\n    row, col = 0, len(matrix[0])-1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False"
    },
    {
      "id": 21,
      "title": "Find Missing Number in Range 0 to n",
      "description": "Given an array containing n distinct numbers taken from 0,1,2,...,n, find the one missing number.\n\n | Test Cases | Input            | Expected Output | Notes           |\n|------------|------------------|-----------------|-----------------|\n| 1          | [3,0,1]          | 2               | Missing number  |\n| 2          | [1,2,3,4,5,7,8]  | 6               | Small case      |\n| 3          | [0,1,2,4,5]      | 3               | Single missing  |\n| 4          | [0,1,2,3,4,5]    | 6               | Large case      |\n| 5          | [0,1,2,3]        | 4               | Small case      |\n| 6          | [0,1,2,3,5]      | 4               | Consecutive numbers |\n| 7          | [1,2,4,5]        | 3               | Simple case     |\n| 8          | [2,0,1]          | 3               | Small range     |\n| 9          | [0,2]            | 1               | Missing middle  |\n| 10         | [0,1]            | 2               | Two elements    |\n| 11         | [0]              | 1               | Only one number |\n| 12         | [0,3,1]          | 2               | Small range     |\n| 13         | [0,2,3]          | 1               | Range from 0 to n |\n| 14         | [5,3,0,1,4]      | 2               | Shuffle case    |\n| 15         | [1,2,4,5,6]      | 3               | Missing middle  |\n| 16         | [1,2,5,6]        | 3               | Simple case     |\n| 17         | [4,0,1,2,3]      | 5               | Random missing  |\n| 18         | [0,1,2,4,5,6]    | 3               | Middle missing  |\n| 19         | [1,3,4,5]        | 2               | Small input     |\n| 20         | [0,2,3,4,5,6]    | 1               | First element missing |\n| 21         | [0,1,2,3,4,6]    | 5               | Consecutive elements |\n| 22         | [0,1,2,4]        | 3               | Sequence missing |\n| 23         | [1,2,3,5]        | 4               | Sequential case |\n| 24         | [3,1,2,4]        | 0               | Simple test case |\n| 25         | [0,1,4,5]        | 2               | Missing small number |\n| 26         | [2,3,1,4]        | 0               | First number missing |\n| 27         | [3,0,4,1,2]      | 5               | Case with numbers shuffled |\n| 28         | [0,1,2,5,6]      | 4               | Middle number missing |\n| 29         | [3,0,2]          | 1               | Smaller case    |\n| 30         | [2,4,5,6,7]      | 3               | Missing number in middle |\n| 31         | [5,4,2,0,1]      | 3               | Random shuffle  |\n| 32         | [4,5,6,7,0,1]    | 2               | Edge case       |\n| 33         | [2,5,3,0,1]      | 4               | Mixed input     |\n| 34         | [0,2,4,5]        | 3               | Simple test     |\n| 35         | [0,1,3]          | 2               | Small array     |\n| 36         | [0,1,2,4,5,6]    | 3               | Middle case     |\n| 37         | [0,1,2,3]        | 4               | Four numbers    |\n| 38         | [0,1,2,4,5,6]    | 3               | Regular case    |\n| 39         | [0,1,3,4,5]      | 2               | Missing middle  |\n| 40         | [1,2,3,4,5,6]    | 0               | Edge case       |\n",
      "example": {
          "input": "[3,0,1]",
          "output": "2",
          "explanation": "The missing number is 2."
      },
      "answer": "def findMissingNumber(nums):\n    n = len(nums)\n    total = (n * (n + 1)) // 2\n    sum_nums = sum(nums)\n    return total - sum_nums"
    },
    {
      "id": 22,
      "title": "Maximum Subarray Sum (Divide and Conquer)",
      "description": "Find the contiguous subarray with maximum sum.\n\n | Test Cases | Input                         | Expected Output | Notes         |\n|------------|-------------------------------|-----------------|---------------|\n| 1          | [-2,1,-3,4,-1,2,1,-5,4]        | 6               | Basic test    |\n| 2          | [1]                           | 1               | Single element|\n| 3          | [-2,-3,-4,-1]                 | -1              | All negative  |\n| 4          | [10,-1,2,3,-4,5,-6]            | 11              | Mixed positive and negative|\n| 5          | [2, 3, -1, 4, -2, 5]           | 10              | Mixed case    |\n| 6          | [1, 2, 3, 4, 5]                | 15              | Simple case   |\n| 7          | [-1, -2, -3, -4]               | -1              | All negative  |\n| 8          | [5, -2, 3, 4, 6, -1, 2]        | 11              | Small numbers |\n| 9          | [-1, 2, 3, -4, 5]              | 6               | Mixed case    |\n| 10         | [1, -1, 1, -1, 1]              | 1               | Alternating signs|\n| 11         | [-5, -3, -4, -2, -1]           | -1              | Negative only |\n| 12         | [4, 5, -2, -1, 6, -3]          | 9               | Positive and negative|\n| 13         | [-5, -4, -3, -2, -1, 1]        | 1               | Ending positive|\n| 14         | [3, 5, -2, -1, 6, 8]           | 18              | Mixed         |\n| 15         | [-10, -1, 2, 4, 5]             | 11              | Mixed values  |\n| 16         | [-1, 2, 3, 4, -1, 2]           | 9               | Positive with negative|\n| 17         | [2, -2, 3, -3, 4, -4]          | 6               | Alternating   |\n| 18         | [5, 2, -4, 1, -2]              | 5               | Small range   |\n| 19         | [1, -1, 2, 3, -4, 5, 6]        | 12              | Large positive|\n| 20         | [2, 4, -1, -2, 7, -5]          | 9               | Mixed values  |\n| 21         | [0, -1, -2, 3, 4]              | 7               | Case with zero|\n| 22         | [-2, 1, -3, 4, -1, 2, 1]       | 6               | Mixed test    |\n| 23         | [1, -1, 2, 3, -4]              | 6               | Simple case   |\n| 24         | [-1, 2, -3, 4, -5]             | 4               | Mixed values  |\n| 25         | [1, 2, 3, -10, 4, 5]           | 15              | Larger range  |\n| 26         | [0, -1, 2, -3, 4]              | 4               | Alternating   |\n| 27         | [-3, -2, 5, 6]                 | 11              | Positive numbers|\n| 28         | [1, 2, -1, 3, -2]              | 5               | Basic case    |\n| 29         | [2, 3, -2, 1, -1, 6]           | 8               | Mixed case    |\n| 30         | [-3, 1, 2, 4, -2]              | 7               | Small values  |\n| 31         | [0, 0, 0]                      | 0               | No elements   |\n| 32         | [-1, 0, 1, 2]                  | 4               | Simple case   |\n| 33         | [3, 2, -1, 4, -2, 1]           | 7               | Basic case    |\n| 34         | [-2, 3, -1, 4, -5]             | 6               | Mixed values  |\n| 35         | [-1, 3, 5, -2]                 | 8               | Positive with negative|\n| 36         | [0, 1, -1, 2]                  | 2               | Alternating   |\n| 37         | [-3, 5, 7, -2, 6]              | 14              | Mixed values  |\n| 38         | [5, -3, -2, 4, 6]              | 11              | Basic test    |\n| 39         | [1, -1, 1, 1, -1]              | 3               | Simple case   |\n| 40         | [1, 2, 3, -5, 4, -1, 2]        | 10              | Complex case  |",
      "example": {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray with maximum sum is [4,-1,2,1], which gives a sum of 6."
      },
      "answer": "def maxCrossingSum(arr, l, m, h):\n    sm = 0\n    left_sum = float('-inf')\n    for i in range(m, l-1, -1):\n        sm += arr[i]\n        left_sum = max(left_sum, sm)\n    sm = 0\n    right_sum = float('-inf')\n    for i in range(m+1, h+1):\n        sm += arr[i]\n        right_sum = max(right_sum, sm)\n    return left_sum + right_sum\n\ndef maxSubArraySum(arr, l, h):\n    if l == h:\n        return arr[l]\n    m = (l+h)//2\n    return max(maxSubArraySum(arr, l, m),\n               maxSubArraySum(arr, m+1, h),\n               maxCrossingSum(arr, l, m, h))\n\ndef maxSubArray(arr):\n    return maxSubArraySum(arr, 0, len(arr)-1)"
    },
    {
      "id": 23,
      "title": "Number of Rotations in Sorted Array",
      "description": "Find number of rotations (index of minimum element).\n\n | Test Cases | Input            | Expected Output | Notes           |\n|------------|------------------|-----------------|-----------------|\n| 1          | [15,18,2,3,6,12]  | 2               | Basic test      |\n| 2          | [5,6,7,9,1,2,3]   | 4               | Rotated array  |\n| 3          | [11,12,15,18,2,3] | 4               | Small test case |\n| 4          | [7,8,9,10,1,2]    | 4               | Rotated middle  |\n| 5          | [2,3,4,5,6,7,8]   | 0               | No rotation     |\n| 6          | [3,4,5,6,7,8,9]   | 0               | Already sorted  |\n| 7          | [1,2,3,4,5]       | 0               | No rotation     |\n| 8          | [9,10,11,12,13,1] | 5               | Rotation in middle|\n| 9          | [5,6,7,1,2,3]     | 3               | Simple rotation |\n| 10         | [0,1,2,3,4,5]     | 0               | No rotation     |\n| 11         | [2,3,4,5,1]       | 4               | Small case      |\n| 12         | [4,5,6,7,8,9,0,1] | 6               | Large rotated   |\n| 13         | [12,13,14,15,16,17,18,1] | 7            | Large case      |\n| 14         | [11,12,13,14,15]  | 0               | Sorted case     |\n| 15         | [7,9,11,12,14]    | 0               | Small sorted    |\n| 16         | [5,7,9,10,1]      | 4               | Simple test     |\n| 17         | [10,11,12,13,1,2] | 4               | Rotated part    |\n| 18         | [15,16,17,18,1,2] | 4               | Basic test      |\n| 19         | [5,6,7,8,1]       | 4               | Rotation in middle|\n| 20         | [0,1,2,3,4]       | 0               | No rotation     |\n| 21         | [3,4,5,6,7]       | 0               | Sorted         |\n| 22         | [2,3,4,5]         | 0               | Small rotation  |\n| 23         | [8,9,10,11,12,1]  | 5               | Large rotation  |\n| 24         | [6,7,8,9,10,11]   | 0               | No rotation     |\n| 25         | [9,10,11,12,1,2]  | 4               | Mid case        |\n| 26         | [10,11,12,13,14,1]| 5               | Large rotation  |\n| 27         | [7,8,9,10,11,12,1]| 5               | Rotation in middle|\n| 28         | [4,5,6,7,8]       | 0               | Simple case     |\n| 29         | [13,14,15,16,17]  | 0               | No rotation     |\n| 30         | [5,6,7,8,1]       | 4               | Mid case        |\n| 31         | [2,3,4,5,6]       | 0               | No rotation     |\n| 32         | [8,9,10,11,1,2]   | 4               | Large rotation  |\n| 33         | [4,5,6,7]         | 0               | Small test      |\n| 34         | [3,4,5,6,7,8]     | 0               | Simple case     |\n| 35         | [1,2,3,4,5,6]     | 0               | No rotation     |\n| 36         | [6,7,8,9,10]      | 0               | No rotation     |\n| 37         | [10,11,12,13,14]  | 0               | Sorted array    |\n| 38         | [7,8,9,10]        | 0               | Small rotation  |\n| 39         | [9,10,11,12,13]   | 0               | No rotation     |\n| 40         | [1,2,3,4,5,6,7,8] | 0               | No rotation     |",
      "example": {
        "input": "[15,18,2,3,6,12]",
        "output": "2",
        "explanation": "The array is rotated 2 times, the minimum element is at index 2."
      },
      "answer": "def find_rotation(arr):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"
    },
    {
    "id": 24,
    "title": "Find Integer Square Root (Binary Search)",
    "description": "Find the floor value of sqrt(n) using binary search.\n\n | Test Cases | Input  | Expected Output | Notes       |\n|------------|--------|-----------------|-------------|\n| 1          | 8      | 2               | Basic test  |\n| 2          | 4      | 2               | Perfect square|\n| 3          | 10     | 3               | Non-perfect square|\n| 4          | 1      | 1               | Smallest value|\n| 5          | 16     | 4               | Perfect square|\n| 6          | 25     | 5               | Perfect square|\n| 7          | 3      | 1               | Small test  |\n| 8          | 100    | 10              | Larger value|\n| 9          | 1024   | 32              | Larger test |\n| 10         | 99999  | 316             | Large value |\n| 11         | 49     | 7               | Perfect square|\n| 12         | 36     | 6               | Perfect square|\n| 13         | 50     | 7               | Non-perfect square|\n| 14         | 2      | 1               | Small test  |\n| 15         | 20     | 4               | Medium case |\n| 16         | 999    | 31              | Medium large |\n| 17         | 81     | 9               | Perfect square|\n| 18         | 400    | 20              | Large value |\n| 19         | 784    | 28              | Perfect square|\n| 20         | 12345  | 111             | Medium test |\n| 21         | 9876   | 99              | Large value |\n| 22         | 999    | 31              | Medium test |\n| 23         | 256    | 16              | Perfect square|\n| 24         | 1000   | 31              | Large value |\n| 25         | 81     | 9               | Perfect square|\n| 26         | 8000   | 89              | Larger number|\n| 27         | 50000  | 223             | Large value |\n| 28         | 7000   | 83              | Large value |\n| 29         | 23     | 4               | Small test  |\n| 30         | 1      | 1               | Edge case   |\n| 31         | 99     | 9               | Medium test |\n| 32         | 121    | 11              | Perfect square|\n| 33         | 9      | 3               | Perfect square|\n| 34         | 4500   | 67              | Larger case |\n| 35         | 100    | 10              | Round number|\n| 36         | 12     | 3               | Small test  |\n| 37         | 800    | 28              | Medium case |\n| 38         | 200    | 14              | Medium case |\n| 39         | 1500   | 38              | Larger case |\n| 40         | 2500   | 50              | Larger case |\n",
    "example": {
        "input": "8",
        "output": "2",
        "explanation": "The floor value of sqrt(8) is 2."
    },
    "answer": "def sqrt(n):\n    low, high = 0, n\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return mid\n        if mid * mid < n:\n            low = mid + 1\n            ans = mid\n        else:\n            high = mid - 1\n    return ans"
},
{
    "id": 25,
    "title": "Find Smallest Missing Positive Integer",
    "description": "Find the smallest missing positive number in an unsorted array.\n\n | Test Cases | Input         | Expected Output | Notes       |\n|------------|---------------|-----------------|-------------|\n| 1          | [3,4,-1,1]    | 2               | Basic test  |\n| 2          | [1,2,3]       | 4               | Small values|\n| 3          | [0,-1,-2]     | 1               | Negative values|\n| 4          | [1,2,0]       | 3               | Small numbers|\n| 5          | [-1,-2,-3]    | 1               | Negative values|\n| 6          | [5,6,7,8]     | 1               | Missing lowest value|\n| 7          | [1,2,3,4]     | 5               | Consecutive numbers|\n| 8          | [7,8,9,11]    | 1               | Missing value at start|\n| 9          | [10,11,12]    | 1               | Larger test |\n| 10         | [3,2,1,4]     | 5               | Permutation of 1,2,3,4|\n| 11         | [100,101]     | 1               | Large values|\n| 12         | [2, 1]        | 3               | Small numbers|\n| 13         | [0,0,1]       | 2               | Zero included|\n| 14         | [5,4,3,2]     | 1               | Small negative numbers|\n| 15         | [4,1,2,0]     | 3               | Unsorted small numbers|\n| 16         | [9,8,7,6]     | 1               | Decreasing order|\n| 17         | [10,9,8,6]    | 1               | No number 1|\n| 18         | [7,8,3,4,5]   | 1               | Mixed numbers|\n| 19         | [1]           | 2               | Small case with only one element|\n| 20         | [3,6,9,12]    | 1               | No number 1|\n| 21         | [1, 2, 0, 6]  | 3               | Some positive and zero|\n| 22         | [0, 3, 4]     | 1               | Small test with gaps|\n| 23         | [-5, -1, 0]   | 1               | Negative numbers|\n| 24         | [1000, 2000]  | 1               | Large numbers|\n| 25         | [0, 1]        | 2               | Small numbers|\n| 26         | [0, 2, 3]     | 1               | Small gaps|\n| 27         | [1, 4, 6]     | 2               | Simple case|\n| 28         | [7,8,9]       | 1               | Missing value at start|\n| 29         | [100, 200, 300] | 1              | Large input|\n| 30         | [4, 1, 2]     | 3               | Small case |\n| 31         | [9,6,7]       | 1               | Random numbers|\n| 32         | [10,1,0]      | 2               | Unsorted array|\n| 33         | [1000000, 1]  | 2               | Large input|\n| 34         | [8,9,10,11]   | 1               | Sorted numbers|\n| 35         | [13,14,15,16] | 1               | Larger consecutive|\n| 36         | [20,21]       | 1               | Missing 1 at start|\n| 37         | [18,17,19]    | 1               | Unsorted case|\n| 38         | [1,0]         | 2               | Edge case|\n| 39         | [5, 7, 9]     | 1               | Missing value at start|\n| 40         | [1, 5, 6, 8]  | 2               | Gaps between numbers|\n",
    "example": {
        "input": "[3,4,-1,1]",
        "output": "2",
        "explanation": "The smallest missing positive number in the array is 2."
    },
    "answer": "def firstMissingPositive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1"
},{
  "id": 26,
  "title": "Longest Equal 0s and 1s Substring",
  "description": "Find the longest substring with an equal number of 0s and 1s.\n\n | Test Cases | Input         | Expected Output | Notes       |\n|------------|---------------|-----------------|-------------|\n| 1          | [0,1,0]       | 2               | Basic test  |\n| 2          | [1,0,1,1,0]    | 4               | Mixed sequence |\n| 3          | [0,0,1,1]      | 4               | Equal 0s and 1s |\n| 4          | [1,0,1,0,1]    | 4               | Alternating 0 and 1 |\n| 5          | [0,1,1,0,0,1]  | 6               | Equal length | \n| 6          | [1,1,0,0,1,0]  | 4               | Different lengths | \n| 7          | [0,0,0,0]      | 0               | All zeros  |\n| 8          | [1,1,1,1]      | 0               | All ones |\n| 9          | [1,0,0,1,0]    | 4               | Alternating 1s and 0s |\n| 10         | [0,1,1,0]      | 4               | Equal sequence |\n| 11         | [1,1,0,1,0]    | 4               | Mixed sequence |\n| 12         | [1,0,0,0,1]    | 2               | More 0s than 1s |\n| 13         | [0,1,0,1,0,0]  | 4               | Equal mix |\n| 14         | [1,0,1,0,0,1]  | 4               | Alternating sequence |\n| 15         | [1,0,1,1,0]    | 4               | Mixed sequence |\n| 16         | [1,0,0,1,1,0]  | 4               | Equal subsequence |\n| 17         | [0,0,0,1,1,1]  | 4               | Consecutive ones and zeros |\n| 18         | [1,1,0,0,1]    | 4               | Mixed values |\n| 19         | [1,0,1,0,1]    | 4               | Alternating sequence |\n| 20         | [0,1,0,0,1]    | 4               | Balanced sequence |\n| 21         | [1,1,0,0]      | 4               | Equal count |\n| 22         | [1,0,1,1]      | 4               | Balanced subsequence |\n| 23         | [0,1,1,1,0]    | 4               | More 1s than 0s |\n| 24         | [0,1,0,0,1]    | 4               | Balanced subsequence |\n| 25         | [1,0,1,0]      | 2               | Alternating 0 and 1 |\n| 26         | [1,0,1,1,0]    | 4               | Mixed sequence |\n| 27         | [0,1,1,0,0]    | 4               | Equal subsequence |\n| 28         | [1,1,1,0]      | 2               | Imbalanced count |\n| 29         | [1,0,1]        | 2               | Subsequence with equal 1s and 0s |\n| 30         | [0,1,1]        | 2               | Equal subsequence |\n| 31         | [0,1,1,1]      | 4               | Balanced sequence |\n| 32         | [1,1,0,1]      | 2               | Imbalanced subsequence |\n| 33         | [1,0,1,0,1,0]  | 4               | Alternating sequence |\n| 34         | [1,0,1,0,1]    | 4               | Alternating subsequence |\n| 35         | [0,1,1,0]      | 4               | Equal subsequence |\n| 36         | [1,1,0,1,1]    | 4               | Sequence with more 1s |\n| 37         | [0,1,0,1,0]    | 4               | Equal subsequence |\n| 38         | [1,0,1,1,1]    | 4               | Balanced subsequence |\n| 39         | [0,1,1,1,0]    | 4               | Balanced mix |\n| 40         | [1,0,1,0,1,1]  | 4               | Equal 1s and 0s |\n",
  "example": {
    "input": "[0,1,0]",
    "output": "2",
    "explanation": "The longest substring with equal number of 0s and 1s is [0,1] or [1,0], which has length 2."
  },
  "answer": "def findMaxLength(nums):\n    counter = {0:-1}\n    max_len = count = 0\n    for i, num in enumerate(nums):\n        count += 1 if num == 1 else -1\n        if count in counter:\n            max_len = max(max_len, i - counter[count])\n        else:\n            counter[count] = i\n    return max_len"
}


    
      

          
                                                                                                
      ]
}
      