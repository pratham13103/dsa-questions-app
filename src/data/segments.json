{
    "questions": [
        {
            "id": 1,
            "title": "Range Sum Query with Updates",
            "description": "Given an array nums and a list of queries, each query is either an update (set nums[i] to a value) or a range sum query (find the sum of elements from index left to right). Return the results of all range sum queries after performing all updates.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[1,0,2],[0,1,2,10],[1,1,2]]                | [8,18]               | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,5],[1,0,2]]                   | [6,15]               | Equal elements              |\n| 3          | [1]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [1,10]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,0,3],[0,2,7],[1,0,3]]                   | [10,15]              | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,3],[0,0,1],[1,0,3]]                   | [20,17]              | Update first element        |\n| 6          | [1,10,100]            | [[1,0,2],[0,1,50],[1,0,2]]                  | [111,151]            | Large numbers               |\n| 7          | [0,0,0]               | [[1,0,2],[0,2,3],[1,0,2]]                   | [0,3]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,1,4],[0,3,10],[1,1,4]]                  | [14,20]              | Five elements               |\n| 9          | [-1,-2,-3]            | [[1,0,2],[0,0,5],[1,0,2]]                   | [-6,0]               | Negative numbers            |\n| 10         | [10,20]               | [[1,0,1],[0,0,15],[1,0,1]]                  | [30,35]              | Two elements                |\n| 11         | [1,1,1,1]             | [[1,0,3],[0,1,2],[1,0,3]]                   | [4,5]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,0,3],[0,2,1],[1,0,3]]                   | [20,15]              | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,0,5],[0,4,10],[1,0,5]]                  | [21,26]              | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [600,450]            | Large numbers               |\n| 15         | [1,2,3]               | [[1,0,2],[0,2,0],[1,0,2]]                   | [6,3]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,0,3],[0,1,5],[1,0,3]]                   | [100,85]             | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,0,6],[0,3,8],[1,0,6]]                   | [28,32]              | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,10],[1,0,4]]                  | [25,30]              | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,0,4],[0,2,2],[1,0,4]]                   | [25,20]              | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,2],[0,0,0],[1,0,2]]                   | [60,50]              | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,0,7],[0,4,1],[1,0,7]]                   | [36,32]              | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [400,350]            | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,0,4],[0,4,1],[1,0,4]]                   | [14,5]               | One outlier                 |\n| 24         | [2,4,6]               | [[1,0,2],[0,1,3],[1,0,2]]                   | [12,11]              | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,0,8],[0,5,10],[1,0,8]]                  | [45,50]              | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,15],[1,0,3]]                  | [60,55]              | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,0,3],[0,3,5],[1,0,3]]                   | [31,21]              | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,4],[0,0,50],[1,0,4]]                  | [500,450]            | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,0,3],[0,2,2],[1,0,3]]                   | [16,13]              | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,0,4],[0,4,0],[1,0,4]]                   | [150,100]            | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,0,9],[0,5,1],[1,0,9]]                  | [55,46]              | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,0,3],[0,1,5],[1,0,3]]                   | [50,40]              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,0,5],[0,5,1],[1,0,5]]                   | [15,6]               | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [1500,1350]          | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,2],[0,0,0],[1,0,2]]                   | [6,5]                | Update to zero              |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,10],[1,0,5]]                  | [210,180]            | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,0,5],[0,2,2],[1,0,5]]                   | [36,33]              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,0,3],[0,1,150],[1,0,3]]                 | [600,500]            | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,0,4],[0,4,5],[1,0,4]]                   | [51,36]              | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,0,6],[0,5,10],[1,0,6]]                 | [280,230]            | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[1,0,2],[0,1,2,10],[1,1,2]]",
                "output": "[8,18]",
                "explanation": "Initial array: [1,3,5]. First query (sum 0 to 2): 1+3+5 = 8. Update nums[1] to 10: [1,10,5]. Second query (sum 1 to 2): 10+5 = 18."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def update(self, node, start, end, idx, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(2 * node + 1, start, mid, idx, val)\n        else:\n            self.update(2 * node + 2, mid + 1, end, idx, val)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return self.query(2 * node + 1, start, mid, left, right) + self.query(2 * node + 2, mid + 1, end, left, right)\n\nclass Solution:\n    def rangeSumWithUpdates(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            if query[0] == 1:  # Range sum query\n                _, left, right = query\n                result.append(seg_tree.query(0, 0, len(nums) - 1, left, right))\n            else:  # Update query\n                _, idx, val = query\n                seg_tree.update(0, 0, len(nums) - 1, idx, val)\n        return result"
        },
        {
            "id": 2,
            "title": "Range Minimum Query with Point Updates",
            "description": "Given an array nums and a list of queries, each query is either an update (set nums[i] to a value) or a range minimum query (find the minimum element from index left to right). Return the results of all range minimum queries after performing all updates.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[1,0,2],[0,1,2],[1,0,2]]                   | [1,1]                | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,5],[1,0,2]]                   | [2,2]                | Equal elements              |\n| 3          | [1]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [1,10]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,0,3],[0,2,0],[1,0,3]]                   | [1,0]                | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,3],[0,0,1],[1,0,3]]                   | [5,1]                | Update first element        |\n| 6          | [1,10,100]            | [[1,0,2],[0,1,0],[1,0,2]]                   | [1,0]                | Large numbers               |\n| 7          | [0,0,0]               | [[1,0,2],[0,2,3],[1,0,2]]                   | [0,0]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,1,4],[0,3,0],[1,1,4]]                   | [2,0]                | Five elements               |\n| 9          | [-1,-2,-3]            | [[1,0,2],[0,0,5],[1,0,2]]                   | [-3,-2]              | Negative numbers            |\n| 10         | [10,20]               | [[1,0,1],[0,0,5],[1,0,1]]                   | [10,5]               | Two elements                |\n| 11         | [1,1,1,1]             | [[1,0,3],[0,1,0],[1,0,3]]                   | [1,0]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,0,3],[0,2,1],[1,0,3]]                   | [2,1]                | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,0,5],[0,4,0],[1,0,5]]                   | [1,0]                | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [100,50]             | Large numbers               |\n| 15         | [1,2,3]               | [[1,0,2],[0,2,0],[1,0,2]]                   | [1,0]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,0,3],[0,1,5],[1,0,3]]                   | [10,5]               | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,0,6],[0,3,0],[1,0,6]]                   | [1,0]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,1],[1,0,4]]                   | [5,1]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,0,4],[0,2,2],[1,0,4]]                   | [1,1]                | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,2],[0,0,0],[1,0,2]]                   | [10,0]               | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,0,7],[0,4,1],[1,0,7]]                   | [1,1]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [100,50]             | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,0,4],[0,4,1],[1,0,4]]                   | [1,1]                | One outlier                 |\n| 24         | [2,4,6]               | [[1,0,2],[0,1,1],[1,0,2]]                   | [2,1]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,0,8],[0,5,0],[1,0,8]]                   | [1,0]                | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,5],[1,0,3]]                   | [10,5]               | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,0,3],[0,3,5],[1,0,3]]                   | [1,1]                | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,4],[0,0,50],[1,0,4]]                  | [100,50]             | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,0,3],[0,2,2],[1,0,3]]                   | [1,1]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,0,4],[0,4,0],[1,0,4]]                   | [10,0]               | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,0,9],[0,5,1],[1,0,9]]                  | [1,1]                | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,0,3],[0,1,5],[1,0,3]]                   | [5,5]                | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,0,5],[0,5,1],[1,0,5]]                   | [1,1]                | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [100,50]             | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,2],[0,0,0],[1,0,2]]                   | [1,0]                | Update to zero              |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,0],[1,0,5]]                   | [10,0]               | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,0,5],[0,2,2],[1,0,5]]                   | [1,1]                | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [100,50]             | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,0,4],[0,4,5],[1,0,4]]                   | [1,1]                | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,0,6],[0,5,0],[1,0,6]]                  | [10,0]               | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[1,0,2],[0,1,2],[1,0,2]]",
                "output": "[1,1]",
                "explanation": "Initial array: [1,3,5]. First query (min 0 to 2): min(1,3,5) = 1. Update nums[1] to 2: [1,2,5]. Second query (min 0 to 2): min(1,2,5) = 1."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [float('inf')] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])\n    \n    def update(self, node, start, end, idx, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(2 * node + 1, start, mid, idx, val)\n        else:\n            self.update(2 * node + 2, mid + 1, end, idx, val)\n        self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return float('inf')\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return min(self.query(2 * node + 1, start, mid, left, right), self.query(2 * node + 2, mid + 1, end, left, right))\n\nclass Solution:\n    def rangeMinWithUpdates(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            if query[0] == 1:  # Range min query\n                _, left, right = query\n                result.append(seg_tree.query(0, 0, len(nums) - 1, left, right))\n            else:  # Update query\n                _, idx, val = query\n                seg_tree.update(0, 0, len(nums) - 1, idx, val)\n        return result"
        },
        {
            "id": 3,
            "title": "Range Add Update with Range Sum Query",
            "description": "Given an array nums (initially all zeros) of size n and a list of queries, each query is either a range add update (add a value to all elements from index left to right) or a range sum query (find the sum of elements from index left to right). Return the results of all range sum queries after performing all updates.\n\n| Test Cases | n   | queries                                      | Expected Output       | Notes                        |\n|------------|-----|----------------------------------------------|-----------------------|------------------------------|\n| 1          | 3   | [[0,0,2,1],[1,0,2],[0,1,2,2],[1,0,2]]       | [3,9]                | Basic test case             |\n| 2          | 3   | [[0,0,2,2],[1,0,2],[0,0,2,3],[1,0,2]]       | [6,15]               | Equal updates               |\n| 3          | 1   | [[0,0,0,5],[1,0,0],[0,0,0,10],[1,0,0]]      | [5,15]               | Single element              |\n| 4          | 4   | [[0,0,3,1],[1,0,3],[0,1,2,2],[1,0,3]]       | [4,8]                | Sequential updates          |\n| 5          | 5   | [[0,0,4,1],[1,0,4],[0,0,4,1],[1,0,4]]       | [5,10]               | Uniform updates             |\n| 6          | 3   | [[0,0,2,10],[1,0,2],[0,1,2,5],[1,0,2]]      | [30,45]              | Large numbers               |\n| 7          | 3   | [[0,0,2,0],[1,0,2],[0,0,2,1],[1,0,2]]       | [0,3]                | Zero update                 |\n| 8          | 5   | [[0,1,4,2],[1,1,4],[0,2,3,3],[1,1,4]]       | [8,14]               | Five elements               |\n| 9          | 3   | [[0,0,2,-1],[1,0,2],[0,1,2,-2],[1,0,2]]     | [-3,-9]              | Negative updates            |\n| 10         | 2   | [[0,0,1,5],[1,0,1],[0,0,1,5],[1,0,1]]       | [10,20]              | Two elements                |\n| 11         | 4   | [[0,0,3,1],[1,0,3],[0,0,3,1],[1,0,3]]       | [4,8]                | All ones                    |\n| 12         | 4   | [[0,0,3,2],[1,0,3],[0,1,2,1],[1,0,3]]       | [8,10]               | Even updates                |\n| 13         | 6   | [[0,0,5,1],[1,0,5],[0,2,4,2],[1,0,5]]       | [6,10]               | Six elements                |\n| 14         | 3   | [[0,0,2,100],[1,0,2],[0,0,2,100],[1,0,2]]   | [300,600]            | Large numbers               |\n| 15         | 3   | [[0,0,2,1],[1,0,2],[0,2,2,0],[1,0,2]]       | [3,2]                | Update to zero              |\n| 16         | 4   | [[0,0,3,10],[1,0,3],[0,1,2,5],[1,0,3]]      | [40,50]              | Four elements               |\n| 17         | 7   | [[0,0,6,1],[1,0,6],[0,3,5,2],[1,0,6]]       | [7,13]               | Seven elements              |\n| 18         | 5   | [[0,0,4,5],[1,0,4],[0,0,4,5],[1,0,4]]       | [25,50]              | All equal                   |\n| 19         | 5   | [[0,0,4,2],[1,0,4],[0,1,3,1],[1,0,4]]       | [10,14]              | Odd updates                 |\n| 20         | 3   | [[0,0,2,10],[1,0,2],[0,0,2,0],[1,0,2]]      | [30,0]               | Reset to zero               |\n| 21         | 8   | [[0,0,7,1],[1,0,7],[0,4,6,2],[1,0,7]]       | [8,14]               | Eight elements              |\n| 22         | 4   | [[0,0,3,100],[1,0,3],[0,1,2,50],[1,0,3]]    | [400,500]            | Equal large numbers         |\n| 23         | 5   | [[0,0,4,1],[1,0,4],[0,4,4,5],[1,0,4]]       | [5,10]               | One outlier                 |\n| 24         | 3   | [[0,0,2,2],[1,0,2],[0,1,1,1],[1,0,2]]       | [6,7]                | Three elements              |\n| 25         | 9   | [[0,0,8,1],[1,0,8],[0,5,7,2],[1,0,8]]       | [9,15]               | Nine elements               |\n| 26         | 4   | [[0,0,3,10],[1,0,3],[0,2,3,5],[1,0,3]]      | [40,50]              | Two groups                  |\n| 27         | 4   | [[0,0,3,5],[1,0,3],[0,3,3,0],[1,0,3]]       | [20,15]              | Decreasing updates          |\n| 28         | 5   | [[0,0,4,100],[1,0,4],[0,0,4,100],[1,0,4]]   | [500,1000]           | Five equal numbers          |\n| 29         | 4   | [[0,0,3,2],[1,0,3],[0,1,2,1],[1,0,3]]       | [8,10]               | Four elements               |\n| 30         | 5   | [[0,0,4,10],[1,0,4],[0,4,4,0],[1,0,4]]      | [50,40]              | Update to zero              |\n| 31         | 10  | [[0,0,9,1],[1,0,9],[0,5,8,2],[1,0,9]]       | [10,16]              | Ten elements                |\n| 32         | 4   | [[0,0,3,5],[1,0,3],[0,1,2,5],[1,0,3]]       | [20,30]              | Increasing updates          |\n| 33         | 6   | [[0,0,5,1],[1,0,5],[0,5,5,5],[1,0,5]]       | [6,11]               | One outlier                 |\n| 34         | 5   | [[0,0,4,100],[1,0,4],[0,0,4,50],[1,0,4]]    | [500,750]            | Large numbers               |\n| 35         | 3   | [[0,0,2,1],[1,0,2],[0,0,2,0],[1,0,2]]       | [3,0]                | Reset to zero               |\n| 36         | 6   | [[0,0,5,10],[1,0,5],[0,3,4,5],[1,0,5]]      | [60,70]              | Six elements                |\n| 37         | 6   | [[0,0,5,2],[1,0,5],[0,1,3,1],[1,0,5]]       | [12,18]              | Six elements                |\n| 38         | 4   | [[0,0,3,10],[1,0,3],[0,2,3,5],[1,0,3]]      | [40,50]              | Two groups                  |\n| 39         | 5   | [[0,0,4,5],[1,0,4],[0,4,4,0],[1,0,4]]       | [25,20]              | Five elements               |\n| 40         | 7   | [[0,0,6,10],[1,0,6],[0,5,6,5],[1,0,6]]      | [70,85]              | Seven large numbers         |",
            "example": {
                "input": "n = 3, queries = [[0,0,2,1],[1,0,2],[0,1,2,2],[1,0,2]]",
                "output": "[3,9]",
                "explanation": "Initial array: [0,0,0]. Add 1 to indices 0-2: [1,1,1]. Sum 0 to 2: 3. Add 2 to indices 1-2: [1,3,3]. Sum 0 to 2: 1+3+3 = 9."
            },
            "answer": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n    \n    def propagate(self, node, start, end):\n        if self.lazy[node] != 0:\n            self.tree[node] += (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n    \n    def update(self, node, start, end, left, right, val):\n        self.propagate(node, start, end)\n        if left > end or right < start:\n            return\n        if left <= start and end <= right:\n            self.lazy[node] += val\n            self.propagate(node, start, end)\n            return\n        mid = (start + end) // 2\n        self.update(2 * node + 1, start, mid, left, right, val)\n        self.update(2 * node + 2, mid + 1, end, left, right, val)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, node, start, end, left, right):\n        self.propagate(node, start, end)\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return self.query(2 * node + 1, start, mid, left, right) + self.query(2 * node + 2, mid + 1, end, left, right)\n\nclass Solution:\n    def rangeAddSum(self, n, queries):\n        seg_tree = SegmentTree(n)\n        result = []\n        for query in queries:\n            if query[0] == 0:  # Range add update\n                _, left, right, val = query\n                seg_tree.update(0, 0, n - 1, left, right, val)\n            else:  # Range sum query\n                _, left, right = query\n                result.append(seg_tree.query(0, 0, n - 1, left, right))\n        return result"
        },
        {
            "id": 4,
            "title": "Count Smaller Elements in Range",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right] and a value k. For each query, count the number of elements in the range [left, right] that are strictly less than k.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[0,2,4],[1,2,6]]                           | [2,2]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2,3],[0,2,2]]                           | [3,0]                | Equal elements              |\n| 3          | [1]                   | [[0,0,5],[0,0,0]]                           | [1,0]                | Single element              |\n| 4          | [1,2,3,4]             | [[0,3,3],[1,3,5]]                           | [2,3]                | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[0,3,6],[0,3,5]]                           | [4,0]                | All equal                   |\n| 6          | [1,10,100]            | [[0,2,50],[0,2,5]]                          | [2,1]                | Large numbers               |\n| 7          | [0,0,0]               | [[0,2,1],[0,2,0]]                           | [3,0]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,4,4],[1,4,3]]                           | [2,1]                | Five elements               |\n| 9          | [-1,-2,-3]            | [[0,2,0],[0,2,-2]]                          | [3,1]                | Negative numbers            |\n| 10         | [10,20]               | [[0,1,15],[0,1,25]]                         | [1,2]                | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3,2],[0,3,1]]                           | [4,0]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3,5],[0,3,3]]                           | [2,1]                | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[0,5,4],[0,5,2]]                           | [3,1]                | Six elements                |\n| 14         | [100,200,300]         | [[0,2,150],[0,2,50]]                        | [1,0]                | Large numbers               |\n| 15         | [1,2,3]               | [[0,2,2],[0,2,1]]                           | [1,0]                | Small range                 |\n| 16         | [10,20,30,40]         | [[0,3,25],[0,3,15]]                         | [2,1]                | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[0,6,5],[0,6,3]]                           | [4,2]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[0,4,6],[0,4,5]]                           | [5,0]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[0,4,6],[0,4,2]]                           | [3,1]                | Odd numbers                 |\n| 20         | [10,20,30]            | [[0,2,15],[0,2,5]]                          | [1,0]                | Three elements              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[0,7,5],[0,7,3]]                           | [4,2]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[0,3,150],[0,3,50]]                        | [4,0]                | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[0,4,5],[0,4,1]]                           | [4,0]                | One outlier                 |\n| 24         | [2,4,6]               | [[0,2,5],[0,2,3]]                           | [2,1]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[0,8,6],[0,8,2]]                           | [5,1]                | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3,15],[0,3,5]]                          | [2,0]                | Two groups                  |\n| 27         | [1,5,10,15]           | [[0,3,10],[0,3,2]]                          | [2,1]                | Decreasing values           |\n| 28         | [100,100,100,100,100] | [[0,4,150],[0,4,50]]                        | [5,0]                | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[0,3,5],[0,3,2]]                           | [2,1]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[0,4,35],[0,4,15]]                         | [3,1]                | Five elements               |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[0,9,7],[0,9,3]]                          | [6,2]                | Ten elements                |\n| 32         | [5,10,15,20]          | [[0,3,15],[0,3,5]]                          | [2,1]                | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[0,5,5],[0,5,1]]                           | [5,0]                | One outlier                 |\n| 34         | [100,200,300,400,500] | [[0,4,350],[0,4,150]]                       | [3,1]                | Large numbers               |\n| 35         | [1,2,3]               | [[0,2,2],[0,2,1]]                           | [1,0]                | Small range                 |\n| 36         | [10,20,30,40,50,60]   | [[0,5,45],[0,5,25]]                         | [4,2]                | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[0,5,8],[0,5,2]]                           | [4,1]                | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[0,3,150],[0,3,50]]                        | [2,0]                | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[0,4,15],[0,4,5]]                          | [3,1]                | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[0,6,55],[0,6,35]]                         | [5,3]                | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[0,2,4],[1,2,6]]",
                "output": "[2,2]",
                "explanation": "First query (count elements < 4 in range 0 to 2): [1,3,5] -> 1,3 are < 4, so count = 2. Second query (count elements < 6 in range 1 to 2): [3,5] -> 3,5 are < 6, so count = 2."
            },
            "answer": "def count_smaller_elements(nums, queries):\\n    results = []\\n    for left, right, k in queries:\\n        count = sum(1 for i in range(left, right+1) if nums[i] < k)\\n        results.append(count)\\n    return results\\n\\nimport sys\\ninput_lines = sys.stdin.read().strip().split(\"\\n\")\\n\\nnums = list(map(int, input_lines[0].split()))\\nqueries = [list(map(int, line.split())) for line in input_lines[1:]]\\n\\nresults = count_smaller_elements(nums, queries)\\nprint(*results)"
        },
        {
            "id": 5,
            "title": "Range XOR Query with Point Updates",
            "description": "Given an array nums and a list of queries, each query is either an update (set nums[i] to a value) or a range XOR query (find the XOR of elements from index left to right). Return the results of all range XOR queries after performing all updates.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[1,0,2],[0,1,2],[1,0,2]]                   | [7,4]                | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,5],[1,0,2]]                   | [2,5]                | Equal elements              |\n| 3          | [1]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [1,10]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,0,3],[0,2,7],[1,0,3]]                   | [4,7]                | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,3],[0,0,1],[1,0,3]]                   | [0,4]                | Update first element        |\n| 6          | [1,10,100]            | [[1,0,2],[0,1,5],[1,0,2]]                   | [111,106]            | Large numbers               |\n| 7          | [0,0,0]               | [[1,0,2],[0,2,3],[1,0,2]]                   | [0,3]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,1,4],[0,3,7],[1,1,4]]                   | [4,2]                | Five elements               |\n| 9          | [1,2,3]               | [[1,0,2],[0,0,5],[1,0,2]]                   | [0,4]                | Small array                 |\n| 10         | [10,20]               | [[1,0,1],[0,0,15],[1,0,1]]                  | [30,5]               | Two elements                |\n| 11         | [1,1,1,1]             | [[1,0,3],[0,1,2],[1,0,3]]                   | [0,3]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,0,3],[0,2,1],[1,0,3]]                   | [12,5]               | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,0,5],[0,4,7],[1,0,5]]                   | [1,6]                | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [400,450]            | Large numbers               |\n| 15         | [1,2,3]               | [[1,0,2],[0,2,0],[1,0,2]]                   | [0,3]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,0,3],[0,1,5],[1,0,3]]                   | [60,45]              | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,0,6],[0,3,8],[1,0,6]]                   | [0,8]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,1],[1,0,4]]                   | [0,4]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,0,4],[0,2,2],[1,0,4]]                   | [14,9]               | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,2],[0,0,0],[1,0,2]]                   | [20,50]              | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,0,7],[0,4,1],[1,0,7]]                   | [0,5]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [0,50]               | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,0,4],[0,4,1],[1,0,4]]                   | [10,1]               | One outlier                 |\n| 24         | [2,4,6]               | [[1,0,2],[0,1,3],[1,0,2]]                   | [0,5]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,0,8],[0,5,10],[1,0,8]]                  | [1,10]               | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,15],[1,0,3]]                  | [20,5]               | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,0,3],[0,3,5],[1,0,3]]                   | [1,4]                | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,4],[0,0,50],[1,0,4]]                  | [0,50]               | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,0,3],[0,2,2],[1,0,3]]                   | [4,1]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,0,4],[0,4,0],[1,0,4]]                   | [0,100]              | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,0,9],[0,5,1],[1,0,9]]                  | [1,0]                | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,0,3],[0,1,5],[1,0,3]]                   | [0,30]               | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,0,5],[0,5,1],[1,0,5]]                   | [0,1]                | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [1100,1050]          | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,2],[0,0,0],[1,0,2]]                   | [0,2]                | Update to zero              |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,0],[1,0,5]]                   | [0,120]              | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,0,5],[0,2,2],[1,0,5]]                   | [1,4]                | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [0,150]              | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,0,4],[0,4,5],[1,0,4]]                   | [1,0]                | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,0,6],[0,5,0],[1,0,6]]                  | [0,150]              | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[1,0,2],[0,1,2],[1,0,2]]",
                "output": "[7,4]",
                "explanation": "Initial array: [1,3,5]. First query (XOR 0 to 2): 1^3^5 = 7. Update nums[1] to 2: [1,2,5]. Second query (XOR 0 to 2): 1^2^5 = 4."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] ^ self.tree[2 * node + 2]\n    \n    def update(self, node, start, end, idx, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(2 * node + 1, start, mid, idx, val)\n        else:\n            self.update(2 * node + 2, mid + 1, end, idx, val)\n        self.tree[node] = self.tree[2 * node + 1] ^ self.tree[2 * node + 2]\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return self.query(2 * node + 1, start, mid, left, right) ^ self.query(2 * node + 2, mid + 1, end, left, right)\n\nclass Solution:\n    def rangeXORWithUpdates(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            if query[0] == 1:  # Range XOR query\n                _, left, right = query\n                result.append(seg_tree.query(0, 0, len(nums) - 1, left, right))\n            else:  # Update query\n                _, idx, val = query\n                seg_tree.update(0, 0, len(nums) - 1, idx, val)\n        return result"
        },
        {
            "id": 6,
            "title": "Range Maximum Query with Point Updates",
            "description": "Given an array nums and a list of queries, each query is either an update (set nums[i] to a value) or a range maximum query (find the maximum element from index left to right). Return the results of all range maximum queries after performing all updates.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[1,0,2],[0,1,2],[1,0,2]]                   | [5,5]                | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,5],[1,0,2]]                   | [2,5]                | Equal elements              |\n| 3          | [1]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [1,10]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,0,3],[0,2,7],[1,0,3]]                   | [4,7]                | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,3],[0,0,1],[1,0,3]]                   | [5,5]                | Update first element        |\n| 6          | [1,10,100]            | [[1,0,2],[0,1,0],[1,0,2]]                   | [100,100]            | Large numbers               |\n| 7          | [0,0,0]               | [[1,0,2],[0,2,3],[1,0,2]]                   | [0,3]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,1,4],[0,3,7],[1,1,4]]                   | [5,7]                | Five elements               |\n| 9          | [-1,-2,-3]            | [[1,0,2],[0,0,5],[1,0,2]]                   | [-1,5]               | Negative numbers            |\n| 10         | [10,20]               | [[1,0,1],[0,0,5],[1,0,1]]                   | [20,20]              | Two elements                |\n| 11         | [1,1,1,1]             | [[1,0,3],[0,1,5],[1,0,3]]                   | [1,5]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,0,3],[0,2,1],[1,0,3]]                   | [8,8]                | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,0,5],[0,4,7],[1,0,5]]                   | [6,7]                | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [300,300]            | Large numbers               |\n| 15         | [1,2,3]               | [[1,0,2],[0,2,0],[1,0,2]]                   | [3,2]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,0,3],[0,1,5],[1,0,3]]                   | [40,40]              | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,0,6],[0,3,8],[1,0,6]]                   | [7,8]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,1],[1,0,4]]                   | [5,5]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,0,4],[0,2,2],[1,0,4]]                   | [9,9]                | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,2],[0,0,0],[1,0,2]]                   | [30,30]              | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,0,7],[0,4,1],[1,0,7]]                   | [8,8]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [100,100]            | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,0,4],[0,4,1],[1,0,4]]                   | [10,1]               | One outlier                 |\n| 24         | [2,4,6]               | [[1,0,2],[0,1,7],[1,0,2]]                   | [6,7]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,0,8],[0,5,10],[1,0,8]]                  | [9,10]               | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,15],[1,0,3]]                  | [20,20]              | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,0,3],[0,3,5],[1,0,3]]                   | [15,15]              | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,4],[0,0,50],[1,0,4]]                  | [100,100]            | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,0,3],[0,2,2],[1,0,3]]                   | [7,7]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,0,4],[0,4,0],[1,0,4]]                   | [50,40]              | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,0,9],[0,5,1],[1,0,9]]                  | [10,10]              | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,0,3],[0,1,5],[1,0,3]]                   | [20,20]              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,0,5],[0,5,1],[1,0,5]]                   | [10,1]               | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [500,400]            | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,2],[0,0,10],[1,0,2]]                   | [3,10]               | Update first element        |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,7],[1,0,5]]                   | [60,60]              | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,0,5],[0,2,12],[1,0,5]]                  | [11,12]              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [200,200]            | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,0,4],[0,4,5],[1,0,4]]                   | [20,15]              | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,0,6],[0,5,80],[1,0,6]]                 | [70,80]              | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[1,0,2],[0,1,2],[1,0,2]]",
                "output": "[5,5]",
                "explanation": "Initial array: [1,3,5]. First query (max 0 to 2): max(1,3,5) = 5. Update nums[1] to 2: [1,2,5]. Second query (max 0 to 2): max(1,2,5) = 5."
            },
            "answer": "def range_max_with_updates(nums, queries):\\n    results = []\\n    for query in queries:\\n        if query[0] == 1:\\n            _, left, right = query\\n            max_val = max(nums[left:right+1])\\n            results.append(max_val)\\n        elif query[0] == 0:\\n            _, index, value = query\\n            nums[index] = value\\n    return results\\n\\nimport sys\\ninput_lines = sys.stdin.read().strip().split('\\n')\\n\\nnums = list(map(int, input_lines[0].split()))\\nqueries = [list(map(int, line.split())) for line in input_lines[1:]]\\n\\nresults = range_max_with_updates(nums, queries)\\nprint(*results)"
        },
        {
            "id": 7,
            "title": "Point Update with Range Maximum Query",
            "description": "Given an array nums and a list of queries, each query is either a point update (set nums[i] to a value) or a range maximum query (find the maximum element from index left to right). Return the results of all range maximum queries after performing all updates.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[1,0,2],[0,1,2],[1,0,2]]                   | [5,5]                | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,5],[1,0,2]]                   | [2,5]                | Equal elements              |\n| 3          | [1]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [1,10]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,0,3],[0,2,7],[1,0,3]]                   | [4,7]                | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,3],[0,0,1],[1,0,3]]                   | [5,5]                | Update first element        |\n| 6          | [1,10,100]            | [[1,0,2],[0,1,0],[1,0,2]]                   | [100,100]            | Large numbers               |\n| 7          | [0,0,0]               | [[1,0,2],[0,2,3],[1,0,2]]                   | [0,3]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,1,4],[0,3,7],[1,1,4]]                   | [5,7]                | Five elements               |\n| 9          | [-1,-2,-3]            | [[1,0,2],[0,0,5],[1,0,2]]                   | [-1,5]               | Negative numbers            |\n| 10         | [10,20]               | [[1,0,1],[0,0,5],[1,0,1]]                   | [20,20]              | Two elements                |\n| 11         | [1,1,1,1]             | [[1,0,3],[0,1,5],[1,0,3]]                   | [1,5]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,0,3],[0,2,1],[1,0,3]]                   | [8,8]                | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,0,5],[0,4,7],[1,0,5]]                   | [6,7]                | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [300,300]            | Large numbers               |\n| 15         | [1,2,3]               | [[1,0,2],[0,2,0],[1,0,2]]                   | [3,2]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,0,3],[0,1,5],[1,0,3]]                   | [40,40]              | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,0,6],[0,3,8],[1,0,6]]                   | [7,8]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,1],[1,0,4]]                   | [5,5]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,0,4],[0,2,2],[1,0,4]]                   | [9,9]                | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,2],[0,0,0],[1,0,2]]                   | [30,30]              | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,0,7],[0,4,1],[1,0,7]]                   | [8,8]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [100,100]            | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,0,4],[0,4,1],[1,0,4]]                   | [10,1]               | One outlier                 |\n| 24         | [2,4,6]               | [[1,0,2],[0,1,7],[1,0,2]]                   | [6,7]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,0,8],[0,5,10],[1,0,8]]                  | [9,10]               | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,15],[1,0,3]]                  | [20,20]              | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,0,3],[0,3,5],[1,0,3]]                   | [15,15]              | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,4],[0,0,50],[1,0,4]]                  | [100,100]            | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,0,3],[0,2,2],[1,0,3]]                   | [7,7]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,0,4],[0,4,0],[1,0,4]]                   | [50,40]              | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,0,9],[0,5,1],[1,0,9]]                  | [10,10]              | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,0,3],[0,1,5],[1,0,3]]                   | [20,20]              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,0,5],[0,5,1],[1,0,5]]                   | [10,1]               | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [500,400]            | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,2],[0,0,10],[1,0,2]]                   | [3,10]               | Update first element        |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,7],[1,0,5]]                   | [60,60]              | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,0,5],[0,2,12],[1,0,5]]                  | [11,12]              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,0,3],[0,1,50],[1,0,3]]                  | [200,200]            | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,0,4],[0,4,5],[1,0,4]]                   | [20,15]              | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,0,6],[0,5,80],[1,0,6]]                 | [70,80]              | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[1,0,2],[0,1,2],[1,0,2]]",
                "output": "[5,5]",
                "explanation": "Initial array: [1,3,5]. First query (max 0 to 2): max(1,3,5) = 5. Update nums[1] to 2: [1,2,5]. Second query (max 0 to 2): max(1,2,5) = 5."
            },
            "answer": "def point_update_range_max_query(nums, queries):\n    results = []\n    for q in queries:\n        if q[0] == 1:\n            _, left, right = q\n            results.append(max(nums[left:right+1]))\n        elif q[0] == 0:\n            _, index, value = q\n            nums[index] = value\n    return results\n\nimport sys\ninput_lines = sys.stdin.read().strip().split('\n')\nnums = list(map(int, input_lines[0].split()))\nqueries = [list(map(int, line.split())) for line in input_lines[1:]]\noutput = point_update_range_max_query(nums, queries)\nprint(*output)"
        },
        {
            "id": 8,
            "title": "Build Segment Tree and Sum Query",
            "description": "Given an array nums and a list of range sum queries (each query specifies a range [left, right]), build a Segment Tree from the array and return the results of all range sum queries.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5]               | [[0,2],[1,2]]                   | [9,8]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2],[1,2]]                   | [6,4]                | Equal elements              |\n| 3          | [1]                   | [[0,0]]                         | [1]                  | Single element              |\n| 4          | [1,2,3,4]             | [[0,3],[1,2]]                   | [10,5]               | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[0,3],[2,3]]                   | [20,10]              | All equal                   |\n| 6          | [1,10,100]            | [[0,2],[1,2]]                   | [111,110]            | Large numbers               |\n| 7          | [0,0,0]               | [[0,2],[1,2]]                   | [0,0]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [15,9]               | Five elements               |\n| 9          | [-1,-2,-3]            | [[0,2],[1,2]]                   | [-6,-5]              | Negative numbers            |\n| 10         | [10,20]               | [[0,1],[1,1]]                   | [30,20]              | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3],[2,3]]                   | [4,2]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3],[1,2]]                   | [20,10]              | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[0,5],[2,4]]                   | [21,12]              | Six elements                |\n| 14         | [100,200,300]         | [[0,2],[1,2]]                   | [600,500]            | Large numbers               |\n| 15         | [1,2,3]               | [[0,2],[0,1]]                   | [6,3]                | Small range                 |\n| 16         | [10,20,30,40]         | [[0,3],[1,2]]                   | [100,50]             | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[0,6],[2,5]]                   | [28,18]              | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[0,4],[3,4]]                   | [25,10]              | All equal                   |\n| 19         | [1,3,5,7,9]           | [[0,4],[1,3]]                   | [25,15]              | Odd numbers                 |\n| 20         | [10,20,30]            | [[0,2],[1,2]]                   | [60,50]              | Three elements              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[0,7],[2,6]]                   | [36,28]              | Eight elements              |\n| 22         | [100,100,100,100]     | [[0,3],[1,2]]                   | [400,200]            | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[0,4],[2,4]]                   | [14,12]              | One outlier                 |\n| 24         | [2,4,6]               | [[0,2],[1,2]]                   | [12,10]              | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[0,8],[3,6]]                   | [45,24]              | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3],[2,3]]                   | [60,40]              | Two groups                  |\n| 27         | [1,5,10,15]           | [[0,3],[1,2]]                   | [31,15]              | Decreasing values           |\n| 28         | [100,100,100,100,100] | [[0,4],[2,4]]                   | [500,300]            | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[0,3],[1,2]]                   | [16,8]               | Four elements               |\n| 30         | [10,20,30,40,50]      | [[0,4],[2,3]]                   | [150,70]             | Five elements               |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[0,9],[4,8]]                  | [55,35]              | Ten elements                |\n| 32         | [5,10,15,20]          | [[0,3],[1,2]]                   | [50,25]              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[0,5],[3,5]]                   | [15,12]              | One outlier                 |\n| 34         | [100,200,300,400,500] | [[0,4],[2,4]]                   | [1500,1200]          | Large numbers               |\n| 35         | [1,2,3]               | [[0,2],[0,1]]                   | [6,3]                | Small range                 |\n| 36         | [10,20,30,40,50,60]   | [[0,5],[2,4]]                   | [210,120]            | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[0,5],[2,4]]                   | [36,21]              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[0,3],[2,3]]                   | [600,400]            | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[0,4],[2,3]]                   | [51,25]              | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[0,6],[3,5]]                  | [280,160]            | Seven large numbers         |",
            "example": {
                "input": "nums = [1,3,5], queries = [[0,2],[1,2]]",
                "output": "[9,8]",
                "explanation": "Build Segment Tree from array [1,3,5]. First query (sum 0 to 2): 1+3+5 = 9. Second query (sum 1 to 2): 3+5 = 8."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        if self.n > 0:\n            self.build(nums, 0, 0, self.n - 1)\n\n    def build(self, nums, node, l, r):\n        if l == r:\n            self.tree[node] = nums[l]\n        else:\n            mid = (l + r) // 2\n            self.build(nums, 2 * node + 1, l, mid)\n            self.build(nums, 2 * node + 2, mid + 1, r)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, node, l, r, ql, qr):\n        if ql > r or qr < l:\n            return 0\n        if ql <= l and r <= qr:\n            return self.tree[node]\n        mid = (l + r) // 2\n        return self.query(2 * node + 1, l, mid, ql, qr) + self.query(2 * node + 2, mid + 1, r, ql, qr)\n\n    def range_sum(self, left, right):\n        if self.n == 0:\n            return 0\n        return self.query(0, 0, self.n - 1, left, right)\n\n\nimport sys\ninput_lines = sys.stdin.read().strip().split('\\n')\n\nif not input_lines or not input_lines[0].strip():\n    print()\n    exit()\n\nnums = list(map(int, input_lines[0].split()))\nqueries = [list(map(int, line.split())) for line in input_lines[1:] if line.strip()]\n\nsegment_tree = SegmentTree(nums)\nresults = [segment_tree.range_sum(l, r) for l, r in queries]\nprint(*results)"
        },
        {
            "id": 9,
            "title": "Range Update with Point Query",
            "description": "Given an array nums (initially all zeros) of size n and a list of queries, each query is either a range update (add a value to all elements from index left to right) or a point query (find the value at index i). Return the results of all point queries after performing all updates.\n\n| Test Cases | n   | queries                                      | Expected Output       | Notes                        |\n|------------|-----|----------------------------------------------|-----------------------|------------------------------|\n| 1          | 3   | [[0,0,2,1],[1,1],[0,1,2,2],[1,1]]           | [1,3]                | Basic test case             |\n| 2          | 3   | [[0,0,2,2],[1,1],[0,0,2,3],[1,1]]           | [2,5]                | Equal updates               |\n| 3          | 1   | [[0,0,0,5],[1,0],[0,0,0,10],[1,0]]          | [5,15]               | Single element              |\n| 4          | 4   | [[0,0,3,1],[1,2],[0,1,2,2],[1,2]]           | [1,3]                | Sequential updates          |\n| 5          | 5   | [[0,0,4,1],[1,3],[0,0,4,1],[1,3]]           | [1,2]                | Uniform updates             |\n| 6          | 3   | [[0,0,2,10],[1,1],[0,1,2,5],[1,1]]          | [10,15]              | Large numbers               |\n| 7          | 3   | [[0,0,2,0],[1,2],[0,0,2,1],[1,2]]           | [0,1]                | Zero update                 |\n| 8          | 5   | [[0,1,4,2],[1,3],[0,2,3,3],[1,3]]           | [2,5]                | Five elements               |\n| 9          | 3   | [[0,0,2,-1],[1,1],[0,1,2,-2],[1,1]]         | [-1,-3]              | Negative updates            |\n| 10         | 2   | [[0,0,1,5],[1,0],[0,0,1,5],[1,0]]           | [5,10]               | Two elements                |\n| 11         | 4   | [[0,0,3,1],[1,2],[0,0,3,1],[1,2]]           | [1,2]                | All ones                    |\n| 12         | 4   | [[0,0,3,2],[1,1],[0,1,2,1],[1,1]]           | [2,3]                | Even updates                |\n| 13         | 6   | [[0,0,5,1],[1,4],[0,2,4,2],[1,4]]           | [1,3]                | Six elements                |\n| 14         | 3   | [[0,0,2,100],[1,1],[0,0,2,100],[1,1]]       | [100,200]            | Large numbers               |\n| 15         | 3   | [[0,0,2,1],[1,2],[0,2,2,0],[1,2]]           | [1,0]                | Update to zero              |\n| 16         | 4   | [[0,0,3,10],[1,2],[0,1,2,5],[1,2]]          | [10,15]              | Four elements               |\n| 17         | 7   | [[0,0,6,1],[1,5],[0,3,5,2],[1,5]]           | [1,3]                | Seven elements              |\n| 18         | 5   | [[0,0,4,5],[1,0],[0,0,4,5],[1,0]]           | [5,10]               | All equal                   |\n| 19         | 5   | [[0,0,4,2],[1,2],[0,1,3,1],[1,2]]           | [2,3]                | Odd updates                 |\n| 20         | 3   | [[0,0,2,10],[1,1],[0,0,2,0],[1,1]]          | [10,0]               | Reset to zero               |\n| 21         | 8   | [[0,0,7,1],[1,6],[0,4,6,2],[1,6]]           | [1,3]                | Eight elements              |\n| 22         | 4   | [[0,0,3,100],[1,2],[0,1,2,50],[1,2]]        | [100,150]            | Equal large numbers         |\n| 23         | 5   | [[0,0,4,1],[1,4],[0,4,4,5],[1,4]]           | [1,6]                | One outlier                 |\n| 24         | 3   | [[0,0,2,2],[1,1],[0,1,1,1],[1,1]]           | [2,3]                | Three elements              |\n| 25         | 9   | [[0,0,8,1],[1,7],[0,5,7,2],[1,7]]           | [1,3]                | Nine elements               |\n| 26         | 4   | [[0,0,3,10],[1,2],[0,2,3,5],[1,2]]          | [10,15]              | Two groups                  |\n| 27         | 4   | [[0,0,3,5],[1,3],[0,3,3,0],[1,3]]           | [5,0]                | Decreasing updates          |\n| 28         | 5   | [[0,0,4,100],[1,0],[0,0,4,100],[1,0]]       | [100,200]            | Five equal numbers          |\n| 29         | 4   | [[0,0,3,2],[1,2],[0,1,2,1],[1,2]]           | [2,3]                | Four elements               |\n| 30         | 5   | [[0,0,4,10],[1,4],[0,4,4,0],[1,4]]          | [10,0]               | Update to zero              |\n| 31         | 10  | [[0,0,9,1],[1,8],[0,5,8,2],[1,8]]           | [1,3]                | Ten elements                |\n| 32         | 4   | [[0,0,3,5],[1,1],[0,1,2,5],[1,1]]           | [5,10]               | Increasing updates          |\n| 33         | 6   | [[0,0,5,1],[1,5],[0,5,5,5],[1,5]]           | [1,6]                | One outlier                 |\n| 34         | 5   | [[0,0,4,100],[1,2],[0,0,4,50],[1,2]]        | [100,150]            | Large numbers               |\n| 35         | 3   | [[0,0,2,1],[1,0],[0,0,2,0],[1,0]]           | [1,0]                | Reset to zero               |\n| 36         | 6   | [[0,0,5,10],[1,3],[0,3,4,5],[1,3]]          | [10,15]              | Six elements                |\n| 37         | 6   | [[0,0,5,2],[1,4],[0,1,3,1],[1,4]]           | [2,3]                | Six elements                |\n| 38         | 4   | [[0,0,3,10],[1,2],[0,2,3,5],[1,2]]          | [10,15]              | Two groups                  |\n| 39         | 5   | [[0,0,4,5],[1,4],[0,4,4,0],[1,4]]           | [5,0]                | Five elements               |\n| 40         | 7   | [[0,0,6,10],[1,5],[0,5,6,5],[1,5]]          | [10,15]              | Seven large numbers         |",
            "example": {
                "input": "n = 3, queries = [[0,0,2,1],[1,1],[0,1,2,2],[1,1]]",
                "output": "[1,3]",
                "explanation": "Initial array: [0,0,0]. Add 1 to indices 0-2: [1,1,1]. Query index 1: 1. Add 2 to indices 1-2: [1,3,3]. Query index 1: 3."
            },
            "answer": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n    \n    def propagate(self, node, start, end):\n        if self.lazy[node] != 0:\n            self.tree[node] += self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n    \n    def update(self, node, start, end, left, right, val):\n        self.propagate(node, start, end)\n        if left > end or right < start:\n            return\n        if left <= start and end <= right:\n            self.lazy[node] += val\n            self.propagate(node, start, end)\n            return\n        mid = (start + end) // 2\n        self.update(2 * node + 1, start, mid, left, right, val)\n        self.update(2 * node + 2, mid + 1, end, left, right, val)\n        self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2])  # Maintain for consistency\n    \n    def query(self, node, start, end, idx):\n        self.propagate(node, start, end)\n        if start == end:\n            return self.tree[node]\n        mid = (start + end) // 2\n        if idx <= mid:\n            return self.query(2 * node + 1, start, mid, idx)\n        return self.query(2 * node + 2, mid + 1, end, idx)\n\nclass Solution:\n    def rangeUpdatePointQuery(self, n, queries):\n        seg_tree = SegmentTree(n)\n        result = []\n        for query in queries:\n            if query[0] == 0:  # Range update\n                _, left, right, val = query\n                seg_tree.update(0, 0, n - 1, left, right, val)\n            else:  # Point query\n                _, idx = query\n                result.append(seg_tree.query(0, 0, n - 1, idx))\n        return result"
        },
        {
            "id": 10,
            "title": "Range GCD Query with Point Updates",
            "description": "Given an array nums and a list of queries, each query is either an update (set nums[i] to a value) or a range GCD query (find the GCD of elements from index left to right). Return the results of all range GCD queries after performing all updates. Note: The GCD is computed on absolute values of the numbers.\n\n| Test Cases | nums                   | queries                                      | Expected Output       | Notes                        |\n|------------|------------------------|----------------------------------------------|-----------------------|------------------------------|\n| 1          | [4,8,12]              | [[1,0,2],[0,1,16],[1,0,2]]                  | [4,4]                | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,2],[0,1,4],[1,0,2]]                   | [2,2]                | Equal elements              |\n| 3          | [5]                   | [[1,0,0],[0,0,10],[1,0,0]]                  | [5,10]               | Single element              |\n| 4          | [3,6,9,12]            | [[1,0,3],[0,2,15],[1,0,3]]                  | [3,3]                | Sequential numbers          |\n| 5          | [10,10,10,10]         | [[1,0,3],[0,0,5],[1,0,3]]                   | [10,5]               | Update first element        |\n| 6          | [12,18,24]            | [[1,0,2],[0,1,9],[1,0,2]]                   | [6,3]                | Large numbers               |\n| 7          | [1,1,1]               | [[1,0,2],[0,2,5],[1,0,2]]                   | [1,1]                | Ones                        |\n| 8          | [2,4,6,8,10]          | [[1,1,4],[0,3,16],[1,1,4]]                  | [2,2]                | Five elements               |\n| 9          | [-4,-8,-12]           | [[1,0,2],[0,0,16],[1,0,2]]                  | [4,4]                | Negative numbers            |\n| 10         | [15,30]               | [[1,0,1],[0,0,45],[1,0,1]]                  | [15,15]              | Two elements                |\n| 11         | [7,7,7,7]             | [[1,0,3],[0,1,14],[1,0,3]]                  | [7,7]                | All sevens                  |\n| 12         | [4,8,16,32]           | [[1,0,3],[0,2,24],[1,0,3]]                  | [4,4]                | Powers of 2                 |\n| 13         | [5,10,15,20,25,30]    | [[1,0,5],[0,4,40],[1,0,5]]                  | [5,5]                | Six elements                |\n| 14         | [100,200,300]         | [[1,0,2],[0,0,50],[1,0,2]]                  | [100,50]             | Large numbers               |\n| 15         | [6,12,18]             | [[1,0,2],[0,2,9],[1,0,2]]                   | [6,3]                | Update last element         |\n| 16         | [8,16,24,32]          | [[1,0,3],[0,1,4],[1,0,3]]                   | [8,4]                | Four elements               |\n| 17         | [3,6,9,12,15,18,21]   | [[1,0,6],[0,3,24],[1,0,6]]                  | [3,3]                | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,4],[0,0,10],[1,0,4]]                  | [5,5]                | All equal                   |\n| 19         | [2,4,6,8,10]          | [[1,0,4],[0,2,12],[1,0,4]]                  | [2,2]                | Even numbers                |\n| 20         | [9,18,27]             | [[1,0,2],[0,0,3],[1,0,2]]                   | [9,3]                | Three elements              |\n| 21         | [4,8,12,16,20,24,28,32] | [[1,0,7],[0,4,40],[1,0,7]]               | [4,4]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,0,3],[0,1,200],[1,0,3]]                 | [100,100]            | Equal large numbers         |\n| 23         | [2,2,2,2,16]          | [[1,0,4],[0,4,8],[1,0,4]]                   | [2,2]                | One outlier                 |\n| 24         | [6,12,18]             | [[1,0,2],[0,1,24],[1,0,2]]                  | [6,6]                | Three elements              |\n| 25         | [3,6,9,12,15,18,21,24,27,30] | [[1,0,9],[0,5,36],[1,0,9]]          | [3,3]                | Ten elements                |\n| 26         | [10,10,20,20]         | [[1,0,3],[0,2,40],[1,0,3]]                  | [10,10]              | Two groups                  |\n| 27         | [5,10,15,20]          | [[1,0,3],[0,3,25],[1,0,3]]                   | [5,5]                | Four elements               |\n| 28         | [12,24,36,48,60]      | [[1,0,4],[0,0,6],[1,0,4]]                   | [12,6]               | Five equal numbers          |\n| 29         | [7,14,21,28]          | [[1,0,3],[0,2,35],[1,0,3]]                  | [7,7]                | Four elements               |\n| 30         | [8,16,32,64,128]      | [[1,0,4],[0,4,256],[1,0,4]]                 | [8,8]                | Powers of 2                 |\n| 31         | [3,6,9,12,15,18,21,24,27,30,33] | [[1,0,10],[0,5,45],[1,0,10]]     | [3,3]                | Eleven elements             |\n| 32         | [4,8,12,16]           | [[1,0,3],[0,1,20],[1,0,3]]                  | [4,4]                | Four elements               |\n| 33         | [2,2,2,2,2,10]        | [[1,0,5],[0,5,20],[1,0,5]]                  | [2,2]                | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,4],[0,0,50],[1,0,4]]                  | [100,50]             | Large numbers               |\n| 35         | [6,12,18]             | [[1,0,2],[0,0,24],[1,0,2]]                  | [6,6]                | Update first element        |\n| 36         | [10,20,30,40,50,60]   | [[1,0,5],[0,3,80],[1,0,5]]                  | [10,10]              | Six elements                |\n| 37         | [5,10,15,20,25,30]    | [[1,0,5],[0,2,45],[1,0,5]]                  | [5,5]                | Six elements                |\n| 38         | [12,12,24,24]         | [[1,0,3],[0,1,36],[1,0,3]]                  | [12,12]              | Two groups                  |\n| 39         | [9,18,27,36,45]       | [[1,0,4],[0,4,90],[1,0,4]]                  | [9,9]                | Five elements               |\n| 40         | [4,8,16,32,64,128,256] | [[1,0,6],[0,5,512],[1,0,6]]                | [4,4]                | Seven large numbers         |",
            "example": {
                "input": "nums = [4,8,12], queries = [[1,0,2],[0,1,16],[1,0,2]]",
                "output": "[4,4]",
                "explanation": "Initial array: [4,8,12]. First query (GCD 0 to 2): GCD(4,8,12) = 4. Update nums[1] to 16: [4,16,12]. Second query (GCD 0 to 2): GCD(4,16,12) = 4."
            },
            "answer": "from math import gcd\nimport sys\ninput = sys.stdin.read\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n\n    def build(self, nums, node, l, r):\n        if l == r:\n            self.tree[node] = abs(nums[l])\n        else:\n            mid = (l + r) // 2\n            self.build(nums, 2 * node + 1, l, mid)\n            self.build(nums, 2 * node + 2, mid + 1, r)\n            self.tree[node] = gcd(self.tree[2 * node + 1], self.tree[2 * node + 2])\n\n    def update(self, index, value, node, l, r):\n        if l == r:\n            self.tree[node] = abs(value)\n        else:\n            mid = (l + r) // 2\n            if index <= mid:\n                self.update(index, value, 2 * node + 1, l, mid)\n            else:\n                self.update(index, value, 2 * node + 2, mid + 1, r)\n            self.tree[node] = gcd(self.tree[2 * node + 1], self.tree[2 * node + 2])\n\n    def query(self, ql, qr, node, l, r):\n        if ql > r or qr < l:\n            return 0\n        if ql <= l and r <= qr:\n            return self.tree[node]\n        mid = (l + r) // 2\n        left_gcd = self.query(ql, qr, 2 * node + 1, l, mid)\n        right_gcd = self.query(ql, qr, 2 * node + 2, mid + 1, r)\n        return gcd(left_gcd, right_gcd)\n\nlines = input().strip().split(\"\\n\")\nnums = list(map(int, lines[0].split()))\nqueries = [list(map(int, line.split())) for line in lines[1:]]\n\nseg = SegmentTree(nums)\nresults = []\n\nfor q in queries:\n    if q[0] == 0:\n        _, idx, val = q\n        seg.update(idx, val, 0, 0, seg.n - 1)\n    elif q[0] == 1:\n        _, l, r = q\n        results.append(seg.query(l, r, 0, 0, seg.n - 1))\n\nprint(*results)"
        },
        {
            "id": 11,
            "title": "Count Even Numbers in a Range",
            "description": "Given an array nums and a list of range queries, each query specifies a range [left, right]. For each query, count the number of even numbers in the range [left, right].\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [2,2]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2],[1,2]]                   | [3,2]                | All even                    |\n| 3          | [1]                   | [[0,0]]                         | [0]                  | Single odd element          |\n| 4          | [2,4,6,8]             | [[0,3],[1,2]]                   | [4,2]                | All even numbers            |\n| 5          | [1,3,5,7]             | [[0,3],[2,3]]                   | [0,0]                | All odd numbers             |\n| 6          | [10,15,20,25,30]      | [[0,4],[1,3]]                   | [3,1]                | Mixed numbers               |\n| 7          | [0,0,0]               | [[0,2],[1,2]]                   | [3,2]                | Zeros (even)                |\n| 8          | [1,2,3,4,5,6,7]       | [[0,6],[2,5]]                   | [3,2]                | Seven elements              |\n| 9          | [-2,-4,-6]            | [[0,2],[1,2]]                   | [3,2]                | Negative even numbers       |\n| 10         | [10,11]               | [[0,1],[1,1]]                   | [1,0]                | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3],[2,3]]                   | [0,0]                | All ones (odd)              |\n| 12         | [2,4,6,8,10]          | [[0,4],[1,3]]                   | [5,3]                | Five even numbers           |\n| 13         | [1,2,3,4,5,6,7,8]     | [[0,7],[2,6]]                   | [4,3]                | Eight elements              |\n| 14         | [100,101,102,103,104] | [[0,4],[1,3]]                   | [3,1]                | Large numbers               |\n| 15         | [1,2,3]               | [[0,2],[0,1]]                   | [1,1]                | Small range                 |\n| 16         | [2,4,6,8]             | [[0,3],[1,2]]                   | [4,2]                | Four even numbers           |\n| 17         | [1,3,5,7,9,11,13]     | [[0,6],[2,5]]                   | [0,0]                | Seven odd numbers           |\n| 18         | [10,10,10,10,10]      | [[0,4],[3,4]]                   | [5,2]                | All equal (even)            |\n| 19         | [2,3,4,5,6]           | [[0,4],[1,3]]                   | [3,2]                | Mixed numbers               |\n| 20         | [1,2,3,4,5,6,7,8,9]   | [[0,8],[2,6]]                   | [4,3]                | Nine elements               |\n| 21         | [10,11,12,13,14,15]   | [[0,5],[2,4]]                   | [3,2]                | Six elements                |\n| 22         | [100,100,100,100]     | [[0,3],[1,2]]                   | [4,2]                | Equal large even numbers    |\n| 23         | [1,1,1,1,2]           | [[0,4],[2,4]]                   | [1,1]                | One even outlier            |\n| 24         | [2,3,4]               | [[0,2],[1,2]]                   | [2,1]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9,10] | [[0,9],[4,8]]                  | [5,3]                | Ten elements                |\n| 26         | [10,10,11,11]         | [[0,3],[2,3]]                   | [2,0]                | Two groups                  |\n| 27         | [1,3,5,7,9]           | [[0,4],[1,3]]                   | [0,0]                | Five odd numbers            |\n| 28         | [2,4,6,8,10,12,14]    | [[0,6],[2,5]]                   | [7,4]                | Seven even numbers          |\n| 29         | [1,2,3,4]             | [[0,3],[1,2]]                   | [2,1]                | Four elements               |\n| 30         | [10,11,12,13,14]      | [[0,4],[2,3]]                   | [3,1]                | Five elements               |\n| 31         | [1,3,5,7,9,11,13,15,17,19] | [[0,9],[4,8]]              | [0,0]                | Ten odd elements            |\n| 32         | [2,4,6,8]             | [[0,3],[1,2]]                   | [4,2]                | Four even numbers           |\n| 33         | [1,1,1,1,1,2]         | [[0,5],[3,5]]                   | [1,1]                | One even outlier            |\n| 34         | [100,101,102,103,104,105,106] | [[0,6],[2,5]]           | [4,2]                | Large numbers               |\n| 35         | [1,2,3]               | [[0,2],[0,1]]                   | [1,1]                | Small range                 |\n| 36         | [10,11,12,13,14,15,16] | [[0,6],[2,5]]                  | [4,2]                | Seven elements              |\n| 37         | [2,3,4,5,6,7,8]       | [[0,6],[2,5]]                   | [4,3]                | Mixed numbers               |\n| 38         | [10,10,20,20]         | [[0,3],[2,3]]                   | [4,2]                | Two groups                  |\n| 39         | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [2,2]                | Five elements               |\n| 40         | [2,4,6,8,10,12,14,16,18,20] | [[0,9],[4,8]]            | [10,5]               | Ten even elements           |",
            "example": {
                "input": "nums = [1,2,3,4,5], queries = [[0,4],[1,3]]",
                "output": "[2,2]",
                "explanation": "Array: [1,2,3,4,5]. First query (count even in 0 to 4): [1,2,3,4,5] -> 2,4 are even, so count = 2. Second query (count even in 1 to 3): [2,3,4] -> 2,4 are even, so count = 2."
            },
            "answer": "nums = list(map(int, input().split()))\nqueries = []\n\ntry:\n    while True:\n        q = list(map(int, input().split()))\n        if len(q) == 2:\n            queries.append(q)\nexcept EOFError:\n    pass\n\ndef count_even_numbers(nums, queries):\n    n = len(nums)\n    even_prefix = [0] * (n + 1)\n    for i in range(n):\n        even_prefix[i + 1] = even_prefix[i] + (1 if nums[i] % 2 == 0 else 0)\n    result = []\n    for l, r in queries:\n        result.append(even_prefix[r + 1] - even_prefix[l])\n    return result\n\nprint(*count_even_numbers(nums, queries))"
        },
        {
            "id": 12,
            "title": "Range Product Query with Modulo",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right] and a modulo value m. For each query, compute the product of elements in the range [left, right] modulo m.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [2,3,4]               | [[0,2,100],[1,2,7]]             | [24,5]               | Basic test case             |\n| 2          | [1,1,1]               | [[0,2,10],[1,2,5]]              | [1,1]                | All ones                    |\n| 3          | [5]                   | [[0,0,7]]                       | [5]                  | Single element              |\n| 4          | [2,3,4,5]             | [[0,3,100],[1,2,10]]            | [120,2]              | Sequential numbers          |\n| 5          | [2,2,2,2]             | [[0,3,10],[2,3,5]]              | [16,4]               | All equal                   |\n| 6          | [10,20,30]            | [[0,2,1000],[1,2,100]]          | [6000,600]           | Large numbers               |\n| 7          | [1,2,3]               | [[0,2,5],[1,2,3]]               | [2,0]                | Small modulo                |\n| 8          | [2,3,4,5,6]           | [[0,4,100],[1,3,10]]            | [720,6]              | Five elements               |\n| 9          | [1,2,3,4,5,6,7]       | [[0,6,1000],[2,5,100]]          | [5040,240]           | Seven elements              |\n| 10         | [10,20]               | [[0,1,50],[1,1,30]]             | [0,20]               | Two elements                |\n| 11         | [3,3,3,3]             | [[0,3,20],[2,3,5]]              | [1,1]                | All threes                  |\n| 12         | [2,4,6,8]             | [[0,3,100],[1,2,10]]            | [384,8]              | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[0,5,1000],[2,4,100]]          | [720,60]             | Six elements                |\n| 14         | [100,200,300]         | [[0,2,10000],[1,2,1000]]        | [6000000,60000]      | Large numbers               |\n| 15         | [2,3,4]               | [[0,2,10],[0,1,5]]              | [4,1]                | Small range                 |\n| 16         | [5,6,7,8]             | [[0,3,100],[1,2,10]]            | [1680,2]             | Four elements               |\n| 17         | [1,2,3,4,5,6,7,8]     | [[0,7,10000],[2,6,1000]]        | [40320,6720]         | Eight elements              |\n| 18         | [10,10,10,10,10]      | [[0,4,100],[3,4,50]]            | [0,0]                | All equal                   |\n| 19         | [2,3,5,7,11]          | [[0,4,1000],[1,3,100]]          | [2310,105]           | Prime numbers               |\n| 20         | [1,2,3]               | [[0,2,7],[1,2,5]]               | [6,1]                | Three elements              |\n| 21         | [2,4,6,8,10,12,14,16] | [[0,7,10000],[2,6,1000]]        | [645120,322560]      | Eight even numbers          |\n| 22         | [100,100,100,100]     | [[0,3,1000],[1,2,500]]          | [0,0]                | Equal large numbers         |\n| 23         | [1,1,1,1,5]           | [[0,4,10],[2,4,7]]              | [5,5]                | One outlier                 |\n| 24         | [2,3,4]               | [[0,2,20],[1,2,10]]             | [4,2]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[0,8,10000],[3,6,1000]]        | [362880,1920]        | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3,100],[2,3,50]]            | [0,0]                | Two groups                  |\n| 27         | [5,10,15,20]          | [[0,3,1000],[1,2,100]]          | [15000,500]          | Four elements               |\n| 28         | [2,3,4,5,6,7,8,9,10]  | [[0,8,100000],[4,7,10000]]      | [3628800,10080]      | Nine elements               |\n| 29         | [1,2,3,4]             | [[0,3,50],[1,2,10]]             | [24,6]               | Four elements               |\n| 30         | [10,20,30,40,50]      | [[0,4,10000],[2,3,1000]]        | [6000000,6000]       | Five elements               |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[0,9,100000],[4,8,10000]]     | [3628800,5040]       | Ten elements                |\n| 32         | [5,10,15,20]          | [[0,3,1000],[1,2,100]]          | [15000,500]          | Four elements               |\n| 33         | [1,1,1,1,5]           | [[0,4,7],[2,4,10]]              | [5,5]                | One outlier                 |\n| 34         | [100,200,300,400,500] | [[0,4,1000000],[2,4,10000]]     | [6000000000,600000]  | Large numbers               |\n| 35         | [2,3,4]               | [[0,2,10],[0,1,5]]              | [4,1]                | Small range                 |\n| 36         | [5,6,7,8,9,10,11,12]  | [[0,7,100000],[2,6,10000]]      | [6652800,110880]     | Eight elements              |\n| 37         | [2,3,5,7,11,13,17,19] | [[0,7,10000],[2,5,1000]]        | [9699690,5005]       | Prime numbers               |\n| 38         | [10,10,20,20]         | [[0,3,100],[2,3,50]]            | [0,0]                | Two groups                  |\n| 39         | [1,2,3,4,5]           | [[0,4,100],[1,3,10]]            | [120,4]              | Five elements               |\n| 40         | [2,4,6,8,10,12,14,16,18,20] | [[0,9,1000000],[4,8,10000]] | [6451200,80640]      | Ten even elements           |",
            "example": {
                "input": "nums = [2,3,4], queries = [[0,2,100],[1,2,7]]",
                "output": "[24,5]",
                "explanation": "Array: [2,3,4]. First query (product 0 to 2 mod 100): 2*3*4 = 24 mod 100 = 24. Second query (product 1 to 2 mod 7): 3*4 = 12 mod 7 = 5."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [1] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = (self.tree[2 * node + 1] * self.tree[2 * node + 2])\n    \n    def query(self, node, start, end, left, right, m):\n        if left > end or right < start:\n            return 1  # Neutral value for multiplication\n        if left <= start and end <= right:\n            return self.tree[node] % m\n        mid = (start + end) // 2\n        left_prod = self.query(2 * node + 1, start, mid, left, right, m)\n        right_prod = self.query(2 * node + 2, mid + 1, end, left, right, m)\n        return (left_prod * right_prod) % m\n\nclass Solution:\n    def rangeProductWithModulo(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for left, right, m in queries:\n            result.append(seg_tree.query(0, 0, len(nums) - 1, left, right, m))\n        return result"
        },
        {
            "id": 13,
            "title": "Find First Index Greater Than or Equal to K in a Range",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right] and a value k. For each query, find the first index in the range [left, right] where nums[index] >= k. If no such index exists, return -1.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [1,3,5,7,9]           | [[0,4,4],[1,3,8]]               | [2,3]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2,3],[1,2,2]]               | [-1,1]               | All equal                   |\n| 3          | [5]                   | [[0,0,4],[0,0,6]]               | [0,-1]               | Single element              |\n| 4          | [1,2,3,4,5]           | [[0,4,3],[1,3,5]]               | [2,3]                | Sequential numbers          |\n| 5          | [10,10,10,10]         | [[0,3,5],[0,3,15]]              | [0,-1]               | All equal                   |\n| 6          | [1,10,100,1000]       | [[0,3,50],[1,2,5]]              | [2,1]                | Large numbers               |\n| 7          | [0,0,0]               | [[0,2,0],[1,2,1]]               | [0,-1]               | Zeros                       |\n| 8          | [2,4,6,8,10,12,14]    | [[0,6,7],[1,5,5]]               | [3,2]                | Seven elements              |\n| 9          | [-1,-2,-3,-4]         | [[0,3,-2],[1,3,-5]]             | [0,0]                | Negative numbers            |\n| 10         | [10,20]               | [[0,1,15],[0,1,5]]              | [1,0]                | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3,2],[1,3,1]]               | [-1,1]               | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3,5],[1,2,3]]               | [2,1]                | Even numbers                |\n| 13         | [1,2,3,4,5,6,7,8]     | [[0,7,6],[2,6,4]]               | [5,2]                | Eight elements              |\n| 14         | [100,200,300,400,500] | [[0,4,250],[1,3,150]]           | [2,1]                | Large numbers               |\n| 15         | [1,2,3]               | [[0,2,2],[0,2,4]]               | [1,-1]               | Small range                 |\n| 16         | [5,10,15,20]          | [[0,3,12],[1,2,5]]              | [2,1]                | Four elements               |\n| 17         | [1,3,5,7,9,11,13,15,17] | [[0,8,10],[2,6,6]]           | [5,3]                | Nine elements               |\n| 18         | [10,10,10,10,10]      | [[0,4,5],[0,4,15]]              | [0,-1]               | All equal                   |\n| 19         | [2,4,6,8,10]          | [[0,4,7],[1,3,5]]               | [3,2]                | Even numbers                |\n| 20         | [1,2,3,4,5,6,7]       | [[0,6,5],[2,5,3]]               | [4,2]                | Seven elements              |\n| 21         | [1,3,5,7,9,11,13,15]  | [[0,7,10],[2,6,8]]              | [5,4]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[0,3,50],[0,3,150]]            | [0,-1]               | Equal large numbers         |\n| 23         | [1,1,1,1,5]           | [[0,4,3],[2,4,5]]               | [4,4]                | One outlier                 |\n| 24         | [2,3,4]               | [[0,2,3],[1,2,4]]               | [1,2]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9,10] | [[0,9,7],[4,8,5]]              | [6,4]                | Ten elements                |\n| 26         | [10,10,20,20]         | [[0,3,15],[1,2,5]]              | [2,1]                | Two groups                  |\n| 27         | [5,10,15,20]          | [[0,3,12],[1,2,10]]             | [2,1]                | Four elements               |\n| 28         | [2,4,6,8,10,12,14,16,18,20] | [[0,9,15],[4,8,10]]       | [6,4]                | Ten even elements           |\n| 29         | [1,3,5,7]             | [[0,3,5],[1,2,3]]               | [2,1]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[0,4,35],[2,3,25]]             | [3,2]                | Five elements               |\n| 31         | [1,3,5,7,9,11,13,15,17,19,21] | [[0,10,15],[4,8,10]]    | [7,4]                | Eleven elements             |\n| 32         | [5,10,15,20]          | [[0,3,12],[1,2,5]]              | [2,1]                | Four elements               |\n| 33         | [1,1,1,1,5]           | [[0,4,3],[2,4,5]]               | [4,4]                | One outlier                 |\n| 34         | [100,200,300,400,500,600,700] | [[0,6,350],[2,5,250]]   | [3,2]                | Large numbers               |\n| 35         | [1,2,3]               | [[0,2,2],[0,2,4]]               | [1,-1]               | Small range                 |\n| 36         | [5,10,15,20,25,30,35] | [[0,6,22],[2,5,15]]             | [4,2]                | Seven elements              |\n| 37         | [2,4,6,8,10,12,14]    | [[0,6,9],[2,5,7]]               | [4,3]                | Even numbers                |\n| 38         | [10,10,20,20]         | [[0,3,15],[1,2,5]]              | [2,1]                | Two groups                  |\n| 39         | [1,3,5,7,9]           | [[0,4,6],[1,3,4]]               | [2,1]                | Five elements               |\n| 40         | [1,2,3,4,5,6,7,8,9,10,11,12] | [[0,11,8],[4,9,5]]      | [7,4]                | Twelve elements             |",
            "example": {
                "input": "nums = [1,3,5,7,9], queries = [[0,4,4],[1,3,8]]",
                "output": "[2,3]",
                "explanation": "Array: [1,3,5,7,9]. First query (first index in 0 to 4 where value >= 4): 5 at index 2 is the first value >= 4, so return 2. Second query (first index in 1 to 3 where value >= 8): 7 at index 3 is the first value >= 8, so return 3."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [[] for _ in range(4 * self.n)]\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = [(nums[start], start)]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = sorted(self.tree[2 * node + 1] + self.tree[2 * node + 2], key=lambda x: (x[0], x[1]))\n    \n    def query(self, node, start, end, left, right, k):\n        if left > end or right < start:\n            return -1\n        if left <= start and end <= right:\n            # Binary search for the first value >= k\n            low, high = 0, len(self.tree[node]) - 1\n            result = -1\n            while low <= high:\n                mid = (low + high) // 2\n                if self.tree[node][mid][0] >= k:\n                    result = self.tree[node][mid][1]\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            return result if result >= left and result <= right else -1\n        mid = (start + end) // 2\n        left_result = self.query(2 * node + 1, start, mid, left, right, k)\n        if left_result != -1:\n            return left_result\n        return self.query(2 * node + 2, mid + 1, end, left, right, k)\n\nclass Solution:\n    def findFirstIndexGreaterEqualK(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for left, right, k in queries:\n            result.append(seg_tree.query(0, 0, len(nums) - 1, left, right, k))\n        return result"
        },
        {
            "id": 14,
            "title": "Kth Order Statistic in a Subarray",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right] and a value k. For each query, find the k-th smallest element in the subarray nums[left:right+1] (1-based indexing for k). If k is larger than the range size, return -1.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [3,1,4,2,5]           | [[0,4,2],[1,3,1]]               | [2,1]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2,1],[1,2,3]]               | [2,-1]               | All equal                   |\n| 3          | [5]                   | [[0,0,1],[0,0,2]]               | [5,-1]               | Single element              |\n| 4          | [1,2,3,4,5]           | [[0,4,3],[1,3,2]]               | [3,2]                | Sequential numbers          |\n| 5          | [10,10,10,10]         | [[0,3,2],[0,3,5]]               | [10,-1]              | All equal                   |\n| 6          | [1,10,100,1000]       | [[0,3,2],[1,2,1]]               | [10,10]              | Large numbers               |\n| 7          | [0,0,0]               | [[0,2,1],[1,2,2]]               | [0,0]                | Zeros                       |\n| 8          | [2,4,6,8,10,12,14]    | [[0,6,4],[1,5,3]]               | [8,6]                | Seven elements              |\n| 9          | [-1,-2,-3,-4]         | [[0,3,1],[1,3,2]]               | [-4,-3]              | Negative numbers            |\n| 10         | [10,20]               | [[0,1,1],[0,1,2]]               | [10,20]              | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3,2],[1,3,3]]               | [1,1]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3,3],[1,2,1]]               | [6,4]                | Even numbers                |\n| 13         | [1,2,3,4,5,6,7,8]     | [[0,7,5],[2,6,3]]               | [5,5]                | Eight elements              |\n| 14         | [100,200,300,400,500] | [[0,4,3],[1,3,2]]               | [300,200]            | Large numbers               |\n| 15         | [1,2,3]               | [[0,2,2],[0,2,4]]               | [2,-1]               | Small range                 |\n| 16         | [5,10,15,20]          | [[0,3,2],[1,2,1]]               | [10,10]              | Four elements               |\n| 17         | [1,3,5,7,9,11,13,15,17] | [[0,8,5],[2,6,3]]           | [9,7]                | Nine elements               |\n| 18         | [10,10,10,10,10]      | [[0,4,3],[0,4,6]]               | [10,-1]              | All equal                   |\n| 19         | [2,4,6,8,10]          | [[0,4,3],[1,3,2]]               | [6,6]                | Even numbers                |\n| 20         | [1,2,3,4,5,6,7]       | [[0,6,4],[2,5,2]]               | [4,3]                | Seven elements              |\n| 21         | [1,3,5,7,9,11,13,15]  | [[0,7,4],[2,6,3]]               | [7,7]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[0,3,2],[0,3,5]]               | [100,-1]             | Equal large numbers         |\n| 23         | [1,1,1,1,5]           | [[0,4,3],[2,4,2]]               | [1,1]                | One outlier                 |\n| 24         | [2,3,4]               | [[0,2,2],[1,2,1]]               | [3,3]                | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9,10] | [[0,9,5],[4,8,3]]              | [5,7]                | Ten elements                |\n| 26         | [10,10,20,20]         | [[0,3,2],[1,2,1]]               | [10,10]              | Two groups                  |\n| 27         | [5,10,15,20]          | [[0,3,2],[1,2,2]]               | [10,15]              | Four elements               |\n| 28         | [2,4,6,8,10,12,14,16,18,20] | [[0,9,5],[4,8,3]]       | [10,14]              | Ten even elements           |\n| 29         | [1,3,5,7]             | [[0,3,2],[1,2,1]]               | [3,3]                | Four elements               |\n| 30         | [10,20,30,40,50]      | [[0,4,3],[2,3,2]]               | [30,40]              | Five elements               |\n| 31         | [1,3,5,7,9,11,13,15,17,19,21] | [[0,10,6],[4,8,3]]    | [11,13]              | Eleven elements             |\n| 32         | [5,10,15,20]          | [[0,3,2],[1,2,1]]               | [10,10]              | Four elements               |\n| 33         | [1,1,1,1,5]           | [[0,4,3],[2,4,2]]               | [1,1]                | One outlier                 |\n| 34         | [100,200,300,400,500,600,700] | [[0,6,4],[2,5,3]]   | [400,400]            | Large numbers               |\n| 35         | [1,2,3]               | [[0,2,2],[0,2,4]]               | [2,-1]               | Small range                 |\n| 36         | [5,10,15,20,25,30,35] | [[0,6,4],[2,5,2]]               | [20,15]              | Seven elements              |\n| 37         | [2,4,6,8,10,12,14]    | [[0,6,4],[2,5,3]]               | [8,8]                | Even numbers                |\n| 38         | [10,10,20,20]         | [[0,3,2],[1,2,1]]               | [10,10]              | Two groups                  |\n| 39         | [1,3,5,7,9]           | [[0,4,3],[1,3,2]]               | [5,5]                | Five elements               |\n| 40         | [1,2,3,4,5,6,7,8,9,10,11,12] | [[0,11,6],[4,9,3]]      | [6,7]                | Twelve elements             |",
            "example": {
                "input": "nums = [3,1,4,2,5], queries = [[0,4,2],[1,3,1]]",
                "output": "[2,1]",
                "explanation": "Array: [3,1,4,2,5]. First query (2nd smallest in 0 to 4): Sorted subarray [1,2,3,4,5], 2nd element is 2. Second query (1st smallest in 1 to 3): Sorted subarray [1,2,4], 1st element is 1."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [[] for _ in range(4 * self.n)]\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = [nums[start]]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = sorted(self.tree[2 * node + 1] + self.tree[2 * node + 2])\n    \n    def query(self, node, start, end, left, right, k):\n        if left > end or right < start:\n            return []\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_vals = self.query(2 * node + 1, start, mid, left, right, k)\n        right_vals = self.query(2 * node + 2, mid + 1, end, left, right, k)\n        return sorted(left_vals + right_vals)\n\nclass Solution:\n    def kthOrderStatistic(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for left, right, k in queries:\n            values = seg_tree.query(0, 0, len(nums) - 1, left, right, k)\n            if k > len(values):\n                result.append(-1)\n            else:\n                result.append(values[k - 1])\n        return result"
        },
        {
            "id": 15,
            "title": "Yet Another Array Restoration",
            "description": "Given an array of size n where some elements are missing (denoted by -1), and a list of queries, each query specifies a range [left, right]. Restore the array such that for each position with -1, it is filled with the minimum positive integer not yet used in the array, and then compute the sum of elements in the range [left, right] for each query. The array restoration is done once before processing queries.\n\n| Test Cases | n   | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|-----|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | 5   | [-1,2,-1,4,-1]        | [[0,4],[1,3]]                   | [10,6]               | Basic test case             |\n| 2          | 3   | [1,2,3]               | [[0,2],[1,2]]                   | [6,5]                | No missing values           |\n| 3          | 1   | [-1]                  | [[0,0]]                         | [1]                  | Single element              |\n| 4          | 4   | [-1,-1,3,-1]          | [[0,3],[1,2]]                   | [9,3]                | Multiple missing            |\n| 5          | 5   | [1,1,1,1,1]           | [[0,4],[2,3]]                   | [5,2]                | All equal                   |\n| 6          | 3   | [-1,10,-1]            | [[0,2],[1,2]]                   | [12,11]              | Large numbers               |\n| 7          | 3   | [-1,-1,-1]            | [[0,2],[1,2]]                   | [6,5]                | All missing                 |\n| 8          | 7   | [1,-1,3,-1,5,-1,7]    | [[0,6],[2,5]]                   | [19,12]              | Seven elements              |\n| 9          | 3   | [-1,2,-1]             | [[0,2],[1,2]]                   | [5,3]                | Small array                 |\n| 10         | 2   | [-1,2]                | [[0,1],[1,1]]                   | [3,2]                | Two elements                |\n| 11         | 4   | [1,1,1,-1]            | [[0,3],[2,3]]                   | [4,3]                | All ones with missing       |\n| 12         | 4   | [-1,2,-1,4]           | [[0,3],[1,2]]                   | [10,3]               | Even numbers                |\n| 13         | 6   | [1,-1,3,-1,5,-1]      | [[0,5],[2,4]]                   | [15,9]               | Six elements                |\n| 14         | 3   | [-1,100,-1]           | [[0,2],[1,2]]                   | [102,101]            | Large numbers               |\n| 15         | 3   | [1,-1,3]              | [[0,2],[0,1]]                   | [6,3]                | Small range                 |\n| 16         | 4   | [-1,2,-1,4]           | [[0,3],[1,2]]                   | [10,3]               | Four elements               |\n| 17         | 7   | [1,-1,3,-1,5,-1,7]    | [[0,6],[2,5]]                   | [19,12]              | Seven elements              |\n| 18         | 5   | [-1,2,-1,4,-1]        | [[0,4],[3,4]]                   | [10,5]               | Five elements               |\n| 19         | 5   | [1,-1,3,-1,5]         | [[0,4],[1,3]]                   | [12,6]               | Odd positions               |\n| 20         | 3   | [-1,2,-1]             | [[0,2],[1,2]]                   | [5,3]                | Three elements              |\n| 21         | 8   | [1,-1,3,-1,5,-1,7,-1] | [[0,7],[2,6]]                   | [22,15]              | Eight elements              |\n| 22         | 4   | [100,-1,100,-1]       | [[0,3],[1,2]]                   | [203,103]            | Equal large numbers         |\n| 23         | 5   | [1,1,1,1,-1]          | [[0,4],[2,4]]                   | [6,4]                | One missing                 |\n| 24         | 3   | [-1,2,-1]             | [[0,2],[1,2]]                   | [5,3]                | Three elements              |\n| 25         | 9   | [1,-1,3,-1,5,-1,7,-1,9] | [[0,8],[4,7]]                | [27,18]              | Nine elements               |\n| 26         | 4   | [-1,1,-1,2]           | [[0,3],[2,3]]                   | [8,5]                | Two groups                  |\n| 27         | 4   | [1,-1,3,-1]           | [[0,3],[1,2]]                   | [7,3]                | Four elements               |\n| 28         | 5   | [-1,2,-1,4,-1]        | [[0,4],[1,3]]                   | [10,6]               | Five elements               |\n| 29         | 4   | [-1,2,-1,4]           | [[0,3],[1,2]]                   | [10,3]               | Four elements               |\n| 30         | 5   | [1,-1,3,-1,5]         | [[0,4],[2,3]]                   | [12,6]               | Five elements               |\n| 31         | 10  | [1,-1,3,-1,5,-1,7,-1,9,-1] | [[0,9],[4,8]]            | [30,21]              | Ten elements                |\n| 32         | 4   | [1,-1,3,-1]           | [[0,3],[1,2]]                   | [7,3]                | Four elements               |\n| 33         | 5   | [1,1,1,1,-1]          | [[0,4],[2,4]]                   | [6,4]                | One missing                 |\n| 34         | 3   | [-1,100,-1]           | [[0,2],[1,2]]                   | [102,101]            | Large numbers               |\n| 35         | 3   | [1,-1,3]              | [[0,2],[0,1]]                   | [6,3]                | Small range                 |\n| 36         | 6   | [1,-1,3,-1,5,-1]      | [[0,5],[2,4]]                   | [15,9]               | Six elements                |\n| 37         | 7   | [1,-1,3,-1,5,-1,7]    | [[0,6],[2,5]]                   | [19,12]              | Seven elements              |\n| 38         | 4   | [-1,1,-1,2]           | [[0,3],[2,3]]                   | [8,5]                | Two groups                  |\n| 39         | 5   | [1,-1,3,-1,5]         | [[0,4],[1,3]]                   | [12,6]               | Five elements               |\n| 40         | 10  | [-1,2,-1,4,-1,6,-1,8,-1,10] | [[0,9],[4,8]]           | [35,20]              | Ten even elements           |",
            "example": {
                "input": "n = 5, nums = [-1,2,-1,4,-1], queries = [[0,4],[1,3]]",
                "output": "[10,6]",
                "explanation": "Array: [-1,2,-1,4,-1]. Restore array: Used numbers are [2,4], so missing values are filled with 1,3,5 -> [1,2,3,4,5]. First query (sum 0 to 4): 1+2+3+4+5 = 10. Second query (sum 1 to 3): 2+3+4 = 6."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return self.query(2 * node + 1, start, mid, left, right) + self.query(2 * node + 2, mid + 1, end, left, right)\n\nclass Solution:\n    def arrayRestoration(self, n, nums, queries):\n        # Step 1: Restore the array\n        used = set()\n        for num in nums:\n            if num != -1:\n                used.add(num)\n        next_num = 1\n        restored = nums[:]\n        for i in range(n):\n            if restored[i] == -1:\n                while next_num in used:\n                    next_num += 1\n                restored[i] = next_num\n                used.add(next_num)\n                next_num += 1\n        \n        # Step 2: Build Segment Tree for range sum queries\n        seg_tree = SegmentTree(restored)\n        result = []\n        for left, right in queries:\n            result.append(seg_tree.query(0, 0, n - 1, left, right))\n        return result"
        },
        {
            "id": 16,
            "title": "Persistent Segment Tree for Range Sum",
            "description": "Given an array nums and a list of operations, each operation is either an update (set nums[i] to a value at a specific version) or a range sum query (compute the sum from index left to right at a specific version). Implement a Persistent Segment Tree to handle these operations, where each update creates a new version of the tree, and queries are performed on a specified version. Return the results of all range sum queries.\n\n| Test Cases | nums                   | operations                                      | Expected Output       | Notes                        |\n|------------|------------------------|-------------------------------------------------|-----------------------|------------------------------|\n| 1          | [1,2,3,4,5]           | [[1,0,0,4,1],[0,1,3,2,1],[0,0,4,1,1]]           | [9,15]               | Basic test case             |\n| 2          | [2,2,2]               | [[1,0,0,5,1],[0,1,2,2,1],[0,0,2,1,1]]           | [4,9]                | Equal elements              |\n| 3          | [1]                   | [[1,0,0,10,1],[0,0,0,2,1],[0,0,0,1,1]]          | [10,1]               | Single element              |\n| 4          | [1,2,3,4]             | [[1,2,2,7,1],[0,0,3,2,1],[0,1,3,1,1]]           | [14,9]               | Sequential numbers          |\n| 5          | [5,5,5,5]             | [[1,0,0,1,1],[0,0,3,2,1],[0,0,3,1,1]]           | [16,20]              | All equal                   |\n| 6          | [1,10,100]            | [[1,1,1,5,1],[0,0,2,2,1],[0,0,2,1,1]]           | [106,16]             | Large numbers               |\n| 7          | [0,0,0]               | [[1,2,2,3,1],[0,0,2,2,1],[0,1,2,1,1]]           | [3,0]                | Zeros                       |\n| 8          | [1,2,3,4,5]           | [[1,3,3,7,1],[0,0,4,2,1],[0,1,3,1,1]]           | [19,9]               | Five elements               |\n| 9          | [-1,-2,-3]            | [[1,0,0,5,1],[0,0,2,2,1],[0,0,2,1,1]]           | [0,-6]               | Negative numbers            |\n| 10         | [10,20]               | [[1,0,0,5,1],[0,0,1,2,1],[0,0,1,1,1]]           | [25,30]              | Two elements                |\n| 11         | [1,1,1,1]             | [[1,1,1,5,1],[0,0,3,2,1],[0,0,3,1,1]]           | [6,4]                | All ones                    |\n| 12         | [2,4,6,8]             | [[1,2,2,1,1],[0,0,3,2,1],[0,1,3,1,1]]           | [13,20]              | Even numbers                |\n| 13         | [1,2,3,4,5,6]         | [[1,4,4,7,1],[0,0,5,2,1],[0,1,4,1,1]]           | [28,15]              | Six elements                |\n| 14         | [100,200,300]         | [[1,0,0,50,1],[0,0,2,2,1],[0,0,2,1,1]]          | [550,600]            | Large numbers               |\n| 15         | [1,2,3]               | [[1,2,2,0,1],[0,0,2,2,1],[0,0,2,1,1]]           | [3,6]                | Update to zero              |\n| 16         | [10,20,30,40]         | [[1,1,1,5,1],[0,0,3,2,1],[0,0,3,1,1]]           | [85,100]             | Four elements               |\n| 17         | [1,2,3,4,5,6,7]       | [[1,3,3,8,1],[0,0,6,2,1],[0,1,5,1,1]]           | [37,21]              | Seven elements              |\n| 18         | [5,5,5,5,5]           | [[1,0,0,1,1],[0,0,4,2,1],[0,0,4,1,1]]           | [21,25]              | All equal                   |\n| 19         | [1,3,5,7,9]           | [[1,2,2,2,1],[0,0,4,2,1],[0,1,3,1,1]]           | [17,15]              | Odd numbers                 |\n| 20         | [10,20,30]            | [[1,0,0,0,1],[0,0,2,2,1],[0,0,2,1,1]]           | [50,60]              | Update to zero              |\n| 21         | [1,2,3,4,5,6,7,8]     | [[1,4,4,1,1],[0,0,7,2,1],[0,1,6,1,1]]           | [29,27]              | Eight elements              |\n| 22         | [100,100,100,100]     | [[1,1,1,50,1],[0,0,3,2,1],[0,0,3,1,1]]          | [350,400]            | Equal large numbers         |\n| 23         | [1,1,1,1,10]          | [[1,4,4,1,1],[0,0,4,2,1],[0,0,4,1,1]]           | [4,14]               | One outlier                 |\n| 24         | [2,4,6]               | [[1,1,1,7,1],[0,0,2,2,1],[0,0,2,1,1]]           | [15,12]              | Three elements              |\n| 25         | [1,2,3,4,5,6,7,8,9]   | [[1,5,5,10,1],[0,0,8,2,1],[0,1,7,1,1]]          | [55,37]              | Nine elements               |\n| 26         | [10,10,20,20]         | [[1,2,2,15,1],[0,0,3,2,1],[0,0,3,1,1]]          | [55,40]              | Two groups                  |\n| 27         | [1,5,10,15]           | [[1,3,3,5,1],[0,0,3,2,1],[0,1,3,1,1]]           | [21,26]              | Decreasing updates          |\n| 28         | [100,100,100,100,100] | [[1,0,0,50,1],[0,0,4,2,1],[0,0,4,1,1]]          | [450,500]            | Five equal numbers          |\n| 29         | [1,3,5,7]             | [[1,2,2,2,1],[0,0,3,2,1],[0,1,3,1,1]]           | [13,11]              | Four elements               |\n| 30         | [10,20,30,40,50]      | [[1,4,4,0,1],[0,0,4,2,1],[0,0,4,1,1]]           | [100,150]            | Update to zero              |\n| 31         | [1,2,3,4,5,6,7,8,9,10] | [[1,5,5,1,1],[0,0,9,2,1],[0,1,8,1,1]]          | [46,44]              | Ten elements                |\n| 32         | [5,10,15,20]          | [[1,1,1,5,1],[0,0,3,2,1],[0,0,3,1,1]]           | [40,50]              | Increasing numbers          |\n| 33         | [1,1,1,1,1,10]        | [[1,5,5,1,1],[0,0,5,2,1],[0,0,5,1,1]]           | [5,15]               | One outlier                 |\n| 34         | [100,200,300,400,500] | [[1,0,0,50,1],[0,0,4,2,1],[0,0,4,1,1]]          | [1450,1500]          | Large numbers               |\n| 35         | [1,2,3]               | [[1,0,0,10,1],[0,0,2,2,1],[0,0,2,1,1]]           | [15,6]               | Update first element        |\n| 36         | [10,20,30,40,50,60]   | [[1,3,3,7,1],[0,0,5,2,1],[0,1,4,1,1]]           | [197,157]            | Six elements                |\n| 37         | [1,3,5,7,9,11]        | [[1,2,2,12,1],[0,0,5,2,1],[0,1,4,1,1]]          | [48,36]              | Six odd numbers             |\n| 38         | [100,100,200,200]     | [[1,1,1,50,1],[0,0,3,2,1],[0,0,3,1,1]]          | [550,600]            | Two groups                  |\n| 39         | [1,5,10,15,20]        | [[1,4,4,5,1],[0,0,4,2,1],[0,1,3,1,1]]           | [36,51]              | Five elements               |\n| 40         | [10,20,30,40,50,60,70] | [[1,5,5,80,1],[0,0,6,2,1],[0,1,5,1,1]]         | [330,250]            | Seven large numbers         |",
            "example": {
                "input": "nums = [1,2,3,4,5], operations = [[1,0,0,4,1],[0,1,3,2,1],[0,0,4,1,1]]",
                "output": "[9,15]",
                "explanation": "Initial array: [1,2,3,4,5], version 0. Update nums[0] to 4 at version 1: [4,2,3,4,5]. Query sum(1,3) at version 1: 2+3+4 = 9. Query sum(0,4) at version 1: 4+2+3+4+5 = 15."
            },
            "answer": "class Node:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass PersistentSegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.versions = [self.build(nums, 0, self.n - 1)]\n    \n    def build(self, nums, start, end):\n        node = Node()\n        if start == end:\n            node.val = nums[start]\n            return node\n        mid = (start + end) // 2\n        node.left = self.build(nums, start, mid)\n        node.right = self.build(nums, mid + 1, end)\n        node.val = node.left.val + node.right.val\n        return node\n    \n    def update(self, prev, start, end, idx, val):\n        node = Node()\n        node.val = prev.val\n        if start == end:\n            node.val = val\n            return node\n        mid = (start + end) // 2\n        if idx <= mid:\n            node.right = prev.right\n            node.left = self.update(prev.left, start, mid, idx, val)\n        else:\n            node.left = prev.left\n            node.right = self.update(prev.right, mid + 1, end, idx, val)\n        node.val = node.left.val + node.right.val\n        return node\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return node.val\n        mid = (start + end) // 2\n        return self.query(node.left, start, mid, left, right) + self.query(node.right, mid + 1, end, left, right)\n\nclass Solution:\n    def persistentRangeSum(self, nums, operations):\n        pst = PersistentSegmentTree(nums)\n        result = []\n        for op in operations:\n            if op[0] == 1:  # Update\n                _, idx, _, val, version = op\n                new_root = pst.update(pst.versions[version], 0, len(nums) - 1, idx, val)\n                pst.versions.append(new_root)\n            else:  # Query\n                _, left, right, _, version = op\n                result.append(pst.query(pst.versions[version], 0, len(nums) - 1, left, right))\n        return result"
        },
        {
            "id": 17,
            "title": "2D Segment Tree for Matrix Range Sum",
            "description": "Given a 2D matrix and a list of queries, each query is a range sum query over a rectangular submatrix defined by top-left corner (row1, col1) and bottom-right corner (row2, col2). Compute the sum of elements in the specified submatrix for each query using a 2D Segment Tree.\n\n| Test Cases | matrix                       | queries                                   | Expected Output       | Notes                        |\n|------------|------------------------------|-------------------------------------------|-----------------------|------------------------------|\n| 1          | [[1,2,3],[4,5,6],[7,8,9]]   | [[0,0,2,2],[1,1,2,2]]                    | [45,28]              | Basic test case             |\n| 2          | [[2,2,2],[2,2,2]]            | [[0,0,1,2],[1,1,1,2]]                    | [12,4]               | Equal elements              |\n| 3          | [[5]]                        | [[0,0,0,0]]                              | [5]                  | Single element              |\n| 4          | [[1,2],[3,4],[5,6]]          | [[0,0,2,1],[1,0,2,1]]                    | [21,18]              | 3x2 matrix                  |\n| 5          | [[5,5,5],[5,5,5]]            | [[0,0,1,2],[0,1,1,1]]                    | [30,10]              | All equal                   |\n| 6          | [[1,10],[100,1000]]          | [[0,0,1,1],[1,1,1,1]]                    | [1111,1000]          | Large numbers               |\n| 7          | [[0,0],[0,0]]                | [[0,0,1,1],[1,0,1,1]]                    | [0,0]                | Zeros                       |\n| 8          | [[1,2,3,4],[5,6,7,8]]        | [[0,0,1,3],[1,1,1,2]]                    | [36,13]              | 2x4 matrix                  |\n| 9          | [[-1,-2],[-3,-4]]            | [[0,0,1,1],[0,1,1,1]]                    | [-10,-6]             | Negative numbers            |\n| 10         | [[10,20],[30,40]]            | [[0,0,1,1],[1,1,1,1]]                    | [100,40]             | 2x2 matrix                  |\n| 11         | [[1,1,1],[1,1,1]]            | [[0,0,1,2],[1,0,1,2]]                    | [6,3]                | All ones                    |\n| 12         | [[2,4],[6,8]]                | [[0,0,1,1],[0,1,0,1]]                    | [20,4]               | Even numbers                |\n| 13         | [[1,2,3],[4,5,6],[7,8,9],[10,11,12]] | [[0,0,3,2],[1,1,2,2]]            | [78,28]              | 4x3 matrix                  |\n| 14         | [[100,200],[300,400]]        | [[0,0,1,1],[1,0,1,1]]                    | [1000,700]           | Large numbers               |\n| 15         | [[1,2,3],[4,5,6]]            | [[0,0,1,2],[0,1,1,1]]                    | [21,7]               | Small range                 |\n| 16         | [[5,10,15],[20,25,30]]       | [[0,0,1,2],[1,1,1,2]]                    | [105,55]             | 2x3 matrix                  |\n| 17         | [[1,2,3,4,5],[6,7,8,9,10]]   | [[0,0,1,4],[1,2,1,3]]                    | [55,17]              | 2x5 matrix                  |\n| 18         | [[10,10,10],[10,10,10]]      | [[0,0,1,2],[0,1,1,1]]                    | [60,20]              | All equal                   |\n| 19         | [[1,3,5],[7,9,11]]           | [[0,0,1,2],[1,1,1,2]]                    | [36,20]              | Odd numbers                 |\n| 20         | [[10,20,30],[40,50,60]]      | [[0,0,1,2],[1,1,1,2]]                    | [210,110]            | 2x3 matrix                  |\n| 21         | [[1,2,3,4],[5,6,7,8],[9,10,11,12]] | [[0,0,2,3],[1,1,2,2]]              | [78,34]              | 3x4 matrix                  |\n| 22         | [[100,100,100],[100,100,100]] | [[0,0,1,2],[1,1,1,2]]                   | [600,200]            | Equal large numbers         |\n| 23         | [[1,1,1],[1,1,10]]           | [[0,0,1,2],[1,1,1,2]]                    | [15,12]              | One outlier                 |\n| 24         | [[2,4,6],[8,10,12]]          | [[0,0,1,2],[0,1,1,1]]                    | [42,14]              | 2x3 matrix                  |\n| 25         | [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]] | [[0,0,2,4],[1,2,2,3]]     | [135,49]             | 3x5 matrix                  |\n| 26         | [[10,10,20],[20,20,10]]      | [[0,0,1,2],[0,1,1,1]]                    | [90,30]              | Two groups                  |\n| 27         | [[5,10,15],[20,25,30]]       | [[0,0,1,2],[1,1,1,2]]                    | [105,55]             | 2x3 matrix                  |\n| 28         | [[1,2,3,4,5],[6,7,8,9,10]]   | [[0,0,1,4],[0,1,1,2]]                    | [55,17]              | 2x5 matrix                  |\n| 29         | [[1,3,5],[7,9,11]]           | [[0,0,1,2],[0,1,1,1]]                    | [36,12]              | 2x3 matrix                  |\n| 30         | [[10,20,30,40],[50,60,70,80]] | [[0,0,1,3],[1,1,1,2]]                   | [360,130]            | 2x4 matrix                  |\n| 31         | [[1,2,3,4,5,6],[7,8,9,10,11,12]] | [[0,0,1,5],[1,2,1,4]]                | [78,40]              | 2x6 matrix                  |\n| 32         | [[5,10,15],[20,25,30]]       | [[0,0,1,2],[0,1,1,1]]                    | [105,35]             | 2x3 matrix                  |\n| 33         | [[1,1,1],[1,1,10]]           | [[0,0,1,2],[1,1,1,2]]                    | [15,12]              | One outlier                 |\n| 34         | [[100,200,300,400],[500,600,700,800]] | [[0,0,1,3],[1,1,1,3]]            | [3600,2100]          | Large numbers               |\n| 35         | [[1,2,3],[4,5,6]]            | [[0,0,1,2],[0,1,1,1]]                    | [21,7]               | Small range                 |\n| 36         | [[5,10,15,20,25],[30,35,40,45,50]] | [[0,0,1,4],[1,2,1,3]]              | [270,85]             | 2x5 matrix                  |\n| 37         | [[1,3,5,7,9],[11,13,15,17,19]] | [[0,0,1,4],[1,2,1,3]]                | [100,32]             | Odd numbers                 |\n| 38         | [[10,10,20,20],[30,30,40,40]] | [[0,0,1,3],[0,1,1,2]]                    | [200,60]             | Two groups                  |\n| 39         | [[1,2,3,4,5],[6,7,8,9,10]]   | [[0,0,1,4],[1,1,1,3]]                    | [55,24]              | 2x5 matrix                  |\n| 40         | [[10,20,30,40,50],[60,70,80,90,100],[110,120,130,140,150]] | [[0,0,2,4],[1,2,2,3]] | [1050,340] | 3x5 matrix                  |",
            "example": {
                "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]], queries = [[0,0,2,2],[1,1,2,2]]",
                "output": "[45,28]",
                "explanation": "Matrix: [[1,2,3],[4,5,6],[7,8,9]]. First query (sum from (0,0) to (2,2)): 1+2+3+4+5+6+7+8+9 = 45. Second query (sum from (1,1) to (2,2)): 5+6+8+9 = 28."
            },
            "answer": "class SegmentTree2D:\n    def __init__(self, matrix):\n        if not matrix or not matrix[0]:\n            return\n        self.rows = len(matrix)\n        self.cols = len(matrix[0])\n        self.tree = [[0] * (4 * self.cols) for _ in range(4 * self.rows)]\n        self.build(matrix, 0, 0, self.rows - 1, 0, self.cols - 1)\n    \n    def build_y(self, matrix, node_x, start_x, end_x, node_y, start_y, end_y):\n        if start_y == end_y:\n            if start_x == end_x:\n                self.tree[node_x][node_y] = matrix[start_x][start_y]\n            else:\n                self.tree[node_x][node_y] = self.tree[2 * node_x + 1][node_y] + self.tree[2 * node_x + 2][node_y]\n            return\n        mid_y = (start_y + end_y) // 2\n        self.build_y(matrix, node_x, start_x, end_x, 2 * node_y + 1, start_y, mid_y)\n        self.build_y(matrix, node_x, start_x, end_x, 2 * node_y + 2, mid_y + 1, end_y)\n        self.tree[node_x][node_y] = self.tree[node_x][2 * node_y + 1] + self.tree[node_x][2 * node_y + 2]\n    \n    def build(self, matrix, node_x, start_x, end_x, start_y, end_y):\n        if start_x == end_x:\n            self.build_y(matrix, node_x, start_x, end_x, 0, start_y, end_y)\n            return\n        mid_x = (start_x + end_x) // 2\n        self.build(matrix, 2 * node_x + 1, start_x, mid_x, start_y, end_y)\n        self.build(matrix, 2 * node_x + 2, mid_x + 1, end_x, start_y, end_y)\n        self.build_y(matrix, node_x, start_x, end_x, 0, start_y, end_y)\n    \n    def query_y(self, node_x, node_y, start_y, end_y, col1, col2):\n        if col1 > end_y or col2 < start_y:\n            return 0\n        if col1 <= start_y and end_y <= col2:\n            return self.tree[node_x][node_y]\n        mid_y = (start_y + end_y) // 2\n        return self.query_y(node_x, 2 * node_y + 1, start_y, mid_y, col1, col2) + \\\n               self.query_y(node_x, 2 * node_y + 2, mid_y + 1, end_y, col1, col2)\n    \n    def query(self, node_x, start_x, end_x, row1, row2, col1, col2):\n        if row1 > end_x or row2 < start_x:\n            return 0\n        if row1 <= start_x and end_x <= row2:\n            return self.query_y(node_x, 0, 0, self.cols - 1, col1, col2)\n        mid_x = (start_x + end_x) // 2\n        return self.query(2 * node_x + 1, start_x, mid_x, row1, row2, col1, col2) + \\\n               self.query(2 * node_x + 2, mid_x + 1, end_x, row1, row2, col1, col2)\n\nclass Solution:\n    def matrixRangeSum(self, matrix, queries):\n        seg_tree = SegmentTree2D(matrix)\n        result = []\n        for row1, col1, row2, col2 in queries:\n            result.append(seg_tree.query(0, 0, len(matrix) - 1, row1, row2, col1, col2))\n        return result"
        },
        {
            "id": 18,
            "title": "Sherlock and Inversions with Segment Tree",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right]. For each query, count the number of inversions in the subarray nums[left:right+1]. An inversion is a pair (i,j) where i < j and nums[i] > nums[j]. Use a Segment Tree to efficiently compute the inversion counts.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [3,1,4,2,5]           | [[0,4],[1,3]]                   | [3,2]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2],[1,2]]                   | [0,0]                | Equal elements              |\n| 3          | [5]                   | [[0,0]]                         | [0]                  | Single element              |\n| 4          | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [0,0]                | Sorted array                |\n| 5          | [5,4,3,2,1]           | [[0,4],[1,3]]                   | [10,6]               | Reverse sorted              |\n| 6          | [10,1,100,5,50]       | [[0,4],[1,3]]                   | [5,2]                | Large numbers               |\n| 7          | [0,0,0]               | [[0,2],[1,2]]                   | [0,0]                | Zeros                       |\n| 8          | [1,3,5,7,9,2,4,6,8]   | [[0,8],[2,6]]                   | [12,8]               | Nine elements               |\n| 9          | [-1,-3,-5,-2]         | [[0,3],[1,2]]                   | [2,1]                | Negative numbers            |\n| 10         | [10,5]                | [[0,1],[1,1]]                   | [1,0]                | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3],[1,2]]                   | [0,0]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3],[1,2]]                   | [0,0]                | Sorted even numbers         |\n| 13         | [5,2,4,1,3,6]         | [[0,5],[1,4]]                   | [6,5]                | Six elements                |\n| 14         | [100,50,200,25,75]    | [[0,4],[1,3]]                   | [5,2]                | Large numbers               |\n| 15         | [3,1,2]               | [[0,2],[1,2]]                   | [2,1]                | Small range                 |\n| 16         | [4,2,3,1]             | [[0,3],[1,2]]                   | [4,1]                | Four elements               |\n| 17         | [7,5,3,1,2,4,6]       | [[0,6],[1,5]]                   | [11,9]               | Seven elements              |\n| 18         | [10,10,10,10,10]      | [[0,4],[1,3]]                   | [0,0]                | All equal                   |\n| 19         | [1,3,5,7,9]           | [[0,4],[1,3]]                   | [0,0]                | Sorted array                |\n| 20         | [5,3,1]               | [[0,2],[1,2]]                   | [3,1]                | Three elements              |\n| 21         | [8,7,6,5,4,3,2,1]     | [[0,7],[1,6]]                   | [28,21]              | Reverse sorted              |\n| 22         | [100,100,100,100]     | [[0,3],[1,2]]                   | [0,0]                | Equal large numbers         |\n| 23         | [1,1,1,1,5]           | [[0,4],[2,4]]                   | [0,0]                | One outlier                 |\n| 24         | [4,2,1]               | [[0,2],[1,2]]                   | [2,1]                | Three elements              |\n| 25         | [9,8,7,6,5,4,3,2,1]   | [[0,8],[2,6]]                   | [36,15]              | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3],[1,2]]                   | [0,0]                | Two groups                  |\n| 27         | [5,3,1,4]             | [[0,3],[1,2]]                   | [3,1]                | Four elements               |\n| 28         | [1,4,2,5,3,6,7,8,9]   | [[0,8],[2,6]]                   | [5,3]                | Nine elements               |\n| 29         | [3,1,2,4]             | [[0,3],[1,2]]                   | [2,1]                | Four elements               |\n| 30         | [10,5,8,3,6]          | [[0,4],[1,3]]                   | [5,3]                | Five elements               |\n| 31         | [10,9,8,7,6,5,4,3,2,1] | [[0,9],[2,7]]                  | [45,21]              | Ten elements                |\n| 32         | [4,2,1,3]             | [[0,3],[1,2]]                   | [3,1]                | Four elements               |\n| 33         | [1,1,1,1,5]           | [[0,4],[2,4]]                   | [0,0]                | One outlier                 |\n| 34         | [100,50,25,75,200,300,400] | [[0,6],[1,4]]               | [6,3]                | Large numbers               |\n| 35         | [2,1,3]               | [[0,2],[1,2]]                   | [1,0]                | Small range                 |\n| 36         | [5,3,1,4,2,6,7]       | [[0,6],[1,5]]                   | [7,5]                | Seven elements              |\n| 37         | [2,4,6,8,10,1,3]      | [[0,6],[1,5]]                   | [10,7]               | Mixed numbers               |\n| 38         | [10,10,20,20]         | [[0,3],[1,2]]                   | [0,0]                | Two groups                  |\n| 39         | [5,3,1,4,2]           | [[0,4],[1,3]]                   | [5,3]                | Five elements               |\n| 40         | [10,9,8,7,6,5,4,3,2,1] | [[0,9],[2,7]]                  | [45,21]              | Ten elements                |",
            "example": {
                "input": "nums = [3,1,4,2,5], queries = [[0,4],[1,3]]",
                "output": "[3,2]",
                "explanation": "Array: [3,1,4,2,5]. First query (inversions in 0 to 4): Subarray [3,1,4,2,5], inversions are (3,1), (3,2), (4,2), so count = 3. Second query (inversions in 1 to 3): Subarray [1,4,2], inversions are (4,2), so count = 2."
            },
            "answer": "class SegmentTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (4 * size)\n    \n    def update(self, node, start, end, idx, val):\n        if start == end:\n            self.tree[node] += val\n            return\n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(2 * node + 1, start, mid, idx, val)\n        else:\n            self.update(2 * node + 2, mid + 1, end, idx, val)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return self.query(2 * node + 1, start, mid, left, right) + self.query(2 * node + 2, mid + 1, end, left, right)\n\nclass Solution:\n    def sherlockAndInversions(self, nums, queries):\n        # Map values to a smaller range for Segment Tree\n        unique_vals = sorted(set(nums))\n        val_to_idx = {val: idx for idx, val in enumerate(unique_vals)}\n        n = len(unique_vals)\n        result = []\n        \n        for left, right in queries:\n            # Initialize Segment Tree for this query\n            seg_tree = SegmentTree(n)\n            inversions = 0\n            \n            # Process subarray from right to left\n            for i in range(right, left - 1, -1):\n                val_idx = val_to_idx[nums[i]]\n                # Count numbers greater than nums[i] to the left\n                if val_idx + 1 < n:\n                    inversions += seg_tree.query(0, 0, n - 1, val_idx + 1, n - 1)\n                # Add nums[i] to the Segment Tree\n                seg_tree.update(0, 0, n - 1, val_idx, 1)\n            result.append(inversions)\n        return result"
        },
        {
            "id": 19,
            "title": "CSES Range Minimum Queries",
            "description": "Given an array nums and a list of range minimum queries, each query specifies a range [left, right]. For each query, find the minimum element in the subarray nums[left:right+1] using a Segment Tree.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [3,1,4,2,5]           | [[0,4],[1,3]]                   | [1,1]                | Basic test case             |\n| 2          | [2,2,2]               | [[0,2],[1,2]]                   | [2,2]                | Equal elements              |\n| 3          | [5]                   | [[0,0]]                         | [5]                  | Single element              |\n| 4          | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [1,2]                | Sequential numbers          |\n| 5          | [5,4,3,2,1]           | [[0,4],[1,3]]                   | [1,2]                | Reverse sorted              |\n| 6          | [10,1,100,5,50]       | [[0,4],[1,3]]                   | [1,1]                | Large numbers               |\n| 7          | [0,0,0]               | [[0,2],[1,2]]                   | [0,0]                | Zeros                       |\n| 8          | [1,3,5,7,9,2,4,6,8]   | [[0,8],[2,6]]                   | [1,2]                | Nine elements               |\n| 9          | [-1,-3,-5,-2]         | [[0,3],[1,2]]                   | [-5,-3]              | Negative numbers            |\n| 10         | [10,5]                | [[0,1],[1,1]]                   | [5,5]                | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3],[1,2]]                   | [1,1]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3],[1,2]]                   | [2,4]                | Even numbers                |\n| 13         | [5,2,4,1,3,6]         | [[0,5],[1,4]]                   | [1,1]                | Six elements                |\n| 14         | [100,50,200,25,75]    | [[0,4],[1,3]]                   | [25,25]              | Large numbers               |\n| 15         | [3,1,2]               | [[0,2],[1,2]]                   | [1,1]                | Small range                 |\n| 16         | [4,2,3,1]             | [[0,3],[1,2]]                   | [1,2]                | Four elements               |\n| 17         | [7,5,3,1,2,4,6]       | [[0,6],[1,5]]                   | [1,1]                | Seven elements              |\n| 18         | [10,10,10,10,10]      | [[0,4],[1,3]]                   | [10,10]              | All equal                   |\n| 19         | [1,3,5,7,9]           | [[0,4],[1,3]]                   | [1,3]                | Sorted array                |\n| 20         | [5,3,1]               | [[0,2],[1,2]]                   | [1,1]                | Three elements              |\n| 21         | [8,7,6,5,4,3,2,1]     | [[0,7],[1,6]]                   | [1,2]                | Reverse sorted              |\n| 22         | [100,100,100,100]     | [[0,3],[1,2]]                   | [100,100]            | Equal large numbers         |\n| 23         | [1,1,1,1,5]           | [[0,4],[2,4]]                   | [1,1]                | One outlier                 |\n| 24         | [4,2,1]               | [[0,2],[1,2]]                   | [1,1]                | Three elements              |\n| 25         | [9,8,7,6,5,4,3,2,1]   | [[0,8],[2,6]]                   | [1,3]                | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3],[1,2]]                   | [10,10]              | Two groups                  |\n| 27         | [5,3,1,4]             | [[0,3],[1,2]]                   | [1,1]                | Four elements               |\n| 28         | [1,4,2,5,3,6,7,8,9]   | [[0,8],[2,6]]                   | [1,2]                | Nine elements               |\n| 29         | [3,1,2,4]             | [[0,3],[1,2]]                   | [1,1]                | Four elements               |\n| 30         | [10,5,8,3,6]          | [[0,4],[1,3]]                   | [3,3]                | Five elements               |\n| 31         | [10,9,8,7,6,5,4,3,2,1] | [[0,9],[2,7]]                  | [1,2]                | Ten elements                |\n| 32         | [4,2,1,3]             | [[0,3],[1,2]]                   | [1,1]                | Four elements               |\n| 33         | [1,1,1,1,5]           | [[0,4],[2,4]]                   | [1,1]                | One outlier                 |\n| 34         | [100,50,25,75,200,300,400] | [[0,6],[1,4]]               | [25,25]              | Large numbers               |\n| 35         | [2,1,3]               | [[0,2],[1,2]]                   | [1,1]                | Small range                 |\n| 36         | [5,3,1,4,2,6,7]       | [[0,6],[1,5]]                   | [1,1]                | Seven elements              |\n| 37         | [2,4,6,8,10,1,3]      | [[0,6],[1,5]]                   | [1,1]                | Mixed numbers               |\n| 38         | [10,10,20,20]         | [[0,3],[1,2]]                   | [10,10]              | Two groups                  |\n| 39         | [5,3,1,4,2]           | [[0,4],[1,3]]                   | [1,1]                | Five elements               |\n| 40         | [10,9,8,7,6,5,4,3,2,1] | [[0,9],[2,7]]                  | [1,2]                | Ten elements                |",
            "example": {
                "input": "nums = [3,1,4,2,5], queries = [[0,4],[1,3]]",
                "output": "[1,1]",
                "explanation": "Array: [3,1,4,2,5]. First query (minimum in 0 to 4): Subarray [3,1,4,2,5], minimum is 1. Second query (minimum in 1 to 3): Subarray [1,4,2], minimum is 1."
            },
            "answer": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [float('inf')] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return float('inf')\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        return min(self.query(2 * node + 1, start, mid, left, right), self.query(2 * node + 2, mid + 1, end, left, right))\n\nclass Solution:\n    def rangeMinimumQueries(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for left, right in queries:\n            result.append(seg_tree.query(0, 0, len(nums) - 1, left, right))\n        return result"
        },
        {
            "id": 20,
            "title": "SPOJ GSS1 - Maximum Subarray Sum in Range",
            "description": "Given an array nums and a list of queries, each query specifies a range [left, right]. For each query, find the maximum subarray sum within the subarray nums[left:right+1] using a Segment Tree. The maximum subarray sum is the largest sum of a contiguous subarray within the range.\n\n| Test Cases | nums                   | queries                         | Expected Output       | Notes                        |\n|------------|------------------------|---------------------------------|-----------------------|------------------------------|\n| 1          | [3,1,4,2,5]           | [[0,4],[1,3]]                   | [15,7]               | Basic test case             |\n| 2          | [2,2,2]               | [[0,2],[1,2]]                   | [6,4]                | Equal elements              |\n| 3          | [5]                   | [[0,0]]                         | [5]                  | Single element              |\n| 4          | [1,2,3,4,5]           | [[0,4],[1,3]]                   | [15,9]               | Sequential numbers          |\n| 5          | [-1,-2,-3,-4,-5]      | [[0,4],[1,3]]                   | [-1,-2]              | All negative                |\n| 6          | [10,-1,100,5,50]      | [[0,4],[1,3]]                   | [164,154]            | Large numbers               |\n| 7          | [0,0,0]               | [[0,2],[1,2]]                   | [0,0]                | Zeros                       |\n| 8          | [1,3,-5,7,-2,4,6,-8]  | [[0,7],[2,6]]                   | [13,15]              | Eight elements              |\n| 9          | [-1,-3,-5,-2]         | [[0,3],[1,2]]                   | [-1,-3]              | Negative numbers            |\n| 10         | [10,-5]               | [[0,1],[1,1]]                   | [10,-5]              | Two elements                |\n| 11         | [1,1,1,1]             | [[0,3],[1,2]]                   | [4,2]                | All ones                    |\n| 12         | [2,4,6,8]             | [[0,3],[1,2]]                   | [20,10]              | Even numbers                |\n| 13         | [5,-2,4,-1,3,6]       | [[0,5],[1,4]]                   | [15,12]              | Six elements                |\n| 14         | [100,-50,200,-25,75]  | [[0,4],[1,3]]                   | [300,200]            | Large numbers               |\n| 15         | [3,-1,2]              | [[0,2],[1,2]]                   | [4,2]                | Small range                 |\n| 16         | [4,-2,3,-1]           | [[0,3],[1,2]]                   | [5,3]                | Four elements               |\n| 17         | [7,-5,3,-1,2,4,6]     | [[0,6],[1,5]]                   | [16,14]              | Seven elements              |\n| 18         | [10,10,10,10,10]      | [[0,4],[1,3]]                   | [50,30]              | All equal                   |\n| 19         | [1,3,-5,7,9]          | [[0,4],[1,3]]                   | [16,16]              | Mixed numbers               |\n| 20         | [5,-3,1]              | [[0,2],[1,2]]                   | [5,1]                | Three elements              |\n| 21         | [8,-7,6,-5,4,-3,2,-1] | [[0,7],[1,6]]                   | [8,6]                | Eight elements              |\n| 22         | [100,100,100,100]     | [[0,3],[1,2]]                   | [400,200]            | Equal large numbers         |\n| 23         | [1,1,1,-1,5]          | [[0,4],[2,4]]                   | [7,5]                | One negative                |\n| 24         | [4,-2,1]              | [[0,2],[1,2]]                   | [4,1]                | Three elements              |\n| 25         | [9,-8,7,-6,5,-4,3,-2,1] | [[0,8],[2,6]]                 | [9,9]                | Nine elements               |\n| 26         | [10,10,20,20]         | [[0,3],[1,2]]                   | [60,30]              | Two groups                  |\n| 27         | [5,-3,1,4]            | [[0,3],[1,2]]                   | [7,1]                | Four elements               |\n| 28         | [1,4,-2,5,-3,6,-7,8,-9] | [[0,8],[2,6]]                | [12,9]               | Nine elements               |\n| 29         | [3,-1,2,4]            | [[0,3],[1,2]]                   | [8,2]                | Four elements               |\n| 30         | [10,-5,8,-3,6]        | [[0,4],[1,3]]                   | [16,8]               | Five elements               |\n| 31         | [10,-9,8,-7,6,-5,4,-3,2,-1] | [[0,9],[2,7]]             | [10,8]               | Ten elements                |\n| 32         | [4,-2,1,3]            | [[0,3],[1,2]]                   | [6,1]                | Four elements               |\n| 33         | [1,1,1,-1,5]          | [[0,4],[2,4]]                   | [7,5]                | One negative                |\n| 34         | [100,-50,25,-75,200,300,400] | [[0,6],[1,4]]             | [600,200]            | Large numbers               |\n| 35         | [2,-1,3]              | [[0,2],[1,2]]                   | [4,3]                | Small range                 |\n| 36         | [5,-3,1,4,-2,6,-7]    | [[0,6],[1,5]]                   | [11,6]               | Seven elements              |\n| 37         | [2,4,-6,8,-10,1,3]    | [[0,6],[1,5]]                   | [8,8]                | Mixed numbers               |\n| 38         | [10,10,20,20]         | [[0,3],[1,2]]                   | [60,30]              | Two groups                  |\n| 39         | [5,-3,1,4,-2]         | [[0,4],[1,3]]                   | [7,4]                | Five elements               |\n| 40         | [10,-9,8,-7,6,-5,4,-3,2,-1] | [[0,9],[2,7]]             | [10,8]               | Ten elements                |",
            "example": {
                "input": "nums = [3,1,4,2,5], queries = [[0,4],[1,3]]",
                "output": "[15,7]",
                "explanation": "Array: [3,1,4,2,5]. First query (max subarray sum in 0 to 4): Subarray [3,1,4,2,5], maximum subarray sum is 3+1+4+2+5 = 15. Second query (max subarray sum in 1 to 3): Subarray [1,4,2], maximum subarray sum is 1+4+2 = 7."
            },
            "answer": "class SegmentTreeNode:\n    def __init__(self):\n        self.sum = 0\n        self.prefix = 0\n        self.suffix = 0\n        self.max_sum = 0\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [SegmentTreeNode() for _ in range(4 * self.n)]\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def combine(self, left, right):\n        result = SegmentTreeNode()\n        result.sum = left.sum + right.sum\n        result.prefix = max(left.prefix, left.sum + right.prefix)\n        result.suffix = max(right.suffix, right.sum + left.suffix)\n        result.max_sum = max(left.max_sum, right.max_sum, left.suffix + right.prefix)\n        return result\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node].sum = nums[start]\n            self.tree[node].prefix = nums[start]\n            self.tree[node].suffix = nums[start]\n            self.tree[node].max_sum = nums[start]\n            return\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.combine(self.tree[2 * node + 1], self.tree[2 * node + 2])\n    \n    def query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return SegmentTreeNode()\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_result = self.query(2 * node + 1, start, mid, left, right)\n        right_result = self.query(2 * node + 2, mid + 1, end, left, right)\n        if left_result.max_sum == 0:\n            return right_result\n        if right_result.max_sum == 0:\n            return left_result\n        return self.combine(left_result, right_result)\n\nclass Solution:\n    def maxSubarraySumInRange(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        result = []\n        for left, right in queries:\n            result.append(seg_tree.query(0, 0, len(nums) - 1, left, right).max_sum)\n        return result"
        }
    ]
}