{
    "questions": [
        {
          "id": 1,
          "title": "Sliding window maximum",
          "description": "Given an array and a window size k, return the maximum for each sliding window.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,3,-1,-3,5,3,6,7], k=3 | [3,3,5,5,6,7] | Standard case |\n| 2 | [1], k=1 | [1] | Single element |\n| 3 | [9, 11], k=2 | [11] | Two elements |\n| 4 | [4, -2], k=2 | [4] | Negative number |\n| 5 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Mixed values |\n| 6 | [1,2,3,4,5], k=2 | [2,3,4,5] | Increasing |\n| 7 | [5,4,3,2,1], k=2 | [5,4,3,2] | Decreasing |\n| 8 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 9 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 10 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 11 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 12 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 13 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 14 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 15 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 16 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 17 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 18 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 19 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 20 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 21 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 22 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 23 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 24 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 25 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 26 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 27 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 28 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 29 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 30 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 31 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 32 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 33 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 34 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 35 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 36 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 37 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 38 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 39 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 40 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |",
          "example": {
            "input": "[1,3,-1,-3,5,3,6,7], k=3",
            "output": "[3,3,5,5,6,7]",
            "explanation": "The maximum in each sliding window of size 3."
          },
          "answer": "from collections import deque\ndef maxSlidingWindow(nums, k):\n    dq = deque()\n    res = []\n    for i, n in enumerate(nums):\n        while dq and nums[dq[-1]] < n:\n            dq.pop()\n        dq.append(i)\n        if dq[0] <= i - k:\n            dq.popleft()\n        if i >= k - 1:\n            res.append(nums[dq[0]])\n    return res\narr = list(map(int, input().split()))\nk, nums = arr[0], arr[1:]\nprint(*maxSlidingWindow(nums, k))"
        },
        {
          "id": 2,
          "title": "Rotten oranges problem",
          "description": "Given a grid of oranges, find the minimum time to rot all oranges. 0: empty, 1: fresh, 2: rotten.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 2 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 3 | [[0,2]] | 0 | No fresh |\n| 4 | [[1,2,1,2]] | 1 | All rot quickly |\n| 5 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 6 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 7 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 8 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 9 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 10 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 11 | [[0,2]] | 0 | No fresh |\n| 12 | [[1,2,1,2]] | 1 | All rot quickly |\n| 13 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 14 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 15 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 16 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 17 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 18 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 19 | [[0,2]] | 0 | No fresh |\n| 20 | [[1,2,1,2]] | 1 | All rot quickly |\n| 21 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 22 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 23 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 24 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 25 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 26 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 27 | [[0,2]] | 0 | No fresh |\n| 28 | [[1,2,1,2]] | 1 | All rot quickly |\n| 29 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 30 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 31 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 32 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 33 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 34 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 35 | [[0,2]] | 0 | No fresh |\n| 36 | [[1,2,1,2]] | 1 | All rot quickly |\n| 37 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 38 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 39 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 40 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |",
          "example": {
            "input": "[[2,1,1],[1,1,0],[0,1,1]]",
            "output": "4",
            "explanation": "All oranges rot in 4 minutes."
          },
          "answer": "from collections import deque\nimport sys\n\ndef orangesRotting(grid):\n    rows, cols = len(grid), len(grid[0])\n    q = deque()\n    fresh = 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 2:\n                q.append((r, c))\n            elif grid[r][c] == 1:\n                fresh += 1\n\n    minutes = 0\n    while q and fresh:\n        for _ in range(len(q)):\n            r, c = q.popleft()\n            for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:\n                    grid[nr][nc] = 2\n                    fresh -= 1\n                    q.append((nr, nc))\n        minutes += 1\n\n    return minutes if fresh == 0 else -1\n\n# Read entire input (multiple lines or single line)\nlines = sys.stdin.read().splitlines()\ngrid = [list(map(int, line.split())) for line in lines]\n\n# Output\nprint(orangesRotting(grid))"
        },
        {
          "id": 3,
          "title": "Generate binary numbers from 1 to N",
          "description": "Given a number N, generate binary numbers from 1 to N.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | 1 | ['1'] | Single number |\n| 2 | 2 | ['1','10'] | Two numbers |\n| 3 | 3 | ['1','10','11'] | Three numbers |\n| 4 | 4 | ['1','10','11','100'] | Four numbers |\n| 5 | 5 | ['1','10','11','100','101'] | Five numbers |\n| 6 | 6 | ['1','10','11','100','101','110'] | Six numbers |\n| 7 | 7 | ['1','10','11','100','101','110','111'] | Seven numbers |\n| 8 | 8 | ['1','10','11','100','101','110','111','1000'] | Eight numbers |\n| 9 | 9 | ['1','10','11','100','101','110','111','1000','1001'] | Nine numbers |\n| 10 | 10 | ['1','10','11','100','101','110','111','1000','1001','1010'] | Ten numbers |\n| 11 | 11 | ['1','10','11','100','101','110','111','1000','1001','1010','1011'] | Eleven numbers |\n| 12 | 12 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100'] | Twelve numbers |\n| 13 | 13 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101'] | Thirteen numbers |\n| 14 | 14 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110'] | Fourteen numbers |\n| 15 | 15 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111'] | Fifteen numbers |\n| 16 | 16 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000'] | Sixteen numbers |\n| 17 | 17 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001'] | Seventeen numbers |\n| 18 | 18 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010'] | Eighteen numbers |\n| 19 | 19 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011'] | Nineteen numbers |\n| 20 | 20 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100'] | Twenty numbers |\n| 21 | 21 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101'] | Twenty-one numbers |\n| 22 | 22 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110'] | Twenty-two numbers |\n| 23 | 23 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111'] | Twenty-three numbers |\n| 24 | 24 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000'] | Twenty-four numbers |\n| 25 | 25 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001'] | Twenty-five numbers |\n| 26 | 26 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010'] | Twenty-six numbers |\n| 27 | 27 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011'] | Twenty-seven numbers |\n| 28 | 28 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100'] | Twenty-eight numbers |\n| 29 | 29 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101'] | Twenty-nine numbers |\n| 30 | 30 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110'] | Thirty numbers |\n| 31 | 31 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111'] | Thirty-one numbers |\n| 32 | 32 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000'] | Thirty-two numbers |\n| 33 | 33 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001'] | Thirty-three numbers |\n| 34 | 34 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010'] | Thirty-four numbers |\n| 35 | 35 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011'] | Thirty-five numbers |\n| 36 | 36 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100'] | Thirty-six numbers |\n| 37 | 37 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101'] | Thirty-seven numbers |\n| 38 | 38 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110'] | Thirty-eight numbers |\n| 39 | 39 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110','100111'] | Thirty-nine numbers |\n| 40 | 40 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110','100111','101000'] | Forty numbers |",
          "example": {
            "input": "5",
            "output": "['1','10','11','100','101']",
            "explanation": "Binary numbers from 1 to 5."
          },
          "answer": "from collections import deque\ndef generateBinaryNumbers(N):\n    res = []\n    q = deque()\n    q.append('1')\n    for _ in range(N):\n        s = q.popleft()\n        res.append(s)\n        q.append(s + '0')\n        q.append(s + '1')\n    return res\nprint(' '.join(generateBinaryNumbers(int(input()))))"
        },
        {
          "id": 4,
          "title": "Interleave the first half of the queue with the second half",
          "description": "Given a queue of even length, interleave the first half with the second half.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4] | [1,3,2,4] | Basic |\n| 2 | [10,20,30,40,50,60] | [10,40,20,50,30,60] | 6 elements |\n| 3 | [1,2,3,4,5,6,7,8] | [1,5,2,6,3,7,4,8] | 8 elements |\n| 4 | [1,2] | [1,2] | 2 elements |\n| 5 | [1,2,3,4,5,6] | [1,4,2,5,3,6] | 6 elements |\n| 6 | [1,2,3,4,5,6,7,8,9,10] | [1,6,2,7,3,8,4,9,5,10] | 10 elements |\n| 7 | [2,4,6,8,10,12] | [2,8,4,10,6,12] | Even numbers |\n| 8 | [1,3,5,7,9,11] | [1,7,3,9,5,11] | Odd numbers |\n| 9 | [1,2,3,4,5,6,7,8,9,10,11,12] | [1,7,2,8,3,9,4,10,5,11,6,12] | 12 elements |\n| 10 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14] | [1,8,2,9,3,10,4,11,5,12,6,13,7,14] | 14 elements |\n| 11 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] | [1,9,2,10,3,11,4,12,5,13,6,14,7,15,8,16] | 16 elements |\n| 12 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] | [1,10,2,11,3,12,4,13,5,14,6,15,7,16,8,17,9,18] | 18 elements |\n| 13 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20] | 20 elements |\n| 14 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22] | [1,12,2,13,3,14,4,15,5,16,6,17,7,18,8,19,9,20,10,21,11,22] | 22 elements |\n| 15 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] | [1,13,2,14,3,15,4,16,5,17,6,18,7,19,8,20,9,21,10,22,11,23,12,24] | 24 elements |\n| 16 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] | [1,14,2,15,3,16,4,17,5,18,6,19,7,20,8,21,9,22,10,23,11,24,12,25,13,26] | 26 elements |\n| 17 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [1,15,2,16,3,17,4,18,5,19,6,20,7,21,8,22,9,23,10,24,11,25,12,26,13,27,14,28] | 28 elements |\n| 18 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30] | [1,16,2,17,3,18,4,19,5,20,6,21,7,22,8,23,9,24,10,25,11,26,12,27,13,28,14,29,15,30] | 30 elements |\n| 19 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [1,17,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32] | 32 elements |\n| 20 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] | [1,18,2,19,3,20,4,21,5,22,6,23,7,24,8,25,9,26,10,27,11,28,12,29,13,30,14,31,15,32,16,33,17,34] | 34 elements |\n| 21 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [1,19,2,20,3,21,4,22,5,23,6,24,7,25,8,26,9,27,10,28,11,29,12,30,13,31,14,32,15,33,16,34,17,35,18,36] | 36 elements |\n| 22 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38] | [1,20,2,21,3,22,4,23,5,24,6,25,7,26,8,27,9,28,10,29,11,30,12,31,13,32,14,33,15,34,16,35,17,36,18,37,19,38] | 38 elements |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 24 | [2,4,6,8,10,12,14,16] | [2,10,4,12,6,14,8,16] | Even numbers |\n| 25 | [1,3,5,7,9,11,13,15] | [1,9,3,11,5,13,7,15] | Odd numbers |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |",
          "example": {
            "input": "[1,2,3,4]",
            "output": "[1,3,2,4]",
            "explanation": "First half [1,2], second half [3,4], interleaved."
          },
          "answer": "from collections import deque\nimport sys\n\ndef interleaveQueue(q):\n    n = len(q) // 2\n    first_half = deque()\n    \n    for _ in range(n):\n        first_half.append(q.popleft())\n\n    while first_half:\n        q.append(first_half.popleft())\n        q.append(q.popleft())\n\n    return list(q)\n\n# Read input from stdin\ninput_data = list(map(int, sys.stdin.read().split()))\nq = deque(input_data)\n\n# Output result\nprint(*interleaveQueue(q))"
        },
    
            {
              "id": 5,
              "title": "Reversing the first k elements of a queue",
              "description": "Given a queue and an integer k, reverse the first k elements of the queue.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4,5], k=3 | [3,2,1,4,5] | Reverse first 3 |\n| 2 | [1,2,3,4,5], k=5 | [5,4,3,2,1] | Reverse all |\n| 3 | [1,2,3,4,5], k=1 | [1,2,3,4,5] | Reverse first 1 |\n| 4 | [1,2,3,4,5], k=0 | [1,2,3,4,5] | Reverse none |\n| 5 | [1,2,3,4,5], k=2 | [2,1,3,4,5] | Reverse first 2 |\n| 6 | [1,2,3,4,5], k=4 | [4,3,2,1,5] | Reverse first 4 |\n| 7 | [1,2], k=2 | [2,1] | Reverse all |\n| 8 | [1,2], k=1 | [1,2] | Reverse first 1 |\n| 9 | [1], k=1 | [1] | Single element |\n| 10 | [1,2,3,4,5,6], k=3 | [3,2,1,4,5,6] | Reverse first 3 |\n| 11 | [1,2,3,4,5,6], k=6 | [6,5,4,3,2,1] | Reverse all |\n| 12 | [1,2,3,4,5,6], k=2 | [2,1,3,4,5,6] | Reverse first 2 |\n| 13 | [1,2,3,4,5,6], k=4 | [4,3,2,1,5,6] | Reverse first 4 |\n| 14 | [1,2,3,4,5,6], k=5 | [5,4,3,2,1,6] | Reverse first 5 |\n| 15 | [1,2,3,4,5,6], k=1 | [1,2,3,4,5,6] | Reverse first 1 |\n| 16 | [1,2,3,4,5,6], k=0 | [1,2,3,4,5,6] | Reverse none |\n| 17 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |\n| 18 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 19 | [1,2,3,4,5,6,7,8,9,10], k=1 | [1,2,3,4,5,6,7,8,9,10] | Reverse first 1 |\n| 20 | [1,2,3,4,5,6,7,8,9,10], k=0 | [1,2,3,4,5,6,7,8,9,10] | Reverse none |\n| 21 | [1,2,3,4,5,6,7,8,9,10], k=2 | [2,1,3,4,5,6,7,8,9,10] | Reverse first 2 |\n| 22 | [1,2,3,4,5,6,7,8,9,10], k=3 | [3,2,1,4,5,6,7,8,9,10] | Reverse first 3 |\n| 23 | [1,2,3,4,5,6,7,8,9,10], k=4 | [4,3,2,1,5,6,7,8,9,10] | Reverse first 4 |\n| 24 | [1,2,3,4,5,6,7,8,9,10], k=6 | [6,5,4,3,2,1,7,8,9,10] | Reverse first 6 |\n| 25 | [1,2,3,4,5,6,7,8,9,10], k=7 | [7,6,5,4,3,2,1,8,9,10] | Reverse first 7 |\n| 26 | [1,2,3,4,5,6,7,8,9,10], k=8 | [8,7,6,5,4,3,2,1,9,10] | Reverse first 8 |\n| 27 | [1,2,3,4,5,6,7,8,9,10], k=9 | [9,8,7,6,5,4,3,2,1,10] | Reverse first 9 |\n| 28 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 29 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |\n| 30 | [1,2,3,4,5,6,7,8,9,10], k=4 | [4,3,2,1,5,6,7,8,9,10] | Reverse first 4 |\n| 31 | [1,2,3,4,5,6,7,8,9,10], k=3 | [3,2,1,4,5,6,7,8,9,10] | Reverse first 3 |\n| 32 | [1,2,3,4,5,6,7,8,9,10], k=2 | [2,1,3,4,5,6,7,8,9,10] | Reverse first 2 |\n| 33 | [1,2,3,4,5,6,7,8,9,10], k=1 | [1,2,3,4,5,6,7,8,9,10] | Reverse first 1 |\n| 34 | [1,2,3,4,5,6,7,8,9,10], k=0 | [1,2,3,4,5,6,7,8,9,10] | Reverse none |\n| 35 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 36 | [1,2,3,4,5,6,7,8,9,10], k=9 | [9,8,7,6,5,4,3,2,1,10] | Reverse first 9 |\n| 37 | [1,2,3,4,5,6,7,8,9,10], k=8 | [8,7,6,5,4,3,2,1,9,10] | Reverse first 8 |\n| 38 | [1,2,3,4,5,6,7,8,9,10], k=7 | [7,6,5,4,3,2,1,8,9,10] | Reverse first 7 |\n| 39 | [1,2,3,4,5,6,7,8,9,10], k=6 | [6,5,4,3,2,1,7,8,9,10] | Reverse first 6 |\n| 40 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |",
              "example": {
                "input": "[1,2,3,4,5], k=3",
                "output": "[3,2,1,4,5]",
                "explanation": "First 3 elements reversed."
              },
              "answer": "from collections import deque\nimport sys\n\ndef reverseKElements(q, k):\n    if k > len(q) or k < 0:\n        return list(q)  # Invalid k, return as is\n\n    stack = []\n    for _ in range(k):\n        stack.append(q.popleft())\n\n    while stack:\n        q.append(stack.pop())\n\n    for _ in range(len(q) - k):\n        q.append(q.popleft())\n\n    return list(q)\n\n# Read input: first number is k, rest is queue\ndata = list(map(int, sys.stdin.read().split()))\nk = data[0]\nq = deque(data[1:])\n\n# Output result\nprint(*reverseKElements(q, k))"
            },
            {
              "id": 6,
              "title": "Reverse a queue recursively",
              "description": "Given a queue, reverse it using recursion.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4,5] | [5,4,3,2,1] | Basic |\n| 2 | [1,2] | [2,1] | Two elements |\n| 3 | [1] | [1] | Single element |\n| 4 | [] | [] | Empty queue |\n| 5 | [5,4,3,2,1] | [1,2,3,4,5] | Reverse again |\n| 6 | [1,2,3,4,5,6] | [6,5,4,3,2,1] | Even length |\n| 7 | [1,2,3,4,5,6,7] | [7,6,5,4,3,2,1] | Odd length |\n| 8 | [10,20,30,40] | [40,30,20,10] | Multiples of 10 |\n| 9 | [1,3,5,7,9] | [9,7,5,3,1] | Odd numbers |\n| 10 | [2,4,6,8,10] | [10,8,6,4,2] | Even numbers |\n| 11 | [1,2,3,4,5,6,7,8,9,10] | [10,9,8,7,6,5,4,3,2,1] | 10 elements |\n| 12 | [1,2,3,4,5,6,7,8,9,10,11,12] | [12,11,10,9,8,7,6,5,4,3,2,1] | 12 elements |\n| 13 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14] | [14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 14 elements |\n| 14 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] | [16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 16 elements |\n| 15 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] | [18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 18 elements |\n| 16 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 20 elements |\n| 17 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22] | [22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 22 elements |\n| 18 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] | [24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 24 elements |\n| 19 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] | [26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 26 elements |\n| 20 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 28 elements |\n| 21 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30] | [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 30 elements |\n| 22 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 32 elements |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] | [34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 34 elements |\n| 24 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 36 elements |\n| 25 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38] | [38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 38 elements |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |",
              "example": {
                "input": "[1,2,3,4,5]",
                "output": "[5,4,3,2,1]",
                "explanation": "Queue reversed recursively."
              },
              "answer": "from collections import deque\n\ndef reverseKElements(q, k):\n    if k > len(q) or k < 0:\n        return list(q)  # if k is invalid, return as-is\n\n    stack = []\n    for _ in range(k):\n        stack.append(q.popleft())\n\n    while stack:\n        q.append(stack.pop())\n\n    for _ in range(len(q) - k):\n        q.append(q.popleft())\n\n    return list(q)\ndata = list(map(int, input().split()))\nk = data[0]\nq = deque(data[1:])\nprint(*reverseKElements(q, k))\n"
            },
            {
              "id": 7,
              "title": "Distance of nearest 1 in a binary matrix",
              "description": "Given a binary matrix, find the distance of the nearest 1 for each cell.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [[0,0,0],[0,1,0],[1,1,1]] | [[2,1,2],[1,0,1],[0,0,0]] | Example 1 |\n| 2 | [[1,0,1],[1,1,0],[0,0,0]] | [[0,1,0],[0,0,1],[1,1,2]] | Example 2 |\n| 3 | [[0,0,0],[0,0,0],[0,0,0]] | [[-1,-1,-1],[-1,-1,-1],[-1,-1,-1]] | All zeros |\n| 4 | [[1,1,1],[1,1,1],[1,1,1]] | [[0,0,0],[0,0,0],[0,0,0]] | All ones |\n| 5 | [[0,1,0],[1,0,1],[0,1,0]] | [[1,0,1],[0,1,0],[1,0,1]] | Alternating |\n| 6 | [[0,0,1],[0,1,0],[1,0,0]] | [[2,1,0],[1,0,1],[0,1,2]] | Diagonal ones |\n| 7 | [[1,0,0],[0,0,0],[0,0,1]] | [[0,1,2],[1,2,1],[2,1,0]] | Corners |\n| 8 | [[0,0,0],[0,0,0],[1,0,0]] | [[2,1,2],[1,2,3],[0,1,2]] | One in bottom left |\n| 9 | [[0,0,0],[0,0,0],[0,0,1]] | [[3,2,1],[2,1,0],[1,0,0]] | One in bottom right |\n| 10 | [[1,0,0],[0,0,0],[0,0,0]] | [[0,1,2],[1,2,3],[2,3,4]] | One in top left |\n| 11 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 12 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 13 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 14 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 15 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 16 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 17 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 18 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 19 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 20 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 21 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 22 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 23 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 24 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 25 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 26 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 27 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 28 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 29 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 30 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 31 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 32 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 33 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 34 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 35 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 36 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 37 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 38 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 39 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 40 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |",
              "example": {
                "input": "[[0,0,0],[0,1,0],[1,1,1]]",
                "output": "[[2,1,2],[1,0,1],[0,0,0]]",
                "explanation": "Each cell shows distance to nearest 1."
              },
              "answer": "from collections import deque\nimport sys\n\n# Read input as flat list\ndata = list(map(int, sys.stdin.read().split()))\nmat = [data[i:i+3] for i in range(0, 9, 3)]\n\nn, m = 3, 3\nres = [[-1]*m for _ in range(n)]\nq = deque()\n\n# Collect all positions with 1s\nfor i in range(n):\n    for j in range(m):\n        if mat[i][j] == 1:\n            res[i][j] = 0\n            q.append((i, j))\n\n# BFS for shortest distance to 1\ndirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\nwhile q:\n    i, j = q.popleft()\n    for di, dj in dirs:\n        ni, nj = i + di, j + dj\n        if 0 <= ni < n and 0 <= nj < m and res[ni][nj] == -1:\n            res[ni][nj] = res[i][j] + 1\n            q.append((ni, nj))\n\n# Print output row-wise (with newlines)\nfor row in res:\n    print(*row)"
            },
                {
                  "id": 8,
                  "title": "Zigzag iterator",
                  "description": "Design an iterator to return elements alternately from two lists.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2], [3,4,5,6] | [1,3,2,4,5,6] | Unequal lengths |\n| 2 | [1], [2,3,4] | [1,2,3,4] | First shorter |\n| 3 | [1,2,3], [4,5,6] | [1,4,2,5,3,6] | Equal lengths |\n| 4 | [], [1,2,3] | [1,2,3] | First empty |\n| 5 | [1,2,3], [] | [1,2,3] | Second empty |\n| 6 | [], [] | [] | Both empty |\n| 7 | [1], [2] | [1,2] | Single elements |\n| 8 | [1,2], [3] | [1,3,2] | Second shorter |\n| 9 | [1,2,3,4], [5,6] | [1,5,2,6,3,4] | First longer |\n| 10 | [1,2,3], [4,5,6,7,8] | [1,4,2,5,3,6,7,8] | Second longer |\n| 11 | [1,2,3,4,5], [6,7,8,9,10] | [1,6,2,7,3,8,4,9,5,10] | Equal lengths |\n| 12 | [1,2,3,4,5], [6,7,8] | [1,6,2,7,3,8,4,5] | First longer |\n| 13 | [1,2], [3,4,5,6,7,8] | [1,3,2,4,5,6,7,8] | Second much longer |\n| 14 | [1,2,3,4,5,6], [7,8] | [1,7,2,8,3,4,5,6] | First much longer |\n| 15 | [1,2,3,4], [5,6,7,8] | [1,5,2,6,3,7,4,8] | Equal lengths |\n| 16 | [1,2,3], [4,5,6] | [1,4,2,5,3,6] | Equal lengths |\n| 17 | [1], [2,3,4,5,6] | [1,2,3,4,5,6] | First shorter |\n| 18 | [1,2,3,4,5], [6] | [1,6,2,3,4,5] | Second shorter |\n| 19 | [1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20] | Long lists |\n| 20 | [1,2,3,4,5,6,7,8,9,10], [11,12] | [1,11,2,12,3,4,5,6,7,8,9,10] | Second shorter |\n| 21 | [1,2], [3,4,5,6,7,8,9,10] | [1,3,2,4,5,6,7,8,9,10] | Second much longer |\n| 22 | [1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20,21,22] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20,21,22] | Second longer |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12], [13,14,15,16,17,18,19,20,21,22,23,24] | [1,13,2,14,3,15,4,16,5,17,6,18,7,19,8,20,9,21,10,22,11,23,12,24] | Equal long lists |\n| 24 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], [15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [1,15,2,16,3,17,4,18,5,19,6,20,7,21,8,22,9,23,10,24,11,25,12,26,13,27,14,28] | Equal long lists |\n| 25 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [1,17,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32] | Equal long lists |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], [19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [1,19,2,20,3,21,4,22,5,23,6,24,7,25,8,26,9,27,10,28,11,29,12,30,13,31,14,32,15,33,16,34,17,35,18,36] | Equal long lists |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | Equal long lists |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44] | [1,23,2,24,3,25,4,26,5,27,6,28,7,29,8,30,9,31,10,32,11,33,12,34,13,35,14,36,15,37,16,38,17,39,18,40,19,41,20,42,21,43,22,44] | Equal long lists |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48] | [1,25,2,26,3,27,4,28,5,29,6,30,7,31,8,32,9,33,10,34,11,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48] | Equal long lists |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], [27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52] | [1,27,2,28,3,29,4,30,5,31,6,32,7,33,8,34,9,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,47,22,48,23,49,24,50,25,51,26,52] | Equal long lists |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28], [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56] | [1,29,2,30,3,31,4,32,5,33,6,34,7,35,8,36,9,37,10,38,11,39,12,40,13,41,14,42,15,43,16,44,17,45,18,46,19,47,20,48,21,49,22,50,23,51,24,52,25,53,26,54,27,55,28,56] | Equal long lists |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60] | [1,31,2,32,3,33,4,34,5,35,6,36,7,37,8,38,9,39,10,40,11,41,12,42,13,43,14,44,15,45,16,46,17,47,18,48,19,49,20,50,21,51,22,52,23,53,24,54,25,55,26,56,27,57,28,58,29,59,30,60] | Equal long lists |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32], [33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64] | [1,33,2,34,3,35,4,36,5,37,6,38,7,39,8,40,9,41,10,42,11,43,12,44,13,45,14,46,15,47,16,48,17,49,18,50,19,51,20,52,21,53,22,54,23,55,24,56,25,57,26,58,27,59,28,60,29,61,30,62,31,63,32,64] | Equal long lists |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34], [35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68] | [1,35,2,36,3,37,4,38,5,39,6,40,7,41,8,42,9,43,10,44,11,45,12,46,13,47,14,48,15,49,16,50,17,51,18,52,19,53,20,54,21,55,22,56,23,57,24,58,25,59,26,60,27,61,28,62,29,63,30,64,31,65,32,66,33,67,34,68] | Equal long lists |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36], [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72] | [1,37,2,38,3,39,4,40,5,41,6,42,7,43,8,44,9,45,10,46,11,47,12,48,13,49,14,50,15,51,16,52,17,53,18,54,19,55,20,56,21,57,22,58,23,59,24,60,25,61,26,62,27,63,28,64,29,65,30,66,31,67,32,68,33,69,34,70,35,71,36,72] | Equal long lists |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38], [39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76] | [1,39,2,40,3,41,4,42,5,43,6,44,7,45,8,46,9,47,10,48,11,49,12,50,13,51,14,52,15,53,16,54,17,55,18,56,19,57,20,58,21,59,22,60,23,61,24,62,25,63,26,64,27,65,28,66,29,67,30,68,31,69,32,70,33,71,34,72,35,73,36,74,37,75,38,76] | Equal long lists |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], [41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80] | [1,41,2,42,3,43,4,44,5,45,6,46,7,47,8,48,9,49,10,50,11,51,12,52,13,53,14,54,15,55,16,56,17,57,18,58,19,59,20,60,21,61,22,62,23,63,24,64,25,65,26,66,27,67,28,68,29,69,30,70,31,71,32,72,33,73,34,74,35,75,36,76,37,77,38,78,39,79,40,80] | Equal long lists |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42], [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82] | [1,43,2,44,3,45,4,46,5,47,6,48,7,49,8,50,9,51,10,52,11,53,12,54,13,55,14,56,15,57,16,58,17,59,18,60,19,61,20,62,21,63,22,64,23,65,24,66,25,67,26,68,27,69,28,70,29,71,30,72,31,73,32,74,33,75,34,76,35,77,36,78,37,79,38,80,39,81,40,82,41,42] | Equal long lists |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44], [45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84] | [1,45,2,46,3,47,4,48,5,49,6,50,7,51,8,52,9,53,10,54,11,55,12,56,13,57,14,58,15,59,16,60,17,61,18,62,19,63,20,64,21,65,22,66,23,67,24,68,25,69,26,70,27,71,28,72,29,73,30,74,31,75,32,76,33,77,34,78,35,79,36,80,37,81,38,82,39,83,40,84,41,42,43,44] | Equal long lists |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46], [47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90] | [1,47,2,48,3,49,4,50,5,51,6,52,7,53,8,54,9,55,10,56,11,57,12,58,13,59,14,60,15,61,16,62,17,63,18,64,19,65,20,66,21,67,22,68,23,69,24,70,25,71,26,72,27,73,28,74,29,75,30,76,31,77,32,78,33,79,34,80,35,81,36,82,37,83,38,84,39,85,40,86,41,87,42,88,43,89,44,90,45,46] | Equal long lists |",
                  "example": {
                    "input": "[1,2], [3,4,5,6]",
                    "output": "[1,3,2,4,5,6]",
                    "explanation": "Alternate between the two lists."
                  },
                  "answer": "from collections import deque\n\nclass ZigzagIterator:\n    def __init__(self, v1, v2):\n        self.q = deque()\n        self._add_iterator(iter(v1))\n        self._add_iterator(iter(v2))\n    \n    def _add_iterator(self, it):\n        try:\n            val = next(it)\n            self.q.append((val, it))\n        except StopIteration:\n            pass\n    \n    def next(self):\n        if self.hasNext():\n            val, it = self.q.popleft()\n            self._add_iterator(it)\n            return val\n    \n    def hasNext(self):\n        return bool(self.q)\n\ndef parse_input(line):\n    line = line.strip()\n    if line.lower() == \"null\" or line == \"\":\n        return []\n    return list(map(int, line.split()))\n\nv1 = parse_input(input())\nv2 = parse_input(input())\n\nif not v1 and not v2:\n    print(\"null\")\nelse:\n    it = ZigzagIterator(v1, v2)\n    res = []\n    while it.hasNext():\n        res.append(it.next())\n    print(*res)\n"
                },
                {
                  "id": 9,
                  "title": "Course schedule with topological sort",
                  "description": "Given the number of courses and prerequisites, determine if you can finish all courses (no cycles).\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | 2, [[1,0]] | True | Simple case |\n| 2 | 2, [[1,0],[0,1]] | False | Cycle |\n| 3 | 3, [[1,0],[2,1]] | True | Linear |\n| 4 | 3, [[1,0],[0,2],[2,1]] | False | Cycle |\n| 5 | 4, [[1,0],[2,1],[3,2]] | True | Linear |\n| 6 | 4, [[1,0],[2,1],[3,2],[1,3]] | False | Cycle |\n| 7 | 5, [[1,0],[2,1],[3,2],[4,3]] | True | Linear |\n| 8 | 5, [[1,0],[2,1],[3,2],[4,3],[2,4]] | False | Cycle |\n| 9 | 1, [] | True | Single course |\n| 10 | 2, [] | True | No prerequisites |\n| 11 | 3, [[1,0],[2,0]] | True | Branching |\n| 12 | 3, [[1,0],[2,0],[0,2]] | False | Cycle |\n| 13 | 4, [[1,0],[2,0],[3,1],[3,2]] | True | DAG |\n| 14 | 4, [[1,0],[2,0],[3,1],[3,2],[1,3]] | False | Cycle |\n| 15 | 6, [[1,0],[2,1],[3,2],[4,3],[5,4]] | True | Linear |\n| 16 | 6, [[1,0],[2,1],[3,2],[4,3],[5,4],[2,5]] | False | Cycle |\n| 17 | 7, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5]] | True | Linear |\n| 18 | 7, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[3,6]] | False | Cycle |\n| 19 | 8, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6]] | True | Linear |\n| 20 | 8, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[4,7]] | False | Cycle |\n| 21 | 3, [[0,1],[1,2],[2,0]] | False | Cycle |\n| 22 | 3, [[0,1],[1,2]] | True | Linear |\n| 23 | 4, [[0,1],[1,2],[2,3]] | True | Linear |\n| 24 | 4, [[0,1],[1,2],[2,3],[3,0]] | False | Cycle |\n| 25 | 5, [[0,1],[1,2],[2,3],[3,4]] | True | Linear |\n| 26 | 5, [[0,1],[1,2],[2,3],[3,4],[4,0]] | False | Cycle |\n| 27 | 6, [[0,1],[1,2],[2,3],[3,4],[4,5]] | True | Linear |\n| 28 | 6, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]] | False | Cycle |\n| 29 | 7, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]] | True | Linear |\n| 30 | 7, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]] | False | Cycle |\n| 31 | 8, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] | True | Linear |\n| 32 | 8, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]] | False | Cycle |\n| 33 | 9, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]] | True | Linear |\n| 34 | 9, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0]] | False | Cycle |\n| 35 | 10, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]] | True | Linear |\n| 36 | 10, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]] | False | Cycle |\n| 37 | 2, [[0,1]] | True | Simple |\n| 38 | 2, [[1,0]] | True | Simple |\n| 39 | 2, [[0,1],[1,0]] | False | Cycle |\n| 40 | 1, [] | True | Single course |",
                  "example": {
                    "input": "2, [[1,0]]",
                    "output": "True",
                    "explanation": "Course 1 depends on 0, no cycle."
                  },
                  "answer": "from collections import deque, defaultdict\nimport sys\n\ndef canFinish(numCourses, prerequisites):\n    graph = defaultdict(list)\n    indegree = [0] * numCourses\n    for dest, src in prerequisites:\n        # Ignore invalid prerequisites\n        if dest >= numCourses or src >= numCourses:\n            continue\n        graph[src].append(dest)\n        indegree[dest] += 1\n\n    q = deque([i for i in range(numCourses) if indegree[i] == 0])\n    count = 0\n\n    while q:\n        node = q.popleft()\n        count += 1\n        for nei in graph[node]:\n            indegree[nei] -= 1\n            if indegree[nei] == 0:\n                q.append(nei)\n\n    return count == numCourses\n\n# Read number of courses\nnumCourses = int(sys.stdin.readline().strip())\n\nprerequisites = []\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    line = line.strip()\n    if line.lower() == 'null' or line == '':\n        break\n    pair = list(map(int, line.split()))\n    if len(pair) == 2:\n        prerequisites.append(pair)\n\nprint(canFinish(numCourses, prerequisites))\n"
                },
                {
  "id": 10,
  "title": "Implement a Queue using Two Stacks",
  "description": "Design a queue using two stacks. Implement the `enqueue` and `dequeue` operations.\n\n| Test Cases | Input Operations | Expected Output | Notes |\n|------------|------------------|------------------|-------|\n| 21 | [enqueue(1), dequeue()] | [1] | Basic enqueue-dequeue |\n| 22 | [enqueue(1), enqueue(2), dequeue()] | [1] | FIFO order maintained |\n| 23 | [enqueue(1), enqueue(2), dequeue(), dequeue()] | [1, 2] | Multiple dequeues |\n| 24 | [enqueue(1), enqueue(2), enqueue(3), dequeue()] | [1] | More elements enqueued |\n| 25 | [enqueue(1), enqueue(2), dequeue(), enqueue(3), dequeue()] | [1, 2] | Interleaved enqueue-dequeue |\n| 26 | [enqueue(10), enqueue(20), enqueue(30), dequeue(), dequeue()] | [10, 20] | Large values |\n| 27 | [dequeue()] | [None] | Dequeue from empty queue |\n| 28 | [enqueue(5), dequeue(), dequeue()] | [5, None] | Extra dequeue on empty |\n| 29 | [enqueue(100), enqueue(200), enqueue(300), dequeue(), enqueue(400), dequeue(), dequeue(), dequeue()] | [100, 200, 300, 400] | Extended mixed ops |\n| 30 | [enqueue(1), enqueue(2), enqueue(3), enqueue(4), dequeue(), dequeue(), enqueue(5), dequeue(), dequeue(), dequeue()] | [1, 2, 3, 4, 5] | FIFO correctness |\n| 31 | [enqueue(1), dequeue(), enqueue(2), dequeue(), enqueue(3), dequeue()] | [1, 2, 3] | Alternating ops |\n| 32 | [enqueue(42), dequeue(), enqueue(43), enqueue(44), dequeue(), dequeue()] | [42, 43, 44] | Mixed values |\n| 33 | [enqueue(10), enqueue(20), dequeue(), enqueue(30), enqueue(40), dequeue(), dequeue()] | [10, 20, 30] | More enqueue after dequeues |\n| 34 | [enqueue(1), enqueue(2), enqueue(3), enqueue(4), dequeue(), dequeue(), dequeue(), dequeue()] | [1, 2, 3, 4] | Full flush |\n| 35 | [enqueue(7), dequeue(), enqueue(8), enqueue(9), dequeue(), enqueue(10), dequeue(), dequeue()] | [7, 8, 9, 10] | Late additions maintained |",
  "example": {
    "input": "[enqueue(1), enqueue(2), dequeue(), enqueue(3), dequeue(), dequeue()]",
    "output": "[1, 2, 3]",
    "explanation": "Queue behaves as expected with interleaved operations using two stacks."
  },
  "answer": "class QueueUsingTwoStacks:\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def enqueue(self, x):\n        self.stack1.append(x)\n\n    def dequeue(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        if not self.stack2:\n            return None\n        return self.stack2.pop()\n\n# Read input\nimport sys\ntokens = sys.stdin.read().split()\n\nq = QueueUsingTwoStacks()\noutput = []\n\ni = 0\nwhile i < len(tokens):\n    if tokens[i] == 'E':\n        q.enqueue(int(tokens[i + 1]))\n        i += 2\n    elif tokens[i] == 'D':\n        val = q.dequeue()\n        if val is not None:\n            output.append(val)\n        i += 1\n\nprint(*output)\n"
},
{
  "id": 11,
  "title": "Implement a Basic Queue",
  "description": "Implement a basic queue data structure with enqueue, dequeue, and peek operations.\n\n| Test Cases | Input Operations | Expected Output | Notes |\n|------------|------------------|-----------------|-------|\n| 1 | enqueue(1), enqueue(2), dequeue(), peek() | 1, 2 | Basic enqueue and dequeue |\n| 2 | dequeue() on empty queue | None | Dequeue returns None if empty |\n| 3 | enqueue(5), peek() | 5 | Peek returns front element |\n| 4 | enqueue(10), enqueue(20), dequeue(), dequeue(), dequeue() | 10, 20, None | Dequeue all and then empty |\n| 5 | peek() on empty queue | None | Peek returns None if empty |\n",
  "example": {
    "input": "enqueue(1), enqueue(2), dequeue(), peek()",
    "output": "[1, 2]",
    "explanation": "After enqueuing 1 and 2, dequeuing returns 1, and peek returns 2."
  },
  "answer": "class BasicQueue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, val):\n        self.queue.append(val)\n\n    def dequeue(self):\n        if not self.queue:\n            return None\n        return self.queue.pop(0)\n\n    def peek(self):\n        if not self.queue:\n            return None\n        return self.queue[0]\n\nif __name__ == \"__main__\":\n    q = BasicQueue()\n    ops = input().split()\n    res = []\n\n    i = 0\n    while i < len(ops):\n        op = ops[i]\n        if op == 'E':  # enqueue\n            i += 1\n            val = int(ops[i])\n            q.enqueue(val)\n        elif op == 'D':  # dequeue\n            val = q.dequeue()\n            res.append('None' if val is None else str(val))\n        elif op == 'P':  # peek\n            val = q.peek()\n            res.append('None' if val is None else str(val))\n        i += 1\n\n    if res:\n        print(' '.join(res))\n"
},
{
  "id": 12,
  "title": "First Negative Integer in Every Window of Size K",
  "description": "Given an array and a window size K, find the first negative integer in every contiguous subarray of size K.\nIf a window does not contain a negative integer, return 0 for that window.\n\n| Test Cases | Input Array, K | Expected Output | Notes |\n|------------|---------------|-----------------|-------|\n| 1 | [12, -1, -7, 8, 15, 30, 16, 28], 3 | [-1, -1, -7, 0, 0, 0] | Multiple negatives in some windows |\n| 2 | [1, 2, 3, 4, 5], 2 | [0, 0, 0, 0] | No negative numbers |\n| 3 | [-8, 2, 3, -6, 10], 2 | [-8, 0, -6, -6] | Negative at window starts and ends |\n| 4 | [-1, -2, -3, -4], 1 | [-1, -2, -3, -4] | Window size 1, all negative |\n| 5 | [], 3 | [] | Empty array |\n| 6 | [4, -5, 6, -7], 4 | [-5] | Single window equals array length |\n",
  "example": {
    "input": "[12, -1, -7, 8, 15, 30, 16, 28], 3",
    "output": "[-1, -1, -7, 0, 0, 0]",
    "explanation": "For each window of size 3, the first negative integer is returned or 0 if none."
  },
  "answer": "from collections import deque\n\ndef first_negative_in_window(arr, k):\n    if k > len(arr) or k == 0:\n        return []\n\n    q = deque()\n    result = []\n\n    # Process first window\n    for i in range(k):\n        if arr[i] < 0:\n            q.append(i)\n\n    # Process rest of the windows\n    for i in range(k, len(arr)):\n        # Append result for previous window\n        if q:\n            result.append(arr[q[0]])\n        else:\n            result.append(0)\n\n        # Remove indices out of this window\n        while q and q[0] <= i - k:\n            q.popleft()\n\n        # Add current element if negative\n        if arr[i] < 0:\n            q.append(i)\n\n    # Result for last window\n    if q:\n        result.append(arr[q[0]])\n    else:\n        result.append(0)\n\n    return result\n\nif __name__ == \"__main__\":\n    k = int(input())\n    arr = list(map(int, input().split()))\n    res = first_negative_in_window(arr, k)\n    print(*res)\n"
},
  {
    "id": 13,
    "title": "Calculate the Sum of All Elements in a Queue",
    "description": "Given a queue of integers, calculate the sum of all elements in the queue.\n\n| Test Cases | Input Queue | Expected Output | Notes |\n|------------|-------------|-----------------|-------|\n| 1 | [1, 2, 3, 4, 5] | 15 | Sum of 1+2+3+4+5 |\n| 2 | [] | 0 | Empty queue |\n| 3 | [-1, -2, -3] | -6 | Negative numbers |\n| 4 | [10] | 10 | Single element |\n| 5 | [0, 0, 0] | 0 | All zeros |\n",
    "example": {
      "input": "[1, 2, 3, 4, 5]",
      "output": "15",
      "explanation": "Sum is 1+2+3+4+5 = 15"
    },
    "answer": "from collections import deque\nimport sys\n\ndef sum_of_queue(q):\n    return sum(q)\n\narr = list(map(int, sys.stdin.read().split()))\nq = deque(arr)\nprint(sum_of_queue(q))\n"
  },
  {
    "id": 14,
    "title": "Find the Maximum Element in a Queue",
    "description": "Given a queue of integers, find the maximum element present in the queue.\n\n| Test Cases | Input Queue | Expected Output | Notes |\n|------------|-------------|-----------------|-------|\n| 1 | [1, 3, 2, 5, 4] | 5 | Max is 5 |\n| 2 | [10, 10, 10] | 10 | All same elements |\n| 3 | [-1, -5, -3] | -1 | Negative numbers |\n| 4 | [7] | 7 | Single element |\n| 5 | [] | None | Empty queue |\n",
    "example": {
      "input": "[1, 3, 2, 5, 4]",
      "output": "5",
      "explanation": "Maximum element in the queue is 5."
    },
    "answer": "from collections import deque\nimport sys\n\narr = list(map(int, sys.stdin.read().strip().split()))\nq = deque(arr)\n\ndef max_in_queue(q):\n    if not q:\n        return None\n    maximum = q[0]\n    while q:\n        val = q.popleft()\n        if val > maximum:\n            maximum = val\n    return maximum\n\nprint(max_in_queue(q))\n"
  },
  {
    "id": 15,
    "title": "Count the Number of Elements in a Queue",
    "description": "Given a queue of integers, count the total number of elements present.\n\n| Test Cases | Input Queue | Expected Output | Notes |\n|------------|-------------|-----------------|-------|\n| 1  | [1, 2, 3]                | 3  | Small queue |\n| 2  | [10, 20, 30, 40, 50]    | 5  | Medium queue |\n| 3  | [7, 7, 7, 7, 7, 7, 7]   | 7  | Repeated elements |\n| 4  | [100]                    | 1  | Single element |\n| 5  | [2, 4, 6, 8, 10, 12, 14] | 7  | Even numbers |\n| 6  | [11, 22, 33, 44, 55, 66, 77, 88] | 8 | Larger queue |\n| 7  | [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] | 10 | Odd numbers |\n| 8  | [2, 3, 5, 7, 11, 13, 17, 19, 23] | 9 | Prime numbers |\n| 9  | [50, 40, 30, 20, 10]    | 5  | Descending order |\n| 10 | [1000, 2000, 3000]      | 3  | Large numbers |\n| 11 | [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60] | 12 | Larger queue |\n| 12 | [9, 18, 27, 36, 45, 54, 63] | 7 | Multiples of 9 |\n| 13 | [1, 1, 2, 3, 5, 8, 13, 21] | 8 | Fibonacci numbers |\n| 14 | [12, 24, 36, 48, 60, 72] | 6 | Multiples of 12 |\n| 15 | [101, 202, 303, 404, 505] | 5 | Hundreds |\n| 16 | [3, 6, 9, 12, 15, 18, 21, 24] | 8 | Multiples of 3 |\n| 17 | [2, 2, 2, 2, 2, 2]       | 6  | Repeated same number |\n| 18 | [14, 28, 42, 56, 70]    | 5  | Multiples of 14 |\n| 19 | [1, 4, 9, 16, 25, 36]   | 6  | Squares |\n| 20 | [100, 90, 80, 70, 60]   | 5  | Descending |\n",
    "example": {
      "input": "[1, 2, 3]",
      "output": "3",
      "explanation": "Queue has 3 elements."
    },
    "answer": "from collections import deque\nimport sys\n\narr = list(map(int, sys.stdin.read().strip().split()))\nq = deque(arr)\n\ndef count_elements(q):\n    count = 0\n    while q:\n        q.popleft()\n        count += 1\n    return count\n\nprint(count_elements(q))\n"
  },
  {
    "id": 16,
    "title": "Check if Two Queues are Identical",
    "description": "Given two queues, check if they are identical i.e., contain the exact same elements in the same order.\n\n| Test Cases | Queue1 | Queue2 | Expected Output | Notes |\n|------------|--------|--------|-----------------|-------|\n| 1  | [1, 2, 3]               | [1, 2, 3]               | True  | Same queues |\n| 2  | [1, 2, 3]               | [3, 2, 1]               | False | Same elements, different order |\n| 3  | [5, 10, 15]             | [5, 10, 15]             | True  | Same queues |\n| 4  | [10, 20, 30]            | [10, 20, 30, 40]        | False | Different lengths |\n| 5  | [7, 7, 7, 7]            | [7, 7, 7, 7]            | True  | Repeated same elements |\n| 6  | [1, 3, 5, 7, 9]         | [1, 3, 5, 7, 8]         | False | Last element differs |\n| 7  | [100, 200, 300]         | [100, 200, 300]         | True  | Same queues |\n| 8  | [11, 22, 33, 44, 55]    | [11, 22, 33, 44, 54]    | False | Last element differs |\n| 9  | [1, 2, 3, 4, 5, 6, 7]   | [1, 2, 3, 4, 5, 6, 7]   | True  | Larger same queues |\n| 10 | [1, 2, 3, 4, 5, 6, 7]   | [7, 6, 5, 4, 3, 2, 1]   | False | Same elements reverse order |\n| 11 | [9, 18, 27]             | [9, 18, 27]             | True  | Same queues |\n| 12 | [12, 24, 36]            | [12, 24, 35]            | False | Last element differs |\n| 13 | [1, 1, 2, 3, 5]         | [1, 1, 2, 3, 5]         | True  | Same queues with repeats |\n| 14 | [10, 20, 30, 40]        | [10, 20, 30]            | False | Different lengths |\n| 15 | [50, 40, 30, 20, 10]    | [50, 40, 30, 20, 10]    | True  | Descending order same |\n| 16 | [5, 5, 5, 5, 5, 5]      | [5, 5, 5, 5, 5, 6]      | False | One element differs |\n| 17 | [3, 6, 9, 12]           | [3, 6, 9, 12]           | True  | Same queues |\n| 18 | [7, 14, 21]             | [7, 14, 20]             | False | Last element differs |\n| 19 | [100, 200, 300, 400]    | [100, 200, 300, 400]    | True  | Same queues |\n| 20 | [1, 4, 9, 16]           | [1, 4, 9, 16]           | True  | Same queues |\n",
    "example": {
      "input": "[1, 2, 3]\n[1, 2, 3]",
      "output": "True",
      "explanation": "Both queues are identical."
    },
    "answer": "from collections import deque\n\ndef are_queues_identical(q1, q2):\n    if len(q1) != len(q2):\n        return False\n    while q1 and q2:\n        if q1.popleft() != q2.popleft():\n            return False\n    return True\n\nif __name__ == '__main__':\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n\n    q1 = deque(arr1)\n    q2 = deque(arr2)\n\n    print(are_queues_identical(q1, q2))\n"
  },
  {
    "id": 17,
    "title": "Find the Frequency of an Element in a Queue",
    "description": "Given a queue and an element x, find the frequency (count) of x in the queue.\n\n| Test Cases | Queue | x | Expected Output | Notes |\n|------------|-------|---|-----------------|-------|\n| 1  | [1, 2, 3, 2, 4, 2]           | 2  | 3  | Multiple occurrences |\n| 2  | [5, 5, 5, 5]                 | 5  | 4  | All same elements |\n| 3  | [1, 2, 3, 4, 5]              | 6  | 0  | Element not present |\n| 4  | [10, 20, 30, 20, 10]         | 10 | 2  | Two occurrences |\n| 5  | [7, 14, 21, 28, 35, 42, 7]   | 7  | 2  | First and last |\n| 6  | [3, 3, 3, 3, 3, 3, 3, 3]     | 3  | 8  | All same elements |\n| 7  | [1, 1, 2, 2, 3, 3, 4, 4]     | 4  | 2  | Two occurrences |\n| 8  | [9, 18, 27, 36, 45]          | 27 | 1  | Single occurrence |\n| 9  | [100, 200, 300, 200, 100]    | 200| 2  | Middle elements |\n| 10 | [15, 30, 45, 60, 75]         | 100| 0  | Element not present |\n| 11 | [1, 2, 3, 4, 5, 6, 7, 8, 9]  | 5  | 1  | Middle element |\n| 12 | [2, 4, 6, 8, 10]             | 2  | 1  | Single occurrence at start |\n| 13 | [12, 24, 36, 48, 60]         | 60 | 1  | Single occurrence at end |\n| 14 | [5, 10, 15, 20, 25, 30, 35]  | 15 | 1  | Single occurrence middle |\n| 15 | [7, 14, 21, 28, 35]          | 28 | 1  | Single occurrence middle |\n| 16 | [2, 2, 2, 3, 3, 3, 4, 4, 4]  | 3  | 3  | Multiple occurrences |\n| 17 | [8, 16, 24, 32, 40]          | 24 | 1  | Single occurrence |\n| 18 | [100, 100, 100, 200, 200]    | 200| 2  | Two occurrences at end |\n| 19 | [1, 3, 5, 7, 9]              | 4  | 0  | Not present |\n| 20 | [11, 22, 33, 44, 55, 66, 77] | 33 | 1  | Single occurrence |\n",
    "example": {
      "input": "[1, 2, 3, 2, 4, 2]\n2",
      "output": "3",
      "explanation": "The element 2 appears 3 times."
    },
    "answer": "from collections import deque\n\nx = int(input())\narr = list(map(int, input().split()))\nq = deque(arr)\n\ndef frequency_in_queue(q, x):\n    count = 0\n    while q:\n        val = q.popleft()\n        if val == x:\n            count += 1\n    return count\n\nprint(frequency_in_queue(q, x))\n"
  },
  {
  "id": 18,
  "title": "Rotate a Queue by K Elements",
  "description": "Given a queue and an integer K, rotate the queue by K elements from the front to the back.\n\n| Test Cases | Queue | K | Expected Output | Notes |\n|------------|-------|---|-----------------|-------|\n| 1  | [1, 2, 3, 4, 5]             | 2  | [3, 4, 5, 1, 2]           | Rotate first 2 elements to back |\n| 2  | [10, 20, 30, 40, 50, 60]    | 4  | [50, 60, 10, 20, 30, 40]  | Rotate 4 times                  |\n| 3  | [1, 2, 3]                   | 3  | [1, 2, 3]                 | Rotate full length, no change  |\n| 4  | [7, 14, 21, 28]             | 1  | [14, 21, 28, 7]           | Rotate once                   |\n| 5  | [5, 10, 15, 20]             | 0  | [5, 10, 15, 20]           | Rotate zero times             |\n| 6  | [100, 200, 300]             | 5  | [300, 100, 200]           | Rotate 5 (5 % 3 = 2)          |\n| 7  | [8, 16, 24, 32, 40, 48]     | 6  | [8, 16, 24, 32, 40, 48]   | Rotate length times, no change |\n| 8  | [9, 18, 27]                 | 7  | [27, 9, 18]               | Rotate 7 (7 % 3 = 1)          |\n| 9  | [11, 22, 33, 44, 55]        | 3  | [44, 55, 11, 22, 33]      | Rotate 3 times                |\n| 10 | [2, 4, 6, 8, 10, 12]        | 5  | [12, 2, 4, 6, 8, 10]      | Rotate 5 times                |\n| 11 | [1, 3, 5, 7, 9, 11, 13, 15] | 4  | [9, 11, 13, 15, 1, 3, 5, 7] | Rotate 4 times             |\n| 12 | [20, 30, 40, 50, 60]        | 2  | [40, 50, 60, 20, 30]      | Rotate 2 times                |\n| 13 | [1000, 2000, 3000, 4000]    | 3  | [4000, 1000, 2000, 3000]  | Rotate 3 times                |\n| 14 | [1, 1, 1, 1, 1]             | 1  | [1, 1, 1, 1, 1]           | All elements same             |\n| 15 | [5, 10, 15, 20, 25]         | 7  | [20, 25, 5, 10, 15]       | Rotate 7 (7 % 5 = 2)          |",
  "example": {
    "input": "[1, 2, 3, 4, 5]\n2",
    "output": "[3, 4, 5, 1, 2]",
    "explanation": "After rotating 2 elements, the first two elements 1 and 2 move to the back."
  },
  "answer": "from collections import deque\nimport sys\n\nlines = sys.stdin.read().splitlines()\nk = int(lines[0])\narr = list(map(int, lines[1].split()))\nq = deque(arr)\n\nk = k % len(q) if q else 0\nfor _ in range(k):\n    q.append(q.popleft())\n\nprint(*q)\n"
}

]
            }
