{
    "questions": [
    {
      "id": 1,
      "title": "Implement queue using array",
      "description": "Implement a queue using an array with enqueue, dequeue, front, and empty operations.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | enqueue(1), enqueue(2) | [1, 2] | Basic enqueue operations |\n| 2 | dequeue() | 1 | Dequeue first enqueued element |\n| 3 | front() | 2 | Check front after dequeue |\n| 4 | empty() | False | Queue is not empty |\n| 5 | dequeue(), dequeue() | 2 | Multiple dequeues |\n| 6 | enqueue(5), front() | 5 | Front after one enqueue |\n| 7 | enqueue(10), enqueue(20), dequeue() | 10 | Dequeue in FIFO |\n| 8 | enqueue(3), empty() | False | Check empty with one element |\n| 9 | dequeue(), dequeue() | [] | Dequeuing empty queue |\n| 10 | enqueue(8), enqueue(9), dequeue() | 8 | First in first out |\n| 11 | enqueue(11), front() | 11 | Enqueue and front |\n| 12 | enqueue(12), front() | 12 | Enqueue and front |\n| 13 | enqueue(13), front() | 13 | Enqueue and front |\n| 14 | enqueue(14), front() | 14 | Enqueue and front |\n| 15 | enqueue(15), front() | 15 | Enqueue and front |\n| 16 | enqueue(16), front() | 16 | Enqueue and front |\n| 17 | enqueue(17), front() | 17 | Enqueue and front |\n| 18 | enqueue(18), front() | 18 | Enqueue and front |\n| 19 | enqueue(19), front() | 19 | Enqueue and front |\n| 20 | enqueue(20), front() | 20 | Enqueue and front |\n| 21 | enqueue(21), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 22 | enqueue(22), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 23 | enqueue(23), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 24 | enqueue(24), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 25 | enqueue(25), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 26 | enqueue(26), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 27 | enqueue(27), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 28 | enqueue(28), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 29 | enqueue(29), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 30 | enqueue(30), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 31 | empty() | True | Empty queue initially |\n| 32 | empty() | True | Empty queue initially |\n| 33 | empty() | True | Empty queue initially |\n| 34 | empty() | True | Empty queue initially |\n| 35 | empty() | True | Empty queue initially |\n| 36 | empty() | True | Empty queue initially |\n| 37 | empty() | True | Empty queue initially |\n| 38 | empty() | True | Empty queue initially |\n| 39 | empty() | True | Empty queue initially |\n| 40 | empty() | True | Empty queue initially |",
      "example": {
        "input": "enqueue(1), enqueue(2), dequeue()",
        "output": "1",
        "explanation": "After enqueuing 1 and 2, dequeuing removes 1 (FIFO order)."
      },
      "answer": "class Queue:\n    def __init__(self):\n        self.arr = []\n        self.front_idx = 0\n    def enqueue(self, x):\n        self.arr.append(x)\n    def dequeue(self):\n        if self.front_idx >= len(self.arr):\n            return None\n        val = self.arr[self.front_idx]\n        self.front_idx += 1\n        return val\n    def front(self):\n        if self.front_idx >= len(self.arr):\n            return None\n        return self.arr[self.front_idx]\n    def empty(self):\n        return self.front_idx >= len(self.arr)"
    },
    {
      "id": 2,
      "title": "Implement queue using linked list",
      "description": "Implement a queue using a linked list with enqueue, dequeue, front, and empty operations.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | enqueue(1), enqueue(2) | [1, 2] | Basic enqueue operations |\n| 2 | dequeue() | 1 | Dequeue first enqueued element |\n| 3 | front() | 2 | Check front after dequeue |\n| 4 | empty() | False | Queue is not empty |\n| 5 | dequeue(), dequeue() | 2 | Multiple dequeues |\n| 6 | enqueue(5), front() | 5 | Front after one enqueue |\n| 7 | enqueue(10), enqueue(20), dequeue() | 10 | Dequeue in FIFO |\n| 8 | enqueue(3), empty() | False | Check empty with one element |\n| 9 | dequeue(), dequeue() | [] | Dequeuing empty queue |\n| 10 | enqueue(8), enqueue(9), dequeue() | 8 | First in first out |\n| 11 | enqueue(11), front() | 11 | Enqueue and front |\n| 12 | enqueue(12), front() | 12 | Enqueue and front |\n| 13 | enqueue(13), front() | 13 | Enqueue and front |\n| 14 | enqueue(14), front() | 14 | Enqueue and front |\n| 15 | enqueue(15), front() | 15 | Enqueue and front |\n| 16 | enqueue(16), front() | 16 | Enqueue and front |\n| 17 | enqueue(17), front() | 17 | Enqueue and front |\n| 18 | enqueue(18), front() | 18 | Enqueue and front |\n| 19 | enqueue(19), front() | 19 | Enqueue and front |\n| 20 | enqueue(20), front() | 20 | Enqueue and front |\n| 21 | enqueue(21), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 22 | enqueue(22), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 23 | enqueue(23), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 24 | enqueue(24), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 25 | enqueue(25), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 26 | enqueue(26), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 27 | enqueue(27), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 28 | enqueue(28), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 29 | enqueue(29), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 30 | enqueue(30), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 31 | empty() | True | Empty queue initially |\n| 32 | empty() | True | Empty queue initially |\n| 33 | empty() | True | Empty queue initially |\n| 34 | empty() | True | Empty queue initially |\n| 35 | empty() | True | Empty queue initially |\n| 36 | empty() | True | Empty queue initially |\n| 37 | empty() | True | Empty queue initially |\n| 38 | empty() | True | Empty queue initially |\n| 39 | empty() | True | Empty queue initially |\n| 40 | empty() | True | Empty queue initially |",
      "example": {
        "input": "enqueue(1), enqueue(2), dequeue()",
        "output": "1",
        "explanation": "After enqueuing 1 and 2, dequeuing removes 1 (FIFO order)."
      },
      "answer": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.head = self.tail = None\n    def enqueue(self, x):\n        node = Node(x)\n        if not self.tail:\n            self.head = self.tail = node\n        else:\n            self.tail.next = node\n            self.tail = node\n    def dequeue(self):\n        if not self.head:\n            return None\n        val = self.head.val\n        self.head = self.head.next\n        if not self.head:\n            self.tail = None\n        return val\n    def front(self):\n        return self.head.val if self.head else None\n    def empty(self):\n        return self.head is None"
    },
    {
      "id": 3,
      "title": "Circular queue implementation",
      "description": "Implement a circular queue with enqueue, dequeue, front, and empty operations.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | enqueue(1), enqueue(2) | [1, 2] | Basic enqueue operations |\n| 2 | dequeue() | 1 | Dequeue first enqueued element |\n| 3 | front() | 2 | Check front after dequeue |\n| 4 | empty() | False | Queue is not empty |\n| 5 | dequeue(), dequeue() | 2 | Multiple dequeues |\n| 6 | enqueue(5), front() | 5 | Front after one enqueue |\n| 7 | enqueue(10), enqueue(20), dequeue() | 10 | Dequeue in FIFO |\n| 8 | enqueue(3), empty() | False | Check empty with one element |\n| 9 | dequeue(), dequeue() | [] | Dequeuing empty queue |\n| 10 | enqueue(8), enqueue(9), dequeue() | 8 | First in first out |\n| 11 | enqueue(11), front() | 11 | Enqueue and front |\n| 12 | enqueue(12), front() | 12 | Enqueue and front |\n| 13 | enqueue(13), front() | 13 | Enqueue and front |\n| 14 | enqueue(14), front() | 14 | Enqueue and front |\n| 15 | enqueue(15), front() | 15 | Enqueue and front |\n| 16 | enqueue(16), front() | 16 | Enqueue and front |\n| 17 | enqueue(17), front() | 17 | Enqueue and front |\n| 18 | enqueue(18), front() | 18 | Enqueue and front |\n| 19 | enqueue(19), front() | 19 | Enqueue and front |\n| 20 | enqueue(20), front() | 20 | Enqueue and front |\n| 21 | enqueue(21), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 22 | enqueue(22), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 23 | enqueue(23), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 24 | enqueue(24), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 25 | enqueue(25), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 26 | enqueue(26), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 27 | enqueue(27), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 28 | enqueue(28), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 29 | enqueue(29), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 30 | enqueue(30), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 31 | empty() | True | Empty queue initially |\n| 32 | empty() | True | Empty queue initially |\n| 33 | empty() | True | Empty queue initially |\n| 34 | empty() | True | Empty queue initially |\n| 35 | empty() | True | Empty queue initially |\n| 36 | empty() | True | Empty queue initially |\n| 37 | empty() | True | Empty queue initially |\n| 38 | empty() | True | Empty queue initially |\n| 39 | empty() | True | Empty queue initially |\n| 40 | empty() | True | Empty queue initially |",
      "example": {
        "input": "enqueue(1), enqueue(2), dequeue()",
        "output": "1",
        "explanation": "After enqueuing 1 and 2, dequeuing removes 1 (FIFO order)."
      },
      "answer": "class CircularQueue:\n    def __init__(self, k=100):\n        self.q = [None]*k\n        self.head = self.tail = 0\n        self.size = 0\n        self.k = k\n    def enqueue(self, x):\n        if self.size == self.k:\n            return False\n        self.q[self.tail] = x\n        self.tail = (self.tail + 1) % self.k\n        self.size += 1\n        return True\n    def dequeue(self):\n        if self.size == 0:\n            return None\n        val = self.q[self.head]\n        self.head = (self.head + 1) % self.k\n        self.size -= 1\n        return val\n    def front(self):\n        return self.q[self.head] if self.size else None\n    def empty(self):\n        return self.size == 0"
    },
    {
      "id": 4,
      "title": "Implement queue using stacks",
      "description": "Implement a queue using two stacks with enqueue, dequeue, front, and empty operations.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | enqueue(1), enqueue(2) | [1, 2] | Basic enqueue operations |\n| 2 | dequeue() | 1 | Dequeue first enqueued element |\n| 3 | front() | 2 | Check front after dequeue |\n| 4 | empty() | False | Queue is not empty |\n| 5 | dequeue(), dequeue() | 2 | Multiple dequeues |\n| 6 | enqueue(5), front() | 5 | Front after one enqueue |\n| 7 | enqueue(10), enqueue(20), dequeue() | 10 | Dequeue in FIFO |\n| 8 | enqueue(3), empty() | False | Check empty with one element |\n| 9 | dequeue(), dequeue() | [] | Dequeuing empty queue |\n| 10 | enqueue(8), enqueue(9), dequeue() | 8 | First in first out |\n| 11 | enqueue(11), front() | 11 | Enqueue and front |\n| 12 | enqueue(12), front() | 12 | Enqueue and front |\n| 13 | enqueue(13), front() | 13 | Enqueue and front |\n| 14 | enqueue(14), front() | 14 | Enqueue and front |\n| 15 | enqueue(15), front() | 15 | Enqueue and front |\n| 16 | enqueue(16), front() | 16 | Enqueue and front |\n| 17 | enqueue(17), front() | 17 | Enqueue and front |\n| 18 | enqueue(18), front() | 18 | Enqueue and front |\n| 19 | enqueue(19), front() | 19 | Enqueue and front |\n| 20 | enqueue(20), front() | 20 | Enqueue and front |\n| 21 | enqueue(21), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 22 | enqueue(22), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 23 | enqueue(23), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 24 | enqueue(24), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 25 | enqueue(25), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 26 | enqueue(26), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 27 | enqueue(27), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 28 | enqueue(28), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 29 | enqueue(29), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 30 | enqueue(30), dequeue(), empty() | True | Enqueue dequeue and check empty |\n| 31 | empty() | True | Empty queue initially |\n| 32 | empty() | True | Empty queue initially |\n| 33 | empty() | True | Empty queue initially |\n| 34 | empty() | True | Empty queue initially |\n| 35 | empty() | True | Empty queue initially |\n| 36 | empty() | True | Empty queue initially |\n| 37 | empty() | True | Empty queue initially |\n| 38 | empty() | True | Empty queue initially |\n| 39 | empty() | True | Empty queue initially |\n| 40 | empty() | True | Empty queue initially |",
      "example": {
        "input": "enqueue(1), enqueue(2), dequeue()",
        "output": "1",
        "explanation": "After enqueuing 1 and 2, dequeuing removes 1 (FIFO order)."
      },
      "answer": "class Queue:\n    def __init__(self):\n        self.s1 = []\n        self.s2 = []\n    def enqueue(self, x):\n        self.s1.append(x)\n    def dequeue(self):\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2.pop() if self.s2 else None\n    def front(self):\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2[-1] if self.s2 else None\n    def empty(self):\n        return not self.s1 and not self.s2"
    },
    
        {
          "id": 5,
          "title": "LRU Cache design",
          "description": "Design and implement an LRU (Least Recently Used) cache.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | put(1,1), put(2,2), get(1) | 1 | Access updates usage |\n| 2 | put(1,1), put(2,2), get(2) | 2 | Access updates usage |\n| 3 | put(1,1), put(2,2), put(3,3), get(1) | -1 | 1 is evicted |\n| 4 | put(1,1), put(2,2), put(3,3), get(2) | 2 | 2 is present |\n| 5 | put(1,1), put(2,2), put(3,3), get(3) | 3 | 3 is present |\n| 6 | put(1,1), put(2,2), get(1), put(3,3), get(2) | -1 | 2 is evicted |\n| 7 | put(1,1), put(2,2), get(2), put(3,3), get(1) | -1 | 1 is evicted |\n| 8 | put(1,1), put(2,2), get(2), put(3,3), get(3) | 3 | 3 is present |\n| 9 | put(1,1), put(2,2), put(3,3), get(2) | 2 | 2 is present |\n| 10 | put(1,1), put(2,2), put(3,3), get(3) | 3 | 3 is present |\n| 11 | put(1,1), put(2,2), put(3,3), get(1) | -1 | 1 is evicted |\n| 12 | put(1,1), put(2,2), get(1), put(3,3), get(2) | -1 | 2 is evicted |\n| 13 | put(1,1), put(2,2), get(2), put(3,3), get(1) | -1 | 1 is evicted |\n| 14 | put(1,1), put(2,2), get(2), put(3,3), get(3) | 3 | 3 is present |\n| 15 | put(1,1), put(2,2), put(3,3), get(2) | 2 | 2 is present |\n| 16 | put(1,1), put(2,2), put(3,3), get(3) | 3 | 3 is present |\n| 17 | put(1,1), put(2,2), put(3,3), get(1) | -1 | 1 is evicted |\n| 18 | put(1,1), put(2,2), get(1), put(3,3), get(2) | -1 | 2 is evicted |\n| 19 | put(1,1), put(2,2), get(2), put(3,3), get(1) | -1 | 1 is evicted |\n| 20 | put(1,1), put(2,2), get(2), put(3,3), get(3) | 3 | 3 is present |\n| 21 | put(1,1), get(1) | 1 | Only one item |\n| 22 | put(1,1), get(2) | -1 | Not present |\n| 23 | put(1,1), put(2,2), get(2) | 2 | Present |\n| 24 | put(1,1), put(2,2), get(1) | 1 | Present |\n| 25 | put(1,1), put(2,2), put(3,3), get(2) | 2 | 2 is present |\n| 26 | put(1,1), put(2,2), put(3,3), get(3) | 3 | 3 is present |\n| 27 | put(1,1), put(2,2), put(3,3), get(1) | -1 | 1 is evicted |\n| 28 | put(1,1), put(2,2), get(1), put(3,3), get(2) | -1 | 2 is evicted |\n| 29 | put(1,1), put(2,2), get(2), put(3,3), get(1) | -1 | 1 is evicted |\n| 30 | put(1,1), put(2,2), get(2), put(3,3), get(3) | 3 | 3 is present |\n| 31 | put(1,1), get(1) | 1 | Only one item |\n| 32 | put(1,1), get(2) | -1 | Not present |\n| 33 | put(1,1), put(2,2), get(2) | 2 | Present |\n| 34 | put(1,1), put(2,2), get(1) | 1 | Present |\n| 35 | put(1,1), put(2,2), put(3,3), get(2) | 2 | 2 is present |\n| 36 | put(1,1), put(2,2), put(3,3), get(3) | 3 | 3 is present |\n| 37 | put(1,1), put(2,2), put(3,3), get(1) | -1 | 1 is evicted |\n| 38 | put(1,1), put(2,2), get(1), put(3,3), get(2) | -1 | 2 is evicted |\n| 39 | put(1,1), put(2,2), get(2), put(3,3), get(1) | -1 | 1 is evicted |\n| 40 | put(1,1), put(2,2), get(2), put(3,3), get(3) | 3 | 3 is present |",
          "example": {
            "input": "put(1,1), put(2,2), get(1)",
            "output": "1",
            "explanation": "get(1) returns 1 and updates usage."
          },
          "answer": "from collections import OrderedDict\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)"
        },
        {
          "id": 6,
          "title": "Sliding window maximum",
          "description": "Given an array and a window size k, return the maximum for each sliding window.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,3,-1,-3,5,3,6,7], k=3 | [3,3,5,5,6,7] | Standard case |\n| 2 | [1], k=1 | [1] | Single element |\n| 3 | [9, 11], k=2 | [11] | Two elements |\n| 4 | [4, -2], k=2 | [4] | Negative number |\n| 5 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Mixed values |\n| 6 | [1,2,3,4,5], k=2 | [2,3,4,5] | Increasing |\n| 7 | [5,4,3,2,1], k=2 | [5,4,3,2] | Decreasing |\n| 8 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 9 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 10 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 11 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 12 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 13 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 14 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 15 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 16 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 17 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 18 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 19 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 20 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 21 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 22 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 23 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 24 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 25 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 26 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 27 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 28 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 29 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 30 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 31 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 32 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 33 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 34 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |\n| 35 | [1,3,1,2,0,5], k=4 | [3,3,2] | Window size 4 |\n| 36 | [1,3,1,2,0,5], k=2 | [3,3,2,2,5] | Window size 2 |\n| 37 | [1,3,1,2,0,5], k=3 | [3,3,2,5] | Window size 3 |\n| 38 | [1,3,1,2,0,5], k=1 | [1,3,1,2,0,5] | Window size 1 |\n| 39 | [1,3,1,2,0,5], k=6 | [5] | Window size equals array |\n| 40 | [1,3,1,2,0,5], k=5 | [3,3] | Window size 5 |",
          "example": {
            "input": "[1,3,-1,-3,5,3,6,7], k=3",
            "output": "[3,3,5,5,6,7]",
            "explanation": "The maximum in each sliding window of size 3."
          },
          "answer": "from collections import deque\ndef maxSlidingWindow(nums, k):\n    dq = deque()\n    res = []\n    for i, n in enumerate(nums):\n        while dq and nums[dq[-1]] < n:\n            dq.pop()\n        dq.append(i)\n        if dq[0] == i - k:\n            dq.popleft()\n        if i >= k - 1:\n            res.append(nums[dq[0]])\n    return res"
        },
        {
          "id": 7,
          "title": "First non-repeating character in a stream",
          "description": "Given a stream of characters, find the first non-repeating character at each point in the stream.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | aabc | a#bb | Example 1 |\n| 2 | abac | aabb | Example 2 |\n| 3 | aabbcc | a#b#c# | All repeat |\n| 4 | abcabc | aaabbb | All repeat after first |\n| 5 | a | a | Single character |\n| 6 | aa | a# | Two same |\n| 7 | ab | aa | Two different |\n| 8 | abc | aaa | Three different |\n| 9 | aab | a#b | Repeat then unique |\n| 10 | abba | aabb | Palindrome |\n| 11 | abcdabcd | aaaabbbb | All repeat after first |\n| 12 | aabbccdd | a#b#c#d# | All repeat |\n| 13 | abcde | aaaaa | All unique |\n| 14 | aabbccdde | a#b#c#d#e | Last unique |\n| 15 | abacabad | aabbccdd | Alternating |\n| 16 | abacabadc | aabbccddc | Last unique at end |\n| 17 | abacabadcaba | aabbccddcaaa | Unique at end |\n| 18 | abacabadcabab | aabbccddcaaab | Unique at end |\n| 19 | abacabadcababd | aabbccddcaaabd | Unique at end |\n| 20 | abacabadcababdc | aabbccddcaaabdc | Unique at end |\n| 21 | abacabadcababdca | aabbccddcaaabdcaa | Unique at end |\n| 22 | abacabadcababdcab | aabbccddcaaabdcaaa | Unique at end |\n| 23 | abacabadcababdcabc | aabbccddcaaabdcaaac | Unique at end |\n| 24 | abacabadcababdcabcd | aabbccddcaaabdcaaacd | Unique at end |\n| 25 | abacabadcababdcabcde | aabbccddcaaabdcaaacde | Unique at end |\n| 26 | abacabadcababdcabcdef | aabbccddcaaabdcaaacdef | Unique at end |\n| 27 | abacabadcababdcabcdefg | aabbccddcaaabdcaaacdefg | Unique at end |\n| 28 | abacabadcababdcabcdefgh | aabbccddcaaabdcaaacdefgh | Unique at end |\n| 29 | abacabadcababdcabcdefghi | aabbccddcaaabdcaaacdefghi | Unique at end |\n| 30 | abacabadcababdcabcdefghij | aabbccddcaaabdcaaacdefghij | Unique at end |\n| 31 | abacabadcababdcabcdefghijk | aabbccddcaaabdcaaacdefghijk | Unique at end |\n| 32 | abacabadcababdcabcdefghijkl | aabbccddcaaabdcaaacdefghijkl | Unique at end |\n| 33 | abacabadcababdcabcdefghijklm | aabbccddcaaabdcaaacdefghijklm | Unique at end |\n| 34 | abacabadcababdcabcdefghijklmn | aabbccddcaaabdcaaacdefghijklmn | Unique at end |\n| 35 | abacabadcababdcabcdefghijklmno | aabbccddcaaabdcaaacdefghijklmno | Unique at end |\n| 36 | abacabadcababdcabcdefghijklmnop | aabbccddcaaabdcaaacdefghijklmnop | Unique at end |\n| 37 | abacabadcababdcabcdefghijklmnopq | aabbccddcaaabdcaaacdefghijklmnopq | Unique at end |\n| 38 | abacabadcababdcabcdefghijklmnopqr | aabbccddcaaabdcaaacdefghijklmnopqr | Unique at end |\n| 39 | abacabadcababdcabcdefghijklmnopqrs | aabbccddcaaabdcaaacdefghijklmnopqrs | Unique at end |\n| 40 | abacabadcababdcabcdefghijklmnopqrst | aabbccddcaaabdcaaacdefghijklmnopqrst | Unique at end |",
          "example": {
            "input": "aabc",
            "output": "a#bb",
            "explanation": "First non-repeating character at each point."
          },
          "answer": "from collections import deque, Counter\ndef first_non_repeating(stream):\n    q = deque()\n    count = Counter()\n    result = []\n    for ch in stream:\n        count[ch] += 1\n        q.append(ch)\n        while q and count[q[0]] > 1:\n            q.popleft()\n        result.append(q[0] if q else '#')\n    return ''.join(result)"
        },
        {
          "id": 8,
          "title": "Rotten oranges problem",
          "description": "Given a grid of oranges, find the minimum time to rot all oranges. 0: empty, 1: fresh, 2: rotten.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 2 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 3 | [[0,2]] | 0 | No fresh |\n| 4 | [[1,2,1,2]] | 1 | All rot quickly |\n| 5 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 6 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 7 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 8 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 9 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 10 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 11 | [[0,2]] | 0 | No fresh |\n| 12 | [[1,2,1,2]] | 1 | All rot quickly |\n| 13 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 14 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 15 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 16 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 17 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 18 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 19 | [[0,2]] | 0 | No fresh |\n| 20 | [[1,2,1,2]] | 1 | All rot quickly |\n| 21 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 22 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 23 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 24 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 25 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 26 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 27 | [[0,2]] | 0 | No fresh |\n| 28 | [[1,2,1,2]] | 1 | All rot quickly |\n| 29 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 30 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 31 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 32 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |\n| 33 | [[2,1,1],[1,1,0],[0,1,1]] | 4 | All rot |\n| 34 | [[2,1,1],[0,1,1],[1,0,1]] | -1 | Not all can rot |\n| 35 | [[0,2]] | 0 | No fresh |\n| 36 | [[1,2,1,2]] | 1 | All rot quickly |\n| 37 | [[1,1,1],[1,2,1],[1,1,1]] | 2 | Center rot |\n| 38 | [[2,2,2],[2,2,2],[2,2,2]] | 0 | All rotten |\n| 39 | [[1,1,1],[1,1,1],[1,1,1]] | -1 | No rotten |\n| 40 | [[0,0,0],[0,0,0],[0,0,0]] | 0 | All empty |",
          "example": {
            "input": "[[2,1,1],[1,1,0],[0,1,1]]",
            "output": "4",
            "explanation": "All oranges rot in 4 minutes."
          },
          "answer": "from collections import deque\ndef orangesRotting(grid):\n    rows, cols = len(grid), len(grid[0])\n    q = deque()\n    fresh = 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 2:\n                q.append((r, c))\n            elif grid[r][c] == 1:\n                fresh += 1\n    minutes = 0\n    while q and fresh:\n        for _ in range(len(q)):\n            r, c = q.popleft()\n            for dr, dc in [(-1,0),(1,0),(0,-1),(0,1)]:\n                nr, nc = r+dr, c+dc\n                if 0<=nr<rows and 0<=nc<cols and grid[nr][nc]==1:\n                    grid[nr][nc]=2\n                    fresh -= 1\n                    q.append((nr, nc))\n        minutes += 1\n    return minutes if fresh==0 else -1"
        },
        {
          "id": 9,
          "title": "Generate binary numbers from 1 to N",
          "description": "Given a number N, generate binary numbers from 1 to N.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | 1 | ['1'] | Single number |\n| 2 | 2 | ['1','10'] | Two numbers |\n| 3 | 3 | ['1','10','11'] | Three numbers |\n| 4 | 4 | ['1','10','11','100'] | Four numbers |\n| 5 | 5 | ['1','10','11','100','101'] | Five numbers |\n| 6 | 6 | ['1','10','11','100','101','110'] | Six numbers |\n| 7 | 7 | ['1','10','11','100','101','110','111'] | Seven numbers |\n| 8 | 8 | ['1','10','11','100','101','110','111','1000'] | Eight numbers |\n| 9 | 9 | ['1','10','11','100','101','110','111','1000','1001'] | Nine numbers |\n| 10 | 10 | ['1','10','11','100','101','110','111','1000','1001','1010'] | Ten numbers |\n| 11 | 11 | ['1','10','11','100','101','110','111','1000','1001','1010','1011'] | Eleven numbers |\n| 12 | 12 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100'] | Twelve numbers |\n| 13 | 13 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101'] | Thirteen numbers |\n| 14 | 14 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110'] | Fourteen numbers |\n| 15 | 15 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111'] | Fifteen numbers |\n| 16 | 16 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000'] | Sixteen numbers |\n| 17 | 17 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001'] | Seventeen numbers |\n| 18 | 18 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010'] | Eighteen numbers |\n| 19 | 19 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011'] | Nineteen numbers |\n| 20 | 20 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100'] | Twenty numbers |\n| 21 | 21 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101'] | Twenty-one numbers |\n| 22 | 22 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110'] | Twenty-two numbers |\n| 23 | 23 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111'] | Twenty-three numbers |\n| 24 | 24 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000'] | Twenty-four numbers |\n| 25 | 25 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001'] | Twenty-five numbers |\n| 26 | 26 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010'] | Twenty-six numbers |\n| 27 | 27 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011'] | Twenty-seven numbers |\n| 28 | 28 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100'] | Twenty-eight numbers |\n| 29 | 29 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101'] | Twenty-nine numbers |\n| 30 | 30 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110'] | Thirty numbers |\n| 31 | 31 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111'] | Thirty-one numbers |\n| 32 | 32 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000'] | Thirty-two numbers |\n| 33 | 33 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001'] | Thirty-three numbers |\n| 34 | 34 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010'] | Thirty-four numbers |\n| 35 | 35 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011'] | Thirty-five numbers |\n| 36 | 36 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100'] | Thirty-six numbers |\n| 37 | 37 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101'] | Thirty-seven numbers |\n| 38 | 38 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110'] | Thirty-eight numbers |\n| 39 | 39 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110','100111'] | Thirty-nine numbers |\n| 40 | 40 | ['1','10','11','100','101','110','111','1000','1001','1010','1011','1100','1101','1110','1111','10000','10001','10010','10011','10100','10101','10110','10111','11000','11001','11010','11011','11100','11101','11110','11111','100000','100001','100010','100011','100100','100101','100110','100111','101000'] | Forty numbers |",
          "example": {
            "input": "5",
            "output": "['1','10','11','100','101']",
            "explanation": "Binary numbers from 1 to 5."
          },
          "answer": "from collections import deque\ndef generateBinaryNumbers(N):\n    res = []\n    q = deque()\n    q.append('1')\n    for _ in range(N):\n        s = q.popleft()\n        res.append(s)\n        q.append(s+'0')\n        q.append(s+'1')\n    return res"
        },
        {
          "id": 10,
          "title": "Interleave the first half of the queue with the second half",
          "description": "Given a queue of even length, interleave the first half with the second half.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4] | [1,3,2,4] | Basic |\n| 2 | [10,20,30,40,50,60] | [10,40,20,50,30,60] | 6 elements |\n| 3 | [1,2,3,4,5,6,7,8] | [1,5,2,6,3,7,4,8] | 8 elements |\n| 4 | [1,2] | [1,2] | 2 elements |\n| 5 | [1,2,3,4,5,6] | [1,4,2,5,3,6] | 6 elements |\n| 6 | [1,2,3,4,5,6,7,8,9,10] | [1,6,2,7,3,8,4,9,5,10] | 10 elements |\n| 7 | [2,4,6,8,10,12] | [2,8,4,10,6,12] | Even numbers |\n| 8 | [1,3,5,7,9,11] | [1,7,3,9,5,11] | Odd numbers |\n| 9 | [1,2,3,4,5,6,7,8,9,10,11,12] | [1,7,2,8,3,9,4,10,5,11,6,12] | 12 elements |\n| 10 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14] | [1,8,2,9,3,10,4,11,5,12,6,13,7,14] | 14 elements |\n| 11 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] | [1,9,2,10,3,11,4,12,5,13,6,14,7,15,8,16] | 16 elements |\n| 12 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] | [1,10,2,11,3,12,4,13,5,14,6,15,7,16,8,17,9,18] | 18 elements |\n| 13 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20] | 20 elements |\n| 14 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22] | [1,12,2,13,3,14,4,15,5,16,6,17,7,18,8,19,9,20,10,21,11,22] | 22 elements |\n| 15 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] | [1,13,2,14,3,15,4,16,5,17,6,18,7,19,8,20,9,21,10,22,11,23,12,24] | 24 elements |\n| 16 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] | [1,14,2,15,3,16,4,17,5,18,6,19,7,20,8,21,9,22,10,23,11,24,12,25,13,26] | 26 elements |\n| 17 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [1,15,2,16,3,17,4,18,5,19,6,20,7,21,8,22,9,23,10,24,11,25,12,26,13,27,14,28] | 28 elements |\n| 18 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30] | [1,16,2,17,3,18,4,19,5,20,6,21,7,22,8,23,9,24,10,25,11,26,12,27,13,28,14,29,15,30] | 30 elements |\n| 19 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [1,17,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32] | 32 elements |\n| 20 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] | [1,18,2,19,3,20,4,21,5,22,6,23,7,24,8,25,9,26,10,27,11,28,12,29,13,30,14,31,15,32,16,33,17,34] | 34 elements |\n| 21 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [1,19,2,20,3,21,4,22,5,23,6,24,7,25,8,26,9,27,10,28,11,29,12,30,13,31,14,32,15,33,16,34,17,35,18,36] | 36 elements |\n| 22 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38] | [1,20,2,21,3,22,4,23,5,24,6,25,7,26,8,27,9,28,10,29,11,30,12,31,13,32,14,33,15,34,16,35,17,36,18,37,19,38] | 38 elements |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 24 | [2,4,6,8,10,12,14,16] | [2,10,4,12,6,14,8,16] | Even numbers |\n| 25 | [1,3,5,7,9,11,13,15] | [1,9,3,11,5,13,7,15] | Odd numbers |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | 40 elements |",
          "example": {
            "input": "[1,2,3,4]",
            "output": "[1,3,2,4]",
            "explanation": "First half [1,2], second half [3,4], interleaved."
          },
          "answer": "from collections import deque\ndef interleaveQueue(q):\n    n = len(q)//2\n    first = deque()\n    for _ in range(n):\n        first.append(q.popleft())\n    while first:\n        q.append(first.popleft())\n        q.append(q.popleft())\n    return list(q)"
        },
    
            {
              "id": 11,
              "title": "Reversing the first k elements of a queue",
              "description": "Given a queue and an integer k, reverse the first k elements of the queue.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4,5], k=3 | [3,2,1,4,5] | Reverse first 3 |\n| 2 | [1,2,3,4,5], k=5 | [5,4,3,2,1] | Reverse all |\n| 3 | [1,2,3,4,5], k=1 | [1,2,3,4,5] | Reverse first 1 |\n| 4 | [1,2,3,4,5], k=0 | [1,2,3,4,5] | Reverse none |\n| 5 | [1,2,3,4,5], k=2 | [2,1,3,4,5] | Reverse first 2 |\n| 6 | [1,2,3,4,5], k=4 | [4,3,2,1,5] | Reverse first 4 |\n| 7 | [1,2], k=2 | [2,1] | Reverse all |\n| 8 | [1,2], k=1 | [1,2] | Reverse first 1 |\n| 9 | [1], k=1 | [1] | Single element |\n| 10 | [1,2,3,4,5,6], k=3 | [3,2,1,4,5,6] | Reverse first 3 |\n| 11 | [1,2,3,4,5,6], k=6 | [6,5,4,3,2,1] | Reverse all |\n| 12 | [1,2,3,4,5,6], k=2 | [2,1,3,4,5,6] | Reverse first 2 |\n| 13 | [1,2,3,4,5,6], k=4 | [4,3,2,1,5,6] | Reverse first 4 |\n| 14 | [1,2,3,4,5,6], k=5 | [5,4,3,2,1,6] | Reverse first 5 |\n| 15 | [1,2,3,4,5,6], k=1 | [1,2,3,4,5,6] | Reverse first 1 |\n| 16 | [1,2,3,4,5,6], k=0 | [1,2,3,4,5,6] | Reverse none |\n| 17 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |\n| 18 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 19 | [1,2,3,4,5,6,7,8,9,10], k=1 | [1,2,3,4,5,6,7,8,9,10] | Reverse first 1 |\n| 20 | [1,2,3,4,5,6,7,8,9,10], k=0 | [1,2,3,4,5,6,7,8,9,10] | Reverse none |\n| 21 | [1,2,3,4,5,6,7,8,9,10], k=2 | [2,1,3,4,5,6,7,8,9,10] | Reverse first 2 |\n| 22 | [1,2,3,4,5,6,7,8,9,10], k=3 | [3,2,1,4,5,6,7,8,9,10] | Reverse first 3 |\n| 23 | [1,2,3,4,5,6,7,8,9,10], k=4 | [4,3,2,1,5,6,7,8,9,10] | Reverse first 4 |\n| 24 | [1,2,3,4,5,6,7,8,9,10], k=6 | [6,5,4,3,2,1,7,8,9,10] | Reverse first 6 |\n| 25 | [1,2,3,4,5,6,7,8,9,10], k=7 | [7,6,5,4,3,2,1,8,9,10] | Reverse first 7 |\n| 26 | [1,2,3,4,5,6,7,8,9,10], k=8 | [8,7,6,5,4,3,2,1,9,10] | Reverse first 8 |\n| 27 | [1,2,3,4,5,6,7,8,9,10], k=9 | [9,8,7,6,5,4,3,2,1,10] | Reverse first 9 |\n| 28 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 29 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |\n| 30 | [1,2,3,4,5,6,7,8,9,10], k=4 | [4,3,2,1,5,6,7,8,9,10] | Reverse first 4 |\n| 31 | [1,2,3,4,5,6,7,8,9,10], k=3 | [3,2,1,4,5,6,7,8,9,10] | Reverse first 3 |\n| 32 | [1,2,3,4,5,6,7,8,9,10], k=2 | [2,1,3,4,5,6,7,8,9,10] | Reverse first 2 |\n| 33 | [1,2,3,4,5,6,7,8,9,10], k=1 | [1,2,3,4,5,6,7,8,9,10] | Reverse first 1 |\n| 34 | [1,2,3,4,5,6,7,8,9,10], k=0 | [1,2,3,4,5,6,7,8,9,10] | Reverse none |\n| 35 | [1,2,3,4,5,6,7,8,9,10], k=10 | [10,9,8,7,6,5,4,3,2,1] | Reverse all |\n| 36 | [1,2,3,4,5,6,7,8,9,10], k=9 | [9,8,7,6,5,4,3,2,1,10] | Reverse first 9 |\n| 37 | [1,2,3,4,5,6,7,8,9,10], k=8 | [8,7,6,5,4,3,2,1,9,10] | Reverse first 8 |\n| 38 | [1,2,3,4,5,6,7,8,9,10], k=7 | [7,6,5,4,3,2,1,8,9,10] | Reverse first 7 |\n| 39 | [1,2,3,4,5,6,7,8,9,10], k=6 | [6,5,4,3,2,1,7,8,9,10] | Reverse first 6 |\n| 40 | [1,2,3,4,5,6,7,8,9,10], k=5 | [5,4,3,2,1,6,7,8,9,10] | Reverse first 5 |",
              "example": {
                "input": "[1,2,3,4,5], k=3",
                "output": "[3,2,1,4,5]",
                "explanation": "First 3 elements reversed."
              },
              "answer": "from collections import deque\ndef reverseKElements(q, k):\n    stack = []\n    for _ in range(k):\n        stack.append(q.popleft())\n    while stack:\n        q.append(stack.pop())\n    for _ in range(len(q)-k):\n        q.append(q.popleft())\n    return list(q)"
            },
            {
              "id": 12,
              "title": "Implement a deque",
              "description": "Implement a double-ended queue (deque) with push_front, push_back, pop_front, pop_back, front, back, and empty operations.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | push_back(1), push_back(2), front() | 1 | Push back and front |\n| 2 | push_front(3), back() | 2 | Push front and back |\n| 3 | pop_front() | 3 | Pop front |\n| 4 | pop_back() | 2 | Pop back |\n| 5 | empty() | True | Deque is empty |\n| 6 | push_back(4), push_front(5), front() | 5 | Push front and check |\n| 7 | push_back(6), back() | 6 | Push back and check |\n| 8 | pop_back() | 6 | Pop back |\n| 9 | pop_front() | 5 | Pop front |\n| 10 | empty() | True | Deque is empty |\n| 11 | push_front(7), push_back(8), front() | 7 | Push front and check |\n| 12 | back() | 8 | Check back |\n| 13 | pop_front() | 7 | Pop front |\n| 14 | pop_back() | 8 | Pop back |\n| 15 | empty() | True | Deque is empty |\n| 16 | push_back(9), push_back(10), pop_front() | 9 | Pop front |\n| 17 | pop_back() | 10 | Pop back |\n| 18 | empty() | True | Deque is empty |\n| 19 | push_front(11), push_back(12), pop_back() | 12 | Pop back |\n| 20 | pop_front() | 11 | Pop front |\n| 21 | empty() | True | Deque is empty |\n| 22 | push_back(13), push_front(14), front() | 14 | Push front and check |\n| 23 | back() | 13 | Check back |\n| 24 | pop_front() | 14 | Pop front |\n| 25 | pop_back() | 13 | Pop back |\n| 26 | empty() | True | Deque is empty |\n| 27 | push_front(15), push_back(16), front() | 15 | Push front and check |\n| 28 | back() | 16 | Check back |\n| 29 | pop_front() | 15 | Pop front |\n| 30 | pop_back() | 16 | Pop back |\n| 31 | empty() | True | Deque is empty |\n| 32 | push_back(17), push_front(18), front() | 18 | Push front and check |\n| 33 | back() | 17 | Check back |\n| 34 | pop_front() | 18 | Pop front |\n| 35 | pop_back() | 17 | Pop back |\n| 36 | empty() | True | Deque is empty |\n| 37 | push_front(19), push_back(20), front() | 19 | Push front and check |\n| 38 | back() | 20 | Check back |\n| 39 | pop_front() | 19 | Pop front |\n| 40 | pop_back() | 20 | Pop back |",
              "example": {
                "input": "push_back(1), push_front(2), pop_back()",
                "output": "1",
                "explanation": "Deque after operations: [2], pop_back returns 1."
              },
              "answer": "from collections import deque\nclass Deque:\n    def __init__(self):\n        self.dq = deque()\n    def push_front(self, x):\n        self.dq.appendleft(x)\n    def push_back(self, x):\n        self.dq.append(x)\n    def pop_front(self):\n        return self.dq.popleft() if self.dq else None\n    def pop_back(self):\n        return self.dq.pop() if self.dq else None\n    def front(self):\n        return self.dq[0] if self.dq else None\n    def back(self):\n        return self.dq[-1] if self.dq else None\n    def empty(self):\n        return not self.dq"
            },
            {
              "id": 13,
              "title": "Sum of minimum and maximum elements of all subarrays",
              "description": "Given an array and an integer k, find the sum of minimum and maximum elements of all subarrays of size k.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [2,5,-1,7,-3,-1,-2], k=4 | 18 | Example 1 |\n| 2 | [1,2,3,4,5], k=2 | 18 | Increasing |\n| 3 | [5,4,3,2,1], k=2 | 18 | Decreasing |\n| 4 | [1,3,1,2,0,5], k=3 | 21 | Mixed values |\n| 5 | [1,1,1,1,1], k=3 | 12 | All same |\n| 6 | [1,2,3,4,5], k=3 | 24 | Increasing |\n| 7 | [5,4,3,2,1], k=3 | 24 | Decreasing |\n| 8 | [1,3,1,2,0,5], k=2 | 18 | Mixed values |\n| 9 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 10 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |\n| 11 | [1,3,1,2,0,5], k=5 | 14 | Window size 5 |\n| 12 | [1,3,1,2,0,5], k=4 | 16 | Window size 4 |\n| 13 | [1,3,1,2,0,5], k=2 | 18 | Window size 2 |\n| 14 | [1,3,1,2,0,5], k=3 | 21 | Window size 3 |\n| 15 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 16 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |\n| 17 | [1,3,1,2,0,5], k=5 | 14 | Window size 5 |\n| 18 | [1,3,1,2,0,5], k=4 | 16 | Window size 4 |\n| 19 | [1,3,1,2,0,5], k=2 | 18 | Window size 2 |\n| 20 | [1,3,1,2,0,5], k=3 | 21 | Window size 3 |\n| 21 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 22 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |\n| 23 | [1,3,1,2,0,5], k=5 | 14 | Window size 5 |\n| 24 | [1,3,1,2,0,5], k=4 | 16 | Window size 4 |\n| 25 | [1,3,1,2,0,5], k=2 | 18 | Window size 2 |\n| 26 | [1,3,1,2,0,5], k=3 | 21 | Window size 3 |\n| 27 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 28 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |\n| 29 | [1,3,1,2,0,5], k=5 | 14 | Window size 5 |\n| 30 | [1,3,1,2,0,5], k=4 | 16 | Window size 4 |\n| 31 | [1,3,1,2,0,5], k=2 | 18 | Window size 2 |\n| 32 | [1,3,1,2,0,5], k=3 | 21 | Window size 3 |\n| 33 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 34 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |\n| 35 | [1,3,1,2,0,5], k=5 | 14 | Window size 5 |\n| 36 | [1,3,1,2,0,5], k=4 | 16 | Window size 4 |\n| 37 | [1,3,1,2,0,5], k=2 | 18 | Window size 2 |\n| 38 | [1,3,1,2,0,5], k=3 | 21 | Window size 3 |\n| 39 | [1,3,1,2,0,5], k=1 | 12 | Window size 1 |\n| 40 | [1,3,1,2,0,5], k=6 | 8 | Window size equals array |",
              "example": {
                "input": "[2,5,-1,7,-3,-1,-2], k=4",
                "output": "18",
                "explanation": "Sum of min and max of all subarrays of size 4."
              },
              "answer": "from collections import deque\ndef sumOfMinAndMax(arr, k):\n    n = len(arr)\n    minq, maxq = deque(), deque()\n    res = 0\n    for i in range(n):\n        while minq and arr[minq[-1]] >= arr[i]:\n            minq.pop()\n        while maxq and arr[maxq[-1]] <= arr[i]:\n            maxq.pop()\n        minq.append(i)\n        maxq.append(i)\n        if minq[0] <= i - k:\n            minq.popleft()\n        if maxq[0] <= i - k:\n            maxq.popleft()\n        if i >= k - 1:\n            res += arr[minq[0]] + arr[maxq[0]]\n    return res"
            },
            {
              "id": 14,
              "title": "Reverse a queue recursively",
              "description": "Given a queue, reverse it using recursion.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2,3,4,5] | [5,4,3,2,1] | Basic |\n| 2 | [1,2] | [2,1] | Two elements |\n| 3 | [1] | [1] | Single element |\n| 4 | [] | [] | Empty queue |\n| 5 | [5,4,3,2,1] | [1,2,3,4,5] | Reverse again |\n| 6 | [1,2,3,4,5,6] | [6,5,4,3,2,1] | Even length |\n| 7 | [1,2,3,4,5,6,7] | [7,6,5,4,3,2,1] | Odd length |\n| 8 | [10,20,30,40] | [40,30,20,10] | Multiples of 10 |\n| 9 | [1,3,5,7,9] | [9,7,5,3,1] | Odd numbers |\n| 10 | [2,4,6,8,10] | [10,8,6,4,2] | Even numbers |\n| 11 | [1,2,3,4,5,6,7,8,9,10] | [10,9,8,7,6,5,4,3,2,1] | 10 elements |\n| 12 | [1,2,3,4,5,6,7,8,9,10,11,12] | [12,11,10,9,8,7,6,5,4,3,2,1] | 12 elements |\n| 13 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14] | [14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 14 elements |\n| 14 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] | [16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 16 elements |\n| 15 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] | [18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 18 elements |\n| 16 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] | [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 20 elements |\n| 17 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22] | [22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 22 elements |\n| 18 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24] | [24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 24 elements |\n| 19 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] | [26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 26 elements |\n| 20 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 28 elements |\n| 21 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30] | [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 30 elements |\n| 22 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 32 elements |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] | [34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 34 elements |\n| 24 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 36 elements |\n| 25 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38] | [38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 38 elements |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] | 40 elements |",
              "example": {
                "input": "[1,2,3,4,5]",
                "output": "[5,4,3,2,1]",
                "explanation": "Queue reversed recursively."
              },
              "answer": "from collections import deque\ndef reverseQueue(q):\n    if not q:\n        return deque()\n    x = q.popleft()\n    res = reverseQueue(q)\n    res.append(x)\n    return res"
            },
            {
              "id": 15,
              "title": "Distance of nearest 1 in a binary matrix",
              "description": "Given a binary matrix, find the distance of the nearest 1 for each cell.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [[0,0,0],[0,1,0],[1,1,1]] | [[2,1,2],[1,0,1],[0,0,0]] | Example 1 |\n| 2 | [[1,0,1],[1,1,0],[0,0,0]] | [[0,1,0],[0,0,1],[1,1,2]] | Example 2 |\n| 3 | [[0,0,0],[0,0,0],[0,0,0]] | [[-1,-1,-1],[-1,-1,-1],[-1,-1,-1]] | All zeros |\n| 4 | [[1,1,1],[1,1,1],[1,1,1]] | [[0,0,0],[0,0,0],[0,0,0]] | All ones |\n| 5 | [[0,1,0],[1,0,1],[0,1,0]] | [[1,0,1],[0,1,0],[1,0,1]] | Alternating |\n| 6 | [[0,0,1],[0,1,0],[1,0,0]] | [[2,1,0],[1,0,1],[0,1,2]] | Diagonal ones |\n| 7 | [[1,0,0],[0,0,0],[0,0,1]] | [[0,1,2],[1,2,1],[2,1,0]] | Corners |\n| 8 | [[0,0,0],[0,0,0],[1,0,0]] | [[2,1,2],[1,2,3],[0,1,2]] | One in bottom left |\n| 9 | [[0,0,0],[0,0,0],[0,0,1]] | [[3,2,1],[2,1,0],[1,0,0]] | One in bottom right |\n| 10 | [[1,0,0],[0,0,0],[0,0,0]] | [[0,1,2],[1,2,3],[2,3,4]] | One in top left |\n| 11 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 12 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 13 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 14 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 15 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 16 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 17 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 18 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 19 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 20 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 21 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 22 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 23 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 24 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 25 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 26 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 27 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 28 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 29 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 30 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 31 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 32 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 33 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 34 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 35 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 36 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |\n| 37 | [[0,0,0],[1,0,0],[0,0,0]] | [[1,2,3],[0,1,2],[1,2,3]] | One in middle left |\n| 38 | [[0,0,0],[0,0,1],[0,0,0]] | [[3,2,1],[2,1,0],[3,2,1]] | One in middle right |\n| 39 | [[0,0,0],[0,0,0],[0,1,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center bottom |\n| 40 | [[0,0,0],[0,1,0],[0,0,0]] | [[2,1,2],[1,0,1],[2,1,2]] | One in center |",
              "example": {
                "input": "[[0,0,0],[0,1,0],[1,1,1]]",
                "output": "[[2,1,2],[1,0,1],[0,0,0]]",
                "explanation": "Each cell shows distance to nearest 1."
              },
              "answer": "from collections import deque\ndef nearestOne(mat):\n    n, m = len(mat), len(mat[0])\n    res = [[-1]*m for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 1:\n                res[i][j] = 0\n                q.append((i,j))\n    dirs = [(-1,0),(1,0),(0,-1),(0,1)]\n    while q:\n        i,j = q.popleft()\n        for di,dj in dirs:\n            ni,nj = i+di,j+dj\n            if 0<=ni<n and 0<=nj<m and res[ni][nj]==-1:\n                res[ni][nj] = res[i][j]+1\n                q.append((ni,nj))\n    return res"
            },
            {
              "id": 16,
              "title": "Time needed to buy tickets",
              "description": "Given an array tickets where tickets[i] is the number of tickets person i needs, and an index k, return the time needed for the person at index k to buy all their tickets.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [2,3,2], k=2 | 6 | Example 1 |\n| 2 | [5,1,1,1], k=0 | 8 | Example 2 |\n| 3 | [1,1,1,1], k=2 | 3 | All ones |\n| 4 | [2,2,2,2], k=1 | 7 | All twos |\n| 5 | [3,2,1], k=0 | 5 | Decreasing |\n| 6 | [1,2,3], k=2 | 6 | Increasing |\n| 7 | [1,2,3,4,5], k=4 | 15 | Last person |\n| 8 | [5,4,3,2,1], k=0 | 5 | First person |\n| 9 | [2,2,2,2,2], k=2 | 9 | All same |\n| 10 | [1,2,3,4,5], k=0 | 1 | First person |\n| 11 | [1,2,3,4,5], k=1 | 3 | Second person |\n| 12 | [1,2,3,4,5], k=2 | 6 | Third person |\n| 13 | [1,2,3,4,5], k=3 | 10 | Fourth person |\n| 14 | [1,2,3,4,5], k=4 | 15 | Fifth person |\n| 15 | [5,4,3,2,1], k=4 | 5 | Last person |\n| 16 | [5,4,3,2,1], k=3 | 8 | Fourth person |\n| 17 | [5,4,3,2,1], k=2 | 11 | Third person |\n| 18 | [5,4,3,2,1], k=1 | 14 | Second person |\n| 19 | [5,4,3,2,1], k=0 | 15 | First person |\n| 20 | [2,3,2], k=0 | 4 | First person |\n| 21 | [2,3,2], k=1 | 5 | Second person |\n| 22 | [2,3,2], k=2 | 6 | Third person |\n| 23 | [1,1,1,1,1], k=4 | 5 | Last person |\n| 24 | [1,1,1,1,1], k=0 | 1 | First person |\n| 25 | [1,1,1,1,1], k=2 | 3 | Middle person |\n| 26 | [2,2,2,2,2], k=0 | 2 | First person |\n| 27 | [2,2,2,2,2], k=4 | 10 | Last person |\n| 28 | [2,2,2,2,2], k=2 | 6 | Middle person |\n| 29 | [3,2,1], k=2 | 3 | Last person |\n| 30 | [3,2,1], k=1 | 4 | Second person |\n| 31 | [3,2,1], k=0 | 5 | First person |\n| 32 | [1,2,3], k=0 | 1 | First person |\n| 33 | [1,2,3], k=1 | 3 | Second person |\n| 34 | [1,2,3], k=2 | 6 | Third person |\n| 35 | [2,3,2], k=0 | 4 | First person |\n| 36 | [2,3,2], k=1 | 5 | Second person |\n| 37 | [2,3,2], k=2 | 6 | Third person |\n| 38 | [1,1,1,1], k=0 | 1 | First person |\n| 39 | [1,1,1,1], k=3 | 4 | Last person |\n| 40 | [1,1,1,1], k=2 | 3 | Third person |",
              "example": {
                "input": "[2,3,2], k=2",
                "output": "6",
                "explanation": "Person at index 2 needs 2 tickets, total time is 6."
              },
              "answer": "def timeRequiredToBuy(tickets, k):\n    time = 0\n    for i, t in enumerate(tickets):\n        if i <= k:\n            time += min(t, tickets[k])\n        else:\n            time += min(t, tickets[k]-1)\n    return time"
            },
            
                {
                  "id": 17,
                  "title": "Design a Hit Counter",
                  "description": "Design a hit counter that counts the number of hits received in the past 5 minutes.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | hit(1), hit(2), hit(3), getHits(4) | 3 | All within 5 min |\n| 2 | hit(1), hit(2), hit(3), getHits(300) | 3 | All within 5 min |\n| 3 | hit(1), hit(2), hit(3), getHits(301) | 2 | 1 is out |\n| 4 | hit(1), hit(2), hit(3), getHits(302) | 1 | 1,2 are out |\n| 5 | hit(1), hit(2), hit(3), getHits(303) | 0 | All out |\n| 6 | hit(1), hit(2), hit(3), hit(300), getHits(300) | 4 | All within 5 min |\n| 7 | hit(1), hit(2), hit(3), hit(300), getHits(301) | 3 | 1 is out |\n| 8 | hit(1), hit(2), hit(3), hit(300), getHits(302) | 2 | 1,2 are out |\n| 9 | hit(1), hit(2), hit(3), hit(300), getHits(303) | 1 | 1,2,3 are out |\n| 10 | hit(1), hit(2), hit(3), hit(300), getHits(304) | 0 | All out |\n| 11 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(301) | 5 | All within 5 min |\n| 12 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(302) | 4 | 1 is out |\n| 13 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(303) | 3 | 1,2 are out |\n| 14 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(304) | 2 | 1,2,3 are out |\n| 15 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(305) | 1 | 1,2,3,300 are out |\n| 16 | hit(1), hit(2), hit(3), hit(300), hit(301), getHits(306) | 0 | All out |\n| 17 | hit(1), getHits(1) | 1 | Single hit |\n| 18 | hit(1), getHits(2) | 1 | Single hit |\n| 19 | hit(1), getHits(301) | 0 | Out of window |\n| 20 | hit(1), hit(2), getHits(302) | 0 | Both out |\n| 21 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(5) | 5 | All within window |\n| 22 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(6) | 5 | All within window |\n| 23 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(306) | 0 | All out |\n| 24 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(303) | 2 | Only 4,5 in window |\n| 25 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(304) | 1 | Only 5 in window |\n| 26 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(305) | 0 | All out |\n| 27 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(2) | 2 | 1,2 in window |\n| 28 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(3) | 3 | 1,2,3 in window |\n| 29 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(4) | 4 | 1,2,3,4 in window |\n| 30 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(5) | 5 | All in window |\n| 31 | hit(1), getHits(301) | 0 | Out of window |\n| 32 | hit(1), hit(2), getHits(302) | 0 | Both out |\n| 33 | hit(1), hit(2), hit(3), getHits(303) | 0 | All out |\n| 34 | hit(1), hit(2), hit(3), hit(4), getHits(304) | 1 | Only 4 in window |\n| 35 | hit(1), hit(2), hit(3), hit(4), getHits(305) | 0 | All out |\n| 36 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(305) | 0 | All out |\n| 37 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(306) | 0 | All out |\n| 38 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(307) | 0 | All out |\n| 39 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(308) | 0 | All out |\n| 40 | hit(1), hit(2), hit(3), hit(4), hit(5), getHits(309) | 0 | All out |",
                  "example": {
                    "input": "hit(1), hit(2), hit(3), getHits(4)",
                    "output": "3",
                    "explanation": "All hits are within the last 5 minutes."
                  },
                  "answer": "from collections import deque\nclass HitCounter:\n    def __init__(self):\n        self.q = deque()\n    def hit(self, timestamp):\n        self.q.append(timestamp)\n    def getHits(self, timestamp):\n        while self.q and self.q[0] <= timestamp - 300:\n            self.q.popleft()\n        return len(self.q)"
                },
                {
                  "id": 18,
                  "title": "Zigzag iterator",
                  "description": "Design an iterator to return elements alternately from two lists.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [1,2], [3,4,5,6] | [1,3,2,4,5,6] | Unequal lengths |\n| 2 | [1], [2,3,4] | [1,2,3,4] | First shorter |\n| 3 | [1,2,3], [4,5,6] | [1,4,2,5,3,6] | Equal lengths |\n| 4 | [], [1,2,3] | [1,2,3] | First empty |\n| 5 | [1,2,3], [] | [1,2,3] | Second empty |\n| 6 | [], [] | [] | Both empty |\n| 7 | [1], [2] | [1,2] | Single elements |\n| 8 | [1,2], [3] | [1,3,2] | Second shorter |\n| 9 | [1,2,3,4], [5,6] | [1,5,2,6,3,4] | First longer |\n| 10 | [1,2,3], [4,5,6,7,8] | [1,4,2,5,3,6,7,8] | Second longer |\n| 11 | [1,2,3,4,5], [6,7,8,9,10] | [1,6,2,7,3,8,4,9,5,10] | Equal lengths |\n| 12 | [1,2,3,4,5], [6,7,8] | [1,6,2,7,3,8,4,5] | First longer |\n| 13 | [1,2], [3,4,5,6,7,8] | [1,3,2,4,5,6,7,8] | Second much longer |\n| 14 | [1,2,3,4,5,6], [7,8] | [1,7,2,8,3,4,5,6] | First much longer |\n| 15 | [1,2,3,4], [5,6,7,8] | [1,5,2,6,3,7,4,8] | Equal lengths |\n| 16 | [1,2,3], [4,5,6] | [1,4,2,5,3,6] | Equal lengths |\n| 17 | [1], [2,3,4,5,6] | [1,2,3,4,5,6] | First shorter |\n| 18 | [1,2,3,4,5], [6] | [1,6,2,3,4,5] | Second shorter |\n| 19 | [1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20] | Long lists |\n| 20 | [1,2,3,4,5,6,7,8,9,10], [11,12] | [1,11,2,12,3,4,5,6,7,8,9,10] | Second shorter |\n| 21 | [1,2], [3,4,5,6,7,8,9,10] | [1,3,2,4,5,6,7,8,9,10] | Second much longer |\n| 22 | [1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20,21,22] | [1,11,2,12,3,13,4,14,5,15,6,16,7,17,8,18,9,19,10,20,21,22] | Second longer |\n| 23 | [1,2,3,4,5,6,7,8,9,10,11,12], [13,14,15,16,17,18,19,20,21,22,23,24] | [1,13,2,14,3,15,4,16,5,17,6,18,7,19,8,20,9,21,10,22,11,23,12,24] | Equal long lists |\n| 24 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14], [15,16,17,18,19,20,21,22,23,24,25,26,27,28] | [1,15,2,16,3,17,4,18,5,19,6,20,7,21,8,22,9,23,10,24,11,25,12,26,13,27,14,28] | Equal long lists |\n| 25 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32] | [1,17,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31,16,32] | Equal long lists |\n| 26 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], [19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36] | [1,19,2,20,3,21,4,22,5,23,6,24,7,25,8,26,9,27,10,28,11,29,12,30,13,31,14,32,15,33,16,34,17,35,18,36] | Equal long lists |\n| 27 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] | [1,21,2,22,3,23,4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,12,32,13,33,14,34,15,35,16,36,17,37,18,38,19,39,20,40] | Equal long lists |\n| 28 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44] | [1,23,2,24,3,25,4,26,5,27,6,28,7,29,8,30,9,31,10,32,11,33,12,34,13,35,14,36,15,37,16,38,17,39,18,40,19,41,20,42,21,43,22,44] | Equal long lists |\n| 29 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48] | [1,25,2,26,3,27,4,28,5,29,6,30,7,31,8,32,9,33,10,34,11,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48] | Equal long lists |\n| 30 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], [27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52] | [1,27,2,28,3,29,4,30,5,31,6,32,7,33,8,34,9,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,47,22,48,23,49,24,50,25,51,26,52] | Equal long lists |\n| 31 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28], [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56] | [1,29,2,30,3,31,4,32,5,33,6,34,7,35,8,36,9,37,10,38,11,39,12,40,13,41,14,42,15,43,16,44,17,45,18,46,19,47,20,48,21,49,22,50,23,51,24,52,25,53,26,54,27,55,28,56] | Equal long lists |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60] | [1,31,2,32,3,33,4,34,5,35,6,36,7,37,8,38,9,39,10,40,11,41,12,42,13,43,14,44,15,45,16,46,17,47,18,48,19,49,20,50,21,51,22,52,23,53,24,54,25,55,26,56,27,57,28,58,29,59,30,60] | Equal long lists |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32], [33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64] | [1,33,2,34,3,35,4,36,5,37,6,38,7,39,8,40,9,41,10,42,11,43,12,44,13,45,14,46,15,47,16,48,17,49,18,50,19,51,20,52,21,53,22,54,23,55,24,56,25,57,26,58,27,59,28,60,29,61,30,62,31,63,32,64] | Equal long lists |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34], [35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68] | [1,35,2,36,3,37,4,38,5,39,6,40,7,41,8,42,9,43,10,44,11,45,12,46,13,47,14,48,15,49,16,50,17,51,18,52,19,53,20,54,21,55,22,56,23,57,24,58,25,59,26,60,27,61,28,62,29,63,30,64,31,65,32,66,33,67,34,68] | Equal long lists |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36], [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72] | [1,37,2,38,3,39,4,40,5,41,6,42,7,43,8,44,9,45,10,46,11,47,12,48,13,49,14,50,15,51,16,52,17,53,18,54,19,55,20,56,21,57,22,58,23,59,24,60,25,61,26,62,27,63,28,64,29,65,30,66,31,67,32,68,33,69,34,70,35,71,36,72] | Equal long lists |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38], [39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76] | [1,39,2,40,3,41,4,42,5,43,6,44,7,45,8,46,9,47,10,48,11,49,12,50,13,51,14,52,15,53,16,54,17,55,18,56,19,57,20,58,21,59,22,60,23,61,24,62,25,63,26,64,27,65,28,66,29,67,30,68,31,69,32,70,33,71,34,72,35,73,36,74,37,75,38,76] | Equal long lists |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], [41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80] | [1,41,2,42,3,43,4,44,5,45,6,46,7,47,8,48,9,49,10,50,11,51,12,52,13,53,14,54,15,55,16,56,17,57,18,58,19,59,20,60,21,61,22,62,23,63,24,64,25,65,26,66,27,67,28,68,29,69,30,70,31,71,32,72,33,73,34,74,35,75,36,76,37,77,38,78,39,79,40,80] | Equal long lists |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42], [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82] | [1,43,2,44,3,45,4,46,5,47,6,48,7,49,8,50,9,51,10,52,11,53,12,54,13,55,14,56,15,57,16,58,17,59,18,60,19,61,20,62,21,63,22,64,23,65,24,66,25,67,26,68,27,69,28,70,29,71,30,72,31,73,32,74,33,75,34,76,35,77,36,78,37,79,38,80,39,81,40,82,41,42] | Equal long lists |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44], [45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84] | [1,45,2,46,3,47,4,48,5,49,6,50,7,51,8,52,9,53,10,54,11,55,12,56,13,57,14,58,15,59,16,60,17,61,18,62,19,63,20,64,21,65,22,66,23,67,24,68,25,69,26,70,27,71,28,72,29,73,30,74,31,75,32,76,33,77,34,78,35,79,36,80,37,81,38,82,39,83,40,84,41,42,43,44] | Equal long lists |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46], [47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90] | [1,47,2,48,3,49,4,50,5,51,6,52,7,53,8,54,9,55,10,56,11,57,12,58,13,59,14,60,15,61,16,62,17,63,18,64,19,65,20,66,21,67,22,68,23,69,24,70,25,71,26,72,27,73,28,74,29,75,30,76,31,77,32,78,33,79,34,80,35,81,36,82,37,83,38,84,39,85,40,86,41,87,42,88,43,89,44,90,45,46] | Equal long lists |",
                  "example": {
                    "input": "[1,2], [3,4,5,6]",
                    "output": "[1,3,2,4,5,6]",
                    "explanation": "Alternate between the two lists."
                  },
                  "answer": "from collections import deque\nclass ZigzagIterator:\n    def __init__(self, v1, v2):\n        self.q = deque()\n        if v1:\n            self.q.append(iter(v1))\n        if v2:\n            self.q.append(iter(v2))\n    def next(self):\n        if self.hasNext():\n            it = self.q.popleft()\n            val = next(it)\n            if any(True for _ in [it]):\n                self.q.append(it)\n            return val\n    def hasNext(self):\n        return bool(self.q)"
                },
                {
                  "id": 19,
                  "title": "Course schedule with topological sort",
                  "description": "Given the number of courses and prerequisites, determine if you can finish all courses (no cycles).\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | 2, [[1,0]] | True | Simple case |\n| 2 | 2, [[1,0],[0,1]] | False | Cycle |\n| 3 | 3, [[1,0],[2,1]] | True | Linear |\n| 4 | 3, [[1,0],[0,2],[2,1]] | False | Cycle |\n| 5 | 4, [[1,0],[2,1],[3,2]] | True | Linear |\n| 6 | 4, [[1,0],[2,1],[3,2],[1,3]] | False | Cycle |\n| 7 | 5, [[1,0],[2,1],[3,2],[4,3]] | True | Linear |\n| 8 | 5, [[1,0],[2,1],[3,2],[4,3],[2,4]] | False | Cycle |\n| 9 | 1, [] | True | Single course |\n| 10 | 2, [] | True | No prerequisites |\n| 11 | 3, [[1,0],[2,0]] | True | Branching |\n| 12 | 3, [[1,0],[2,0],[0,2]] | False | Cycle |\n| 13 | 4, [[1,0],[2,0],[3,1],[3,2]] | True | DAG |\n| 14 | 4, [[1,0],[2,0],[3,1],[3,2],[1,3]] | False | Cycle |\n| 15 | 6, [[1,0],[2,1],[3,2],[4,3],[5,4]] | True | Linear |\n| 16 | 6, [[1,0],[2,1],[3,2],[4,3],[5,4],[2,5]] | False | Cycle |\n| 17 | 7, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5]] | True | Linear |\n| 18 | 7, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[3,6]] | False | Cycle |\n| 19 | 8, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6]] | True | Linear |\n| 20 | 8, [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[4,7]] | False | Cycle |\n| 21 | 3, [[0,1],[1,2],[2,0]] | False | Cycle |\n| 22 | 3, [[0,1],[1,2]] | True | Linear |\n| 23 | 4, [[0,1],[1,2],[2,3]] | True | Linear |\n| 24 | 4, [[0,1],[1,2],[2,3],[3,0]] | False | Cycle |\n| 25 | 5, [[0,1],[1,2],[2,3],[3,4]] | True | Linear |\n| 26 | 5, [[0,1],[1,2],[2,3],[3,4],[4,0]] | False | Cycle |\n| 27 | 6, [[0,1],[1,2],[2,3],[3,4],[4,5]] | True | Linear |\n| 28 | 6, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]] | False | Cycle |\n| 29 | 7, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]] | True | Linear |\n| 30 | 7, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]] | False | Cycle |\n| 31 | 8, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] | True | Linear |\n| 32 | 8, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]] | False | Cycle |\n| 33 | 9, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]] | True | Linear |\n| 34 | 9, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0]] | False | Cycle |\n| 35 | 10, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]] | True | Linear |\n| 36 | 10, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]] | False | Cycle |\n| 37 | 2, [[0,1]] | True | Simple |\n| 38 | 2, [[1,0]] | True | Simple |\n| 39 | 2, [[0,1],[1,0]] | False | Cycle |\n| 40 | 1, [] | True | Single course |",
                  "example": {
                    "input": "2, [[1,0]]",
                    "output": "True",
                    "explanation": "Course 1 depends on 0, no cycle."
                  },
                  "answer": "from collections import deque, defaultdict\ndef canFinish(numCourses, prerequisites):\n    graph = defaultdict(list)\n    indegree = [0]*numCourses\n    for dest, src in prerequisites:\n        graph[src].append(dest)\n        indegree[dest] += 1\n    q = deque([i for i in range(numCourses) if indegree[i]==0])\n    count = 0\n    while q:\n        node = q.popleft()\n        count += 1\n        for nei in graph[node]:\n            indegree[nei] -= 1\n            if indegree[nei] == 0:\n                q.append(nei)\n    return count == numCourses"
                },
                {
                  "id": 20,
                  "title": "Check if a queue can be sorted using a stack",
                  "description": "Given a queue, check if it can be sorted into increasing order using a stack.\n\n| Test Cases | Input | Expected Output | Notes |\n|------------|-------|----------------|-------|\n| 1 | [3,1,2] | False | Cannot be sorted |\n| 2 | [1,2,3] | True | Already sorted |\n| 3 | [2,1,3] | True | Can be sorted |\n| 4 | [3,2,1] | True | Can be sorted |\n| 5 | [1,3,2] | False | Cannot be sorted |\n| 6 | [2,3,1] | False | Cannot be sorted |\n| 7 | [1,2,3,4,5] | True | Already sorted |\n| 8 | [5,4,3,2,1] | True | Can be sorted |\n| 9 | [2,3,4,1,5] | True | Can be sorted |\n| 10 | [2,4,3,1,5] | False | Cannot be sorted |\n| 11 | [1,3,5,2,4,6] | True | Can be sorted |\n| 12 | [1,2,4,3,5] | True | Can be sorted |\n| 13 | [1,4,2,3,5] | False | Cannot be sorted |\n| 14 | [1,2,3,5,4] | True | Can be sorted |\n| 15 | [1,3,2,4,5] | True | Can be sorted |\n| 16 | [2,1,4,3,5] | True | Can be sorted |\n| 17 | [3,2,1,4,5] | True | Can be sorted |\n| 18 | [3,1,2,4,5] | False | Cannot be sorted |\n| 19 | [1,2,3,4,5,6,7,8,9,10] | True | Already sorted |\n| 20 | [10,9,8,7,6,5,4,3,2,1] | True | Can be sorted |\n| 21 | [2,1,3,4,5,6,7,8,9,10] | True | Can be sorted |\n| 22 | [1,3,2,4,5,6,7,8,9,10] | True | Can be sorted |\n| 23 | [1,2,4,3,5,6,7,8,9,10] | True | Can be sorted |\n| 24 | [1,2,3,5,4,6,7,8,9,10] | True | Can be sorted |\n| 25 | [1,2,3,4,6,5,7,8,9,10] | True | Can be sorted |\n| 26 | [1,2,3,4,5,7,6,8,9,10] | True | Can be sorted |\n| 27 | [1,2,3,4,5,6,8,7,9,10] | True | Can be sorted |\n| 28 | [1,2,3,4,5,6,7,9,8,10] | True | Can be sorted |\n| 29 | [1,2,3,4,5,6,7,8,10,9] | True | Can be sorted |\n| 30 | [1,2,3,4,5,6,7,8,9,11,10] | True | Can be sorted |\n| 31 | [1,2,3,4,5,6,7,8,9,10,12,11] | True | Can be sorted |\n| 32 | [1,2,3,4,5,6,7,8,9,10,11,13,12] | True | Can be sorted |\n| 33 | [1,2,3,4,5,6,7,8,9,10,11,12,14,13] | True | Can be sorted |\n| 34 | [1,2,3,4,5,6,7,8,9,10,11,12,13,15,14] | True | Can be sorted |\n| 35 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,15] | True | Can be sorted |\n| 36 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,16] | True | Can be sorted |\n| 37 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,17] | True | Can be sorted |\n| 38 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,18] | True | Can be sorted |\n| 39 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,19] | True | Can be sorted |\n| 40 | [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,20] | True | Can be sorted |",
                  "example": {
                    "input": "[3,1,2]",
                    "output": "False",
                    "explanation": "Cannot be sorted using a stack."
                  },
                  "answer": "def checkSorted(q):\n    stack = []\n    expected = 1\n    n = len(q)\n    i = 0\n    while i < n:\n        if q[0] == expected:\n            q.pop(0)\n            expected += 1\n        elif stack and stack[-1] == expected:\n            stack.pop()\n            expected += 1\n        elif q:\n            stack.append(q.pop(0))\n        else:\n            break\n    while stack:\n        if stack.pop() != expected:\n            return False\n        expected += 1\n    return True"
                }
            
              ]
            }
