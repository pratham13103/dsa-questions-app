{
  "questions": [
    {
      "id": 1,
      "title": "Sort an Array of Integers in Ascending Order",
      "description": "Given an unsorted array of integers, write a function to sort the array in ascending order.\n\n| Test Cases | nums                        | Expected Output             | Notes                                 |\n|------------|-----------------------------|-----------------------------|---------------------------------------|\n| 1          | [5, 2, 9, 1, 5, 6]          | [1, 2, 5, 5, 6, 9]          | Normal case, simple integers          |\n| 2          | [3, 1, 4, 1, 5, 9]          | [1, 1, 3, 4, 5, 9]          | Includes duplicates                   |\n| 3          | [-5, -3, -1, -2]            | [-5, -3, -2, -1]            | Array with negative numbers           |\n| 4          | [0]                         | [0]                         | Single element                        |\n| 5          | [1, 2, 3, 4, 5]             | [1, 2, 3, 4, 5]             | Already sorted                        |\n| 6          | [9, 7, 5, 3, 1]             | [1, 3, 5, 7, 9]             | Reverse sorted array                  |\n| 7          | [2, 1]                      | [1, 2]                      | Two elements                          |\n| 8          | [7, 8, 7, 5, 6, 3]          | [3, 5, 6, 7, 7, 8]          | Mixed duplicates                      |\n| 9          | [0, 2, 4, 6]                | [0, 2, 4, 6]                | Already sorted                        |\n| 10         | [11, 13, 12, 15]            | [11, 12, 13, 15]            | Unsorted sequence                     |\n| 11         | []                          | []                          | Empty array                           |\n| 12         | [100, -100, 50, 0]          | [-100, 0, 50, 100]          | Large positive and negative values    |\n| 13         | [42]                        | [42]                        | Single large number                   |\n| 14         | [1, 3, 3, 3, 2, 1]          | [1, 1, 2, 3, 3, 3]          | Multiple duplicates                   |\n| 15         | [9, 8, 7, 6, 5, 4]          | [4, 5, 6, 7, 8, 9]          | Descending order                     |\n| 16         | [1, 2, 2, 2, 1]             | [1, 1, 2, 2, 2]             | Small range duplicates                |\n| 17         | [5, 3, 4, 1, 2]             | [1, 2, 3, 4, 5]             | Unsorted                              |\n| 18         | [10, 20, 30, 40]            | [10, 20, 30, 40]            | Already sorted                        |\n| 19         | [1, 1000, 100, 10]          | [1, 10, 100, 1000]          | Exponential pattern                   |\n| 20         | [-10, -20, -30]             | [-30, -20, -10]             | All negative                          |\n| 21         | [-1, 0, 1]                  | [-1, 0, 1]                  | Small set                             |\n| 22         | [3, 6, 2, 9, 0]             | [0, 2, 3, 6, 9]             | Mix of low and high                   |\n| 23         | [1000, 999, 998]            | [998, 999, 1000]            | Decreasing large values               |\n| 24         | [2, 3, 1, 2, 3, 1]          | [1, 1, 2, 2, 3, 3]          | Grouped duplicates                    |\n| 25         | [4, 3, 2, 1, 0]             | [0, 1, 2, 3, 4]             | Full reverse                          |\n| 26         | [2, 3, 4, 5, 6]             | [2, 3, 4, 5, 6]             | Sorted start                          |\n| 27         | [7, 6, 5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5, 6, 7]       | Large reverse                         |\n| 28         | [12, 11, 13, 15, 14]        | [11, 12, 13, 14, 15]        | Shuffled mid-range                    |\n| 29         | [100, 200, 300, 0]          | [0, 100, 200, 300]          | Zero prepended                       |\n| 30         | [9, 8, 0, -1, -2, 3]        | [-2, -1, 0, 3, 8, 9]        | Mix of signs                          |\n| 31         | [50, 40, 30, 20, 10]        | [10, 20, 30, 40, 50]        | Descending tens                      |\n| 32         | [1, 2, 3, 2, 1, 2]          | [1, 1, 2, 2, 2, 3]          | Many repeated mids                   |\n| 33         | [0, 1, 0, 1, 0, 1]          | [0, 0, 0, 1, 1, 1]          | Binary values                        |\n| 34         | [2, 3, 5, 3, 2, 5]          | [2, 2, 3, 3, 5, 5]          | Pairs of duplicates                  |\n| 35         | [100, 0, 100, 0]            | [0, 0, 100, 100]            | Alternating values                   |\n| 36         | [7, 7, 7, 7]                | [7, 7, 7, 7]                | All same                             |\n| 37         | [3, -3, 3, -3]              | [-3, -3, 3, 3]              | Mirror negatives                     |\n| 38         | [8, 6, 4, 2, 0]             | [0, 2, 4, 6, 8]             | Even descending                      |\n| 39         | [1, 4, 1, 4, 1, 4]          | [1, 1, 1, 4, 4, 4]          | Grouped duplicates                   |\n| 40         | [10, -10, 20, -20, 0]       | [-20, -10, 0, 10, 20]       | Balanced positives and negatives     |",
      "example": {
        "input": "[5, 2, 9, 1, 5, 6]",
        "output": "[1, 2, 5, 5, 6, 9]",
        "explanation": "The array is sorted in ascending order."
      },
      "answer": "class Solution:\n    def sortArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 2,
      "title": "Sort an Array of Strings by Length",
      "description": "Given an array of strings, sort the array based on the lengths of the strings in ascending order.\n\n| Test Cases | strings            | Expected Output      | Notes                         |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | ['apple', 'banana', 'cherry'] | ['apple', 'banana', 'cherry'] | Already sorted               |\n| 2          | ['short', 'longest', 'tiny', 'large'] | ['tiny', 'short', 'large', 'longest'] | Sorting by string length    |\n| 3          | ['a', 'abc', 'ab']  | ['a', 'ab', 'abc']    | Varying string lengths       |\n| 4          | ['dog', 'cat', 'rabbit', 'elephant'] | ['cat', 'dog', 'rabbit', 'elephant'] | Mixed string lengths         |\n| 5          | ['one', 'two', 'three', 'four'] | ['one', 'two', 'four', 'three'] | Simple case                  |\n| 6          | ['programming', 'code', 'python'] | ['code', 'python', 'programming'] | Words with different lengths |\n| 7          | ['', 'a', 'ab']      | ['', 'a', 'ab']       | Includes empty string        |\n| 8          | ['large', 'big', 'tiny', 'small'] | ['big', 'tiny', 'small', 'large'] | Common words with different sizes |\n| 9          | ['apple', 'banana', 'kiwi'] | ['kiwi', 'apple', 'banana'] | Varied string lengths       |\n| 10         | ['long', 'tiny', 'huge', 'small'] | ['tiny', 'small', 'long', 'huge'] | Mixed length strings         |\n| 11         | ['b', 'bb', 'aaa', 'aaaa'] | ['b', 'bb', 'aaa', 'aaaa'] | Varying lengths             |\n| 12         | ['alpha', 'beta', 'gamma', 'delta'] | ['alpha', 'beta', 'delta', 'gamma'] | Alphabetical order       |\n| 13         | ['hi', 'hello', 'how', 'are'] | ['hi', 'are', 'how', 'hello'] | Basic greeting words       |\n| 14         | ['big', 'bigger', 'biggest'] | ['big', 'bigger', 'biggest'] | Length order                |\n| 15         | ['x', 'xx', 'xxx', 'xxxx'] | ['x', 'xx', 'xxx', 'xxxx'] | Increasing lengths          |\n| 16         | ['cat', 'dog', 'rat'] | ['cat', 'dog', 'rat']  | Simple animal names         |\n| 17         | ['open', 'close', 'stay'] | ['stay', 'open', 'close'] | Action words                |\n| 18         | ['computer', 'laptop', 'tablet'] | ['laptop', 'tablet', 'computer'] | Tech devices                |\n| 19         | ['sun', 'moon', 'stars'] | ['sun', 'moon', 'stars'] | Celestial objects           |\n| 20         | ['earth', 'mars', 'jupiter', 'saturn'] | ['earth', 'mars', 'saturn', 'jupiter'] | Planets                   |\n| 21         | ['fast', 'faster', 'fastest'] | ['fast', 'faster', 'fastest'] | Speed adjectives           |\n| 22         | ['low', 'medium', 'high'] | ['low', 'medium', 'high'] | Levels of intensity         |\n| 23         | ['under', 'over', 'below'] | ['over', 'below', 'under'] | Directional terms          |\n| 24         | ['red', 'green', 'blue'] | ['red', 'blue', 'green'] | Color names                 |\n| 25         | ['cold', 'warm', 'hot'] | ['hot', 'warm', 'cold'] | Temperature adjectives      |\n| 26         | ['dog', 'cat', 'elephant', 'hippo'] | ['dog', 'cat', 'hippo', 'elephant'] | Animal names              |\n| 27         | ['happy', 'sad', 'joyful', 'angry'] | ['sad', 'angry', 'happy', 'joyful'] | Emotions                   |\n| 28         | ['apple', 'banana', 'pear'] | ['pear', 'apple', 'banana'] | Fruit names                 |\n| 29         | ['yellow', 'red', 'green', 'blue'] | ['red', 'blue', 'green', 'yellow'] | Color adjectives            |\n| 30         | ['ball', 'bat', 'glove'] | ['bat', 'ball', 'glove']  | Sports items               |\n| 31         | ['rain', 'snow', 'cloud'] | ['snow', 'rain', 'cloud']  | Weather terms              |\n| 32         | ['peach', 'mango', 'apple'] | ['apple', 'mango', 'peach'] | Fruit names                 |\n| 33         | ['dog', 'puppy', 'pup'] | ['pup', 'dog', 'puppy'] | Dog-related terms           |\n| 34         | ['big', 'huge', 'small'] | ['big', 'small', 'huge'] | Adjectives for size         |\n| 35         | ['begin', 'start', 'open'] | ['start', 'open', 'begin'] | Action verbs               |\n| 36         | ['quick', 'slower', 'slowest'] | ['quick', 'slower', 'slowest'] | Speed adjectives           |\n| 37         | ['cherry', 'orange', 'apple'] | ['apple', 'orange', 'cherry'] | Fruit names                 |\n| 38         | ['far', 'close', 'near'] | ['far', 'near', 'close'] | Distance-related terms      |\n| 39         | ['red', 'yellow', 'blue'] | ['blue', 'red', 'yellow'] | Primary colors              |\n| 40         | ['medium', 'high', 'low'] | ['low', 'medium', 'high'] | Levels                      |",
      "example": {
        "input": "['apple', 'banana', 'cherry']",
        "output": "['apple', 'banana', 'cherry']",
        "explanation": "The array is already sorted by string lengths."
      },
      "answer": "class Solution:\n    def sortByLength(self, strings):\n        return sorted(strings, key=len)"
    },
    {
      "id": 3,
      "title": "Sort an Array of Numbers in Descending Order",
      "description": "Given an unsorted array of numbers, sort the array in descending order.\n\n| Test Cases | nums                | Expected Output        | Notes                        |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | [5, 2, 9, 1, 5, 6]  | [9, 6, 5, 5, 2, 1]     | Normal case, simple integers |\n| 2          | [1, 2, 3, 4, 5]     | [5, 4, 3, 2, 1]         | Already sorted in ascending  |\n| 3          | [9, 7, 5, 3, 1]     | [9, 7, 5, 3, 1]         | Reverse sorted case           |\n| 4          | [2, 4, 1, 3, 5]     | [5, 4, 3, 2, 1]         | Simple case                   |\n| 5          | [8, 3, 9, 12, 5]    | [12, 9, 8, 5, 3]        | Mixed values                  |\n| 6          | [-3, 4, 2, 0]       | [4, 2, 0, -3]           | Includes negative numbers     |\n| 7          | [1, 1, 1, 1, 1]     | [1, 1, 1, 1, 1]         | All identical values          |\n| 8          | [0, 2, 4, 6]        | [6, 4, 2, 0]           | Already sorted in ascending  |\n| 9          | [11, 10, 9]         | [11, 10, 9]            | Already sorted                |\n| 10         | [7, 8, 7, 5, 6, 3]  | [8, 7, 7, 6, 5, 3]     | Duplicates included           |\n| 11         | [100, 50, 200]      | [200, 100, 50]          | Simple three numbers          |\n| 12         | [25, 12, 7, 10]     | [25, 12, 10, 7]         | Mixed values                  |\n| 13         | [-10, -20, -30]     | [-10, -20, -30]         | Negative numbers              |\n| 14         | [0, 0, 0, 0]        | [0, 0, 0, 0]            | All zeros                     |\n| 15         | [50, 25, 10, 35]    | [50, 35, 25, 10]        | Normal integers               |\n| 16         | [3, 2, 1]           | [3, 2, 1]              | Already sorted in descending  |\n| 17         | [1000, 500, 100]    | [1000, 500, 100]        | Simple large numbers          |\n| 18         | [1, 2, 3, 4, 5]     | [5, 4, 3, 2, 1]         | Already sorted in ascending  |\n| 19         | [7, 8, 9, 10]       | [10, 9, 8, 7]           | Already sorted                |\n| 20         | [0, -1, -2, -3]     | [0, -1, -2, -3]         | Negative values included      |\n| 21         | [10, 20, 30, 40]    | [40, 30, 20, 10]        | Sequential numbers            |\n| 22         | [15, 10, 25]        | [25, 15, 10]            | Simple case                   |\n| 23         | [30, 50, 20, 40]    | [50, 40, 30, 20]        | Unsorted numbers              |\n| 24         | [0, 0, 0, 0, 0]     | [0, 0, 0, 0, 0]         | All zeros                     |\n| 25         | [-1, -2, -3, -4]    | [-1, -2, -3, -4]        | Negative integers             |\n| 26         | [99, 88, 77]        | [99, 88, 77]            | Already sorted                |\n| 27         | [1, 3, 5, 7, 9]     | [9, 7, 5, 3, 1]         | Odd numbers                   |\n| 28         | [10, 15, 25]        | [25, 15, 10]            | Random set                    |\n| 29         | [60, 30, 10, 90]    | [90, 60, 30, 10]        | Multiple elements             |\n| 30         | [5, 5, 5, 5, 5]     | [5, 5, 5, 5, 5]         | Identical values              |\n| 31         | [1, 2, 3]           | [3, 2, 1]              | Simple case                   |\n| 32         | [22, 11, 33]        | [33, 22, 11]            | Mixed order                   |\n| 33         | [-1, 1, -1, 1]      | [1, 1, -1, -1]          | Positive and negative         |\n| 34         | [9, 10, 11]         | [11, 10, 9]             | Three numbers                 |\n| 35         | [2, 4, 6, 8]        | [8, 6, 4, 2]            | Simple evens                  |\n| 36         | [20, 19, 18]        | [20, 19, 18]            | Sequential numbers            |\n| 37         | [5, 10, 15]         | [15, 10, 5]             | Simple multiples              |\n| 38         | [50, 60, 70]        | [70, 60, 50]            | Simple increasing             |\n| 39         | [8, 7, 6, 5]        | [8, 7, 6, 5]            | Already sorted                |\n| 40         | [5, 9, 3, 8]        | [9, 8, 5, 3]            | Simple unsorted set           |",
      "example": {
        "input": "[5, 2, 9, 1, 5, 6]",
        "output": "[9, 6, 5, 5, 2, 1]",
        "explanation": "The array is sorted in descending order."
      },
      "answer": "class Solution:\n    def sortArrayDesc(self, nums):\n        return sorted(nums, reverse=True)"
    },
    {
      "id": 4,
      "title": "Sort a List of Strings Alphabetically",
      "description": "Given a list of strings, sort them alphabetically in ascending order.\n\n| Test Cases | strings            | Expected Output        | Notes                        |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | ['banana', 'apple', 'cherry'] | ['apple', 'banana', 'cherry'] | Simple case                |\n| 2          | ['dog', 'cat', 'rabbit', 'elephant'] | ['cat', 'dog', 'elephant', 'rabbit'] | Mixed words             |\n| 3          | ['apple', 'banana', 'grape'] | ['apple', 'banana', 'grape'] | All lowercase letters      |\n| 4          | ['Watermelon', 'Apple', 'banana'] | ['Apple', 'Watermelon', 'banana'] | Case sensitivity        |\n| 5          | ['zebra', 'apple', 'kiwi'] | ['apple', 'kiwi', 'zebra'] | Random order               |\n| 6          | ['grape', 'orange', 'pear'] | ['grape', 'orange', 'pear'] | Sorted by alphabetical order |\n| 7          | ['one', 'two', 'three', 'four'] | ['four', 'one', 'three', 'two'] | Mixed alphabetic order  |\n| 8          | ['A', 'B', 'C', 'D']   | ['A', 'B', 'C', 'D']      | Already sorted              |\n| 9          | ['apple', 'apple', 'apple'] | ['apple', 'apple', 'apple'] | All identical values        |\n| 10         | ['word', 'apple', 'pear']  | ['apple', 'pear', 'word']  | Random order                |\n| 11         | ['zoo', 'yak', 'xenon'] | ['xenon', 'yak', 'zoo'] | Reverse order               |\n| 12         | ['a', 'A', 'aa', 'AA'] | ['A', 'AA', 'a', 'aa'] | Case-sensitive comparison   |\n| 13         | ['monkey', 'lion', 'tiger', 'bear'] | ['bear', 'lion', 'monkey', 'tiger'] | Animal names          |\n| 14         | ['Java', 'python', 'C++', 'ruby'] | ['C++', 'Java', 'python', 'ruby'] | Programming languages  |\n| 15         | ['sun', 'moon', 'star', 'planet'] | ['moon', 'planet', 'star', 'sun'] | Space objects          |\n| 16         | ['India', 'china', 'USA', 'brazil'] | ['India', 'USA', 'brazil', 'china'] | Country names         |\n| 17         | ['alpha', 'beta', 'gamma', 'delta'] | ['alpha', 'beta', 'delta', 'gamma'] | Greek letters         |\n| 18         | ['two', 'three', 'one', 'four'] | ['four', 'one', 'three', 'two'] | Mixed numbers as words  |\n| 19         | ['1', '10', '2'] | ['1', '10', '2'] | Numerical strings               |\n| 20         | ['#', '$', '@', '&'] | ['#', '$', '&', '@'] | Symbols                       |\n| 21         | ['apple pie', 'banana split', 'cherry tart'] | ['apple pie', 'banana split', 'cherry tart'] | Strings with spaces |\n| 22         | ['go', 'Go', 'GO'] | ['GO', 'Go', 'go'] | Different casing              |\n| 23         | ['a', 'ab', 'abc', 'abcd'] | ['a', 'ab', 'abc', 'abcd'] | Length increasing         |\n| 24         | ['abcd', 'abc', 'ab', 'a'] | ['a', 'ab', 'abc', 'abcd'] | Length decreasing         |\n| 25         | ['taco', 'burrito', 'quesadilla'] | ['burrito', 'quesadilla', 'taco'] | Food items            |\n| 26         | ['zero', 'zero', 'zero'] | ['zero', 'zero', 'zero'] | All same elements         |\n| 27         | ['UPPER', 'lower', 'Mixed'] | ['Mixed', 'UPPER', 'lower'] | Case sensitivity         |\n| 28         | ['1word', '2word', 'word'] | ['1word', '2word', 'word'] | Mixed with numbers       |\n| 29         | ['Zebra', 'zebra', 'ZEBRA'] | ['ZEBRA', 'Zebra', 'zebra'] | Case variation           |\n| 30         | ['$', 'apple', 'Banana', 'zebra'] | ['$', 'Banana', 'apple', 'zebra'] | Special char first     |\n| 31         | ['apple', 'banana', 'Cherry'] | ['Cherry', 'apple', 'banana'] | Capital letter priority |\n| 32         | ['quick', 'brown', 'fox'] | ['brown', 'fox', 'quick'] | Simple words             |\n| 33         | ['hi', 'HI', 'Hi'] | ['HI', 'Hi', 'hi'] | Case variety                 |\n| 34         | ['123', 'apple', '456'] | ['123', '456', 'apple'] | Numeric strings first     |\n| 35         | ['dog1', 'dog10', 'dog2'] | ['dog1', 'dog10', 'dog2'] | No numeric sorting        |\n| 36         | ['aa', 'a', 'aaa'] | ['a', 'aa', 'aaa'] | Length-based pattern         |\n| 37         | ['alpha beta', 'alpha'] | ['alpha', 'alpha beta'] | Prefix sorting            |\n| 38         | ['Red', 'green', 'Blue'] | ['Blue', 'Red', 'green'] | Color names               |\n| 39         | ['True', 'False', 'None'] | ['False', 'None', 'True'] | Python reserved words     |\n| 40         | ['x-ray', 'xenon', 'xerox'] | ['x-ray', 'xenon', 'xerox'] | Hyphen included          |\n",
      "example": {
        "input": "['banana', 'apple', 'cherry']",
        "output": "['apple', 'banana', 'cherry']",
        "explanation": "The array is sorted alphabetically."
      },
      "answer": "class Solution:\n    def sortStrings(self, strings):\n        return sorted(strings)"
    },      
    {
      "id": 5,
      "title": "Sort an Array of Numbers in Increasing Order of Frequency",
      "description": "Given an array of integers, sort the array based on the frequency of the numbers in increasing order. If two numbers have the same frequency, they should be sorted in ascending order.\n\n| Test Cases | nums                | Expected Output        | Notes                        |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | [3, 3, 2, 1, 2, 1, 1] | [2, 2, 3, 3, 1, 1, 1]   | Normal case                  |\n| 2          | [1, 2, 3, 4, 5]     | [1, 2, 3, 4, 5]         | All numbers have the same frequency  |\n| 3          | [3, 3, 3, 2, 2, 1]  | [1, 2, 2, 3, 3, 3]     | Different frequencies       |\n| 4          | [1, 1, 1, 2, 2]     | [2, 2, 1, 1, 1]         | Two frequencies             |\n| 5          | [5, 5, 5, 2, 3, 2]  | [3, 2, 2, 5, 5, 5]     | Includes duplicates        |\n| 6          | [6, 6, 6, 7, 8, 9]  | [7, 8, 9, 6, 6, 6]     | Frequency sorting            |\n| 7          | [1, 1, 2, 2, 3]     | [3, 1, 1, 2, 2]         | Mixed frequencies            |\n| 8          | [4, 4, 4, 5, 5, 6]  | [6, 5, 5, 4, 4, 4]     | Frequencies in mixed order |\n| 9          | [10, 10, 20]        | [20, 10, 10]            | Frequency-based sorting    |\n| 10         | [1, 1, 2]           | [2, 1, 1]              | Small array with duplicates |\n| 11         | [4, 3, 3, 3, 4, 4]  | [3, 3, 3, 4, 4, 4]     | Equal frequency values     |\n| 12         | [9, 8, 7, 8, 7, 7]  | [9, 8, 8, 7, 7, 7]     | Mixed with single freq     |\n| 13         | [0, 0, 1, 2, 2, 2]  | [1, 0, 0, 2, 2, 2]     | Zero included               |\n| 14         | [5]                 | [5]                    | Single element              |\n| 15         | [4, 4, 4, 4]        | [4, 4, 4, 4]           | All same elements           |\n| 16         | [2, 3, 2, 1, 3, 1]  | [1, 1, 2, 2, 3, 3]     | Equal frequencies and sorting |\n| 17         | [6, 5, 5, 6, 6]     | [5, 5, 6, 6, 6]        | Tied and one higher freq    |\n| 18         | [2, 2, 3, 3, 4, 4]  | [2, 2, 3, 3, 4, 4]     | All equal freq, sorted      |\n| 19         | [7, 8, 7, 8, 9, 9]  | [7, 7, 8, 8, 9, 9]     | All tied, natural order     |\n| 20         | [3, 2, 1, 3, 2, 1]  | [1, 1, 2, 2, 3, 3]     | Even frequencies            |\n| 21         | [8, 6, 7, 8, 6]     | [7, 6, 6, 8, 8]        | One lower frequency         |\n| 22         | [5, 5, 4, 3, 3, 3]  | [4, 5, 5, 3, 3, 3]     | One low, one high freq      |\n| 23         | [2, 1, 1, 2, 2, 3]  | [3, 1, 1, 2, 2, 2]     | Mix with single occurrence  |\n| 24         | [9, 9, 6, 7, 7, 7]  | [6, 9, 9, 7, 7, 7]     | One low, others mixed       |\n| 25         | [5, 3, 5, 3, 2, 2]  | [2, 2, 3, 3, 5, 5]     | Equal frequencies           |\n| 26         | [10, 20, 10, 30]    | [20, 30, 10, 10]       | Single and repeat elements  |\n| 27         | [4, 2, 4, 1, 1, 1]  | [2, 4, 4, 1, 1, 1]     | One highest frequency       |\n| 28         | [1, 3, 1, 3, 2, 2]  | [1, 1, 2, 2, 3, 3]     | All tied frequencies        |\n| 29         | [0, 0, 0, 1, 2, 3]  | [1, 2, 3, 0, 0, 0]     | Multiple singles            |\n| 30         | [3, 3, 1, 1, 2, 2]  | [1, 1, 2, 2, 3, 3]     | Balanced frequencies        |\n| 31         | [6, 6, 6, 1, 2]     | [1, 2, 6, 6, 6]        | One high, others low        |\n| 32         | [7, 5, 7, 6, 5, 6]  | [5, 5, 6, 6, 7, 7]     | All tied                    |\n| 33         | [4, 4, 1, 2, 2, 2]  | [1, 4, 4, 2, 2, 2]     | Single low freq             |\n| 34         | [2, 2, 3, 3, 1, 1]  | [1, 1, 2, 2, 3, 3]     | Equal freq sort             |\n| 35         | [9, 8, 8, 9, 7, 7]  | [7, 7, 8, 8, 9, 9]     | Even ties                   |\n| 36         | [5, 5, 2, 2, 3, 3]  | [2, 2, 3, 3, 5, 5]     | Increasing values           |\n| 37         | [6, 5, 6, 4, 5, 4]  | [4, 4, 5, 5, 6, 6]     | Lexicographic sorting       |\n| 38         | [3, 2, 2, 1, 1, 1]  | [3, 2, 2, 1, 1, 1]     | Only one unique frequency   |\n| 39         | [0, 0, 1, 1, 2, 2]  | [0, 0, 1, 1, 2, 2]     | All same frequencies        |\n| 40         | [1, 3, 3, 2, 1, 1]  | [2, 3, 3, 1, 1, 1]     | Highest freq at end         |\n",
      "example": {
        "input": "[3, 3, 2, 1, 2, 1, 1]",
        "output": "[2, 2, 3, 3, 1, 1, 1]",
        "explanation": "The numbers are sorted based on their frequency, and in case of equal frequency, by their values."
      },
      "answer": "class Solution:\n    def frequencySort(self, nums):\n        from collections import Counter\n        count = Counter(nums)\n        return sorted(nums, key=lambda x: (count[x], x))"
    },      
    {
      "id": 6,
      "title": "Sort an Array of Numbers with Mixed Positive and Negative Values",
      "description": "Given an array of integers containing both positive and negative values, sort the array in ascending order.\n\n| Test Cases | nums                     | Expected Output         | Notes                        |\n|------------|--------------------------|--------------------------|------------------------------|\n| 1          | [249, 86, 1, -121, -10, -274, 722, 817, -908, 453] | [-908, -274, -121, -10, 1, 86, 249, 453, 722, 817] | Random mix of positive and negative integers |\n| 2          | [148, 990, -346, -505, 724, -782, 181, -172, 187, -557] | [-782, -557, -505, -346, -172, 148, 181, 187, 724, 990] | Random mix of positive and negative integers |\n| 3          | [558, 299, 95, -5, -283, 610, 327, -870, 130] | [-870, -283, -5, 95, 130, 299, 327, 558, 610] | Random mix of positive and negative integers |\n| 4          | [317, -444, -573, 883, 314] | [-573, -444, 314, 317, 883] | Random mix of positive and negative integers |\n| 5          | [5, -2, 9, -1, 5, 6] | [-2, -1, 5, 5, 6, 9] | Sample example |\n| 6          | [302, -321, 103, 0, -45, 55] | [-321, -45, 0, 55, 103, 302] | Random values |\n| 7          | [-99, -1, 0, 1, 99] | [-99, -1, 0, 1, 99] | Already in order |\n| 8          | [1, 2, 3, -3, -2, -1] | [-3, -2, -1, 1, 2, 3] | Mirror values |\n| 9          | [-10, -20, -30, 10, 20, 30] | [-30, -20, -10, 10, 20, 30] | Negative and positive pairs |\n| 10         | [0, -100, 100, -50, 50, 0] | [-100, -50, 0, 0, 50, 100] | Includes duplicates and zero |\n| 11         | [-123, 321, 111, -321, 0] | [-321, -123, 0, 111, 321] | Random values |\n| 12         | [88, -99, 77, -66, 0] | [-99, -66, 0, 77, 88] | Alternating signs |\n| 13         | [-5, -6, -7, 5, 6, 7] | [-7, -6, -5, 5, 6, 7] | Symmetric around 0 |\n| 14         | [-1, 1, -2, 2, -3, 3] | [-3, -2, -1, 1, 2, 3] | Alternating pairs |\n| 15         | [10, -20, 30, -40, 50] | [-40, -20, 10, 30, 50] | Skipped pattern |\n| 16         | [1, -1, 1, -1, 1, -1] | [-1, -1, -1, 1, 1, 1] | Repeating values |\n| 17         | [-101, 101, -202, 202] | [-202, -101, 101, 202] | Symmetric with large gaps |\n| 18         | [-7, 2, -5, 3, 0, 4, -6] | [-7, -6, -5, 0, 2, 3, 4] | Unsorted random mix |\n| 19         | [99, -100, 1, 0, -1, 100] | [-100, -1, 0, 1, 99, 100] | Edge values |\n| 20         | [9, -9, 8, -8, 7, -7] | [-9, -8, -7, 7, 8, 9] | Alternating decreasing pattern |\n| 21         | [-222, 333, -444, 555, 0] | [-444, -222, 0, 333, 555] | Mixed values with 0 |\n| 22         | [100, -50, -100, 50] | [-100, -50, 50, 100] | Balanced around zero |\n| 23         | [-11, -22, -33, 11, 22, 33] | [-33, -22, -11, 11, 22, 33] | Grouped values |\n| 24         | [6, 3, -3, -6, 0] | [-6, -3, 0, 3, 6] | Centered on zero |\n| 25         | [-10, 10, -20, 20, -30, 30, -40, 40] | [-40, -30, -20, -10, 10, 20, 30, 40] | Alternating extreme values |\n| 26         | [-17, -23, -1, 2, 3] | [-23, -17, -1, 2, 3] | Small range values |\n| 27         | [-500, 500, 0] | [-500, 0, 500] | Extreme ends with zero |\n| 28         | [7, -7, 8, -8, 9, -9, 0] | [-9, -8, -7, 0, 7, 8, 9] | Classic case |\n| 29         | [2, 4, 6, -2, -4, -6] | [-6, -4, -2, 2, 4, 6] | Arithmetic progression |\n| 30         | [-1, -2, -3, 1, 2, 3, 0] | [-3, -2, -1, 0, 1, 2, 3] | Spread around zero |\n| 31         | [-19, 19, -29, 29, -39, 39] | [-39, -29, -19, 19, 29, 39] | Symmetric |\n| 32         | [15, -15, 10, -10, 5, -5] | [-15, -10, -5, 5, 10, 15] | Scaled values |\n| 33         | [-25, 50, -75, 100] | [-75, -25, 50, 100] | Increasing positive gap |\n| 34         | [0, -3, -6, -9, 3, 6, 9] | [-9, -6, -3, 0, 3, 6, 9] | Consistent jump |\n| 35         | [33, -66, 99, -132] | [-132, -66, 33, 99] | Stepped values |\n| 36         | [4, -1, -4, 1, 0] | [-4, -1, 0, 1, 4] | Balanced tiny set |\n| 37         | [81, -27, 9, -3, 3, -9] | [-27, -9, -3, 3, 9, 81] | Powers and roots |\n| 38         | [-333, 111, -111, 333] | [-333, -111, 111, 333] | Alternating large values |\n| 39         | [70, -70, 60, -60, 50, -50] | [-70, -60, -50, 50, 60, 70] | Perfect symmetry |\n| 40         | [13, -13, 26, -26, 0] | [-26, -13, 0, 13, 26] | Final test case |",
      "example": {
        "input": "[5, -2, 9, -1, 5, 6]",
        "output": "[-2, -1, 5, 5, 6, 9]",
        "explanation": "The array is sorted with both positive and negative numbers in ascending order."
      },
      "answer": "class Solution:\n    def sortArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 7,
      "title": "Sort an Array of Strings by Lexicographical Order",
      "description": "Given an array of strings, sort the strings lexicographically (dictionary order). The comparison should be case-sensitive.\n\n| Test Cases | strings                   | Expected Output         | Notes                        |\n|------------|---------------------------|--------------------------|------------------------------|\n| 1          | ['apple', 'banana', 'cherry'] | ['apple', 'banana', 'cherry'] | Normal case                |\n| 2          | ['dog', 'cat', 'rabbit', 'elephant'] | ['cat', 'dog', 'elephant', 'rabbit'] | Sorted alphabetically   |\n| 3          | ['a', 'A', 'b', 'B']       | ['A', 'B', 'a', 'b']      | Case-sensitive sorting       |\n| 4          | ['Car', 'apple', 'banana', 'dog'] | ['Car', 'apple', 'banana', 'dog'] | Mixed capital letters     |\n| 5          | ['X', 'Z', 'Y']            | ['X', 'Y', 'Z']           | Single character strings    |\n| 6          | ['zebra', 'apple', 'kiwi'] | ['apple', 'kiwi', 'zebra'] | Random order                |\n| 7          | ['grape', 'orange', 'pear'] | ['grape', 'orange', 'pear'] | Already sorted             |\n| 8          | ['ant', 'zebra', 'elephant'] | ['ant', 'elephant', 'zebra'] | Longer strings              |\n| 9          | ['one', 'two', 'three']     | ['one', 'three', 'two']   | Simple alphabetical order   |\n| 10         | ['c', 'b', 'a']             | ['a', 'b', 'c']           | Single characters in reverse |\n| 11         | ['dog', 'cat', 'elephant', 'bat'] | ['bat', 'cat', 'dog', 'elephant'] | Mixed case                  |\n| 12         | ['grape', 'apple', 'peach', 'banana'] | ['apple', 'banana', 'grape', 'peach'] | Fruit names                  |\n| 13         | ['Xena', 'xena', 'yoda']   | ['Xena', 'xena', 'yoda']  | Case-sensitive with capital X || 14         | ['zebra', 'Zebra', 'zoo']  | ['Zebra', 'zebra', 'zoo']  | Case-sensitive sorting with mixed caps ||",
      "example": {
        "input": "['apple', 'banana', 'cherry']",
        "output": "['apple', 'banana', 'cherry']",
        "explanation": "The array is sorted lexicographically in dictionary order."
      },
      "answer": "class Solution:\n    def sortStrings(self, strings):\n        return sorted(strings)"
    },
    {
      "id": 8,
      "title": "Sort an Array of Numbers with Negative, Zero, and Positive Values",
      "description": "Given an array of integers with negative, zero, and positive values, sort the array in ascending order.\n\n| Test Cases | nums                | Expected Output        | Notes                        |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | [-5, 2, 9, 0, -1, 6] | [-5, -1, 0, 2, 6, 9]    | Mixed negative, zero, positive values |\n| 2          | [10, -5, 0, 3, -1]  | [-5, -1, 0, 3, 10]      | Random positive, negative, and zero    |\n| 3          | [7, 0, -3, -1, 8]    | [-3, -1, 0, 7, 8]       | Negative, zero, and positive values    |\n| 4          | [0, -2, 4, -1, 5]    | [-2, -1, 0, 4, 5]       | Mixed array                  |\n| 5          | [-5, -4, -2, -3]     | [-5, -4, -3, -2]         | All negative numbers          |\n| 6          | [1, 1, 0, 0, 0]      | [0, 0, 0, 1, 1]          | Duplicate values              |\n| 7          | [9, 8, 7, 6, 5]      | [5, 6, 7, 8, 9]          | Already sorted in reverse    |\n| 8          | [0, 2, 1, 3, 0]      | [0, 0, 1, 2, 3]          | Zero included                |\n| 9          | [3, 2, 1]            | [1, 2, 3]               | Already sorted in reverse    |\n| 10         | [10, 100, -10, 0]    | [-10, 0, 10, 100]        | Mixed positive, zero, and negative  |\n| 11         | [-15, 25, 0, -5]     | [-15, -5, 0, 25]         | Mixed case with negative, zero, and positive values || 12         | [5, 2, -8, 0, -3]    | [-8, -3, 0, 2, 5]      | Random mix with negatives and zero ||",
      "example": {
        "input": "[-5, 2, 9, 0, -1, 6]",
        "output": "[-5, -1, 0, 2, 6, 9]",
        "explanation": "The array is sorted in ascending order including negative, zero, and positive numbers."
      },
      "answer": "class Solution:\n    def sortArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 9,
      "title": "Sort an Array of Strings by Length in Descending Order",
      "description": "Given an array of strings, sort the strings by their length in descending order.\n\n| Test Cases | strings            | Expected Output      | Notes                        |\n|------------|---------------------|-------------------------|------------------------------|\n| 1          | ['apple', 'banana', 'kiwi'] | ['banana', 'apple', 'kiwi'] | Sorting by string length    |\n| 2          | ['dog', 'cat', 'rabbit', 'elephant'] | ['elephant', 'rabbit', 'dog', 'cat'] | Sorting strings by length  |\n| 3          | ['a', 'ab', 'abc', 'abcd'] | ['abcd', 'abc', 'ab', 'a'] | Different string lengths    |\n| 4          | ['short', 'tiny', 'longest', 'large'] | ['longest', 'short', 'large', 'tiny'] | Mixed lengths               |\n| 5          | ['apple', 'banana', 'cherry'] | ['banana', 'cherry', 'apple'] | Random length sorting      |\n| 6          | ['tiny', 'big', 'large'] | ['large', 'tiny', 'big'] | Varying sizes               |\n| 7          | ['one', 'three', 'two'] | ['three', 'one', 'two']  | Simple case with varying lengths |\n| 8          | ['dog', 'fox', 'elephant'] | ['elephant', 'dog', 'fox'] | Mixed word lengths           |\n| 9          | ['blue', 'green', 'red'] | ['green', 'blue', 'red'] | Equal length strings       |\n| 10         | ['a', 'b', 'c']        | ['a', 'b', 'c']          | Identical length            |\n| 11         | ['longer', 'short', 'tiny', 'huge'] | ['longer', 'huge', 'short', 'tiny'] | Different lengths            |\n| 12         | ['happy', 'sad', 'joyful', 'angry'] | ['joyful', 'happy', 'angry', 'sad'] | Emotion words               |\n| 13         | ['race', 'car', 'racecar', 'bike'] | ['racecar', 'race', 'car', 'bike'] | Sports-related words        |\n| 14         | ['apple', 'pie', 'banana', 'cake'] | ['banana', 'apple', 'cake', 'pie'] | Food-related words          |\n| 15         | ['dog', 'cat', 'fish', 'elephant'] | ['elephant', 'dog', 'cat', 'fish'] | Animal-related words        |\n| 16         | ['bright', 'light', 'night', 'right'] | ['bright', 'light', 'right', 'night'] | Common ending               |\n| 17         | ['cat', 'dog', 'rat'] | ['cat', 'dog', 'rat']     | Simple short words           |\n| 18         | ['fast', 'slow', 'quick'] | ['quick', 'fast', 'slow'] | Speed-related words         |\n| 19         | ['green', 'blue', 'red', 'yellow'] | ['yellow', 'green', 'blue', 'red'] | Colors                     |\n| 20         | ['sun', 'moon', 'earth'] | ['earth', 'moon', 'sun'] | Celestial objects           |\n| 21         | ['hello', 'world', 'python', 'code'] | ['python', 'hello', 'world', 'code'] | Programming-related words   |\n| 22         | ['red', 'green', 'blue', 'yellow', 'orange'] | ['yellow', 'orange', 'green', 'blue', 'red'] | Rainbow colors          |\n| 23         | ['jungle', 'forest', 'desert', 'mountain'] | ['mountain', 'jungle', 'forest', 'desert'] | Nature-related terms    |\n| 24         | ['phone', 'tablet', 'laptop', 'watch'] | ['laptop', 'tablet', 'phone', 'watch'] | Technology-related words   |\n| 25         | ['science', 'math', 'history', 'geography'] | ['science', 'history', 'geography', 'math'] | Subjects                  |\n| 26         | ['day', 'night', 'dawn', 'dusk'] | ['dawn', 'night', 'dusk', 'day'] | Time-related words         |\n| 27         | ['city', 'town', 'village', 'metropolis'] | ['metropolis', 'village', 'city', 'town'] | Urban terms                |\n| 28         | ['freedom', 'liberty', 'democracy', 'rights'] | ['democracy', 'freedom', 'liberty', 'rights'] | Political terms           |\n| 29         | ['peace', 'war', 'love', 'hate'] | ['peace', 'love', 'hate', 'war'] | Opposing concepts           |\n| 30         | ['fastest', 'slower', 'quickest', 'slow'] | ['fastest', 'quickest', 'slower', 'slow'] | Comparative adjectives      |\n| 31         | ['dinner', 'lunch', 'breakfast', 'snack'] | ['dinner', 'breakfast', 'lunch', 'snack'] | Meal-related terms         |\n| 32         | ['green', 'blue', 'red', 'purple', 'violet'] | ['purple', 'violet', 'green', 'blue', 'red'] | Shades of colors         |\n| 33         | ['meow', 'woof', 'chirp', 'roar'] | ['chirp', 'woof', 'meow', 'roar'] | Animal sounds              |\n| 34         | ['spaghetti', 'pizza', 'burger', 'sushi'] | ['spaghetti', 'burger', 'pizza', 'sushi'] | Italian and Japanese foods  |\n| 35         | ['bright', 'shiny', 'glowing', 'radiant'] | ['radiant', 'glowing', 'shiny', 'bright'] | Light-related words         |\n| 36         | ['big', 'small', 'huge', 'tiny'] | ['huge', 'small', 'big', 'tiny'] | Size-related adjectives     |\n| 37         | ['good', 'bad', 'ugly', 'beautiful'] | ['beautiful', 'good', 'bad', 'ugly'] | Descriptive adjectives      |\n| 38         | ['day', 'night', 'morning', 'afternoon'] | ['afternoon', 'morning', 'night', 'day'] | Time of day-related words  |\n| 39         | ['car', 'truck', 'bus', 'motorcycle'] | ['motorcycle', 'truck', 'bus', 'car'] | Transportation-related words |\n| 40         | ['fox', 'wolf', 'dog', 'cat'] | ['wolf', 'fox', 'dog', 'cat'] | Wild animal names           |\n",
      "example": {
        "input": "['apple', 'banana', 'kiwi']",
        "output": "['banana', 'apple', 'kiwi']",
        "explanation": "The strings are sorted in descending order by length."
      },
      "answer": "class Solution:\n    def sortStringsByLength(self, strings):\n        return sorted(strings, key=len, reverse=True)"
    },      
    {
      "id": 10,
      "title": "Sort an Array of Mixed Integers and Strings",
      "description": "Given an array containing a mix of integers and strings, sort the array in ascending order. You can assume that each element is either an integer or a string.\n\n| Test Cases | elements                         | Expected Output                     | Notes                       |\n|------------|----------------------------------|----------------------------------|-----------------------------|\n| 1          | [1, 'banana', 3, 'apple', 2]     | [1, 2, 3, 'apple', 'banana']    | Mixed integers and strings   |\n| 2          | ['cat', 5, 'dog', 3, 1]          | [1, 3, 5, 'cat', 'dog']          | Random integers and strings  |\n| 3          | ['banana', 'apple', 2, 1, 'grape']| [1, 2, 'apple', 'banana', 'grape']| Strings and integers         |\n| 4          | [0, 'car', 'dog', 10, 'apple']    | [0, 10, 'apple', 'car', 'dog']   | Mixed string and integer     |\n| 5          | ['b', 'a', 'c', 3, 2, 1]          | [1, 2, 3, 'a', 'b', 'c']         | Simple mix                   |\n| 6          | ['apple', 5, 2, 'dog', 'cat']     | [2, 5, 'apple', 'cat', 'dog']    | Mixed types                  |\n| 7          | ['zebra', 'apple', 4, 1]          | [1, 4, 'apple', 'zebra']         | Random mix                   |\n| 8          | [1, 10, 20, 'hello', 'world']     | [1, 10, 20, 'hello', 'world']    | Mixed numbers and strings    |\n| 9          | ['foo', 3, 1, 'bar']              | [1, 3, 'bar', 'foo']             | Alphabetical and numbers     |\n| 10         | [0, 5, 'zebra', 'apple', 10]      | [0, 5, 10, 'apple', 'zebra']     | Mixed positive numbers       |\n| 11         | ['dog', 'apple', 1, 5, 'banana']  | [1, 5, 'apple', 'banana', 'dog'] | Mixed types                  |\n| 12         | [7, 'orange', 3, 'pear', 2]       | [2, 3, 7, 'orange', 'pear']      | Numbers and fruit            |\n| 13         | [10, 'grape', 'melon', 8, 2]      | [2, 8, 10, 'grape', 'melon']     | Mixed numbers and fruits     |\n| 14         | [2, 'cat', 5, 'dog', 1]           | [1, 2, 5, 'cat', 'dog']          | Random mix                   |\n| 15         | ['dog', 4, 3, 'apple']            | [3, 4, 'apple', 'dog']           | Mixed with dog and apple     |\n| 16         | [1, 'red', 5, 'green', 10]        | [1, 5, 10, 'green', 'red']       | Colors and numbers           |\n| 17         | ['hat', 1, 'scarf', 4, 'gloves']  | [1, 4, 'gloves', 'hat', 'scarf'] | Mixed clothing items         |\n| 18         | [2, 'pen', 'paper', 3, 'book']    | [2, 3, 'book', 'paper', 'pen']   | Stationery mix               |\n| 19         | ['yellow', 2, 1, 'green']         | [1, 2, 'green', 'yellow']        | Mixed colors and numbers     |\n| 20         | [7, 'dog', 'cat', 3, 1]           | [1, 3, 7, 'cat', 'dog']          | Mixed animals and numbers    |\n| 21         | ['sky', 8, 'cloud', 'rain', 4]    | [4, 8, 'cloud', 'rain', 'sky']   | Weather-related terms        |\n| 22         | ['moon', 1, 'star', 5, 'planet']  | [1, 5, 'moon', 'planet', 'star'] | Celestial bodies             |\n| 23         | ['fish', 4, 'dog', 'cat', 3]      | [3, 4, 'cat', 'dog', 'fish']     | Mixed animals and numbers    |\n| 24         | [0, 10, 'book', 'pen', 7]         | [0, 7, 10, 'book', 'pen']        | Simple mix of numbers and objects  |\n| 25         | [5, 'circle', 2, 'square']        | [2, 5, 'circle', 'square']       | Geometric shapes             |\n| 26         | ['red', 'blue', 3, 1, 5]          | [1, 3, 5, 'blue', 'red']         | Colors and numbers           |\n| 27         | [10, 'apple', 'pear', 2]          | [2, 10, 'apple', 'pear']         | Fruit and numbers            |\n| 28         | [3, 'bat', 4, 'ball']             | [3, 4, 'ball', 'bat']            | Mixed sports items           |\n| 29         | [7, 'tree', 2, 'bush']            | [2, 7, 'bush', 'tree']           | Trees and numbers            |\n| 30         | ['rabbit', 9, 'fox', 'dog', 1]    | [1, 9, 'dog', 'fox', 'rabbit']   | Animals and numbers          |\n| 31         | ['mountain', 10, 'valley', 2]     | [2, 10, 'mountain', 'valley']    | Geographical features        |\n| 32         | ['apple', 4, 'orange', 'banana']  | [4, 'apple', 'banana', 'orange'] | Fruits and numbers           |\n| 33         | ['sun', 1, 'moon', 'earth', 5]    | [1, 5, 'earth', 'moon', 'sun']   | Celestial terms              |\n| 34         | [6, 'dog', 'apple', 'bat', 3]     | [3, 6, 'apple', 'bat', 'dog']    | Animals and fruit mix        |\n| 35         | ['car', 7, 'truck', 4]            | [4, 7, 'car', 'truck']           | Vehicles and numbers         |\n| 36         | ['blue', 5, 'green', 3]           | [3, 5, 'green', 'blue']          | Colors and numbers           |\n| 37         | ['one', 4, 2, 'two']              | [2, 4, 'one', 'two']            | Mixed numbers and words      |\n| 38         | ['dog', 2, 'bird', 5]             | [2, 5, 'bird', 'dog']            | Mixed animals and numbers    |\n| 39         | ['cat', 1, 9, 'elephant', 3]      | [1, 3, 9, 'cat', 'elephant']     | Mixed animals and numbers    |\n| 40         | ['giraffe', 6, 1, 'lion']         | [1, 6, 'giraffe', 'lion']        | Animals and numbers          |\n",
      "example": {
        "input": "[1, 'banana', 3, 'apple', 2]",
        "output": "[1, 2, 3, 'apple', 'banana']",
        "explanation": "The integers are sorted in ascending order, and the strings follow alphabetically."
      },
      "answer": "class Solution:\n    def sortArray(self, elements):\n        return sorted(elements, key=lambda x: (isinstance(x, int), x))"
    },      
    {
      "id": 11,
      "title": "Sort an Array of Floating-Point Numbers",
      "description": "Given an array of floating-point numbers, sort the array in ascending order.\n\n| Test Cases | nums                           | Expected Output            | Notes                      |\n|------------|--------------------------------|----------------------------|----------------------------|\n| 1          | [3.14, 2.71, 1.41, 0.99]      | [0.99, 1.41, 2.71, 3.14]   | Basic floating points      |\n| 2          | [1.23, 3.45, 2.78, 0.12]      | [0.12, 1.23, 2.78, 3.45]   | Random float values        |\n| 3          | [1.1, 3.5, 2.2, 0.7]          | [0.7, 1.1, 2.2, 3.5]       | Sorted in ascending order  |\n| 4          | [5.5, 10.0, 7.3, 2.2]         | [2.2, 5.5, 7.3, 10.0]      | Mixed floating points      |\n| 5          | [3.0, 3.0, 3.0, 3.0]          | [3.0, 3.0, 3.0, 3.0]       | Identical floating values  |\n| 6          | [-1.1, -2.5, -3.2, 0.1]       | [-3.2, -2.5, -1.1, 0.1]    | Negative floating points   |\n| 7          | [2.0, 0.5, 1.5]               | [0.5, 1.5, 2.0]            | Small floating numbers     |\n| 8          | [3.3, 4.4, 2.2, 5.5, 1.1]     | [1.1, 2.2, 3.3, 4.4, 5.5]  | Random order               |\n| 9          | [-2.4, -1.2, 0.6, 1.3]        | [-2.4, -1.2, 0.6, 1.3]     | Mix of negative and positive floats |\n| 10         | [5.2, 3.4, 2.1, 1.7]          | [1.7, 2.1, 3.4, 5.2]       | Float sorting              |\n",
      "example": {
        "input": "[3.14, 2.71, 1.41, 0.99]",
        "output": "[0.99, 1.41, 2.71, 3.14]",
        "explanation": "The floating-point numbers are sorted in ascending order."
      },
      "answer": "class Solution:\n    def sortArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 12,
      "title": "Sort an Array of Dates",
      "description": "Given an array of dates in 'YYYY-MM-DD' format, sort them in chronological order.\n\n| Test Cases | dates                          | Expected Output            | Notes                     |\n|------------|--------------------------------|----------------------------|---------------------------|\n| 1          | ['2025-04-01', '2025-03-15', '2025-05-20'] | ['2025-03-15', '2025-04-01', '2025-05-20'] | Basic case                 |\n| 2          | ['2020-01-01', '2020-02-28', '2020-03-15'] | ['2020-01-01', '2020-02-28', '2020-03-15'] | Already sorted            |\n| 3          | ['2022-08-01', '2021-07-01', '2020-05-01'] | ['2020-05-01', '2021-07-01', '2022-08-01'] | Chronological sorting     |\n| 4          | ['2025-07-04', '2025-06-10', '2025-05-20'] | ['2025-05-20', '2025-06-10', '2025-07-04'] | Mixed future dates        |\n| 5          | ['2023-10-10', '2022-09-09', '2023-08-08'] | ['2022-09-09', '2023-08-08', '2023-10-10'] | Mixed year and month      |\n| 6          | ['2024-12-15', '2025-01-01', '2023-05-05'] | ['2023-05-05', '2024-12-15', '2025-01-01'] | Random future dates       |\n| 7          | ['2025-03-15', '2025-03-10', '2025-03-12'] | ['2025-03-10', '2025-03-12', '2025-03-15'] | Same year, sorted by date |\n| 8          | ['2022-12-25', '2021-11-11', '2020-01-01'] | ['2020-01-01', '2021-11-11', '2022-12-25'] | Sorting across years      |\n| 9          | ['2025-05-01', '2025-05-02', '2025-04-29'] | ['2025-04-29', '2025-05-01', '2025-05-02'] | Close date range          |\n| 10         | ['2023-07-01', '2023-06-15', '2023-06-30'] | ['2023-06-15', '2023-06-30', '2023-07-01'] | Month and day sorting     |\n",
      "example": {
        "input": "['2025-04-01', '2025-03-15', '2025-05-20']",
        "output": "['2025-03-15', '2025-04-01', '2025-05-20']",
        "explanation": "The dates are sorted in chronological order from earliest to latest."
      },
      "answer": "class Solution:\n    def sortDates(self, dates):\n        return sorted(dates)"
    },      
    {
      "id": 13,
      "title": "Sort an Array of Characters",
      "description": "Given an array of characters, sort them in lexicographical order.\n\n| Test Cases | characters                   | Expected Output            | Notes                        |\n|------------|------------------------------|----------------------------|------------------------------|\n| 1          | ['d', 'a', 'c', 'b']          | ['a', 'b', 'c', 'd']        | Basic case                   |\n| 2          | ['x', 'z', 'y']               | ['x', 'y', 'z']             | Sorted in lexicographical order |\n| 3          | ['h', 'e', 'l', 'l', 'o']     | ['e', 'h', 'l', 'l', 'o']   | String with duplicate letters |\n| 4          | ['m', 'n', 'o', 'k', 'l']     | ['k', 'l', 'm', 'n', 'o']   | Mixed order                  |\n| 5          | ['z', 'y', 'x', 'w']          | ['w', 'x', 'y', 'z']        | Reverse order                |\n| 6          | ['a', 'b', 'c', 'a', 'd']     | ['a', 'a', 'b', 'c', 'd']   | Repeated elements            |\n| 7          | ['u', 'v', 't', 'w', 'r']     | ['r', 't', 'u', 'v', 'w']   | Random order                 |\n| 8          | ['g', 'f', 'e', 'd', 'c']     | ['c', 'd', 'e', 'f', 'g']   | Reverse order                |\n| 9          | ['r', 's', 't', 'p']          | ['p', 'r', 's', 't']        | Alphabetical sorting         |\n| 10         | ['m', 'n', 'o', 'p', 'q']     | ['m', 'n', 'o', 'p', 'q']   | Already sorted               |\n",
      "example": {
        "input": "['d', 'a', 'c', 'b']",
        "output": "['a', 'b', 'c', 'd']",
        "explanation": "The characters are sorted in lexicographical order."
      },
      "answer": "class Solution:\n    def sortCharacters(self, characters):\n        return sorted(characters)"
    },      
    {
      "id": 14,
      "title": "Sort an Array of Mixed Negative and Positive Numbers",
      "description": "Given an array of mixed negative and positive integers, sort them in ascending order.\n\n| Test Cases | nums                           | Expected Output            | Notes                        |\n|------------|--------------------------------|----------------------------|------------------------------|\n| 1          | [3, -1, 0, -2, 1]              | [-2, -1, 0, 1, 3]          | Mixed negative and positive  |\n| 2          | [-5, -1, 0, 5, 3]              | [-5, -1, 0, 3, 5]          | Mix of negative and positive |\n| 3          | [10, -3, 4, -2, 0]             | [-3, -2, 0, 4, 10]         | Mixed with zero              |\n| 4          | [8, -7, 3, -1, 0]              | [-7, -1, 0, 3, 8]          | Random mixed integers        |\n| 5          | [3, 0, -5, -1, -3]             | [-5, -3, -1, 0, 3]         | Mixed negative and positive  |\n| 6          | [-1, 2, 0, -3, 1]              | [-3, -1, 0, 1, 2]          | Mix with zero                |\n| 7          | [-9, 4, -6, 1, 2]              | [-9, -6, 1, 2, 4]          | Random integers              |\n| 8          | [-8, -7, -5, -4, -1]           | [-8, -7, -5, -4, -1]       | Already sorted               |\n| 9          | [10, -10, 5, -5, 0]            | [-10, -5, 0, 5, 10]        | Negative, zero, positive     |\n| 10         | [3, 2, 1, 0, -1]               | [-1, 0, 1, 2, 3]           | Sorted mixed integers        |\n",
      "example": {
        "input": "[3, -1, 0, -2, 1]",
        "output": "[-2, -1, 0, 1, 3]",
        "explanation": "The integers are sorted in ascending order, with negative values first."
      },
      "answer": "class Solution:\n    def sortArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 15,
      "title": "Sort a List of Strings by Length",
      "description": "Given a list of strings, sort them in ascending order by their length.\n\n| Test Cases | strings                     | Expected Output            | Notes                          |\n|------------|-----------------------------|----------------------------|--------------------------------|\n| 1          | ['apple', 'banana', 'kiwi']  | ['kiwi', 'apple', 'banana'] | Sort by length                 |\n| 2          | ['cat', 'elephant', 'dog']   | ['cat', 'dog', 'elephant']  | Sorted by string length        |\n| 3          | ['a', 'aa', 'aaa']           | ['a', 'aa', 'aaa']          | Simple case                    |\n| 4          | ['grape', 'pear', 'orange']  | ['pear', 'grape', 'orange'] | Sorting by length              |\n| 5          | ['one', 'two', 'three', 'four'] | ['one', 'two', 'four', 'three'] | Mix of small and large words   |\n| 6          | ['zebra', 'elephant', 'cat'] | ['cat', 'zebra', 'elephant']| Simple alphabetic with length sort |\n| 7          | ['ball', 'bat', 'bottle']    | ['bat', 'ball', 'bottle']   | Sorted by length                |\n| 8          | ['apple', 'orange', 'banana']| ['apple', 'orange', 'banana']| Already sorted by length       |\n| 9          | ['dog', 'fish', 'whale']     | ['dog', 'fish', 'whale']    | Simple words                    |\n| 10         | ['abcdef', 'abcd', 'abc']    | ['abc', 'abcd', 'abcdef']   | Sorting by length               |\n",
      "example": {
        "input": "['apple', 'banana', 'kiwi']",
        "output": "['kiwi', 'apple', 'banana']",
        "explanation": "The strings are sorted by their lengths, shortest to longest."
      },
      "answer": "class Solution:\n    def sortStringsByLength(self, strings):\n        return sorted(strings, key=len)"
    },      
    {
      "id": 16,
      "title": "Sort a List of Tuples Based on First Element",
      "description": "Given a list of tuples, sort them based on the first element of each tuple in ascending order.\n\n| Test Cases | tuples                        | Expected Output            | Notes                           |\n|------------|-------------------------------|----------------------------|---------------------------------|\n| 1          | [(3, 'a'), (1, 'b'), (2, 'c')] | [(1, 'b'), (2, 'c'), (3, 'a')] | Sort by first element            |\n| 2          | [(10, 'apple'), (2, 'banana'), (5, 'cherry')] | [(2, 'banana'), (5, 'cherry'), (10, 'apple')] | Sort by first element            |\n| 3          | [(1, 'z'), (2, 'y'), (3, 'x')] | [(1, 'z'), (2, 'y'), (3, 'x')] | Already sorted                   |\n| 4          | [(6, 'dog'), (1, 'cat'), (5, 'mouse')] | [(1, 'cat'), (5, 'mouse'), (6, 'dog')] | Sorting based on first element    |\n| 5          | [(7, 'red'), (4, 'blue'), (9, 'green')] | [(4, 'blue'), (7, 'red'), (9, 'green')] | Random order                     |\n| 6          | [(8, 'a'), (5, 'b'), (3, 'c')] | [(3, 'c'), (5, 'b'), (8, 'a')] | Sort by first element             |\n| 7          | [(2, 'one'), (3, 'three'), (1, 'two')] | [(1, 'two'), (2, 'one'), (3, 'three')] | Sorted by first element           |\n| 8          | [(4, 'four'), (9, 'nine'), (2, 'two')] | [(2, 'two'), (4, 'four'), (9, 'nine')] | Sort based on the first number    |\n| 9          | [(10, 'x'), (1, 'y'), (2, 'z')] | [(1, 'y'), (2, 'z'), (10, 'x')] | Sorted based on first element     |\n| 10         | [(2, 'cat'), (6, 'dog'), (4, 'bird')] | [(2, 'cat'), (4, 'bird'), (6, 'dog')] | Sorted by the first element       |\n",
      "example": {
        "input": "[(3, 'a'), (1, 'b'), (2, 'c')]",
        "output": "[(1, 'b'), (2, 'c'), (3, 'a')]",
        "explanation": "The tuples are sorted by their first element in ascending order."
      },
      "answer": "class Solution:\n    def sortTuplesByFirstElement(self, tuples):\n        return sorted(tuples)"
    },      
    {
      "id": 17,
      "title": "Sort an Array of Floating-Point Numbers",
      "description": "Given an array of floating-point numbers, sort them in ascending order.\n\n| Test Cases | nums                           | Expected Output            | Notes                        |\n|------------|--------------------------------|----------------------------|------------------------------|\n| 1          | [3.1, 2.5, 4.3, 1.8]           | [1.8, 2.5, 3.1, 4.3]       | Simple case                   |\n| 2          | [0.1, 0.3, 0.2]                | [0.1, 0.2, 0.3]            | Sorting floating numbers       |\n| 3          | [10.5, 0.5, 7.2, 2.8]          | [0.5, 2.8, 7.2, 10.5]      | Mixed floating-point numbers   |\n| 4          | [5.5, 3.4, 2.1]                | [2.1, 3.4, 5.5]            | Sorting a few elements         |\n| 5          | [-2.1, 1.2, -3.5, 4.8]         | [-3.5, -2.1, 1.2, 4.8]     | Negative and positive numbers  |\n| 6          | [1.0, 1.0, 0.0]                | [0.0, 1.0, 1.0]            | Identical numbers              |\n| 7          | [2.2, 3.1, 1.9, 0.4]           | [0.4, 1.9, 2.2, 3.1]       | Random float values            |\n| 8          | [-10.5, 0.0, 3.6, -5.4]        | [-10.5, -5.4, 0.0, 3.6]    | Sorting mix of positive/negative|\n| 9          | [0.7, 0.2, 0.9, 0.5]           | [0.2, 0.5, 0.7, 0.9]       | Sorting small floating numbers |\n| 10         | [7.1, 5.3, 8.8, 4.2]           | [4.2, 5.3, 7.1, 8.8]       | Floating numbers               |\n| 11         | [100.5, 12.3, 85.1, 15.9]      | [12.3, 15.9, 85.1, 100.5]  | Large floating-point numbers   |\n| 12         | [6.1, 4.4, 2.3, 8.2]           | [2.3, 4.4, 6.1, 8.2]       | Mixed small and large numbers  |\n| 13         | [3.6, 9.2, 7.5, 4.0]           | [3.6, 4.0, 7.5, 9.2]       | Sorting random floats          |\n| 14         | [0.3, 2.1, 0.6]                | [0.3, 0.6, 2.1]            | Sorting small floats           |\n| 15         | [-5.0, 3.0, -1.0, 2.0]         | [-5.0, -1.0, 2.0, 3.0]     | Mixed negative and positive    |\n| 16         | [3.7, 8.1, 4.4, 6.9]           | [3.7, 4.4, 6.9, 8.1]       | Sorting random values          |\n| 17         | [-2.5, 0.2, -1.8, 2.7]         | [-2.5, -1.8, 0.2, 2.7]     | Sorting negative and positive  |\n| 18         | [4.8, 5.1, 2.2, 7.3]           | [2.2, 4.8, 5.1, 7.3]       | Sorting mixed elements         |\n| 19         | [0.0, -0.1, -0.2, 0.3]         | [-0.2, -0.1, 0.0, 0.3]     | Sorting small and negative     |\n| 20         | [0.5, 0.9, 0.7, 0.3]           | [0.3, 0.5, 0.7, 0.9]       | Sorting small floating numbers |\n| 21         | [-8.5, -6.2, -3.9, -1.1]       | [-8.5, -6.2, -3.9, -1.1]   | Negative numbers               |\n| 22         | [10.2, 7.3, 8.9, 5.5]          | [5.5, 7.3, 8.9, 10.2]      | Sorting with large values      |\n| 23         | [6.7, 5.4, 9.3, 2.0]           | [2.0, 5.4, 6.7, 9.3]       | Sorting random floats          |\n| 24         | [15.5, 20.3, 13.1, 19.8]       | [13.1, 15.5, 19.8, 20.3]   | Sorting large values           |\n| 25         | [2.3, 1.4, 3.7, 1.8]           | [1.4, 1.8, 2.3, 3.7]       | Simple case with decimals      |\n| 26         | [2.9, 1.7, 3.3, 0.5]           | [0.5, 1.7, 2.9, 3.3]       | Sorting decimal numbers        |\n| 27         | [0.9, 0.6, 0.8, 0.4]           | [0.4, 0.6, 0.8, 0.9]       | Sorting decimal values         |\n| 28         | [9.5, 8.2, 6.3, 3.7]           | [3.7, 6.3, 8.2, 9.5]       | Sorting decimal numbers        |\n| 29         | [12.5, 11.5, 14.3, 13.1]       | [11.5, 12.5, 13.1, 14.3]   | Sorting decimal numbers        |\n| 30         | [2.6, 1.8, 2.4, 0.9]           | [0.9, 1.8, 2.4, 2.6]       | Sorting floats                 |\n| 31         | [10.1, 9.9, 10.9, 11.2]        | [9.9, 10.1, 10.9, 11.2]    | Sorting large decimals         |\n| 32         | [6.5, 5.0, 3.0, 2.7]           | [2.7, 3.0, 5.0, 6.5]       | Sorting small floats           |\n| 33         | [-1.1, 2.2, 3.3, -2.2]         | [-2.2, -1.1, 2.2, 3.3]     | Sorting negative and positive  |\n| 34         | [1.6, 0.4, 2.9, 3.5]           | [0.4, 1.6, 2.9, 3.5]       | Simple case                   |\n| 35         | [0.2, 0.8, 1.2, 1.1]           | [0.2, 0.8, 1.1, 1.2]       | Sorting with decimals          |\n| 36         | [4.6, 5.2, 3.3, 2.8]           | [2.8, 3.3, 4.6, 5.2]       | Sorting mixed values           |\n| 37         | [5.1, 7.2, 4.3, 3.4]           | [3.4, 4.3, 5.1, 7.2]       | Sorting decimal values         |\n| 38         | [8.4, 9.6, 2.3, 5.1]           | [2.3, 5.1, 8.4, 9.6]       | Sorting decimal numbers        |\n| 39         | [7.3, 6.9, 3.5, 9.2]           | [3.5, 6.9, 7.3, 9.2]       | Sorting random floats          |\n| 40         | [3.1, 2.9, 1.5, 4.7]           | [1.5, 2.9, 3.1, 4.7]       | Sorting small floating numbers |\n",
      "example": {
        "input": "[3.1, 2.5, 4.3, 1.8]",
        "output": "[1.8, 2.5, 3.1, 4.3]",
        "explanation": "The array of floating-point numbers is sorted in ascending order."
      },
      "answer": "class Solution:\n    def sortFloatArray(self, nums):\n        return sorted(nums)"
    },      
    {
      "id": 18,
      "title": "Sort a List of Strings by Alphabetical Order",
      "description": "Given a list of strings, sort them in alphabetical order.\n\n| Test Cases | strings                     | Expected Output            | Notes                        |\n|------------|-----------------------------|----------------------------|------------------------------|\n| 1          | ['apple', 'banana', 'cherry'] | ['apple', 'banana', 'cherry'] | Simple case                   |\n| 2          | ['grape', 'kiwi', 'orange']  | ['grape', 'kiwi', 'orange']  | Alphabetical order            |\n| 3          | ['zebra', 'lion', 'tiger']   | ['lion', 'tiger', 'zebra']   | Random order                  |\n| 4          | ['blue', 'green', 'red']     | ['blue', 'green', 'red']     | Sorting by alphabetical order |\n| 5          | ['sun', 'moon', 'stars']     | ['moon', 'stars', 'sun']     | Sorting simple strings        |\n| 6          | ['cucumber', 'apple', 'banana'] | ['apple', 'banana', 'cucumber'] | Strings starting with different letters |\n| 7          | ['dog', 'elephant', 'cat']   | ['cat', 'dog', 'elephant']   | Random strings                |\n| 8          | ['flying', 'catch', 'falling'] | ['catch', 'falling', 'flying'] | Sorting based on alphabetical order |\n| 9          | ['cat', 'dog', 'bat']        | ['bat', 'cat', 'dog']        | Sorting by first letter       |\n| 10         | ['ball', 'bat', 'boat']      | ['ball', 'bat', 'boat']      | Already sorted                |\n| 11         | ['ant', 'zebra', 'apple']    | ['ant', 'apple', 'zebra']    | Sorting with mix of short/long |\n| 12         | ['juice', 'apple', 'banana'] | ['apple', 'banana', 'juice'] | Strings with mixed letters    |\n| 13         | ['banana', 'apple', 'cherry', 'orange'] | ['apple', 'banana', 'cherry', 'orange'] | Basic fruit names  |\n| 14         | ['guitar', 'drums', 'piano'] | ['drums', 'guitar', 'piano'] | Musical instruments           |\n| 15         | ['ball', 'bat', 'bell']      | ['ball', 'bat', 'bell']      | Sorting strings with same first letter |\n| 16         | ['alex', 'zane', 'carl']     | ['alex', 'carl', 'zane']     | Sorting names alphabetically  |\n| 17         | ['zebra', 'yarn', 'xylophone'] | ['xylophone', 'yarn', 'zebra'] | Sorting by last letter       |\n| 18         | ['drum', 'guitar', 'piano', 'flute'] | ['drum', 'flute', 'guitar', 'piano'] | Instruments order      |\n| 19         | ['jump', 'run', 'skip']      | ['jump', 'run', 'skip']      | Sorting verbs                 |\n| 20         | ['dog', 'cat', 'bird', 'fish'] | ['bird', 'cat', 'dog', 'fish'] | Sorting animals in alphabetical order |\n| 21         | ['hero', 'villain', 'sidekick'] | ['hero', 'sidekick', 'villain'] | Sorting fantasy characters   |\n| 22         | ['rose', 'lily', 'tulip']   | ['lily', 'rose', 'tulip']   | Sorting flowers               |\n| 23         | ['apricot', 'pear', 'cherry', 'plum'] | ['apricot', 'cherry', 'pear', 'plum'] | Sorting fruits         |\n| 24         | ['jacket', 'shirt', 'socks'] | ['jacket', 'shirt', 'socks'] | Sorting clothing items        |\n| 25         | ['van', 'truck', 'car', 'bike'] | ['bike', 'car', 'truck', 'van'] | Sorting vehicles             |\n| 26         | ['python', 'java', 'ruby']   | ['java', 'python', 'ruby']   | Sorting programming languages  |\n| 27         | ['hello', 'world', 'python'] | ['hello', 'python', 'world'] | Sorting words in a sentence   |\n| 28         | ['math', 'history', 'english'] | ['english', 'history', 'math'] | Sorting school subjects      |\n| 29         | ['sun', 'moon', 'earth']     | ['earth', 'moon', 'sun']     | Sorting celestial objects     |\n| 30         | ['cup', 'plate', 'bowl']     | ['bowl', 'cup', 'plate']     | Sorting kitchenware           |\n| 31         | ['apple', 'grape', 'kiwi']   | ['apple', 'grape', 'kiwi']   | Simple alphabetical sorting   |\n| 32         | ['cloud', 'rain', 'storm']   | ['cloud', 'rain', 'storm']   | Sorting weather terms         |\n| 33         | ['red', 'blue', 'green']     | ['blue', 'green', 'red']     | Sorting colors                |\n| 34         | ['cat', 'rat', 'bat']        | ['bat', 'cat', 'rat']        | Sorting animal names          |\n| 35         | ['indigo', 'violet', 'blue'] | ['blue', 'indigo', 'violet'] | Sorting rainbow colors        |\n| 36         | ['piano', 'guitar', 'violin'] | ['guitar', 'piano', 'violin'] | Sorting musical instruments   |\n| 37         | ['emerald', 'diamond', 'ruby'] | ['diamond', 'emerald', 'ruby'] | Sorting gemstones             |\n| 38         | ['chocolate', 'vanilla', 'strawberry'] | ['chocolate', 'strawberry', 'vanilla'] | Sorting ice cream flavors    |\n| 39         | ['mountain', 'river', 'forest'] | ['forest', 'mountain', 'river'] | Sorting nature terms          |\n| 40         | ['computer', 'phone', 'tablet'] | ['computer', 'phone', 'tablet'] | Sorting tech terms            |\n",
      "example": {
        "input": "['apple', 'banana', 'cherry']",
        "output": "['apple', 'banana', 'cherry']",
        "explanation": "The strings are sorted alphabetically."
      },
      "answer": "class Solution:\n    def sortStringsAlphabetically(self, strings):\n        return sorted(strings)"
    },      
    {
      "id": 19,
      "title": "Sort a List of Dictionaries by a Key",
      "description": "Given a list of dictionaries, sort the list by a specified key.\n\n| Test Cases | dicts                            | Expected Output             | Notes                           |\n|------------|----------------------------------|-----------------------------|---------------------------------|\n| 1          | [{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 28}] | [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 28}, {'name': 'John', 'age': 30}] | Sorting by 'age'               |\n| 2          | [{'name': 'Eve', 'age': 40}, {'name': 'Charlie', 'age': 35}] | [{'name': 'Charlie', 'age': 35}, {'name': 'Eve', 'age': 40}] | Sorting by 'age'               |\n| 3          | [{'name': 'Steve', 'age': 45}, {'name': 'Zara', 'age': 50}, {'name': 'Linda', 'age': 30}] | [{'name': 'Steve', 'age': 45}, {'name': 'Linda', 'age': 30}, {'name': 'Zara', 'age': 50}] | Sorting by 'age'               |\n| 4          | [{'name': 'David', 'age': 25}, {'name': 'Bob', 'age': 35}] | [{'name': 'David', 'age': 25}, {'name': 'Bob', 'age': 35}] | Sorting by 'age'               |\n| 5          | [{'name': 'Alex', 'age': 30}, {'name': 'Jason', 'age': 28}, {'name': 'Maria', 'age': 32}] | [{'name': 'Jason', 'age': 28}, {'name': 'Alex', 'age': 30}, {'name': 'Maria', 'age': 32}] | Sorting by 'age'               |\n| 6          | [{'name': 'Oscar', 'age': 28}, {'name': 'Jill', 'age': 30}] | [{'name': 'Oscar', 'age': 28}, {'name': 'Jill', 'age': 30}] | Sorting by 'age'               |\n| 7          | [{'name': 'Sophia', 'age': 22}, {'name': 'Amos', 'age': 35}] | [{'name': 'Sophia', 'age': 22}, {'name': 'Amos', 'age': 35}] | Sorting by 'age'               |\n| 8          | [{'name': 'Emily', 'age': 33}, {'name': 'Jack', 'age': 38}] | [{'name': 'Emily', 'age': 33}, {'name': 'Jack', 'age': 38}] | Sorting by 'age'               |\n| 9          | [{'name': 'Aiden', 'age': 40}, {'name': 'Liam', 'age': 25}] | [{'name': 'Liam', 'age': 25}, {'name': 'Aiden', 'age': 40}] | Sorting by 'age'               |\n| 10         | [{'name': 'Zach', 'age': 19}, {'name': 'Ryan', 'age': 29}] | [{'name': 'Zach', 'age': 19}, {'name': 'Ryan', 'age': 29}] | Sorting by 'age'               |\n| 11         | [{'name': 'Tom', 'age': 20}, {'name': 'Harry', 'age': 22}] | [{'name': 'Tom', 'age': 20}, {'name': 'Harry', 'age': 22}] | Sorting by 'age'               |\n| 12         | [{'name': 'Emma', 'age': 28}, {'name': 'Olivia', 'age': 24}] | [{'name': 'Olivia', 'age': 24}, {'name': 'Emma', 'age': 28}] | Sorting by 'age'               |\n| 13         | [{'name': 'James', 'age': 40}, {'name': 'William', 'age': 37}] | [{'name': 'William', 'age': 37}, {'name': 'James', 'age': 40}] | Sorting by 'age'               |\n| 14         | [{'name': 'Sophia', 'age': 29}, {'name': 'Amelia', 'age': 30}] | [{'name': 'Sophia', 'age': 29}, {'name': 'Amelia', 'age': 30}] | Sorting by 'age'               |\n| 15         | [{'name': 'Jack', 'age': 33}, {'name': 'Ava', 'age': 28}] | [{'name': 'Ava', 'age': 28}, {'name': 'Jack', 'age': 33}] | Sorting by 'age'               |\n| 16         | [{'name': 'Alice', 'age': 25}, {'name': 'Eve', 'age': 40}] | [{'name': 'Alice', 'age': 25}, {'name': 'Eve', 'age': 40}] | Sorting by 'age'               |\n| 17         | [{'name': 'Tom', 'age': 35}, {'name': 'Eve', 'age': 40}] | [{'name': 'Tom', 'age': 35}, {'name': 'Eve', 'age': 40}] | Sorting by 'age'               |\n| 18         | [{'name': 'Will', 'age': 21}, {'name': 'Harry', 'age': 30}] | [{'name': 'Will', 'age': 21}, {'name': 'Harry', 'age': 30}] | Sorting by 'age'               |\n| 19         | [{'name': 'George', 'age': 33}, {'name': 'John', 'age': 22}] | [{'name': 'John', 'age': 22}, {'name': 'George', 'age': 33}] | Sorting by 'age'               |\n| 20         | [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 28}] | [{'name': 'Bob', 'age': 28}, {'name': 'Alice', 'age': 30}] | Sorting by 'age'               |\n| 21         | [{'name': 'Helen', 'age': 30}, {'name': 'Sophia', 'age': 25}] | [{'name': 'Sophia', 'age': 25}, {'name': 'Helen', 'age': 30}] | Sorting by 'age'               |\n| 22         | [{'name': 'Jack', 'age': 40}, {'name': 'Tom', 'age': 35}] | [{'name': 'Tom', 'age': 35}, {'name': 'Jack', 'age': 40}] | Sorting by 'age'               |\n| 23         | [{'name': 'Elena', 'age': 35}, {'name': 'Anna', 'age': 28}] | [{'name': 'Anna', 'age': 28}, {'name': 'Elena', 'age': 35}] | Sorting by 'age'               |\n| 24         | [{'name': 'David', 'age': 50}, {'name': 'Jane', 'age': 40}] | [{'name': 'Jane', 'age': 40}, {'name': 'David', 'age': 50}] | Sorting by 'age'               |\n| 25         | [{'name': 'Emma', 'age': 35}, {'name': 'Sophia', 'age': 32}] | [{'name': 'Sophia', 'age': 32}, {'name': 'Emma', 'age': 35}] | Sorting by 'age'               |\n| 26         | [{'name': 'Michael', 'age': 29}, {'name': 'Tom', 'age': 26}] | [{'name': 'Tom', 'age': 26}, {'name': 'Michael', 'age': 29}] | Sorting by 'age'               |\n| 27         | [{'name': 'Aiden', 'age': 40}, {'name': 'James', 'age': 25}] | [{'name': 'James', 'age': 25}, {'name': 'Aiden', 'age': 40}] | Sorting by 'age'               |\n| 28         | [{'name': 'Olivia', 'age': 28}, {'name': 'Sophia', 'age': 30}] | [{'name': 'Olivia', 'age': 28}, {'name': 'Sophia', 'age': 30}] | Sorting by 'age'               |\n| 29         | [{'name': 'Ava', 'age': 30}, {'name': 'Amelia', 'age': 25}] | [{'name': 'Amelia', 'age': 25}, {'name': 'Ava', 'age': 30}] | Sorting by 'age'               |\n| 30         | [{'name': 'James', 'age': 40}, {'name': 'William', 'age': 30}] | [{'name': 'William', 'age': 30}, {'name': 'James', 'age': 40}] | Sorting by 'age'               |\n| 31         | [{'name': 'Liam', 'age': 25}, {'name': 'Sophia', 'age': 30}] | [{'name': 'Liam', 'age': 25}, {'name': 'Sophia', 'age': 30}] | Sorting by 'age'               |\n| 32         | [{'name': 'Aiden', 'age': 40}, {'name': 'Zach', 'age': 19}] | [{'name': 'Zach', 'age': 19}, {'name': 'Aiden', 'age': 40}] | Sorting by 'age'               |\n| 33         | [{'name': 'Emily', 'age': 30}, {'name': 'John', 'age': 35}] | [{'name': 'Emily', 'age': 30}, {'name': 'John', 'age': 35}] | Sorting by 'age'               |\n| 34         | [{'name': 'Jill', 'age': 20}, {'name': 'George', 'age': 45}] | [{'name': 'Jill', 'age': 20}, {'name': 'George', 'age': 45}] | Sorting by 'age'               |\n| 35         | [{'name': 'Alice', 'age': 29}, {'name': 'Eve', 'age': 25}] | [{'name': 'Eve', 'age': 25}, {'name': 'Alice', 'age': 29}] | Sorting by 'age'               |\n| 36         | [{'name': 'Oscar', 'age': 30}, {'name': 'Sophia', 'age': 32}] | [{'name': 'Oscar', 'age': 30}, {'name': 'Sophia', 'age': 32}] | Sorting by 'age'               |\n| 37         | [{'name': 'Helen', 'age': 25}, {'name': 'Jack', 'age': 30}] | [{'name': 'Helen', 'age': 25}, {'name': 'Jack', 'age': 30}] | Sorting by 'age'               |\n| 38         | [{'name': 'Sophia', 'age': 28}, {'name': 'Liam', 'age': 30}] | [{'name': 'Sophia', 'age': 28}, {'name': 'Liam', 'age': 30}] | Sorting by 'age'               |\n| 39         | [{'name': 'Amelia', 'age': 33}, {'name': 'David', 'age': 40}] | [{'name': 'Amelia', 'age': 33}, {'name': 'David', 'age': 40}] | Sorting by 'age'               |\n| 40         | [{'name': 'Zara', 'age': 28}, {'name': 'Jill', 'age': 35}] | [{'name': 'Zara', 'age': 28}, {'name': 'Jill', 'age': 35}] | Sorting by 'age'               |\n",
      "example": {
        "input": "[{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 28}]",
        "output": "[{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 28}, {'name': 'John', 'age': 30}]",
        "explanation": "The list of dictionaries is sorted by the 'age' key in ascending order."
      },
      "answer": "class Solution:\n    def sortDictsByKey(self, dicts, key):\n        return sorted(dicts, key=lambda x: x[key])"
    },      
    {
      "id": 20,
      "title": "Sort an Array of Binary Numbers",
      "description": "Given an array of binary numbers (strings), sort them in ascending order.\n\n| Test Cases | binaries                         | Expected Output            | Notes                         |\n|------------|----------------------------------|----------------------------|-------------------------------|\n| 1          | ['110', '101', '111', '100']     | ['100', '101', '110', '111'] | Sorting binary numbers         |\n| 2          | ['0', '1', '0', '1']             | ['0', '0', '1', '1']        | Sorting binary digits          |\n| 3          | ['10101', '11111', '10001']      | ['10001', '10101', '11111'] | Binary numbers as strings       |\n| 4          | ['1100', '1010', '1111', '1001'] | ['1001', '1010', '1100', '1111'] | Sorting binary numbers        |\n| 5          | ['10000', '11111', '11010']      | ['10000', '11010', '11111'] | Sorting binary strings         |\n| 6          | ['0', '0', '0', '1']             | ['0', '0', '0', '1']        | Identical elements             |\n| 7          | ['11010', '10101', '11100']      | ['10101', '11010', '11100'] | Binary strings sorting         |\n| 8          | ['1100', '1010', '1101']         | ['1010', '1100', '1101']    | Sorting binary strings         |\n| 9          | ['1', '10', '100', '1000']       | ['1', '10', '100', '1000']  | Binary number strings          |\n| 10         | ['110', '101', '100', '111']     | ['100', '101', '110', '111'] | Binary numbers in string form   |\n| 11         | ['111', '101', '100', '110']     | ['100', '101', '110', '111'] | Binary number strings          |\n| 12         | ['101', '1001', '11', '1000']    | ['11', '101', '1000', '1001'] | Sorting binary numbers         |\n| 13         | ['110', '10', '1000', '101']     | ['10', '101', '110', '1000'] | Binary number strings          |\n| 14         | ['101', '100', '111', '10000']   | ['100', '101', '111', '10000'] | Sorting binary numbers         |\n| 15         | ['1110', '1010', '1101', '1001'] | ['1001', '1010', '1101', '1110'] | Sorting binary numbers         |\n| 16         | ['11111', '1110', '1101', '110'] | ['110', '1101', '1110', '11111'] | Binary string sorting         |\n| 17         | ['1100', '1011', '1010', '111']  | ['1010', '1011', '1100', '111'] | Sorting binary strings         |\n| 18         | ['111', '110', '101', '1000']    | ['1000', '101', '110', '111'] | Sorting binary numbers         |\n| 19         | ['1110', '101', '1111', '100']   | ['100', '101', '1110', '1111'] | Sorting binary numbers         |\n| 20         | ['0', '1', '10', '100', '1000']  | ['0', '1', '10', '100', '1000'] | Binary numbers in string form   |\n| 21         | ['100', '110', '101', '1111']    | ['100', '101', '110', '1111'] | Sorting binary numbers         |\n| 22         | ['101', '11', '1100', '1001']    | ['11', '101', '1001', '1100'] | Sorting binary numbers         |\n| 23         | ['0', '1000', '1010', '1101']    | ['0', '1000', '1010', '1101'] | Sorting binary numbers         |\n| 24         | ['101', '1010', '1000', '11100'] | ['101', '1000', '1010', '11100'] | Sorting binary numbers         |\n| 25         | ['1000', '1010', '111', '1101']  | ['111', '1000', '1010', '1101'] | Sorting binary numbers         |\n| 26         | ['1000', '1100', '111', '101']   | ['101', '111', '1000', '1100'] | Sorting binary numbers         |\n| 27         | ['1111', '1101', '1010', '1001'] | ['1001', '1010', '1101', '1111'] | Sorting binary numbers         |\n| 28         | ['110', '101', '111', '10000']   | ['110', '101', '111', '10000'] | Sorting binary numbers         |\n| 29         | ['110', '111', '101', '1000']    | ['1000', '101', '110', '111'] | Sorting binary numbers         |\n| 30         | ['111', '1010', '1100', '1001']  | ['1001', '1010', '1100', '111'] | Sorting binary numbers         |\n| 31         | ['100', '1111', '101', '11000']  | ['100', '101', '1111', '11000'] | Sorting binary numbers         |\n| 32         | ['1111', '1010', '1011', '1101'] | ['1010', '1011', '1101', '1111'] | Sorting binary numbers         |\n| 33         | ['1001', '101', '1101', '110']   | ['101', '110', '1001', '1101'] | Sorting binary numbers         |\n| 34         | ['111', '1000', '1101', '10101'] | ['1000', '111', '1101', '10101'] | Sorting binary numbers         |\n| 35         | ['101', '1001', '1110', '10101'] | ['101', '1001', '1110', '10101'] | Sorting binary numbers         |\n| 36         | ['100', '111', '1101', '110']    | ['100', '110', '111', '1101'] | Sorting binary numbers         |\n| 37         | ['1001', '1101', '1111', '100']  | ['100', '1001', '1101', '1111'] | Sorting binary numbers         |\n| 38         | ['1101', '1001', '10101', '111'] | ['1001', '111', '1101', '10101'] | Sorting binary numbers         |\n| 39         | ['1011', '100', '1100', '10101'] | ['100', '1011', '1100', '10101'] | Sorting binary numbers         |\n| 40         | ['101', '1000', '1110', '1111']  | ['1000', '101', '1110', '1111'] | Sorting binary numbers         |\n",
      "example": {
        "input": "['110', '101', '111', '100']",
        "output": "['100', '101', '110', '111']",
        "explanation": "The binary numbers are sorted in ascending order."
      },
      "answer": "class Solution:\n    def sortBinaryArray(self, binaries):\n        return sorted(binaries, key=lambda x: int(x, 2))"
    },      
    {
      "id": 21,
      "title": "Quick Sort - Sort an Array of Integers",
      "description": "Given an array of integers, sort the array using Quick Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [100, 50, 150, 200]   | [50, 100, 150, 200] | Sorted ascending             |\n| 12         | [1, 1, 1, 1, 1]       | [1, 1, 1, 1, 1]     | Identical elements           |\n| 13         | [9, 8, 7, 6]          | [6, 7, 8, 9]        | Reverse order                |\n| 14         | [12, 11, 13, 5, 6]    | [5, 6, 11, 12, 13]  | Simple shuffle               |\n| 15         | [100000, 50000, 75000]| [50000, 75000, 100000] | Large values                  |\n| 16         | [6, 5, 4, 3, 2, 1]    | [1, 2, 3, 4, 5, 6]  | Reversed                     |\n| 17         | [50, 25, 75, 100]     | [25, 50, 75, 100]   | Already sorted               |\n| 18         | [7, 8, 9, 3, 4, 2]    | [2, 3, 4, 7, 8, 9]  | Simple case                  |\n| 19         | [11, 22, 33, 44]      | [11, 22, 33, 44]    | Sorted ascending             |\n| 20         | [45, 33, 22, 67, 55]  | [22, 33, 45, 55, 67] | Random values                |\n| 21         | [10, 20, 30, 40, 50]  | [10, 20, 30, 40, 50] | Sorted ascending             |\n| 22         | [9, 7, 5, 3, 1]       | [1, 3, 5, 7, 9]     | Reverse order                |\n| 23         | [19, 1, 30, 7, 15]    | [1, 7, 15, 19, 30]  | Random order                 |\n| 24         | [9, 8, 5, 10, 3]      | [3, 5, 8, 9, 10]    | Simple shuffle               |\n| 25         | [0, 1, 2, 3, 4, 5]    | [0, 1, 2, 3, 4, 5]  | Sorted ascending             |\n| 26         | [90, 80, 70, 60]      | [60, 70, 80, 90]    | Reverse order                |\n| 27         | [20, 10, 30, 40]      | [10, 20, 30, 40]    | Sorted ascending             |\n| 28         | [5, 3, 8, 1, 7]       | [1, 3, 5, 7, 8]     | Random shuffle               |\n| 29         | [12, 15, 18, 10, 20]  | [10, 12, 15, 18, 20]| Random order                 |\n| 30         | [1, 2, 3, 4]          | [1, 2, 3, 4]        | Already sorted               |\n| 31         | [5, 4, 3, 2]          | [2, 3, 4, 5]        | Reverse order                |\n| 32         | [3, 1, 4, 5]          | [1, 3, 4, 5]        | Simple order                 |\n| 33         | [10, 20, 30, 40, 50]  | [10, 20, 30, 40, 50] | Already sorted               |\n| 34         | [6, 7, 8, 9]          | [6, 7, 8, 9]        | Already sorted               |\n| 35         | [20, 30, 10, 40]      | [10, 20, 30, 40]    | Simple shuffle               |\n| 36         | [7, 1, 2, 3, 6]       | [1, 2, 3, 6, 7]     | Shuffle                      |\n| 37         | [100, 200, 300, 400]  | [100, 200, 300, 400]| Already sorted               |\n| 38         | [1, 3, 2, 4, 5]       | [1, 2, 3, 4, 5]     | Small range values            |\n| 39         | [50, 20, 30, 10]      | [10, 20, 30, 50]    | Simple shuffle               |\n| 40         | [9, 2, 5, 7, 8]       | [2, 5, 7, 8, 9]     | Random order                 |",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Quick Sort."
      },
      "answer": "class Solution:\n    def quickSort(self, nums):\n        if len(nums) <= 1:\n            return nums\n        pivot = nums[len(nums) // 2]\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n        return self.quickSort(left) + middle + self.quickSort(right)"
    },    
    {
      "id": 22,
      "title": "Merge Sort - Sort an Array of Integers",
      "description": "Sort the array using Merge Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [10, 20, 30, 40, 50]  | [10, 20, 30, 40, 50]| Already sorted               |\n| 12         | [5, 1, 3, 9, 8, 7]    | [1, 3, 5, 7, 8, 9]  | Unsorted with random values  |\n| 13         | [3, 4, 2, 8, 6]       | [2, 3, 4, 6, 8]     | Small random set             |\n| 14         | [10, 20, 30, 40]      | [10, 20, 30, 40]    | Already sorted               |\n| 15         | [8, 2, 4, 10, 3, 7]   | [2, 3, 4, 7, 8, 10] | Mix of values                |\n| 16         | [1, 1, 1, 1, 1]       | [1, 1, 1, 1, 1]     | All same values              |\n| 17         | [9, 7, 5, 3, 1]       | [1, 3, 5, 7, 9]     | Reverse ordered              |\n| 18         | [100, 200, 300, 400]  | [100, 200, 300, 400]| Already sorted               |\n| 19         | [50, 40, 30, 20, 10]  | [10, 20, 30, 40, 50]| Reverse sorted               |\n| 20         | [5, 10, 20, 30, 50]   | [5, 10, 20, 30, 50] | Sorted with no changes       |\n| 21         | [1, 3, 5, 2, 4, 6]    | [1, 2, 3, 4, 5, 6]  | Alternating pattern          |\n| 22         | [1000, 1001, 1002]    | [1000, 1001, 1002]  | Already sorted               |\n| 23         | [8, 5, 3, 7, 9]       | [3, 5, 7, 8, 9]     | Mixed with few elements      |\n| 24         | [7, 8, 9, 10, 11]     | [7, 8, 9, 10, 11]   | Simple sorted                |\n| 25         | [200, 100, 400, 300]  | [100, 200, 300, 400]| Random number set            |\n| 26         | [15, 13, 11, 12]      | [11, 12, 13, 15]    | Reverse sorted               |\n| 27         | [100, 150, 200, 50]   | [50, 100, 150, 200] | Random set                   |\n| 28         | [8, 6, 4, 2, 3, 5, 7] | [2, 3, 4, 5, 6, 7, 8]| Mixed random array           |\n| 29         | [1, 3, 2]             | [1, 2, 3]           | Small unsorted               |\n| 30         | [10, 10, 10, 10]      | [10, 10, 10, 10]    | All elements same            |\n| 31         | [4, 2, 1, 6, 5, 7, 3] | [1, 2, 3, 4, 5, 6, 7]| Unsorted with duplicates     |\n| 32         | [25, 15, 5, 10]       | [5, 10, 15, 25]     | Random set                   |\n| 33         | [7, 10, 8, 5, 1]      | [1, 5, 7, 8, 10]    | Simple random order          |\n| 34         | [30, 20, 10]          | [10, 20, 30]        | Already sorted descending    |\n| 35         | [100, 300, 200]       | [100, 200, 300]     | Random numbers               |\n| 36         | [4, 6, 2, 5]          | [2, 4, 5, 6]        | Simple case                  |\n| 37         | [50, 40, 30, 10]      | [10, 30, 40, 50]    | Reverse sorted               |\n| 38         | [100, 150, 50, 200]   | [50, 100, 150, 200] | Unsorted set                 |\n| 39         | [3, 4, 2, 1]          | [1, 2, 3, 4]        | Simple case                  |\n| 40         | [5, 3, 4, 7, 6, 2, 1] | [1, 2, 3, 4, 5, 6, 7]| Unsorted                     |\n",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Merge Sort."
      },
      "answer": "class Solution:\n    def mergeSort(self, nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = self.mergeSort(nums[:mid])\n        right = self.mergeSort(nums[mid:])\n        return self.merge(left, right)\n    def merge(self, left, right):\n        result = []\n        while left and right:\n            if left[0] < right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n        result += left + right\n        return result"
    },    
    {
      "id": 41,
      "title": "Bubble Sort - Sort an Array of Integers",
      "description": "Sort the array using Bubble Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [1, 3, 2, 4, 5]       | [1, 2, 3, 4, 5]     | Already almost sorted        |\n| 12         | [12, 10, 11, 15, 20]  | [10, 11, 12, 15, 20]| Sorted in blocks             |\n| 13         | [9, 7, 5, 3, 1]       | [1, 3, 5, 7, 9]     | Odd sequence                  |\n| 14         | [2, 4, 6, 8, 10]      | [2, 4, 6, 8, 10]    | Already sorted               |\n| 15         | [5, 3, 2, 7, 8, 9]    | [2, 3, 5, 7, 8, 9]  | Random sequence              |\n| 16         | [20, 18, 16, 14, 12]  | [12, 14, 16, 18, 20]| Even numbers in descending   |\n| 17         | [1, 2, 3, 4, 5, 6]    | [1, 2, 3, 4, 5, 6]  | Already sorted               |\n| 18         | [10, 20, 30, 25, 15]  | [10, 15, 20, 25, 30]| Simple sequence              |\n| 19         | [3, 6, 1, 9, 4, 7]    | [1, 3, 4, 6, 7, 9]  | Random order                 |\n| 20         | [10, 10, 10, 10]      | [10, 10, 10, 10]    | All identical elements       |\n| 21         | [8, 6, 7, 5, 3, 9, 1] | [1, 3, 5, 6, 7, 8, 9]| Random order                 |\n| 22         | [20, 40, 60, 80, 100] | [20, 40, 60, 80, 100]| Already sorted               |\n| 23         | [1, 2, 3, 4, 5, 6, 7] | [1, 2, 3, 4, 5, 6, 7]| Already sorted               |\n| 24         | [5, 4, 3, 2]          | [2, 3, 4, 5]        | Reverse sorted               |\n| 25         | [0, 2, 4, 8, 6]       | [0, 2, 4, 6, 8]     | Mix of even numbers          |\n| 26         | [2, 1, 3, 5]          | [1, 2, 3, 5]        | Simple sequence              |\n| 27         | [100, 300, 200]       | [100, 200, 300]     | Small set of numbers         |\n| 28         | [45, 90, 75, 30]      | [30, 45, 75, 90]    | Random order                 |\n| 29         | [9, 5, 6, 1]          | [1, 5, 6, 9]        | Small numbers                |\n| 30         | [10, 20, 30, 40]      | [10, 20, 30, 40]    | Already sorted               |\n| 31         | [3, 6, 8, 2, 1]       | [1, 2, 3, 6, 8]     | Random small numbers         |\n| 32         | [18, 15, 13, 10]      | [10, 13, 15, 18]    | Descending order             |\n| 33         | [10, 25, 40, 35]      | [10, 25, 35, 40]    | Random numbers               |\n| 34         | [5, 4, 3, 6, 1, 2]    | [1, 2, 3, 4, 5, 6]  | Random sequence              |\n| 35         | [100, 50, 25, 75, 10] | [10, 25, 50, 75, 100]| Random order                 |\n| 36         | [30, 20, 10]          | [10, 20, 30]        | Descending order             |\n| 37         | [5, 10, 5, 1, 7, 2]   | [1, 2, 5, 5, 7, 10] | Small mixed numbers          |\n| 38         | [1000, 2000, 500, 100] | [100, 500, 1000, 2000] | Large numbers             |\n| 39         | [100, 99, 101, 98]    | [98, 99, 100, 101]  | Close numbers                |\n| 40         | [0, -1, 3, 2, -5]     | [-5, -1, 0, 2, 3]   | Mix of positive and negative |\n",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Bubble Sort."
      },
      "answer": "class Solution:\n    def bubbleSort(self, nums):\n        n = len(nums)\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums"
    },         
    {
      "id": 24,
      "title": "Heap Sort - Sort an Array of Integers",
      "description": "Sort the array using Heap Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [1, 3, 2, 4, 5]       | [1, 2, 3, 4, 5]     | Already almost sorted        |\n| 12         | [12, 10, 11, 15, 20]  | [10, 11, 12, 15, 20]| Sorted in blocks             |\n| 13         | [9, 7, 5, 3, 1]       | [1, 3, 5, 7, 9]     | Odd sequence                  |\n| 14         | [2, 4, 6, 8, 10]      | [2, 4, 6, 8, 10]    | Already sorted               |\n| 15         | [5, 3, 2, 7, 8, 9]    | [2, 3, 5, 7, 8, 9]  | Random sequence              |\n| 16         | [20, 18, 16, 14, 12]  | [12, 14, 16, 18, 20]| Even numbers in descending   |\n| 17         | [1, 2, 3, 4, 5, 6]    | [1, 2, 3, 4, 5, 6]  | Already sorted               |\n| 18         | [10, 20, 30, 25, 15]  | [10, 15, 20, 25, 30]| Simple sequence              |\n| 19         | [3, 6, 1, 9, 4, 7]    | [1, 3, 4, 6, 7, 9]  | Random order                 |\n| 20         | [10, 10, 10, 10]      | [10, 10, 10, 10]    | All identical elements       |\n| 21         | [8, 6, 7, 5, 3, 9, 1] | [1, 3, 5, 6, 7, 8, 9]| Random order                 |\n| 22         | [20, 40, 60, 80, 100] | [20, 40, 60, 80, 100]| Already sorted               |\n| 23         | [1, 2, 3, 4, 5, 6, 7] | [1, 2, 3, 4, 5, 6, 7]| Already sorted               |\n| 24         | [5, 4, 3, 2]          | [2, 3, 4, 5]        | Reverse sorted               |\n| 25         | [0, 2, 4, 8, 6]       | [0, 2, 4, 6, 8]     | Mix of even numbers          |\n| 26         | [2, 1, 3, 5]          | [1, 2, 3, 5]        | Simple sequence              |\n| 27         | [100, 300, 200]       | [100, 200, 300]     | Small set of numbers         |\n| 28         | [45, 90, 75, 30]      | [30, 45, 75, 90]    | Random order                 |\n| 29         | [9, 5, 6, 1]          | [1, 5, 6, 9]        | Small numbers                |\n| 30         | [10, 20, 30, 40]      | [10, 20, 30, 40]    | Already sorted               |\n| 31         | [3, 6, 8, 2, 1]       | [1, 2, 3, 6, 8]     | Random small numbers         |\n| 32         | [18, 15, 13, 10]      | [10, 13, 15, 18]    | Descending order             |\n| 33         | [10, 25, 40, 35]      | [10, 25, 35, 40]    | Random numbers               |\n| 34         | [5, 4, 3, 6, 1, 2]    | [1, 2, 3, 4, 5, 6]  | Random sequence              |\n| 35         | [100, 50, 25, 75, 10] | [10, 25, 50, 75, 100]| Random order                 |\n| 36         | [30, 20, 10]          | [10, 20, 30]        | Descending order             |\n| 37         | [5, 10, 5, 1, 7, 2]   | [1, 2, 5, 5, 7, 10] | Small mixed numbers          |\n| 38         | [1000, 2000, 500, 100] | [100, 500, 1000, 2000] | Large numbers             |\n| 39         | [100, 99, 101, 98]    | [98, 99, 100, 101]  | Close numbers                |\n| 40         | [0, -1, 3, 2, -5]     | [-5, -1, 0, 2, 3]   | Mix of positive and negative |\n",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Heap Sort."
      },
      "answer": "import heapq\nclass Solution:\n    def heapSort(self, nums):\n        heapq.heapify(nums)\n        return [heapq.heappop(nums) for _ in range(len(nums))]"
    },    
    {
      "id": 25,
      "title": "Selection Sort - Sort an Array of Integers",
      "description": "Sort the array using Selection Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [1, 2, 3, 4, 5]       | [1, 2, 3, 4, 5]     | Already sorted               |\n| 12         | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse sorted               |\n| 13         | [9, 7, 5, 3, 1]       | [1, 3, 5, 7, 9]     | Odd sequence                  |\n| 14         | [2, 4, 6, 8, 10]      | [2, 4, 6, 8, 10]    | Already sorted               |\n| 15         | [5, 3, 2, 7, 8, 9]    | [2, 3, 5, 7, 8, 9]  | Random sequence              |\n| 16         | [20, 18, 16, 14, 12]  | [12, 14, 16, 18, 20]| Even numbers in descending   |\n| 17         | [1, 2, 3, 4, 5, 6]    | [1, 2, 3, 4, 5, 6]  | Already sorted               |\n| 18         | [10, 20, 30, 25, 15]  | [10, 15, 20, 25, 30]| Simple sequence              |\n| 19         | [3, 6, 1, 9, 4, 7]    | [1, 3, 4, 6, 7, 9]  | Random order                 |\n| 20         | [10, 10, 10, 10]      | [10, 10, 10, 10]    | All identical elements       |\n| 21         | [8, 6, 7, 5, 3, 9, 1] | [1, 3, 5, 6, 7, 8, 9]| Random order                 |\n| 22         | [20, 40, 60, 80, 100] | [20, 40, 60, 80, 100]| Already sorted               |\n| 23         | [1, 2, 3, 4, 5, 6, 7] | [1, 2, 3, 4, 5, 6, 7]| Already sorted               |\n| 24         | [5, 4, 3, 2]          | [2, 3, 4, 5]        | Reverse sorted               |\n| 25         | [0, 2, 4, 8, 6]       | [0, 2, 4, 6, 8]     | Mix of even numbers          |\n| 26         | [2, 1, 3, 5]          | [1, 2, 3, 5]        | Simple sequence              |\n| 27         | [100, 300, 200]       | [100, 200, 300]     | Small set of numbers         |\n| 28         | [45, 90, 75, 30]      | [30, 45, 75, 90]    | Random order                 |\n| 29         | [9, 5, 6, 1]          | [1, 5, 6, 9]        | Small numbers                |\n| 30         | [10, 20, 30, 40]      | [10, 20, 30, 40]    | Already sorted               |\n| 31         | [3, 6, 8, 2, 1]       | [1, 2, 3, 6, 8]     | Random small numbers         |\n| 32         | [18, 15, 13, 10]      | [10, 13, 15, 18]    | Descending order             |\n| 33         | [10, 25, 40, 35]      | [10, 25, 35, 40]    | Random numbers               |\n| 34         | [5, 4, 3, 6, 1, 2]    | [1, 2, 3, 4, 5, 6]  | Random sequence              |\n| 35         | [100, 50, 25, 75, 10] | [10, 25, 50, 75, 100]| Random order                 |\n| 36         | [30, 20, 10]          | [10, 20, 30]        | Descending order             |\n| 37         | [5, 10, 5, 1, 7, 2]   | [1, 2, 5, 5, 7, 10] | Small mixed numbers          |\n| 38         | [1000, 2000, 500, 100] | [100, 500, 1000, 2000] | Large numbers             |\n| 39         | [100, 99, 101, 98]    | [98, 99, 100, 101]  | Close numbers                |\n| 40         | [0, -1, 3, 2, -5]     | [-5, -1, 0, 2, 3]   | Mix of positive and negative |\n",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Selection Sort."
      },
      "answer": "class Solution:\n    def selectionSort(self, nums):\n        for i in range(len(nums)):\n            min_index = i\n            for j in range(i+1, len(nums)):\n                if nums[j] < nums[min_index]:\n                    min_index = j\n            nums[i], nums[min_index] = nums[min_index], nums[i]\n        return nums"
    },    
    {
      "id": 26,
      "title": "Insertion Sort - Sort an Array of Integers",
      "description": "Sort the array using Insertion Sort algorithm.\n\n| Test Cases | nums                  | Expected Output     | Notes                       |\n|------------|-----------------------|---------------------|-----------------------------|\n| 1          | [10, 7, 8, 9, 1, 5]    | [1, 5, 7, 8, 9, 10] | Simple case                  |\n| 2          | [3, 1, 4, 1, 5, 9]    | [1, 1, 3, 4, 5, 9]  | Array with duplicates        |\n| 3          | [8, 2, 5, 3]          | [2, 3, 5, 8]        | Small array                  |\n| 4          | [5, 4, 3, 2, 1]       | [1, 2, 3, 4, 5]     | Reverse order                |\n| 5          | [0, 2, 3, 5, 1]       | [0, 1, 2, 3, 5]     | Mix of elements              |\n| 6          | [100, 34, 23, 50]     | [23, 34, 50, 100]   | Random numbers               |\n| 7          | [1000, 999, 998]      | [998, 999, 1000]    | Large numbers                |\n| 8          | [7, 6, 5, 3, 4]       | [3, 4, 5, 6, 7]     | Simple shuffle               |\n| 9          | [100, 200, 150]       | [100, 150, 200]     | Already sorted               |\n| 10         | [30, 20, 10, 0]       | [0, 10, 20, 30]     | Descending order             |\n| 11         | [1, 2, 3, 4, 5]       | [1, 2, 3, 4, 5]     | Already sorted               |\n| 12         | [5, 5, 5, 5, 5]       | [5, 5, 5, 5, 5]     | All elements equal           |\n| 13         | [2, 4, 6, 8, 10]      | [2, 4, 6, 8, 10]    | Already sorted               |\n| 14         | [10, 9, 8, 7, 6]      | [6, 7, 8, 9, 10]    | Reverse order                |\n| 15         | [1, 1, 1, 1, 1]       | [1, 1, 1, 1, 1]     | All elements equal           |\n| 16         | [3, 2, 5, 1, 4]       | [1, 2, 3, 4, 5]     | Random order                 |\n| 17         | [12, 11, 13, 5, 6]    | [5, 6, 11, 12, 13]  | Random order                 |\n| 18         | [8, 7, 9, 10, 6]      | [6, 7, 8, 9, 10]    | Simple case                  |\n| 19         | [0, 0, 0, 0, 0]       | [0, 0, 0, 0, 0]     | All zeros                    |\n| 20         | [2, 5, 3, 1, 4]       | [1, 2, 3, 4, 5]     | Random order                 |\n| 21         | [4, 2, 3, 1, 5]       | [1, 2, 3, 4, 5]     | Random order                 |\n| 22         | [1, 2, 3, 4, 5, 6]    | [1, 2, 3, 4, 5, 6]  | Already sorted               |\n| 23         | [7, 6, 5, 4, 3]       | [3, 4, 5, 6, 7]     | Descending order             |\n| 24         | [9, 8, 7, 6, 5, 4]    | [4, 5, 6, 7, 8, 9]  | Reverse sorted               |\n| 25         | [1, 2, 3, 5, 4]       | [1, 2, 3, 4, 5]     | Last element unsorted        |\n| 26         | [5, 6, 7, 9, 8]       | [5, 6, 7, 8, 9]     | Last two elements unsorted   |\n| 27         | [10, 11, 8, 9, 7]     | [7, 8, 9, 10, 11]   | Unsorted middle elements     |\n| 28         | [5, 4, 6, 7, 3]       | [3, 4, 5, 6, 7]     | Unsorted middle elements     |\n| 29         | [10, 9, 8]            | [8, 9, 10]          | Small array, reverse order   |\n| 30         | [0, -1, -2, 3, 2]     | [-2, -1, 0, 2, 3]   | Mixed positive/negative      |\n| 31         | [1, 4, 2, 7, 3]       | [1, 2, 3, 4, 7]     | Random order                 |\n| 32         | [-3, -2, -1, 0, 1]    | [-3, -2, -1, 0, 1]  | Sorted negative numbers      |\n| 33         | [5, 3, 9, 2, 8]       | [2, 3, 5, 8, 9]     | Random order                 |\n| 34         | [100, 200, 150, 50]   | [50, 100, 150, 200] | Random numbers               |\n| 35         | [10, 9, 8, 7, 6, 5]   | [5, 6, 7, 8, 9, 10] | Reverse order                |\n| 36         | [3, 5, 4, 2, 1]       | [1, 2, 3, 4, 5]     | Random order                 |\n| 37         | [3, 3, 3, 3, 3]       | [3, 3, 3, 3, 3]     | All elements equal           |\n| 38         | [10, 20, 30, 40, 50]  | [10, 20, 30, 40, 50]| Already sorted               |\n| 39         | [3, 2, 1]             | [1, 2, 3]           | Simple descending order      |\n| 40         | [10, 20, 5, 2, 30]    | [2, 5, 10, 20, 30]  | Mix of random numbers        |\n",
      "example": {
          "input": "[10, 7, 8, 9, 1, 5]",
          "output": "[1, 5, 7, 8, 9, 10]",
          "explanation": "The array is sorted using Insertion Sort."
      },
      "answer": "class Solution:\n    def insertionSort(self, nums):\n        for i in range(1, len(nums)):\n            key = nums[i]\n            j = i - 1\n            while j >= 0 and key < nums[j]:\n                nums[j + 1] = nums[j]\n                j -= 1\n            nums[j + 1] = key\n        return nums"
    }      
  ]
}
