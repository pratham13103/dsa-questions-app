{
    "questions": [
        {
            "id": 1,
            "title": "Find GCD of Two Numbers using Euclidean Algorithm",
            "description": "Given two integers a and b, return their greatest common divisor (GCD) using the Euclidean algorithm.\n\n| Test Case | a     | b     | Expected Output | Notes                             |\n|-----------|-------|-------|-----------------|-----------------------------------|\n| 1         | 48    | 18    | 6               | Common test case                  |\n| 2         | 100   | 10    | 10              | b divides a                       |\n| 3         | 10    | 100   | 10              | a divides b                       |\n| 4         | 13    | 17    | 1               | Co-prime numbers                  |\n| 5         | 270   | 192   | 6               | Larger numbers                    |\n| 6         | 81    | 27    | 27              | Perfect multiple                  |\n| 7         | 101   | 103   | 1               | Both primes                       |\n| 8         | 0     | 5     | 5               | Zero input                        |\n| 9         | 5     | 0     | 5               | Zero input                        |\n| 10        | 0     | 0     | 0               | Both zero                         |\n| 11        | 7     | 49    | 7               | Factor relationship               |\n| 12        | 49    | 7     | 7               | Inverse of previous               |\n| 13        | 36    | 60    | 12              | Even numbers                      |\n| 14        | 1071  | 462   | 21              | From Euclid’s example             |\n| 15        | 9     | 28    | 1               | Co-prime check                    |\n| 16        | 121   | 11    | 11              | Square and its root               |\n| 17        | 99    | 121   | 11              | Mixed digits                      |\n| 18        | 56    | 98    | 14              | Divisible by 14                   |\n| 19        | 150   | 100   | 50              | Common factor 50                  |\n| 20        | 144   | 60    | 12              | Medium values                     |\n| 21        | 391   | 299   | 23              | Non-trivial GCD                   |\n| 22        | 123   | 456   | 3               | Random numbers                    |\n| 23        | 540   | 420   | 60              | Divisible by 60                   |\n| 24        | 1010  | 10    | 10              | Ends in 0                         |\n| 25        | 37    | 600   | 1               | Co-prime with large number        |\n| 26        | 600   | 37    | 1               | Reversed input                    |\n| 27        | 25    | 100   | 25              | Simple divisible test             |\n| 28        | 128   | 64    | 64              | Power of 2                        |\n| 29        | 1000  | 250   | 250             | Multiple of 250                   |\n| 30        | 777   | 888   | 111             | 111 as GCD                        |\n| 31        | 120   | 45    | 15              | Moderate GCD                      |\n| 32        | 85    | 17    | 17              | Prime factor                      |\n| 33        | 14    | 15    | 1               | Co-prime adjacent numbers         |\n| 34        | 20    | 30    | 10              | Basic test                        |\n| 35        | 119   | 544   | 17              | GCD is 17                         |\n| 36        | 1     | 999   | 1               | GCD with 1                        |\n| 37        | 999   | 1     | 1               | GCD with 1 reversed               |\n| 38        | 29    | 87    | 29              | 29 is a factor                    |\n| 39        | 444   | 666   | 222             | GCD is 222                        |\n| 40        | 121   | 242   | 121             | Factor of double                  |",
            "example": {
              "input": "a = 48, b = 18",
              "output": "6",
              "explanation": "GCD(48, 18): 48 % 18 = 12, 18 % 12 = 6, 12 % 6 = 0 => GCD is 6"
            },
            "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
        },
        {
            "id": 2,
            "title": "Find LCM of Two Numbers Using GCD",
            "description": "Given two integers a and b, return the Least Common Multiple (LCM) using the Euclidean algorithm for GCD.\n\n| Test Case | a   | b   | Expected Output | Notes                                |\n|-----------|-----|-----|-----------------|--------------------------------------|\n| 1         | 2   | 3   | 6               | Basic test                           |\n| 2         | 4   | 6   | 12              | Common multiple                      |\n| 3         | 5   | 10  | 10              | One is a multiple of the other       |\n| 4         | 7   | 9   | 63              | Co-prime numbers                     |\n| 5         | 12  | 15  | 60              | Normal case                          |\n| 6         | 8   | 32  | 32              | One divides the other                |\n| 7         | 3   | 3   | 3               | Equal numbers                        |\n| 8         | 11  | 13  | 143             | Primes                               |\n| 9         | 0   | 7   | 0               | Zero input                           |\n| 10        | 18  | 24  | 72              | GCD = 6                              |\n| 11        | 21  | 6   | 42              | GCD = 3                              |\n| 12        | 100 | 25  | 100             | Large divisible                      |\n| 13        | 7   | 14  | 14              | Multiple case                        |\n| 14        | 1   | 999 | 999             | One is 1                             |\n| 15        | 17  | 34  | 34              | GCD = 17                             |\n| 16        | 13  | 17  | 221             | Coprime prime numbers                |\n| 17        | 99  | 121 | 1331            | GCD = 11                             |\n| 18        | 81  | 27  | 81              | One is multiple                      |\n| 19        | 6   | 9   | 18              | Common factors                       |\n| 20        | 30  | 45  | 90              | GCD = 15                             |\n| 21        | 14  | 49  | 98              | GCD = 7                              |\n| 22        | 22  | 33  | 66              | GCD = 11                             |\n| 23        | 60  | 48  | 240             | Complex multiples                    |\n| 24        | 36  | 90  | 180             | LCM of square and multiple           |\n| 25        | 1   | 1   | 1               | Smallest input                       |\n| 26        | 1000| 500 | 1000            | Large divisible                      |\n| 27        | 17  | 51  | 51              | Multiple case                        |\n| 28        | 19  | 23  | 437             | Large primes                         |\n| 29        | 8   | 9   | 72              | Coprime                              |\n| 30        | 27  | 36  | 108             | GCD = 9                              |\n| 31        | 32  | 40  | 160             | Power of 2s                          |\n| 32        | 13  | 39  | 39              | GCD = 13                             |\n| 33        | 15  | 20  | 60              | Classic LCM case                     |\n| 34        | 99  | 11  | 99              | One is multiple                      |\n| 35        | 81  | 9   | 81              | Powers of 3                          |\n| 36        | 72  | 120 | 360             | Large common factor                  |\n| 37        | 44  | 55  | 220             | GCD = 11                             |\n| 38        | 25  | 75  | 75              | Multiple case                        |\n| 39        | 30  | 70  | 210             | Coprime multiples                    |\n| 40        | 99  | 33  | 99              | GCD = 33                             |",
            "example": {
              "input": "a = 4, b = 6",
              "output": "12",
              "explanation": "GCD(4, 6) = 2 → LCM = (4 × 6) / 2 = 12"
            },
            "answer": "import math\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)"
        },
        {
            "id": 3,
            "title": "Check if a Number Divides All Elements in an Array",
            "description": "Given an integer array nums and an integer x, return true if x divides every element in the array.\n\n| Test Case | nums              | x   | Expected Output | Notes                         |\n|-----------|------------------|-----|-----------------|-------------------------------|\n| 1         | [2, 4, 6]        | 2   | true            | All divisible                 |\n| 2         | [3, 6, 9]        | 3   | true            | Common multiple               |\n| 3         | [2, 4, 5]        | 2   | false           | One not divisible             |\n| 4         | [10, 20, 30]     | 10  | true            | Multiple of 10               |\n| 5         | [7, 14, 28]      | 7   | true            | Prime divisor                 |\n| 6         | [1, 2, 3]        | 2   | false           | Only some divisible           |\n| 7         | [0, 0, 0]        | 1   | true            | Zero case                     |\n| 8         | [9, 18, 27]      | 3   | true            | Divisible by 3               |\n| 9         | [10, 15, 20]     | 5   | true            | Common multiple               |\n| 10        | [10, 15, 21]     | 5   | false           | One not divisible             |\n| 11        | [2]              | 2   | true            | Single element                |\n| 12        | [5, 10, 15]      | 5   | true            | Common case                   |\n| 13        | [8, 16, 32]      | 8   | true            | Power of two                  |\n| 14        | [1, 2, 3]        | 1   | true            | x = 1 divides all             |\n| 15        | [2, 4, 8]        | 4   | false           | Not all divisible             |\n| 16        | [12, 24, 36]     | 6   | true            | Divisible by 6               |\n| 17        | [12, 24, 37]     | 6   | false           | One value fails               |\n| 18        | [0, 5, 10]       | 5   | true            | Zero included                 |\n| 19        | [15, 30, 45]     | 15  | true            | All multiples of x            |\n| 20        | [3, 6, 10]       | 3   | false           | One fails                     |\n| 21        | [100, 200, 300]  | 100 | true            | Large numbers                 |\n| 22        | [100, 201, 300]  | 100 | false           | Slight deviation              |\n| 23        | [6, 12, 18]      | 6   | true            | Clean division                |\n| 24        | [8, 12, 16]      | 4   | true            | GCD = 4                       |\n| 25        | [5, 10, 20]      | 2   | false           | 5 not divisible               |\n| 26        | [2, 4, 6]        | 0   | false           | Division by zero              |\n| 27        | [0, 0, 0]        | 0   | false           | Division by zero              |\n| 28        | [1, 1, 1]        | 1   | true            | All same, x = 1               |\n| 29        | [9, 18, 36]      | 9   | true            | Power of 3                    |\n| 30        | [10, 20, 35]     | 5   | true            | All multiples                 |\n| 31        | [11, 22, 33]     | 11  | true            | Prime divisor                 |\n| 32        | [2, 4, 6, 7]     | 2   | false           | One odd number                |\n| 33        | [1000, 2000]     | 1000| true            | Very large numbers            |\n| 34        | [1, 3, 5]        | 2   | false           | All odd, even x               |\n| 35        | [5, 10, 25]      | 5   | true            | Classic divisible             |\n| 36        | [6, 9, 12]       | 3   | true            | All divisible by 3           |\n| 37        | [1, 2, 3, 4, 5]  | 1   | true            | x = 1                         |\n| 38        | [10, 15, 20, 25] | 5   | true            | Clean division                |\n| 39        | [20, 40, 60, 75] | 10  | false           | One fails                     |\n| 40        | [100, 200, 300]  | 50  | true            | Common factor                 |",
            "example": {
              "input": "nums = [2, 4, 6], x = 2",
              "output": "true",
              "explanation": "All elements in the array are divisible by 2."
            },
            "answer": "def divides_all(nums, x):\n    if x == 0:\n        return False\n    return all(num % x == 0 for num in nums)"
        },
        {
            "id": 4,
            "title": "GCD of Array Elements",
            "description": "Given an array of integers, return the greatest common divisor (GCD) of all the elements in the array.\n\n| Test Case | Input         | Output | Notes                        |\n|-----------|---------------|--------|------------------------------|\n| 1         | [2]       | 2    | Basic test case\n| 2         | [2, 4]       | 2    | Basic test case\n| 3         | [2, 4, 6]       | 2    | Basic test case\n| 4         | [2, 4, 6, 8]       | 2    | Basic test case\n| 5         | [2]       | 2    | Basic test case\n| 6         | [2, 4]       | 2    | Basic test case\n| 7         | [2, 4, 6]       | 2    | Basic test case\n| 8         | [2, 4, 6, 8]       | 2    | Basic test case\n| 9         | [2]       | 2    | Basic test case\n| 10        | [2, 4]       | 2    | Basic test case\n| 11        | [2, 4, 6]       | 2    | Basic test case\n| 12        | [2, 4, 6, 8]       | 2    | Basic test case\n| 13        | [2]       | 2    | Basic test case\n| 14        | [2, 4]       | 2    | Basic test case\n| 15        | [2, 4, 6]       | 2    | Basic test case\n| 16        | [2, 4, 6, 8]       | 2    | Basic test case\n| 17        | [2]       | 2    | Basic test case\n| 18        | [2, 4]       | 2    | Basic test case\n| 19        | [2, 4, 6]       | 2    | Basic test case\n| 20        | [2, 4, 6, 8]       | 2    | Basic test case\n| 21        | [2]       | 2    | Basic test case\n| 22        | [2, 4]       | 2    | Basic test case\n| 23        | [2, 4, 6]       | 2    | Basic test case\n| 24        | [2, 4, 6, 8]       | 2    | Basic test case\n| 25        | [2]       | 2    | Basic test case\n| 26        | [2, 4]       | 2    | Basic test case\n| 27        | [2, 4, 6]       | 2    | Basic test case\n| 28        | [2, 4, 6, 8]       | 2    | Basic test case\n| 29        | [2]       | 2    | Basic test case\n| 30        | [2, 4]       | 2    | Basic test case\n| 31        | [2, 4, 6]       | 2    | Basic test case\n| 32        | [2, 4, 6, 8]       | 2    | Basic test case\n| 33        | [2]       | 2    | Basic test case\n| 34        | [2, 4]       | 2    | Basic test case\n| 35        | [2, 4, 6]       | 2    | Basic test case\n| 36        | [2, 4, 6, 8]       | 2    | Basic test case\n| 37        | [2]       | 2    | Basic test case\n| 38        | [2, 4]       | 2    | Basic test case\n| 39        | [2, 4, 6]       | 2    | Basic test case\n| 40        | [2, 4, 6, 8]       | 2    | Basic test case",
            "example": {
              "input": "[12, 24, 36]",
              "output": "12",
              "explanation": "GCD of 12, 24 and 36 is 12."
            },
            "answer": "\nimport math\nclass Solution:\n    def findGCD(self, nums):\n        gcd_result = nums[0]\n        for num in nums[1:]:\n            gcd_result = math.gcd(gcd_result, num)\n        return gcd_result\n    "
        },
        {
            "id": 5,
            "title": "Count Pairs with GCD Equal to K",
            "description": "Given an array of integers and an integer K, count the number of pairs (i, j) such that GCD(nums[i], nums[j]) = K.\n\n| Test Case | nums           | K | Output | Notes                        |\n|-----------|----------------|---|--------|------------------------------|\n| 1         | [1, 2, 3] | 1 | 0 | Example test case\n| 2         | [2, 4, 6] | 2 | 1 | Example test case\n| 3         | [3, 6, 9] | 3 | 0 | Example test case\n| 4         | [4, 8, 12] | 4 | 1 | Example test case\n| 5         | [5, 10, 15] | 5 | 0 | Example test case\n| 6         | [6, 12, 18] | 1 | 1 | Example test case\n| 7         | [7, 14, 21] | 2 | 0 | Example test case\n| 8         | [8, 16, 24] | 3 | 1 | Example test case\n| 9         | [9, 18, 27] | 4 | 0 | Example test case\n| 10        | [10, 20, 30] | 5 | 1 | Example test case\n| 11        | [11, 22, 33] | 1 | 0 | Example test case\n| 12        | [12, 24, 36] | 2 | 1 | Example test case\n| 13        | [13, 26, 39] | 3 | 0 | Example test case\n| 14        | [14, 28, 42] | 4 | 1 | Example test case\n| 15        | [15, 30, 45] | 5 | 0 | Example test case\n| 16        | [16, 32, 48] | 1 | 1 | Example test case\n| 17        | [17, 34, 51] | 2 | 0 | Example test case\n| 18        | [18, 36, 54] | 3 | 1 | Example test case\n| 19        | [19, 38, 57] | 4 | 0 | Example test case\n| 20        | [20, 40, 60] | 5 | 1 | Example test case\n| 21        | [21, 42, 63] | 1 | 0 | Example test case\n| 22        | [22, 44, 66] | 2 | 1 | Example test case\n| 23        | [23, 46, 69] | 3 | 0 | Example test case\n| 24        | [24, 48, 72] | 4 | 1 | Example test case\n| 25        | [25, 50, 75] | 5 | 0 | Example test case\n| 26        | [26, 52, 78] | 1 | 1 | Example test case\n| 27        | [27, 54, 81] | 2 | 0 | Example test case\n| 28        | [28, 56, 84] | 3 | 1 | Example test case\n| 29        | [29, 58, 87] | 4 | 0 | Example test case\n| 30        | [30, 60, 90] | 5 | 1 | Example test case\n| 31        | [31, 62, 93] | 1 | 0 | Example test case\n| 32        | [32, 64, 96] | 2 | 1 | Example test case\n| 33        | [33, 66, 99] | 3 | 0 | Example test case\n| 34        | [34, 68, 102] | 4 | 1 | Example test case\n| 35        | [35, 70, 105] | 5 | 0 | Example test case\n| 36        | [36, 72, 108] | 1 | 1 | Example test case\n| 37        | [37, 74, 111] | 2 | 0 | Example test case\n| 38        | [38, 76, 114] | 3 | 1 | Example test case\n| 39        | [39, 78, 117] | 4 | 0 | Example test case\n| 40        | [40, 80, 120] | 5 | 1 | Example test case",
            "example": {
              "input": "nums = [2, 4, 6, 8], K = 2",
              "output": "6",
              "explanation": "There are 6 pairs with GCD 2."
            },
            "answer": "\nfrom math import gcd\nfrom itertools import combinations\nclass Solution:\n    def countPairs(self, nums, K):\n        count = 0\n        for i, j in combinations(nums, 2):\n            if gcd(i, j) == K:\n                count += 1\n        return count\n    "
        },
        {
            "id": 6,
            "title": "Find a number X such that GCD(A, X) = B",
            "description": "Given two integers A and B, find a number X such that GCD(A, X) = B. If multiple, return any one such X.\n\n| Test Case | A  | B  | Output | Notes                       |\n|-----------|----|----|--------|-----------------------------|\n| 1         | 4 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 2         | 6 | 2 | 4 | Valid X such that GCD(A, X) = B\n| 3         | 8 | 3 | 9 | Valid X such that GCD(A, X) = B\n| 4         | 10 | 4 | 16 | Valid X such that GCD(A, X) = B\n| 5         | 12 | 5 | 25 | Valid X such that GCD(A, X) = B\n| 6         | 14 | 1 | 6 | Valid X such that GCD(A, X) = B\n| 7         | 16 | 2 | 14 | Valid X such that GCD(A, X) = B\n| 8         | 18 | 3 | 24 | Valid X such that GCD(A, X) = B\n| 9         | 20 | 4 | 36 | Valid X such that GCD(A, X) = B\n| 10        | 22 | 5 | 50 | Valid X such that GCD(A, X) = B\n| 11        | 24 | 1 | 11 | Valid X such that GCD(A, X) = B\n| 12        | 26 | 2 | 24 | Valid X such that GCD(A, X) = B\n| 13        | 28 | 3 | 39 | Valid X such that GCD(A, X) = B\n| 14        | 30 | 4 | 56 | Valid X such that GCD(A, X) = B\n| 15        | 32 | 5 | 75 | Valid X such that GCD(A, X) = B\n| 16        | 34 | 1 | 16 | Valid X such that GCD(A, X) = B\n| 17        | 36 | 2 | 34 | Valid X such that GCD(A, X) = B\n| 18        | 38 | 3 | 54 | Valid X such that GCD(A, X) = B\n| 19        | 40 | 4 | 76 | Valid X such that GCD(A, X) = B\n| 20        | 42 | 5 | 100 | Valid X such that GCD(A, X) = B\n| 21        | 44 | 1 | 21 | Valid X such that GCD(A, X) = B\n| 22        | 46 | 2 | 44 | Valid X such that GCD(A, X) = B\n| 23        | 48 | 3 | 69 | Valid X such that GCD(A, X) = B\n| 24        | 50 | 4 | 96 | Valid X such that GCD(A, X) = B\n| 25        | 52 | 5 | 125 | Valid X such that GCD(A, X) = B\n| 26        | 54 | 1 | 26 | Valid X such that GCD(A, X) = B\n| 27        | 56 | 2 | 54 | Valid X such that GCD(A, X) = B\n| 28        | 58 | 3 | 84 | Valid X such that GCD(A, X) = B\n| 29        | 60 | 4 | 116 | Valid X such that GCD(A, X) = B\n| 30        | 62 | 5 | 150 | Valid X such that GCD(A, X) = B\n| 31        | 64 | 1 | 31 | Valid X such that GCD(A, X) = B\n| 32        | 66 | 2 | 64 | Valid X such that GCD(A, X) = B\n| 33        | 68 | 3 | 99 | Valid X such that GCD(A, X) = B\n| 34        | 70 | 4 | 136 | Valid X such that GCD(A, X) = B\n| 35        | 72 | 5 | 175 | Valid X such that GCD(A, X) = B\n| 36        | 74 | 1 | 36 | Valid X such that GCD(A, X) = B\n| 37        | 76 | 2 | 74 | Valid X such that GCD(A, X) = B\n| 38        | 78 | 3 | 114 | Valid X such that GCD(A, X) = B\n| 39        | 80 | 4 | 156 | Valid X such that GCD(A, X) = B\n| 40        | 82 | 5 | 200 | Valid X such that GCD(A, X) = B",
            "example": {
              "input": "A = 20, B = 5",
              "output": "5",
              "explanation": "GCD(20, 5) = 5, so X = 5 is a valid solution."
            },
            "answer": "\nclass Solution:\n    def findX(self, A, B):\n        # Any number that is a multiple of B can work\n        X = B\n        while gcd(A, X) != B:\n            X += B\n        return X\n    "
        },
        {
            "id": 7,
            "title": "Largest number with GCD of all elements ≤ K",
            "description": "Given an array of integers, find the largest number such that the GCD of the number with all elements of the array is less than or equal to K.\n\n| Test Case | Array                | K  | Output | Notes                       |\n|-----------|----------------------|----|--------|-----------------------------|\n| 1         | [10, 20, 30, 40]      | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 2         | [12, 24, 36, 48]      | 6  | 6      | GCD of 6 with all elements ≤ 6 |\n| 3         | [2, 4, 6, 8]          | 2  | 2      | GCD of 2 with all elements ≤ 2 |\n| 4         | [15, 25, 35, 45]      | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 5         | [5, 10, 15, 20]       | 10 | 10     | GCD of 10 with all elements ≤ 10 |\n| 6         | [6, 12, 18, 24]       | 12 | 12     | GCD of 12 with all elements ≤ 12 |\n| 7         | [8, 16, 32, 64]       | 8  | 8      | GCD of 8 with all elements ≤ 8 |\n| 8         | [3, 6, 9, 12]         | 3  | 3      | GCD of 3 with all elements ≤ 3 |\n| 9         | [7, 14, 21, 28]       | 7  | 7      | GCD of 7 with all elements ≤ 7 |\n| 10        | [9, 18, 27, 36]       | 9  | 9      | GCD of 9 with all elements ≤ 9 |\n| 11        | [11, 22, 33, 44]      | 11 | 11     | GCD of 11 with all elements ≤ 11 |\n| 12        | [14, 28, 42, 56]      | 14 | 14     | GCD of 14 with all elements ≤ 14 |\n| 13        | [4, 8, 12, 16]        | 4  | 4      | GCD of 4 with all elements ≤ 4 |\n| 14        | [1, 3, 5, 7]          | 1  | 1      | GCD of 1 with all elements ≤ 1 |\n| 15        | [20, 40, 60, 80]      | 10 | 10     | GCD of 10 with all elements ≤ 10 |\n| 16        | [24, 48, 72, 96]      | 12 | 12     | GCD of 12 with all elements ≤ 12 |\n| 17        | [5, 10, 15, 20]       | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 18        | [3, 6, 9, 12]         | 3  | 3      | GCD of 3 with all elements ≤ 3 |\n| 19        | [10, 20, 30, 40]      | 10 | 10     | GCD of 10 with all elements ≤ 10 |\n| 20        | [2, 4, 6, 8]          | 2  | 2      | GCD of 2 with all elements ≤ 2 |\n| 21        | [18, 36, 54, 72]      | 18 | 18     | GCD of 18 with all elements ≤ 18 |\n| 22        | [7, 14, 21, 28]       | 7  | 7      | GCD of 7 with all elements ≤ 7 |\n| 23        | [9, 18, 27, 36]       | 9  | 9      | GCD of 9 with all elements ≤ 9 |\n| 24        | [8, 16, 32, 64]       | 8  | 8      | GCD of 8 with all elements ≤ 8 |\n| 25        | [5, 10, 15, 20]       | 10 | 10     | GCD of 10 with all elements ≤ 10 |\n| 26        | [6, 12, 18, 24]       | 12 | 12     | GCD of 12 with all elements ≤ 12 |\n| 27        | [3, 6, 9, 12]         | 3  | 3      | GCD of 3 with all elements ≤ 3 |\n| 28        | [10, 20, 30, 40]      | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 29        | [15, 25, 35, 45]      | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 30        | [12, 24, 36, 48]      | 6  | 6      | GCD of 6 with all elements ≤ 6 |\n| 31        | [1, 3, 5, 7]          | 1  | 1      | GCD of 1 with all elements ≤ 1 |\n| 32        | [7, 14, 21, 28]       | 7  | 7      | GCD of 7 with all elements ≤ 7 |\n| 33        | [11, 22, 33, 44]      | 11 | 11     | GCD of 11 with all elements ≤ 11 |\n| 34        | [4, 8, 12, 16]        | 4  | 4      | GCD of 4 with all elements ≤ 4 |\n| 35        | [24, 48, 72, 96]      | 12 | 12     | GCD of 12 with all elements ≤ 12 |\n| 36        | [20, 40, 60, 80]      | 10 | 10     | GCD of 10 with all elements ≤ 10 |\n| 37        | [5, 10, 15, 20]       | 5  | 5      | GCD of 5 with all elements ≤ 5 |\n| 38        | [2, 4, 6, 8]          | 2  | 2      | GCD of 2 with all elements ≤ 2 |\n| 39        | [18, 36, 54, 72]      | 18 | 18     | GCD of 18 with all elements ≤ 18 |\n| 40        | [8, 16, 32, 64]       | 8  | 8      | GCD of 8 with all elements ≤ 8 |\n",
            "example": {
              "input": "[10, 20, 30, 40], K = 5",
              "output": "5",
              "explanation": "The largest number X such that the GCD of X with all elements of the array is less than or equal to 5 is 5."
            },
            "answer": "\nclass Solution:\n    def largestNumberWithGCD(self, arr, K):\n        for x in reversed(range(1, K+1)):\n            if all(gcd(a, x) <= K for a in arr):\n                return x\n        return -1\n"
        },
        {
            "id": 8,
            "title": "Is GCD of all numbers in the array 1?",
            "description": "Given an array of integers, check if the GCD of all the numbers is 1.\n\n| Test Case | Array                | Output | Notes                       |\n|-----------|----------------------|--------|-----------------------------|\n| 1         | [1, 2, 3, 4]          | Yes    | GCD of all elements is 1   |\n| 2         | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 3         | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 4         | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 5         | [2, 6, 8, 10]         | No     | GCD of all elements is 2   |\n| 6         | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 7         | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 8         | [1, 4, 7, 8]          | Yes    | GCD of all elements is 1   |\n| 9         | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 10        | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 11        | [1, 3, 5, 7]          | Yes    | GCD of all elements is 1   |\n| 12        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 13        | [2, 4, 6, 8]          | No     | GCD of all elements is 2   |\n| 14        | [1, 2, 3, 5]          | Yes    | GCD of all elements is 1   |\n| 15        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 16        | [9, 18, 27, 36]       | No     | GCD of all elements is 9   |\n| 17        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 18        | [11, 22, 33, 44]      | No     | GCD of all elements is 11  |\n| 19        | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 20        | [20, 25, 30, 35]      | No     | GCD of all elements is 5   |\n| 21        | [2, 6, 10, 14]        | No     | GCD of all elements is 2   |\n| 22        | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 23        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 24        | [1, 3, 5, 7]          | Yes    | GCD of all elements is 1   |\n| 25        | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 26        | [9, 18, 27, 36]       | No     | GCD of all elements is 9   |\n| 27        | [11, 22, 33, 44]      | No     | GCD of all elements is 11  |\n| 28        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 29        | [8, 16, 24, 32]       | No     | GCD of all elements is 8   |\n| 30        | [1, 2, 3, 5]          | Yes    | GCD of all elements is 1   |\n| 31        | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 32        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 33        | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 34        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 35        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 36        | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 37        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 38        | [1, 2, 3, 4]          | Yes    | GCD of all elements is 1   |\n| 39        | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 40        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |",
            "example": {
              "input": "[10, 20, 30, 40]",
              "output": "No",
              "explanation": "The GCD of all elements is 10, so the output is No."
            },
            "answer": "\nclass Solution:\n    def isGCDOne(self, arr):\n        result = arr[0]\n        for num in arr[1:]:\n            result = gcd(result, num)\n        return result == 1\n"
        },
        {
              "id": 9,
              "title": "GCD of range [L, R] in an array (using Segment Tree)",
              "description": "Given an array and a range [L, R], find the GCD of all elements in the range [L, R] efficiently using a Segment Tree.\n\n| Test Case | Array            | L  | R  | Output | Notes                              |\n|-----------|------------------|----|----|--------|------------------------------------|\n| 1         | [2, 4, 6, 8, 10] | 1  | 4  | 2      | GCD of elements between index 1-4  |\n| 2         | [5, 10, 15, 20]  | 0  | 3  | 5      | GCD of elements between index 0-3  |\n| 3         | [7, 14, 21, 28]  | 2  | 3  | 7      | GCD of elements between index 2-3  |\n| 4         | [9, 18, 27, 36]  | 0  | 2  | 9      | GCD of elements between index 0-2  |\n| 5         | [10, 20, 30, 40] | 1  | 2  | 10     | GCD of elements between index 1-2  |\n| 6         | [12, 24, 36, 48] | 0  | 1  | 12     | GCD of elements between index 0-1  |\n| 7         | [15, 30, 45, 60] | 1  | 3  | 15     | GCD of elements between index 1-3  |\n| 8         | [16, 32, 48, 64] | 0  | 3  | 16     | GCD of elements between index 0-3  |\n| 9         | [18, 36, 54, 72] | 2  | 3  | 18     | GCD of elements between index 2-3  |\n| 10        | [20, 40, 60, 80] | 1  | 2  | 20     | GCD of elements between index 1-2  |\n| 11        | [25, 50, 75, 100]| 0  | 3  | 25     | GCD of elements between index 0-3  |\n| 12        | [30, 60, 90, 120]| 0  | 2  | 30     | GCD of elements between index 0-2  |\n| 13        | [35, 70, 105, 140]| 1  | 3  | 35    | GCD of elements between index 1-3  |\n| 14        | [40, 80, 120, 160]| 2  | 3  | 40    | GCD of elements between index 2-3  |\n| 15        | [45, 90, 135, 180]| 0  | 1  | 45    | GCD of elements between index 0-1  |\n| 16        | [50, 100, 150, 200]| 1  | 2  | 50    | GCD of elements between index 1-2  |\n| 17        | [55, 110, 165, 220]| 0  | 3  | 55    | GCD of elements between index 0-3  |\n| 18        | [60, 120, 180, 240]| 2  | 3  | 60    | GCD of elements between index 2-3  |\n| 19        | [65, 130, 195, 260]| 1  | 2  | 65    | GCD of elements between index 1-2  |\n| 20        | [70, 140, 210, 280]| 0  | 3  | 70    | GCD of elements between index 0-3  |\n| 21        | [75, 150, 225, 300]| 0  | 2  | 75    | GCD of elements between index 0-2  |\n| 22        | [80, 160, 240, 320]| 1  | 3  | 80    | GCD of elements between index 1-3  |\n| 23        | [85, 170, 255, 340]| 2  | 3  | 85    | GCD of elements between index 2-3  |\n| 24        | [90, 180, 270, 360]| 0  | 3  | 90    | GCD of elements between index 0-3  |\n| 25        | [95, 190, 285, 380]| 1  | 2  | 95    | GCD of elements between index 1-2  |\n| 26        | [100, 200, 300, 400]| 0  | 2  | 100   | GCD of elements between index 0-2  |\n| 27        | [105, 210, 315, 420]| 0  | 1  | 105   | GCD of elements between index 0-1  |\n| 28        | [110, 220, 330, 440]| 2  | 3  | 110   | GCD of elements between index 2-3  |\n| 29        | [115, 230, 345, 460]| 1  | 3  | 115   | GCD of elements between index 1-3  |\n| 30        | [120, 240, 360, 480]| 0  | 3  | 120   | GCD of elements between index 0-3  |\n| 31        | [125, 250, 375, 500]| 1  | 2  | 125   | GCD of elements between index 1-2  |\n| 32        | [130, 260, 390, 520]| 0  | 2  | 130   | GCD of elements between index 0-2  |\n| 33        | [135, 270, 405, 540]| 0  | 3  | 135   | GCD of elements between index 0-3  |\n| 34        | [140, 280, 420, 560]| 1  | 2  | 140   | GCD of elements between index 1-2  |\n| 35        | [145, 290, 435, 580]| 2  | 3  | 145   | GCD of elements between index 2-3  |\n| 36        | [150, 300, 450, 600]| 0  | 1  | 150   | GCD of elements between index 0-1  |\n| 37        | [155, 310, 465, 620]| 1  | 3  | 155   | GCD of elements between index 1-3  |\n| 38        | [160, 320, 480, 640]| 0  | 2  | 160   | GCD of elements between index 0-2  |\n| 39        | [165, 330, 495, 660]| 0  | 3  | 165   | GCD of elements between index 0-3  |\n| 40        | [170, 340, 510, 680]| 1  | 2  | 170   | GCD of elements between index 1-2  |",
              "example": {
                "input": "Array = [12, 24, 36, 48, 60], L = 1, R = 3",
                "output": "12",
                "explanation": "The GCD of the elements from index 1 to 3 (24, 36, 48) is 12."
              },
              "answer": "\nclass SegmentTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (2 * self.n)\n        self.build(arr)\n    def build(self, arr):\n        for i in range(self.n):\n            self.tree[self.n + i] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = gcd(self.tree[2 * i], self.tree[2 * i + 1])\n    def range_gcd(self, left, right):\n        left += self.n\n        right += self.n\n        result = 0\n        while left <= right:\n            if left % 2 == 1:\n                result = gcd(result, self.tree[left])\n                left += 1\n            if right % 2 == 0:\n                result = gcd(result, self.tree[right])\n                right -= 1\n            left //= 2\n            right //= 2\n        return result"
        },
        {
            "id": 10,
            "title": "Generate all prime numbers ≤ N (Sieve)",
            "description": "Given a number N, generate all prime numbers less than or equal to N using the Sieve of Eratosthenes algorithm.\n\n| Test Case | N   | Output                              | Notes                                 |\n|-----------|-----|-------------------------------------|---------------------------------------|\n| 1         | 10  | [2, 3, 5, 7]                        | Primes less than or equal to 10       |\n| 2         | 20  | [2, 3, 5, 7, 11, 13, 17, 19]        | Primes less than or equal to 20       |\n| 3         | 30  | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] | Primes less than or equal to 30       |\n| 4         | 50  | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] | Primes less than or equal to 50       |\n| 5         | 100 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] | Primes less than or equal to 100 |\n| 6         | 200 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199] | Primes less than or equal to 200 |\n| 7         | 300 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443] | Primes less than or equal to 300 |\n| 8         | 400 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457] | Primes less than or equal to 400 |\n| 9         | 500 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 463, 467, 479, 487, 491, 499] | Primes less than or equal to 500 |\n| 10        | 1000 | [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997] | Primes less than or equal to 1000 |\n| ...       | ... | ...                                 | ...                                   |",
            "example": {
              "input": "N = 30",
              "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
              "explanation": "The primes less than or equal to 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29."
            },
            "answer": "def sieve_of_eratosthenes(N):\n    sieve = [True] * (N+1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(N**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, N+1, i):\n                sieve[j] = False\n    primes = [i for i in range(2, N+1) if sieve[i]]\n    return primes"
        },
        {
            "id": 11,
            "title": "Count primes in range [L, R] (Segmented Sieve)",
            "description": "Given a range [L, R], count the number of prime numbers in the range using the Segmented Sieve algorithm.\n\n| Test Case | L   | R   | Output | Notes                       |\n|-----------|-----|-----|--------|-----------------------------|\n| 1         | 1   | 10  | 4      | Primes in range [1, 10]     |\n| 2         | 10  | 20  | 4      | Primes in range [10, 20]    |\n| 3         | 20  | 30  | 2      | Primes in range [20, 30]    |\n| 4         | 30  | 40  | 4      | Primes in range [30, 40]    |\n| 5         | 40  | 50  | 3      | Primes in range [40, 50]    |\n| 6         | 50  | 60  | 4      | Primes in range [50, 60]    |\n| 7         | 60  | 70  | 4      | Primes in range [60, 70]    |\n| 8         | 70  | 80  | 4      | Primes in range [70, 80]    |\n| 9         | 80  | 90  | 4      | Primes in range [80, 90]    |\n| 10        | 90  | 100 | 4      | Primes in range [90, 100]   |\n| 11        | 100 | 110 | 4      | Primes in range [100, 110]  |\n| 12        | 200 | 210 | 4      | Primes in range [200, 210]  |\n| 13        | 300 | 310 | 4      | Primes in range [300, 310]  |\n| 14        | 500 | 510 | 4      | Primes in range [500, 510]  |\n| 15        | 150 | 160 | 4      | Primes in range [150, 160]  |\n| 16        | 500 | 600 | 10     | Primes in range [500, 600]  |\n| 17        | 600 | 700 | 15     | Primes in range [600, 700]  |\n| 18        | 700 | 800 | 17     | Primes in range [700, 800]  |\n| 19        | 800 | 900 | 19     | Primes in range [800, 900]  |\n| 20        | 900 | 1000| 21     | Primes in range [900, 1000] |\n| 21        | 1000| 1100| 23     | Primes in range [1000, 1100]|\n| 22        | 1100| 1200| 24     | Primes in range [1100, 1200]|\n| 23        | 1200| 1300| 25     | Primes in range [1200, 1300]|\n| 24        | 1300| 1400| 26     | Primes in range [1300, 1400]|\n| 25        | 1400| 1500| 27     | Primes in range [1400, 1500]|\n| 26        | 1500| 1600| 28     | Primes in range [1500, 1600]|\n| 27        | 1600| 1700| 29     | Primes in range [1600, 1700]|\n| 28        | 1700| 1800| 30     | Primes in range [1700, 1800]|\n| 29        | 1800| 1900| 31     | Primes in range [1800, 1900]|\n| 30        | 1900| 2000| 32     | Primes in range [1900, 2000]|\n| 31        | 2000| 2100| 33     | Primes in range [2000, 2100]|\n| 32        | 2100| 2200| 34     | Primes in range [2100, 2200]|\n| 33        | 2200| 2300| 35     | Primes in range [2200, 2300]|\n| 34        | 2300| 2400| 36     | Primes in range [2300, 2400]|\n| 35        | 2400| 2500| 37     | Primes in range [2400, 2500]|\n| 36        | 2500| 2600| 38     | Primes in range [2500, 2600]|\n| 37        | 2600| 2700| 39     | Primes in range [2600, 2700]|\n| 38        | 2700| 2800| 40     | Primes in range [2700, 2800]|\n| 39        | 2800| 2900| 41     | Primes in range [2800, 2900]|\n| 40        | 2900| 3000| 42     | Primes in range [2900, 3000]|\n",
            "example": {
              "input": "L = 10, R = 20",
              "output": "4",
              "explanation": "The primes in the range [10, 20] are 11, 13, 17, and 19, so the count is 4."
            },
            "answer": "def count_primes_in_range(L, R):\n    primes = sieve_of_eratosthenes(int(R**0.5))\n    range_primes = [True] * (R - L + 1)\n    for p in primes:\n        start = max(p*p, (L + p - 1) // p * p)\n        for j in range(start, R + 1, p):\n            range_primes[j - L] = False\n    if L == 1:\n        range_primes[0] = False\n    return sum(range_primes)"
        },          
        {
            "id": 12,
            "title": "Smallest Prime Factor (SPF) of Numbers Till N",
            "description": "Find the smallest prime factor (SPF) for all numbers up to N.\n\n| Test Case | N   | Output                                      | Notes                     |\n|-----------|-----|---------------------------------------------|---------------------------|\n| 1         | 10  | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3]              | Smallest prime factors     |\n| 2         | 20  | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 3] | Smallest prime factors     |\n| 3         | 30  | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31] | Smallest prime factors     |\n| 4         | 50  | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47] | Smallest prime factors     |\n| 5         | 60  | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59] | Smallest prime factors     |\n| 6         | 100 | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59, 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97] | Smallest prime factors     |\n| 7         | 200 | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59, 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97, 2, 101, 2, 103, 2, 107, 2, 109, 2, 113, 2, 127, 2, 131, 2, 137, 2, 139, 2, 149, 2, 151, 2, 157, 2, 163, 2, 167, 2, 173, 2, 179, 2, 181, 2, 191, 2, 193, 2, 197, 2, 199] | Smallest prime factors     |\n| 8         | 500 | [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59, 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97, 2, 101, 2, 103, 2, 107, 2, 109, 2, 113, 2, 127, 2, 131, 2, 137, 2, 139, 2, 149, 2, 151, 2, 157, 2, 163, 2, 167, 2, 173, 2, 179, 2, 181, 2, 191, 2, 193, 2, 197, 2, 199, 2, 211, 2, 223, 2, 227, 2, 229, 2, 233, 2, 239, 2, 241, 2, 251, 2, 257, 2, 263, 2, 269, 2, 271, 2, 277, 2, 281, 2, 283, 2, 293, 2, 307, 2, 311, 2, 313, 2, 317] | Smallest prime factors     |\n| 9         | 1000| [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59, 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97, 2, 101, 2, 103, 2, 107, 2, 109, 2, 113, 2, 127, 2, 131, 2, 137, 2, 139, 2, 149, 2, 151, 2, 157, 2, 163, 2, 167, 2, 173, 2, 179, 2, 181, 2, 191, 2, 193, 2, 197, 2, 199, 2, 211, 2, 223, 2, 227, 2, 229, 2, 233, 2, 239, 2, 241, 2, 251, 2, 257, 2, 263, 2, 269, 2, 271, 2, 277, 2, 281, 2, 283, 2, 293, 2, 307, 2, 311, 2, 313, 2, 317, 2, 331, 2, 337, 2, 347, 2, 349, 2, 353, 2, 359, 2, 367, 2, 373, 2, 379, 2, 383, 2, 389, 2, 397, 2, 401, 2, 409, 2, 419, 2, 421, 2, 431, 2, 433, 2, 439, 2, 443, 2, 449, 2, 457, 2, 461, 2, 463, 2, 467, 2, 479, 2, 487, 2, 491, 2, 499] | Smallest prime factors     |\n| 10        | 2000| [0, 1, 2, 3, 2, 5, 2, 7, 2, 3, 2, 13, 2, 7, 2, 17, 2, 19, 2, 23, 2, 5, 2, 29, 2, 31, 2, 7, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59, 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97, 2, 101, 2, 103, 2, 107, 2, 109, 2, 113, 2, 127, 2, 131, 2, 137, 2, 139, 2, 149, 2, 151, 2, 157, 2, 163, 2, 167, 2, 173, 2, 179, 2, 181, 2, 191, 2, 193, 2, 197, 2, 199, 2, 211, 2, 223, 2, 227, 2, 229, 2, 233, 2, 239, 2, 241, 2, 251, 2, 257, 2, 263, 2, 269, 2, 271, 2, 277, 2, 281, 2, 283, 2, 293, 2, 307, 2, 311, 2, 313, 2, 317, 2, 331, 2, 337, 2, 347, 2, 349, 2, 353, 2, 359, 2, 367, 2, 373, 2, 379, 2, 383, 2, 389, 2, 397, 2, 401, 2, 409, 2, 419, 2, 421, 2, 431, 2, 433, 2, 439, 2, 443, 2, 449, 2, 457, 2, 461, 2, 463, 2, 467, 2, 479, 2, 487, 2, 491, 2, 499, 2, 503, 2, 509, 2, 521, 2, 523, 2, 541, 2, 547, 2, 557, 2, 563, 2, 569, 2, 577, 2, 587, 2, 593, 2, 599, 2, 607, 2, 613, 2, 617, 2, 631, 2, 641, 2, 643, 2, 647, 2, 653, 2, 659, 2, 661, 2, 673, 2, 677, 2, 683, 2, 691, 2, 701, 2, 709, 2, 719, 2, 727, 2, 733, 2, 739, 2, 743, 2, 751, 2, 757, 2, 761, 2, 769, 2, 773, 2, 787, 2, 797, 2, 809, 2, 811, 2, 821, 2, 823, 2, 827, 2, 829, 2, 839, 2, 853, 2, 857, 2, 859, 2, 863, 2, 877, 2, 881, 2, 883, 2, 887, 2, 907, 2, 911, 2, 919, 2, 929, 2, 937, 2, 941, 2, 947, 2, 953, 2, 967, 2, 971, 2, 977, 2, 983, 2, 991, 2, 997] | Smallest prime factors     |",
            "example": {
              "input": "N = 10",
              "output": "[0, 1, 2, 3, 2, 5, 2, 7, 2, 3]",
              "explanation": "The smallest prime factor (SPF) for numbers from 1 to 10 are: 0 for 1, 1 for 2, 3 for 9, and so on."
            },
            "answer": "def smallest_prime_factors(N):\n    spf = [i for i in range(N+1)]\n    for i in range(2, int(N**0.5) + 1):\n        if spf[i] == i:\n            for j in range(i*i, N+1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf"
        },
        {
            "id": 13,
            "title": "Prime Factorization using Sieve",
            "description": "Given a number N, return the list of prime factors of N using a precomputed Sieve.\n\n| Test Case | N   | Output           | Notes                         |\n|-----------|-----|------------------|-------------------------------|\n| 1         | 2   | [2]              | Prime                         |\n| 2         | 3   | [3]              | Prime                         |\n| 3         | 4   | [2, 2]           | 2 × 2                         |\n| 4         | 5   | [5]              | Prime                         |\n| 5         | 6   | [2, 3]           | 2 × 3                         |\n| 6         | 7   | [7]              | Prime                         |\n| 7         | 8   | [2, 2, 2]        | 2³                            |\n| 8         | 9   | [3, 3]           | 3²                            |\n| 9         | 10  | [2, 5]           | 2 × 5                         |\n| 10        | 11  | [11]             | Prime                         |\n| 11        | 12  | [2, 2, 3]        | 2² × 3                        |\n| 12        | 13  | [13]             | Prime                         |\n| 13        | 14  | [2, 7]           | 2 × 7                         |\n| 14        | 15  | [3, 5]           | 3 × 5                         |\n| 15        | 16  | [2, 2, 2, 2]     | 2⁴                            |\n| 16        | 17  | [17]             | Prime                         |\n| 17        | 18  | [2, 3, 3]        | 2 × 3²                        |\n| 18        | 19  | [19]             | Prime                         |\n| 19        | 20  | [2, 2, 5]        | 2² × 5                        |\n| 20        | 21  | [3, 7]           | 3 × 7                         |\n| 21        | 22  | [2, 11]          | 2 × 11                        |\n| 22        | 23  | [23]             | Prime                         |\n| 23        | 24  | [2, 2, 2, 3]     | 2³ × 3                        |\n| 24        | 25  | [5, 5]           | 5²                            |\n| 25        | 26  | [2, 13]          | 2 × 13                        |\n| 26        | 27  | [3, 3, 3]        | 3³                            |\n| 27        | 28  | [2, 2, 7]        | 2² × 7                        |\n| 28        | 29  | [29]             | Prime                         |\n| 29        | 30  | [2, 3, 5]        | 2 × 3 × 5                     |\n| 30        | 31  | [31]             | Prime                         |\n| 31        | 32  | [2, 2, 2, 2, 2]  | 2⁵                            |\n| 32        | 33  | [3, 11]          | 3 × 11                        |\n| 33        | 34  | [2, 17]          | 2 × 17                        |\n| 34        | 35  | [5, 7]           | 5 × 7                         |\n| 35        | 36  | [2, 2, 3, 3]     | 2² × 3²                       |\n| 36        | 37  | [37]             | Prime                         |\n| 37        | 38  | [2, 19]          | 2 × 19                        |\n| 38        | 39  | [3, 13]          | 3 × 13                        |\n| 39        | 40  | [2, 2, 2, 5]     | 2³ × 5                        |\n| 40        | 41  | [41]             | Prime                         |",
            "example": {
              "input": "N = 60",
              "output": "[2, 2, 3, 5]",
              "explanation": "Prime factorization of 60 = 2 × 2 × 3 × 5"
            },
            "answer": "def prime_factors(N):\n    spf = [i for i in range(N + 1)]\n    for i in range(2, int(N ** 0.5) + 1):\n        if spf[i] == i:\n            for j in range(i * i, N + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\n    def get_factors(x):\n        factors = []\n        while x != 1:\n            factors.append(spf[x])\n            x //= spf[x]\n        return factors\n\n    return get_factors(N)"
        },
        {
            "id": 14,
            "title": "Check if a Number is Prime in O(√n)",
            "description": "Check whether a number N is prime using O(√n) trial division.\n\n| Test Case | N   | Output | Notes                     |\n|-----------|-----|--------|---------------------------|\n| 1         | 1   | false  | Not prime                 |\n| 2         | 2   | true   | Prime                     |\n| 3         | 3   | true   | Prime                     |\n| 4         | 4   | false  | 2 × 2                     |\n| 5         | 5   | true   | Prime                     |\n| 6         | 6   | false  | 2 × 3                     |\n| 7         | 7   | true   | Prime                     |\n| 8         | 8   | false  | 2 × 4                     |\n| 9         | 9   | false  | 3 × 3                     |\n| 10        | 10  | false  | 2 × 5                     |\n| 11        | 11  | true   | Prime                     |\n| 12        | 12  | false  | 2 × 6                     |\n| 13        | 13  | true   | Prime                     |\n| 14        | 14  | false  | 2 × 7                     |\n| 15        | 15  | false  | 3 × 5                     |\n| 16        | 16  | false  | 4 × 4                     |\n| 17        | 17  | true   | Prime                     |\n| 18        | 18  | false  | 2 × 9                     |\n| 19        | 19  | true   | Prime                     |\n| 20        | 20  | false  | 2 × 10                    |\n| 21        | 21  | false  | 3 × 7                     |\n| 22        | 22  | false  | 2 × 11                    |\n| 23        | 23  | true   | Prime                     |\n| 24        | 24  | false  | 2 × 12                    |\n| 25        | 25  | false  | 5 × 5                     |\n| 26        | 26  | false  | 2 × 13                    |\n| 27        | 27  | false  | 3 × 9                     |\n| 28        | 28  | false  | 2 × 14                    |\n| 29        | 29  | true   | Prime                     |\n| 30        | 30  | false  | 2 × 15                    |\n| 31        | 31  | true   | Prime                     |\n| 32        | 32  | false  | 2 × 16                    |\n| 33        | 33  | false  | 3 × 11                    |\n| 34        | 34  | false  | 2 × 17                    |\n| 35        | 35  | false  | 5 × 7                     |\n| 36        | 36  | false  | 6 × 6                     |\n| 37        | 37  | true   | Prime                     |\n| 38        | 38  | false  | 2 × 19                    |\n| 39        | 39  | false  | 3 × 13                    |\n| 40        | 40  | false  | 2 × 20                    |",
            "example": {
              "input": "N = 29",
              "output": "true",
              "explanation": "29 is a prime number as it has no divisors other than 1 and itself."
            },
            "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
        },
        {
            "id": 15,
            "title": "Count number of primes ≤ N (Leetcode: Count Primes)",
            "description": "Given an integer n, return the number of prime numbers strictly less than n.\n\n| Test Case | N   | Output | Notes                                 |\n|-----------|-----|--------|---------------------------------------|\n| 1         | 0   | 0      | No primes                             |\n| 2         | 1   | 0      | No primes                             |\n| 3         | 2   | 0      | Less than 2                           |\n| 4         | 3   | 1      | Prime: 2                              |\n| 5         | 4   | 2      | 2, 3                                  |\n| 6         | 5   | 2      | 2, 3                                  |\n| 7         | 6   | 3      | 2, 3, 5                               |\n| 8         | 7   | 3      | 2, 3, 5                               |\n| 9         | 8   | 4      | 2, 3, 5, 7                            |\n| 10        | 9   | 4      | 2, 3, 5, 7                            |\n| 11        | 10  | 4      | 2, 3, 5, 7                            |\n| 12        | 11  | 4      | 2, 3, 5, 7                            |\n| 13        | 12  | 5      | 2, 3, 5, 7, 11                        |\n| 14        | 13  | 5      | 2, 3, 5, 7, 11                        |\n| 15        | 14  | 6      | Add 13                                |\n| 16        | 15  | 6      |                                       |\n| 17        | 16  | 6      |                                       |\n| 18        | 17  | 6      |                                       |\n| 19        | 18  | 7      | Add 17                                |\n| 20        | 19  | 7      |                                       |\n| 21        | 20  | 8      | Add 19                                |\n| 22        | 25  | 9      | Add 23                                |\n| 23        | 30  | 10     | Up to 29                              |\n| 24        | 40  | 12     |                                       |\n| 25        | 50  | 15     |                                       |\n| 26        | 60  | 17     |                                       |\n| 27        | 70  | 19     |                                       |\n| 28        | 80  | 22     |                                       |\n| 29        | 90  | 24     |                                       |\n| 30        | 100 | 25     | Up to 97                              |",
            "example": {
              "input": "n = 20",
              "output": "8",
              "explanation": "There are 8 primes less than 20: 2, 3, 5, 7, 11, 13, 17, 19."
            },
            "answer": "def count_primes(n):\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)"
        },
        {
            "id": 16,
            "title": "Closest Prime to a Number",
            "description": "Given a number `n`, find the closest prime number to `n`. If two primes are equally distant, return the smaller one.\n\n| Test Case | n   | Output | Notes                        |\n|-----------|-----|--------|------------------------------|\n| 1         | 1   | 2      | Smallest prime is 2          |\n| 2         | 2   | 2      | 2 is prime                   |\n| 3         | 3   | 3      | 3 is prime                   |\n| 4         | 4   | 3      | 3 and 5 → 3 is closer        |\n| 5         | 5   | 5      | Prime                        |\n| 6         | 6   | 5      | Closest is 5                 |\n| 7         | 7   | 7      | Prime                        |\n| 8         | 8   | 7      |                              |\n| 9         | 9   | 7      |                              |\n| 10        | 10  | 11     |                              |\n| 11        | 11  | 11     |                              |\n| 12        | 12  | 11     |                              |\n| 13        | 13  | 13     |                              |\n| 14        | 14  | 13     |                              |\n| 15        | 15  | 13     |                              |\n| 16        | 16  | 17     |                              |\n| 17        | 17  | 17     |                              |\n| 18        | 18  | 17     |                              |\n| 19        | 19  | 19     |                              |\n| 20        | 20  | 19     |                              |\n| 21        | 21  | 19     |                              |\n| 22        | 22  | 23     |                              |\n| 23        | 23  | 23     |                              |\n| 24        | 24  | 23     |                              |\n| 25        | 25  | 23     |                              |\n| 26        | 26  | 29     |                              |\n| 27        | 27  | 29     |                              |\n| 28        | 28  | 29     |                              |\n| 29        | 29  | 29     |                              |\n| 30        | 30  | 29     |                              |\n| 31        | 31  | 31     |                              |\n| 32        | 32  | 31     |                              |\n| 33        | 33  | 31     |                              |\n| 34        | 34  | 37     |                              |\n| 35        | 35  | 37     |                              |\n| 36        | 36  | 37     |                              |\n| 37        | 37  | 37     |                              |\n| 38        | 38  | 37     |                              |\n| 39        | 39  | 37     |                              |\n| 40        | 40  | 41     |                              |",
            "example": {
              "input": "n = 10",
              "output": "11",
              "explanation": "The primes closest to 10 are 7 and 11, but 11 is closer, so the answer is 11."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef closest_prime(n):\n    if is_prime(n):\n        return n\n    offset = 1\n    while True:\n        if n - offset >= 2 and is_prime(n - offset):\n            return n - offset\n        if is_prime(n + offset):\n            return n + offset\n        offset += 1"
        },
        {
            "id": 17,
            "title": "Product of All Primes in Range [L, R]",
            "description": "Given a range [L, R], return the product of all prime numbers within this range. Return 1 if no prime exists.\n\n| Test Case | L   | R   | Output | Notes                           |\n|-----------|-----|-----|--------|---------------------------------|\n| 1         | 1   | 5   | 30     | 2 * 3 * 5                       |\n| 2         | 6   | 10  | 210    | 7 * 11                          |\n| 3         | 10  | 10  | 0      | No prime                        |\n| 4         | 2   | 2   | 2      | Single prime                    |\n| 5         | 14  | 17  | 255    | 17 * 15 (error — fix input)     |\n| 6         | 10  | 20  | 9699690|                                 |\n| 7         | 1   | 1   | 1      | No prime                        |\n| 8         | 11  | 13  | 2002   | 11 * 13                         |\n| 9         | 20  | 23  | 23     |                                 |\n| 10        | 2   | 3   | 6      |                                 |\n| 11        | 3   | 3   | 3      |                                 |\n| 12        | 5   | 7   | 35     |                                 |\n| 13        | 30  | 31  | 31     |                                 |\n| 14        | 90  | 100| 9699690|                                 |\n| 15        | 100 | 101| 101     |                                 |\n| 16        | 13  | 13 | 13      |                                 |\n| 17        | 9   | 9  | 1       |                                 |\n| 18        | 89  | 97 | 8347681 |                                 |\n| 19        | 4   | 4  | 1       |                                 |\n| 20        | 15  | 15| 1        |                                 |\n| 21        | 16  | 19| 323      | 17 * 19                         |\n| 22        | 20  | 29| 6469693230|                                 |\n| 23        | 50  | 59| 6469693230|                                 |\n| 24        | 2   | 29| 6469693230|                                 |\n| 25        | 30  | 50| 614889782588491410|                      |\n| 26        | 2   | 2 | 2        |                                 |\n| 27        | 6   | 6 | 1        |                                 |\n| 28        | 1   | 50| Large number                           |\n| 29        | 70  | 80| Large number                           |\n| 30        | 90  | 97| 8347681                                |\n| 31        | 3   | 5 | 15                                     |\n| 32        | 23  | 23| 23                                     |\n| 33        | 22  | 24| 23                                     |\n| 34        | 25  | 28| 1                                      |\n| 35        | 41  | 43| 1763                                   |\n| 36        | 44  | 44| 1                                      |\n| 37        | 45  | 46| 1                                      |\n| 38        | 47  | 47| 47                                     |\n| 39        | 48  | 49| 1                                      |\n| 40        | 50  | 53| 53                                     |",
            "example": {
              "input": "L = 10, R = 20",
              "output": "9699690",
              "explanation": "The primes in [10, 20] are 11, 13, 17, 19 → product = 9699690."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef product_of_primes(L, R):\n    result = 1\n    found = False\n    for i in range(L, R + 1):\n        if is_prime(i):\n            result *= i\n            found = True\n    return result if found else 1"
        },
        {
            "id": 18,
            "title": "Find Twin Primes in Range [L, R]",
            "description": "A twin prime is a pair of prime numbers that differ by 2 (e.g., (3, 5), (11, 13)). Given a range [L, R], return all twin primes.\n\n| Test Case | L   | R   | Output                              |\n|-----------|-----|-----|-------------------------------------|\n| 1         | 1   | 10  | [(3, 5), (5, 7)]                    |\n| 2         | 10  | 20  | [(11, 13), (17, 19)]                |\n| 3         | 20  | 30  | [(29, 31)]                          |\n| 4         | 30  | 40  | [(29, 31), (31, 33)]                |\n| 5         | 40  | 50  | [(41, 43)]                          |\n| 6         | 50  | 60  | [(59, 61)]                          |\n| 7         | 60  | 70  | []                                  |\n| 8         | 70  | 80  | [(71, 73)]                          |\n| 9         | 80  | 90  | [(83, 85)]                          |\n| 10        | 90  | 100 | [(101, 103)]                        |\n| 11        | 100 | 110 | [(101, 103), (107, 109)]            |\n| 12        | 110 | 120 | []                                  |\n| 13        | 120 | 130 | [(131, 133)]                        |\n| 14        | 130 | 140 | [(137, 139)]                        |\n| 15        | 140 | 150 | [(149, 151)]                        |\n| 16        | 150 | 160 | [(151, 153)]                        |\n| 17        | 160 | 170 | []                                  |\n| 18        | 170 | 180 | [(179, 181)]                        |\n| 19        | 180 | 190 | []                                  |\n| 20        | 190 | 200 | [(191, 193), (197, 199)]            |\n| 21        | 200 | 210 | []                                  |\n| 22        | 210 | 220 | []                                  |\n| 23        | 220 | 230 | [(227, 229)]                        |\n| 24        | 230 | 240 | []                                  |\n| 25        | 240 | 250 | []                                  |\n| 26        | 250 | 260 | [(251, 253)]                        |\n| 27        | 260 | 270 | [(269, 271)]                        |\n| 28        | 270 | 280 | []                                  |\n| 29        | 280 | 290 | [(281, 283)]                        |\n| 30        | 290 | 300 | []                                  |\n| 31        | 300 | 310 | [(311, 313)]                        |\n| 32        | 310 | 320 | [(311, 313)]                        |\n| 33        | 320 | 330 | []                                  |\n| 34        | 330 | 340 | [(337, 339)]                        |\n| 35        | 340 | 350 | [(347, 349)]                        |\n| 36        | 500 | 550 | [(521, 523), (523, 525), (541, 543)]|\n| 37        | 600 | 650 | [(617, 619), (641, 643)]            |\n| 38        | 700 | 750 | [(709, 711), (719, 721), (733, 735)]|\n| 39        | 800 | 850 | [(821, 823)]                        |\n| 40        | 900 | 1000| [(941, 943), (971, 973)]            |",
            "example": {
              "input": "L = 10, R = 20",
              "output": "[(11, 13), (17, 19)]",
              "explanation": "The twin primes between 10 and 20 are (11, 13) and (17, 19)."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef twin_primes(L, R):\n    primes = [i for i in range(L, R + 1) if is_prime(i)]\n    return [(p, p + 2) for p in primes if p + 2 <= R and is_prime(p + 2)]"
        },
        {
            "id": 19,
            "title": "Sum of Primes ≤ N",
            "description": "Given a number N, return the sum of all prime numbers less than or equal to N.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 0      |\n| 2         | 2   | 2      |\n| 3         | 3   | 5      |\n| 4         | 5   | 10     |\n| 5         | 10  | 17     |\n| 6         | 15  | 41     |\n| 7         | 20  | 77     |\n| 8         | 25  | 100    |\n| 9         | 30  | 129    |\n| 10        | 35  | 160    |\n| 11        | 40  | 197    |\n| 12        | 45  | 228    |\n| 13        | 50  | 328    |\n| 14        | 55  | 381    |\n| 15        | 60  | 440    |\n| 16        | 65  | 446    |\n| 17        | 70  | 568    |\n| 18        | 75  | 639    |\n| 19        | 80  | 712    |\n| 20        | 85  | 761    |\n| 21        | 90  | 822    |\n| 22        | 95  | 899    |\n| 23        | 100 | 1060   |\n| 24        | 110 | 1221   |\n| 25        | 120 | 1394   |\n| 26        | 130 | 1532   |\n| 27        | 140 | 1692   |\n| 28        | 150 | 1867   |\n| 29        | 160 | 1988   |\n| 30        | 170 | 2153   |\n| 31        | 180 | 2323   |\n| 32        | 190 | 2472   |\n| 33        | 200 | 4221   |\n| 34        | 210 | 4406   |\n| 35        | 220 | 4598   |\n| 36        | 230 | 4792   |\n| 37        | 240 | 4983   |\n| 38        | 250 | 5203   |\n| 39        | 260 | 5418   |\n| 40        | 270 | 5632   |",
            "example": {
              "input": "N = 10",
              "output": "17",
              "explanation": "Prime numbers ≤ 10 are [2, 3, 5, 7]; their sum is 17."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(N):\n    return sum(i for i in range(2, N+1) if is_prime(i))"
        },
        {
            "id": 20,
            "title": "Goldbach’s Conjecture",
            "description": "Given an even number ≥ 4, return one possible pair of prime numbers whose sum equals the given number. If multiple answers exist, return any.\n\n| Test Case | Even N | Output        |\n|-----------|--------|---------------|\n| 1         | 4      | (2, 2)        |\n| 2         | 6      | (3, 3)        |\n| 3         | 8      | (3, 5)        |\n| 4         | 10     | (3, 7)        |\n| 5         | 12     | (5, 7)        |\n| 6         | 14     | (3, 11)       |\n| 7         | 16     | (5, 11)       |\n| 8         | 18     | (5, 13)       |\n| 9         | 20     | (3, 17)       |\n| 10        | 22     | (3, 19)       |\n| 11        | 24     | (5, 19)       |\n| 12        | 26     | (3, 23)       |\n| 13        | 28     | (5, 23)       |\n| 14        | 30     | (7, 23)       |\n| 15        | 32     | (3, 29)       |\n| 16        | 34     | (5, 29)       |\n| 17        | 36     | (5, 31)       |\n| 18        | 38     | (7, 31)       |\n| 19        | 40     | (3, 37)       |\n| 20        | 42     | (5, 37)       |\n| 21        | 44     | (3, 41)       |\n| 22        | 46     | (5, 41)       |\n| 23        | 48     | (7, 41)       |\n| 24        | 50     | (3, 47)       |\n| 25        | 52     | (5, 47)       |\n| 26        | 54     | (7, 47)       |\n| 27        | 56     | (3, 53)       |\n| 28        | 58     | (5, 53)       |\n| 29        | 60     | (7, 53)       |\n| 30        | 62     | (3, 59)       |\n| 31        | 64     | (5, 59)       |\n| 32        | 66     | (7, 59)       |\n| 33        | 68     | (3, 65)       |\n| 34        | 70     | (11, 59)      |\n| 35        | 72     | (17, 55)      |\n| 36        | 74     | (7, 67)       |\n| 37        | 76     | (3, 73)       |\n| 38        | 78     | (5, 73)       |\n| 39        | 80     | (7, 73)       |\n| 40        | 82     | (11, 71)      |",
            "example": {
              "input": "N = 20",
              "output": "(3, 17)",
              "explanation": "3 and 17 are primes and their sum is 20."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef goldbach_pair(n):\n    for i in range(2, n//2 + 1):\n        if is_prime(i) and is_prime(n - i):\n            return (i, n - i)\n    return None"
        },
        {
            "id": 21,
            "title": "Compute (a × b) % mod Without Overflow",
            "description": "Given three integers a, b, and mod, compute (a × b) % mod efficiently, avoiding overflow for very large numbers.\n\n| Test Case | a        | b        | mod      | Output     |\n|-----------|----------|----------|----------|------------|\n| 1         | 2        | 3        | 5        | 1          |\n| 2         | 123456   | 654321   | 1000003  | 40889      |\n| 3         | 10       | 10       | 7        | 2          |\n| 4         | 1e9      | 1e9      | 1e9+7    | 49         |\n| 5         | 99999999 | 88888888 | 998244353| 935682630  |\n| 6         | 2        | 1e18     | 1000003  | 680556     |\n| 7         | 987654   | 123456   | 100003   | 81847      |\n| 8         | 99999    | 99999    | 99991    | 73747      |\n| 9         | 7        | 6        | 13       | 3          |\n| 10        | 500      | 400      | 77       | 40         |\n| 11        | 32767    | 32767    | 32749    | 36         |\n| 12        | 1000000000 | 1000000000 | 1000000007 | 49     |\n| 13        | 10       | 20       | 17       | 13         |\n| 14        | 2**30    | 2**30    | 1e9+7    | 774224557  |\n| 15        | 123      | 456      | 789      | 69         |\n| 16        | 1        | 1        | 1        | 0          |\n| 17        | 98765    | 43210    | 987      | 710        |\n| 18        | 314159   | 271828   | 1000000  | 369412     |\n| 19        | 500      | 500      | 997      | 51         |\n| 20        | 60000    | 70000    | 100003   | 70001      |\n| 21        | 111      | 222      | 333      | 147        |\n| 22        | 222      | 333      | 444      | 270        |\n| 23        | 1e5      | 1e5      | 998244353| 755165876  |\n| 24        | 6789     | 9876     | 12345    | 9549       |\n| 25        | 33333    | 44444    | 55555    | 5007       |\n| 26        | 2        | 2        | 2        | 0          |\n| 27        | 1024     | 1024     | 2048     | 0          |\n| 28        | 2023     | 2023     | 10007    | 5584       |\n| 29        | 55555    | 44444    | 99991    | 19763      |\n| 30        | 999999   | 888888   | 777777   | 624264     |\n| 31        | 10001    | 10001    | 99991    | 9462       |\n| 32        | 56789    | 12345    | 1e6+3    | 483165     |\n| 33        | 1e9+6    | 1e9+6    | 1e9+7    | 1          |\n| 34        | 3141     | 2718     | 10007    | 5561       |\n| 35        | 6789     | 9876     | 1009     | 64         |\n| 36        | 42       | 42       | 43       | 1          |\n| 37        | 12345    | 54321    | 65536    | 58905      |\n| 38        | 999      | 999      | 1234     | 487        |\n| 39        | 321      | 123      | 999      | 483        |\n| 40        | 111      | 111      | 999      | 321        |",
            "example": {
              "input": "a = 123456, b = 654321, mod = 1000003",
              "output": "40889",
              "explanation": "(123456 × 654321) % 1000003 = 80811815776 % 1000003 = 40889"
            },
            "answer": "def mod_mult(a, b, mod):\n    return (a % mod) * (b % mod) % mod"
        },
        {
            "id": 22,
            "title": "Modular Exponentiation (a^b % mod)",
            "description": "Given integers a, b, and mod, compute (a^b) % mod efficiently.\n\n| Test Case | a   | b   | mod      | Output   |\n|-----------|-----|-----|----------|----------|\n| 1         | 2   | 3   | 5        | 3        |\n| 2         | 5   | 3   | 13       | 8        |\n| 3         | 2   | 10  | 1000     | 24       |\n| 4         | 10  | 9   | 6        | 4        |\n| 5         | 3   | 7   | 11       | 9        |\n| 6         | 7   | 6   | 13       | 9        |\n| 7         | 4   | 13  | 497      | 445      |\n| 8         | 2   | 100 | 1009     | 949      |\n| 9         | 3   | 200 | 1009     | 808      |\n| 10        | 2   | 500 | 998244353| 352668376|\n| 11        | 7   | 13  | 123      | 112      |\n| 12        | 9   | 9   | 19       | 11       |\n| 13        | 8   | 8   | 8        | 0        |\n| 14        | 2   | 100000 | 1000000007 | 607723520|\n| 15        | 2   | 1e6 | 998244353| 371010124|\n| 16        | 10  | 5   | 11       | 10       |\n| 17        | 2   | 20  | 100      | 76       |\n| 18        | 3   | 100 | 17       | 16       |\n| 19        | 7   | 10  | 13       | 3        |\n| 20        | 17  | 3   | 19       | 11       |\n| 21        | 5   | 10  | 13       | 5        |\n| 22        | 1   | 1e6 | 99991    | 1        |\n| 23        | 100 | 100 | 101      | 1        |\n| 24        | 123 | 456 | 789      | 699      |\n| 25        | 99  | 99  | 999      | 738      |\n| 26        | 77  | 88  | 999      | 905      |\n| 27        | 3   | 333 | 444      | 219      |\n| 28        | 23  | 57  | 10007    | 8254     |\n| 29        | 2   | 2   | 2        | 0        |\n| 30        | 4   | 4   | 5        | 1        |\n| 31        | 10  | 3   | 3        | 1        |\n| 32        | 7   | 7   | 9        | 4        |\n| 33        | 11  | 11  | 12       | 1        |\n| 34        | 6   | 6   | 11       | 3        |\n| 35        | 9   | 7   | 13       | 3        |\n| 36        | 2   | 30  | 17       | 4        |\n| 37        | 19  | 12  | 23       | 4        |\n| 38        | 123 | 456 | 789      | 699      |\n| 39        | 555 | 444 | 333      | 84       |\n| 40        | 8   | 8   | 100      | 96       |",
            "example": {
              "input": "a = 2, b = 10, mod = 1000",
              "output": "24",
              "explanation": "2^10 = 1024, and 1024 % 1000 = 24"
            },
            "answer": "def mod_pow(a, b, mod):\n    result = 1\n    a = a % mod\n    while b > 0:\n        if b % 2 == 1:\n            result = (result * a) % mod\n        a = (a * a) % mod\n        b //= 2\n    return result"
        },
        {
            "id": 23,
            "title": "Find Modular Inverse of A mod M",
            "description": "Given integers A and M, find the modular inverse of A modulo M. The result is an integer X such that (A × X) % M = 1.\n\n| Test Case | A   | M   | Output |\n|-----------|-----|-----|--------|\n| 1         | 3   | 11  | 4      |\n| 2         | 10  | 17  | 12     |\n| 3         | 7   | 13  | 2      |\n| 4         | 9   | 23  | 18     |\n| 5         | 2   | 5   | 3      |\n| 6         | 1   | 7   | 1      |\n| 7         | 4   | 7   | 2      |\n| 8         | 5   | 12  | 5      |\n| 9         | 17  | 31  | 11     |\n| 10        | 19  | 29  | 26     |\n| 11        | 13  | 17  | 4      |\n| 12        | 99  | 101 | 71     |\n| 13        | 123 | 1009| 892    |\n| 14        | 7   | 26  | 15     |\n| 15        | 8   | 21  | 8      |\n| 16        | 15  | 26  | 7      |\n| 17        | 26  | 99  | 42     |\n| 18        | 49  | 101 | 33     |\n| 19        | 88  | 123 | 37     |\n| 20        | 42  | 91  | 13     |\n| 21        | 35  | 97  | 50     |\n| 22        | 11  | 13  | 6      |\n| 23        | 23  | 100 | 87     |\n| 24        | 21  | 26  | 5      |\n| 25        | 101 | 103| 61     |\n| 26        | 123 | 157| 38     |\n| 27        | 99  | 121| 100     |\n| 28        | 55  | 73 | 48     |\n| 29        | 66  | 97 | 86     |\n| 30        | 77  | 89 | 77     |\n| 31        | 100 | 101| 100     |\n| 32        | 200 | 211| 74     |\n| 33        | 321 | 401| 154     |\n| 34        | 555 | 701| 222     |\n| 35        | 666 | 777| 334     |\n| 36        | 789 | 997| 238     |\n| 37        | 99  | 125| 114     |\n| 38        | 1   | 2  | 1      |\n| 39        | 9   | 10 | None   |\n| 40        | 10  | 20 | None   |",
            "example": {
              "input": "A = 3, M = 11",
              "output": "4",
              "explanation": "Because (3 × 4) % 11 = 12 % 11 = 1"
            },
            "answer": "def mod_inverse(a, m):\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return g, x, y\n\n    g, x, _ = extended_gcd(a, m)\n    if g != 1:\n        return None  # Inverse doesn't exist\n    else:\n        return x % m"
        },
        {
            "id": 24,
            "title": "Compute nCr % mod (Using Fermat's Little Theorem)",
            "description": "Given n, r and a prime mod, compute nCr % mod using Fermat's Little Theorem.\n\n| Test Case | n   | r   | mod  | Output |\n|-----------|-----|-----|------|--------|\n| 1         | 5   | 2   | 13   | 10     |\n| 2         | 10  | 3   | 17   | 3      |\n| 3         | 7   | 0   | 19   | 1      |\n| 4         | 7   | 7   | 19   | 1      |\n| 5         | 12  | 4   | 17   | 1      |\n| 6         | 20  | 10  | 101  | 94     |\n| 7         | 30  | 15  | 97   | 80     |\n| 8         | 100 | 50  | 101  | 56     |\n| 9         | 15  | 3   | 23   | 21     |\n| 10        | 25  | 5   | 29   | 12     |\n| 11        | 35  | 7   | 31   | 6      |\n| 12        | 40  | 20  | 59   | 18     |\n| 13        | 60  | 30  | 71   | 2      |\n| 14        | 80  | 40  | 89   | 25     |\n| 15        | 120 | 60  | 97   | 46     |\n| 16        | 50  | 25  | 101  | 12     |\n| 17        | 75  | 35  | 103  | 34     |\n| 18        | 90  | 45  | 107  | 83     |\n| 19        | 200 | 100 | 1009 | 540    |\n| 20        | 300 | 150 | 1009 | 400    |\n| 21        | 400 | 200 | 1009 | 38     |\n| 22        | 500 | 250 | 1009 | 515    |\n| 23        | 600 | 300 | 1009 | 63     |\n| 24        | 700 | 350 | 1009 | 28     |\n| 25        | 800 | 400 | 1009 | 981    |\n| 26        | 900 | 450 | 1009 | 84     |\n| 27        | 1000| 500 | 1009 | 673    |\n| 28        | 1100| 550 | 1009 | 17     |\n| 29        | 1200| 600 | 1009 | 218    |\n| 30        | 1300| 650 | 1009 | 322    |\n| 31        | 1400| 700 | 1009 | 709    |\n| 32        | 1500| 750 | 1009 | 241    |\n| 33        | 1600| 800 | 1009 | 438    |\n| 34        | 1700| 850 | 1009 | 978    |\n| 35        | 1800| 900 | 1009 | 491    |\n| 36        | 1900| 950 | 1009 | 119    |\n| 37        | 2000| 1000| 1009 | 330    |\n| 38        | 2100| 1050| 1009 | 876    |\n| 39        | 2200| 1100| 1009 | 204    |\n| 40        | 2300| 1150| 1009 | 777    |",
            "example": {
              "input": "n = 5, r = 2, mod = 13",
              "output": "10",
              "explanation": "5C2 = 10, and 10 % 13 = 10."
            },
            "answer": "def power(x, y, p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y >>= 1\n        x = (x * x) % p\n    return res\n\ndef nCr_mod(n, r, mod):\n    if r > n:\n        return 0\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = (fact[i - 1] * i) % mod\n    num = fact[n]\n    den = (power(fact[r], mod - 2, mod) * power(fact[n - r], mod - 2, mod)) % mod\n    return (num * den) % mod"
        },
        {
            "id": 25,
            "title": "Modular division: Compute (a / b) % mod",
            "description": "Given integers a, b, and mod (where mod is prime), compute (a / b) % mod using Fermat's Little Theorem.\n\n| Test Case | a   | b   | mod  | Output |\n|-----------|-----|-----|------|--------|\n| 1         | 10  | 2   | 13   | 5      |\n| 2         | 15  | 3   | 17   | 5      |\n| 3         | 8   | 4   | 7    | 2      |\n| 4         | 9   | 6   | 11   | 8      |\n| 5         | 100 | 25  | 101  | 4      |\n| 6         | 50  | 5   | 11   | 6      |\n| 7         | 20  | 2   | 17   | 10     |\n| 8         | 30  | 10  | 19   | 14     |\n| 9         | 25  | 5   | 7    | 1      |\n| 10        | 12  | 3   | 13   | 4      |\n| 11        | 18  | 3   | 11   | 6      |\n| 12        | 40  | 8   | 19   | 11     |\n| 13        | 60  | 6   | 7    | 2      |\n| 14        | 99  | 3   | 17   | 8      |\n| 15        | 120 | 24  | 19   | 15     |\n| 16        | 180 | 30  | 13   | 8      |\n| 17        | 144 | 12  | 17   | 3      |\n| 18        | 200 | 5   | 23   | 4      |\n| 19        | 500 | 25  | 29   | 7      |\n| 20        | 50  | 5   | 13   | 10     |\n| 21        | 120 | 60  | 101  | 99     |\n| 22        | 25  | 5   | 19   | 8      |\n| 23        | 80  | 8   | 17   | 5      |\n| 24        | 100 | 20  | 23   | 6      |\n| 25        | 160 | 8   | 7    | 4      |\n| 26        | 300 | 150 | 13   | 3      |\n| 27        | 500 | 50  | 19   | 2      |\n| 28        | 600 | 100 | 23   | 17     |\n| 29        | 700 | 35  | 7    | 5      |\n| 30        | 80  | 40  | 11   | 8      |\n| 31        | 900 | 450 | 13   | 9      |\n| 32        | 1000| 500 | 17   | 1      |\n| 33        | 1100| 550 | 101  | 32     |\n| 34        | 1200| 600 | 17   | 14     |\n| 35        | 1300| 650 | 19   | 5      |\n| 36        | 1400| 700 | 13   | 9      |\n| 37        | 1500| 750 | 23   | 12     |\n| 38        | 1600| 800 | 17   | 3      |\n| 39        | 1700| 850 | 11   | 4      |\n| 40        | 1800| 900 | 7    | 3      |",
            "example": {
              "input": "a = 10, b = 2, mod = 13",
              "output": "5",
              "explanation": "10 / 2 mod 13 = 5 since 2⁻¹ mod 13 = 7, and 10 * 7 % 13 = 5."
            },
            "answer": "def mod_inverse(b, mod):\n    return pow(b, mod - 2, mod)\n\ndef mod_divide(a, b, mod):\n    return (a * mod_inverse(b, mod)) % mod"
        },
        {
            "id": 26,
            "title": "Check divisibility using modular arithmetic",
            "description": "Check if a number n is divisible by d using modular arithmetic.\n\n| Test Case | n   | d   | Output |\n|-----------|-----|-----|--------|\n| 1         | 10  | 2   | True   |\n| 2         | 15  | 4   | False  |\n| 3         | 100 | 10  | True   |\n| 4         | 99  | 3   | True   |\n| 5         | 123 | 11  | False  |\n| 6         | 50  | 5   | True   |\n| 7         | 100 | 5   | True   |\n| 8         | 70  | 7   | True   |\n| 9         | 88  | 11  | True   |\n| 10        | 65  | 13  | False  |\n| 11        | 200 | 5   | True   |\n| 12        | 150 | 25  | True   |\n| 13        | 12  | 3   | True   |\n| 14        | 300 | 50  | True   |\n| 15        | 500 | 25  | True   |\n| 16        | 36  | 4   | True   |\n| 17        | 82  | 41  | True   |\n| 18        | 99  | 9   | True   |\n| 19        | 72  | 9   | True   |\n| 20        | 110 | 5   | True   |\n| 21        | 133 | 7   | True   |\n| 22        | 67  | 3   | False  |\n| 23        | 900 | 5   | True   |\n| 24        | 980 | 7   | True   |\n| 25        | 200 | 8   | False  |\n| 26        | 600 | 100 | True   |\n| 27        | 740 | 20  | True   |\n| 28        | 1300| 13  | True   |\n| 29        | 1600| 10  | True   |\n| 30        | 1200| 5   | True   |\n| 31        | 3000| 100 | True   |\n| 32        | 1000| 50  | True   |\n| 33        | 1800| 3   | True   |\n| 34        | 1500| 25  | True   |\n| 35        | 800 | 4   | True   |\n| 36        | 500 | 20  | True   |\n| 37        | 600 | 30  | True   |\n| 38        | 700 | 50  | True   |\n| 39        | 120 | 12  | True   |\n| 40        | 1000| 50  | True   |",
            "example": {
              "input": "n = 100, d = 10",
              "output": "True",
              "explanation": "100 is divisible by 10."
            },
            "answer": "def is_divisible(n, d):\n    return n % d == 0"
        },
        {
            "id": 27,
            "title": "Prefix sum modulo K to count subarrays divisible by K",
            "description": "Given an array of integers, find the number of subarrays whose sum is divisible by K using the prefix sum approach.\n\n| Test Case | Array             | K   | Output |\n|-----------|-------------------|-----|--------|\n| 1         | [1, 2, 3, 4, 5]   | 5   | 2      |\n| 2         | [1, 1, 1, 1, 1]   | 2   | 5      |\n| 3         | [1, 2, 3, 4, 5]   | 3   | 4      |\n| 4         | [5, 10, 15, 20]   | 5   | 4      |\n| 5         | [1, 2, 3, 4, 5]   | 6   | 3      |\n| 6         | [1, 1, 1, 1, 1]   | 3   | 3      |\n| 7         | [1, 2, 3, 4, 5]   | 7   | 2      |\n| 8         | [2, 4, 6, 8, 10]  | 4   | 5      |\n| 9         | [5, 5, 5, 5, 5]   | 5   | 10     |\n| 10        | [10, 20, 30]      | 10  | 6      |\n| 11        | [7, 8, 9, 10]     | 5   | 3      |\n| 12        | [5, 10, 5, 10]    | 10  | 4      |\n| 13        | [4, 8, 12, 16]    | 4   | 10     |\n| 14        | [1, 2, 3, 4]      | 3   | 2      |\n| 15        | [5, 5, 5, 5]      | 5   | 10     |\n| 16        | [9, 18, 27, 36]   | 9   | 6      |\n| 17        | [3, 6, 9, 12]     | 3   | 10     |\n| 18        | [1, 2, 3]         | 4   | 1      |\n| 19        | [6, 7, 8, 9]      | 6   | 3      |\n| 20        | [1, 1, 1, 1, 1]   | 1   | 15     |\n| 21        | [1, 3, 6, 10]     | 5   | 3      |\n| 22        | [5, 5, 5, 5, 5]   | 5   | 10     |\n| 23        | [2, 4, 6, 8]      | 4   | 6      |\n| 24        | [7, 14, 21, 28]   | 7   | 6      |\n| 25        | [1, 3, 5, 7]      | 4   | 1      |\n| 26        | [5, 10, 15]       | 5   | 4      |\n| 27        | [8, 16, 24, 32]   | 8   | 10     |\n| 28        | [2, 4, 6, 8]      | 2   | 10     |\n| 29        | [1, 2, 3, 4]      | 4   | 2      |\n| 30        | [6, 12, 18]       | 6   | 6      |\n| 31        | [9, 18, 27]       | 9   | 4      |\n| 32        | [4, 8, 12]        | 4   | 6      |\n| 33        | [11, 22, 33]      | 11  | 3      |\n| 34        | [5, 10, 15, 20]   | 5   | 4      |\n| 35        | [1, 1, 1, 1]      | 2   | 3      |\n| 36        | [3, 6, 9]         | 3   | 3      |\n| 37        | [10, 20, 30]      | 10  | 6      |\n| 38        | [4, 8, 12, 16]    | 4   | 10     |\n| 39        | [2, 4, 6, 8, 10]  | 4   | 6      |\n| 40        | [3, 3, 3, 3]      | 3   | 10     |",
            "example": {
              "input": "[1, 2, 3, 4, 5], K = 5",
              "output": "2",
              "explanation": "Subarrays with sum divisible by 5 are [1, 2, 3, 4, 5] and [5]."
            },
            "answer": "def subarrays_divisible_by_k(arr, k):\n    prefix_sum = 0\n    count = 0\n    freq_map = {0: 1}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in freq_map:\n            count += freq_map[prefix_sum]\n        if prefix_sum not in freq_map:\n            freq_map[prefix_sum] = 0\n        freq_map[prefix_sum] += 1\n    return count"
        },
        {
            "id": 28,
            "title": "Count digits in N without converting to string",
            "description": "Given a number N, count the number of digits without converting the number to a string.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 1234 | 4      |\n| 2         | 7    | 1      |\n| 3         | 98765| 5      |\n| 4         | 1    | 1      |\n| 5         | 1000 | 4      |\n| 6         | 999  | 3      |\n| 7         | 25   | 2      |\n| 8         | 100  | 3      |\n| 9         | 5432 | 4      |\n| 10        | 10000| 5      |\n| 11        | 90   | 2      |\n| 12        | 56   | 2      |\n| 13        | 1    | 1      |\n| 14        | 456  | 3      |\n| 15        | 87542| 5      |\n| 16        | 1001 | 4      |\n| 17        | 700  | 3      |\n| 18        | 1000 | 4      |\n| 19        | 256  | 3      |\n| 20        | 78   | 2      |\n| 21        | 1500 | 4      |\n| 22        | 870  | 3      |\n| 23        | 543  | 3      |\n| 24        | 9999 | 4      |\n| 25        | 1000 | 4      |\n| 26        | 9876 | 4      |\n| 27        | 258  | 3      |\n| 28        | 357  | 3      |\n| 29        | 5000 | 4      |\n| 30        | 478  | 3      |\n| 31        | 112  | 3      |\n| 32        | 12345| 5      |\n| 33        | 800  | 3      |\n| 34        | 78   | 2      |\n| 35        | 159  | 3      |\n| 36        | 146  | 3      |\n| 37        | 567  | 3      |\n| 38        | 444  | 3      |\n| 39        | 320  | 3      |\n| 40        | 555  | 3      |",
            "example": {
              "input": "N = 1234",
              "output": "4",
              "explanation": "1234 has 4 digits."
            },
            "answer": "def count_digits(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count"
        },
        {
            "id": 29,
            "title": "Check if a number is a palindrome numerically",
            "description": "Given a number N, check if it is a palindrome numerically.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 121  | True   |\n| 2         | 123  | False  |\n| 3         | 98789| True   |\n| 4         | 1001 | True   |\n| 5         | 456  | False  |\n| 6         | 909  | True   |\n| 7         | 12   | False  |\n| 8         | 10   | False  |\n| 9         | 121  | True   |\n| 10        | 111  | True   |\n| 11        | 555  | True   |\n| 12        | 12321| True   |\n| 13        | 1    | True   |\n| 14        | 100  | False  |\n| 15        | 101  | True   |\n| 16        | 222  | True   |\n| 17        | 12345| False  |\n| 18        | 8778 | True   |\n| 19        | 88   | True   |\n| 20        | 123321| True   |\n| 21        | 55555| True   |\n| 22        | 99999| True   |\n| 23        | 10001| True   |\n| 24        | 22222| True   |\n| 25        | 33333| True   |\n| 26        | 44444| True   |\n| 27        | 55555| True   |\n| 28        | 9876 | False  |\n| 29        | 12121| True   |\n| 30        | 24242| False  |\n| 31        | 99   | True   |\n| 32        | 1001 | True   |\n| 33        | 34343| True   |\n| 34        | 555  | True   |\n| 35        | 67676| True   |\n| 36        | 1234 | False  |\n| 37        | 76567| True   |\n| 38        | 1001 | True   |\n| 39        | 23432| True   |\n| 40        | 88888| True   |",
            "example": {
              "input": "N = 121",
              "output": "True",
              "explanation": "121 is a palindrome."
            },
            "answer": "def is_palindrome(n):\n    reversed_num = 0\n    original = n\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num"
        },
        {
            "id": 30,
            "title": "Sum of digits until one digit remains (Digital Root)",
            "description": "Given a number N, compute the digital root, which is the sum of digits of N until a single digit remains.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 38   | 2      |\n| 2         | 123  | 6      |\n| 3         | 987  | 6      |\n| 4         | 9999 | 9      |\n| 5         | 1111 | 4      |\n| 6         | 255  | 3      |\n| 7         | 56   | 2      |\n| 8         | 19   | 1      |\n| 9         | 5    | 5      |\n| 10        | 32   | 5      |\n| 11        | 222  | 6      |\n| 12        | 49   | 4      |\n| 13        | 10   | 1      |\n| 14        | 102  | 3      |\n| 15        | 573  | 6      |\n| 16        | 777  | 3      |\n| 17        | 18   | 9      |\n| 18        | 99   | 9      |\n| 19        | 56   | 2      |\n| 20        | 23   | 5      |\n| 21        | 200  | 2      |\n| 22        | 129  | 3      |\n| 23        | 100  | 1      |\n| 24        | 444  | 3      |\n| 25        | 891  | 9      |\n| 26        | 1001 | 2      |\n| 27        | 557  | 7      |\n| 28        | 782  | 8      |\n| 29        | 456  | 6      |\n| 30        | 233  | 8      |\n| 31        | 156  | 3      |\n| 32        | 135  | 9      |\n| 33        | 912  | 3      |\n| 34        | 678  | 3      |\n| 35        | 843  | 6      |\n| 36        | 118  | 1      |\n| 37        | 412  | 7      |\n| 38        | 892  | 1      |\n| 39        | 147  | 3      |\n| 40        | 9999 | 9      |",
            "example": {
              "input": "N = 123",
              "output": "6",
              "explanation": "1 + 2 + 3 = 6, which is a single digit."
            },
            "answer": "def digital_root(n):\n    while n >= 10:\n        n = sum(int(digit) for digit in str(n))\n    return n"
        },
        {
            "id": 31,
            "title": "Find N-th Fibonacci modulo M",
            "description": "Given two integers N and M, find the N-th Fibonacci number modulo M.\n\n| Test Case | N    | M   | Output |\n|-----------|------|-----|--------|\n| 1         | 5    | 10  | 5      |\n| 2         | 10   | 100 | 55     |\n| 3         | 20   | 100 | 6765   |\n| 4         | 15   | 100 | 610    |\n| 5         | 25   | 10  | 5      |\n| 6         | 30   | 1000| 832040 |\n| 7         | 50   | 1000| 365010934 |\n| 8         | 100  | 1000| 354224848179261915075 |\n| 9         | 7    | 5   | 3      |\n| 10        | 12   | 100 | 144    |\n| 11        | 14   | 10  | 3      |\n| 12        | 17   | 100 | 1597   |\n| 13        | 20   | 100 | 6765   |\n| 14        | 25   | 50  | 20     |\n| 15        | 9    | 3   | 1      |\n| 16        | 5    | 100 | 5      |\n| 17        | 30   | 100 | 832040 |\n| 18        | 19   | 100 | 4181   |\n| 19        | 40   | 50  | 28     |\n| 20        | 60   | 100 | 1548008755920 |\n| 21        | 3    | 5   | 3      |\n| 22        | 6    | 50  | 21     |\n| 23        | 15   | 100 | 610    |\n| 24        | 8    | 10  | 1      |\n| 25        | 9    | 5   | 1      |\n| 26        | 2    | 2   | 1      |\n| 27        | 35   | 1000| 14930352 |\n| 28        | 28   | 100 | 317811 |\n| 29        | 13   | 1000| 233    |\n| 30        | 33   | 1000| 3524578 |\n| 31        | 10   | 100 | 55     |\n| 32        | 20   | 100 | 6765   |\n| 33        | 11   | 50  | 21     |\n| 34        | 23   | 1000| 46368  |\n| 35        | 26   | 1000| 121393 |\n| 36        | 18   | 50  | 177    |\n| 37        | 29   | 100 | 832040 |\n| 38        | 40   | 500 | 219678 |\n| 39        | 44   | 1000| 701408733 |\n| 40        | 60   | 10  | 4      |",
            "example": {
              "input": "N = 10, M = 100",
              "output": "55",
              "explanation": "The 10th Fibonacci number is 55."
            },
            "answer": "def fib_mod(n, m):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, (a + b) % m\n    return a"
        },
        {
            "id": 32,
            "title": "Count trailing zeroes in factorial of N",
            "description": "Given an integer N, find the number of trailing zeroes in N!. The trailing zeroes are created by factors of 10, which are the result of multiplying 2 and 5.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 5    | 1      |\n| 2         | 10   | 2      |\n| 3         | 20   | 4      |\n| 4         | 25   | 6      |\n| 5         | 100  | 24     |\n| 6         | 50   | 12     |\n| 7         | 15   | 3      |\n| 8         | 200  | 49     |\n| 9         | 1000 | 249    |\n| 10        | 500  | 124    |\n| 11        | 200  | 49     |\n| 12        | 300  | 74     |\n| 13        | 123  | 28     |\n| 14        | 1    | 0      |\n| 15        | 3    | 0      |\n| 16        | 8    | 1      |\n| 17        | 7    | 1      |\n| 18        | 20   | 4      |\n| 19        | 150  | 37     |\n| 20        | 350  | 87     |\n| 21        | 40   | 9      |\n| 22        | 85   | 20     |\n| 23        | 175  | 42     |\n| 24        | 7    | 1      |\n| 25        | 16   | 3      |\n| 26        | 33   | 7      |\n| 27        | 60   | 14     |\n| 28        | 72   | 15     |\n| 29        | 96   | 22     |\n| 30        | 50   | 12     |\n| 31        | 10   | 2      |\n| 32        | 100  | 24     |\n| 33        | 32   | 7      |\n| 34        | 72   | 15     |\n| 35        | 125  | 31     |\n| 36        | 200  | 49     |\n| 37        | 150  | 37     |\n| 38        | 600  | 149    |\n| 39        | 1000 | 249    |\n| 40        | 250  | 62     |",
            "example": {
              "input": "N = 100",
              "output": "24",
              "explanation": "100! has 24 trailing zeroes."
            },
            "answer": "def trailing_zeroes(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count"
        },
        {
            "id": 33,
            "title": "Compute Factorial of Large Numbers",
            "description": "Given an integer N, compute the factorial of N. Since factorial values grow very large, return it as a string.\n\n| Test Case | N   | Output (last 6 digits) |\n|-----------|-----|------------------------|\n| 1         | 1   | 1                      |\n| 2         | 2   | 2                      |\n| 3         | 3   | 6                      |\n| 4         | 5   | 120                    |\n| 5         | 6   | 720                    |\n| 6         | 7   | 5040                   |\n| 7         | 10  | 3628800                |\n| 8         | 12  | 479001600              |\n| 9         | 15  | 1307674368000          |\n| 10        | 17  | 355687428096000        |\n| 11        | 18  | 6402373705728000       |\n| 12        | 19  | 121645100408832000     |\n| 13        | 20  | 2432902008176640000    |\n| 14        | 21  | 51090942171709440000   |\n| 15        | 22  | 1124000727777607680000 |\n| 16        | 23  | 25852016738884976640000|\n| 17        | 24  | 620448401733239439360000|\n| 18        | 25  | 15511210043330985984000000|\n| 19        | 30  | 265252859812191058636308480000000|\n| 20        | 35  | 10333147966386144929666651337523200000000|\n| 21        | 40  | 815915283247897734345611269596115894272000000000|\n| 22        | 45  | 119622220865480194561963161495657715064383733760000000000|\n| 23        | 50  | 30414093201713378043612608166064768844377641568960512000000000000|\n| 24        | 55  | 1.2696403353658276e+73 |\n| 25        | 60  | 8.32098711274139e+81   |\n| 26        | 65  | 8.24765059208247e+89   |\n| 27        | 70  | 1.19785716699699e+99   |\n| 28        | 75  | 2.48091408113954e+110  |\n| 29        | 80  | 7.15694570462638e+120  |\n| 30        | 85  | 3.67001722896041e+131  |\n| 31        | 90  | 1.48571596448176e+142  |\n| 32        | 95  | 1.03299784882391e+153  |\n| 33        | 100 | 9.33262154439441e+157  |\n| 34        | 110 | 9.45993998465871e+177  |\n| 35        | 120 | 6.68950291344913e+198  |\n| 36        | 130 | 2.61550412860534e+220  |\n| 37        | 140 | 1.34620124757175e+242  |\n| 38        | 150 | 5.71338395644585e+263  |\n| 39        | 160 | 2.92102484338015e+285  |\n| 40        | 170 | 7.257415615308e+306    |",
            "example": {
              "input": "N = 10",
              "output": "3628800",
              "explanation": "10! = 3628800"
            },
            "answer": "def factorial_large(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return str(result)"
        },
        {
            "id": 34,
            "title": "Number of Divisors of N",
            "description": "Given an integer N, find the total number of its divisors.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 1      |\n| 2         | 2   | 2      |\n| 3         | 3   | 2      |\n| 4         | 4   | 3      |\n| 5         | 5   | 2      |\n| 6         | 6   | 4      |\n| 7         | 8   | 4      |\n| 8         | 9   | 3      |\n| 9         | 10  | 4      |\n| 10        | 12  | 6      |\n| 11        | 15  | 4      |\n| 12        | 16  | 5      |\n| 13        | 18  | 6      |\n| 14        | 20  | 6      |\n| 15        | 21  | 4      |\n| 16        | 24  | 8      |\n| 17        | 25  | 3      |\n| 18        | 28  | 6      |\n| 19        | 30  | 8      |\n| 20        | 32  | 6      |\n| 21        | 36  | 9      |\n| 22        | 40  | 8      |\n| 23        | 44  | 6      |\n| 24        | 45  | 6      |\n| 25        | 48  | 10     |\n| 26        | 50  | 6      |\n| 27        | 60  | 12     |\n| 28        | 64  | 7      |\n| 29        | 72  | 12     |\n| 30        | 75  | 6      |\n| 31        | 80  | 10     |\n| 32        | 90  | 12     |\n| 33        | 96  | 12     |\n| 34        | 100 | 9      |\n| 35        | 120 | 16     |\n| 36        | 150 | 12     |\n| 37        | 180 | 18     |\n| 38        | 200 | 12     |\n| 39        | 225 | 9      |\n| 40        | 256 | 9      |",
            "example": {
              "input": "N = 36",
              "output": "9",
              "explanation": "36 has 9 divisors: 1, 2, 3, 4, 6, 9, 12, 18, 36"
            },
            "answer": "def count_divisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 2 if i != n // i else 1\n        i += 1\n    return count"
        },
        {
            "id": 35,
            "title": "Sum of Divisors of N",
            "description": "Given an integer N, find the sum of all its positive divisors.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 1      |\n| 2         | 2   | 3      |\n| 3         | 3   | 4      |\n| 4         | 4   | 7      |\n| 5         | 5   | 6      |\n| 6         | 6   | 12     |\n| 7         | 7   | 8      |\n| 8         | 8   | 15     |\n| 9         | 9   | 13     |\n| 10        | 10  | 18     |\n| 11        | 11  | 12     |\n| 12        | 12  | 28     |\n| 13        | 14  | 24     |\n| 14        | 15  | 24     |\n| 15        | 16  | 31     |\n| 16        | 18  | 39     |\n| 17        | 20  | 42     |\n| 18        | 24  | 60     |\n| 19        | 25  | 31     |\n| 20        | 28  | 56     |\n| 21        | 30  | 72     |\n| 22        | 32  | 63     |\n| 23        | 36  | 91     |\n| 24        | 40  | 98     |\n| 25        | 45  | 78     |\n| 26        | 48  | 124    |\n| 27        | 50  | 93     |\n| 28        | 60  | 168    |\n| 29        | 64  | 127    |\n| 30        | 72  | 195    |\n| 31        | 80  | 186    |\n| 32        | 90  | 234    |\n| 33        | 96  | 252    |\n| 34        | 100 | 217    |\n| 35        | 120 | 360    |\n| 36        | 150 | 372    |\n| 37        | 180 | 546    |\n| 38        | 200 | 465    |\n| 39        | 225 | 403    |\n| 40        | 256 | 511    |",
            "example": {
              "input": "N = 28",
              "output": "56",
              "explanation": "The divisors of 28 are 1, 2, 4, 7, 14, 28. Their sum is 56."
            },
            "answer": "def sum_of_divisors(n):\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n        i += 1\n    return total"
        },
        {
            "id": 36,
            "title": "Count Numbers with Exactly 3 Divisors",
            "description": "Given an integer N, count how many numbers from 1 to N have exactly 3 positive divisors. A number has exactly 3 divisors if it is the square of a prime number.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 0      |\n| 2         | 2   | 0      |\n| 3         | 0   | 0      |\n| 4         | 1   | 1      |\n| 5         | 1   | 1      |\n| 6         | 1   | 1      |\n| 7         | 1   | 1      |\n| 8         | 1   | 1      |\n| 9         | 2   | 2      |\n| 10        | 2   | 2      |\n| 11        | 2   | 2      |\n| 12        | 2   | 2      |\n| 13        | 2   | 2      |\n| 14        | 2   | 2      |\n| 15        | 2   | 2      |\n| 16        | 2   | 2      |\n| 17        | 2   | 2      |\n| 18        | 2   | 2      |\n| 19        | 2   | 2      |\n| 20        | 2   | 2      |\n| 21        | 2   | 2      |\n| 22        | 2   | 2      |\n| 23        | 2   | 2      |\n| 24        | 2   | 2      |\n| 25        | 3   | 3      |\n| 26        | 3   | 3      |\n| 27        | 3   | 3      |\n| 28        | 3   | 3      |\n| 29        | 3   | 3      |\n| 30        | 3   | 3      |\n| 31        | 3   | 3      |\n| 32        | 3   | 3      |\n| 33        | 3   | 3      |\n| 34        | 3   | 3      |\n| 35        | 3   | 3      |\n| 36        | 3   | 3      |\n| 37        | 3   | 3      |\n| 38        | 3   | 3      |\n| 39        | 3   | 3      |\n| 40        | 3   | 3      |",
            "example": {
              "input": "N = 49",
              "output": "4",
              "explanation": "The numbers with exactly 3 divisors up to 49 are 4, 9, 25, and 49."
            },
            "answer": "import math\n\ndef count_exactly_3_divisors(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime(i):\n            if i * i <= n:\n                count += 1\n    return count"
        },
        {
            "id": 37,
            "title": "Check if a Number is a Power of 2",
            "description": "Given an integer N, determine if it is a power of 2.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | False  |\n| 2         | 1   | True   |\n| 3         | 2   | True   |\n| 4         | 3   | False  |\n| 5         | 4   | True   |\n| 6         | 5   | False  |\n| 7         | 6   | False  |\n| 8         | 7   | False  |\n| 9         | 8   | True   |\n| 10        | 9   | False  |\n| 11        | 10  | False  |\n| 12        | 11  | False  |\n| 13        | 12  | False  |\n| 14        | 13  | False  |\n| 15        | 14  | False  |\n| 16        | 15  | False  |\n| 17        | 16  | True   |\n| 18        | 17  | False  |\n| 19        | 18  | False  |\n| 20        | 19  | False  |\n| 21        | 20  | False  |\n| 22        | 21  | False  |\n| 23        | 22  | False  |\n| 24        | 23  | False  |\n| 25        | 24  | False  |\n| 26        | 25  | False  |\n| 27        | 26  | False  |\n| 28        | 27  | False  |\n| 29        | 28  | False  |\n| 30        | 29  | False  |\n| 31        | 30  | False  |\n| 32        | 31  | False  |\n| 33        | 32  | True   |\n| 34        | 33  | False  |\n| 35        | 34  | False  |\n| 36        | 35  | False  |\n| 37        | 36  | False  |\n| 38        | 37  | False  |\n| 39        | 38  | False  |\n| 40        | 39  | False  |",
            "example": {
              "input": "N = 16",
              "output": "True",
              "explanation": "16 is 2 raised to the power 4."
            },
            "answer": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0"
        },
        {
            "id": 38,
            "title": "Count Numbers ≤ N Divisible by A or B",
            "description": "Given integers N, A, and B, count how many numbers from 1 to N are divisible by A or B.\n\n| Test Case | N   | A | B | Output |\n|-----------|-----|---|---|--------|\n| 1         | 10  | 2 | 3 | 7      |\n| 2         | 15  | 2 | 5 | 9      |\n| 3         | 20  | 4 | 6 | 10     |\n| 4         | 25  | 5 | 7 | 11     |\n| 5         | 30  | 3 | 4 | 17     |\n| 6         | 35  | 5 | 6 | 17     |\n| 7         | 40  | 2 | 8 | 25     |\n| 8         | 45  | 3 | 5 | 27     |\n| 9         | 50  | 5 | 10| 15     |\n| 10        | 55  | 4 | 6 | 27     |\n| 11        | 60  | 3 | 7 | 34     |\n| 12        | 65  | 5 | 9 | 27     |\n| 13        | 70  | 2 | 5 | 42     |\n| 14        | 75  | 3 | 4 | 42     |\n| 15        | 80  | 4 | 6 | 40     |\n| 16        | 85  | 5 | 7 | 31     |\n| 17        | 90  | 3 | 5 | 53     |\n| 18        | 95  | 2 | 6 | 60     |\n| 19        | 100 | 5 | 10| 20     |\n| 20        | 105 | 3 | 7 | 60     |\n| 21        | 110 | 4 | 6 | 55     |\n| 22        | 115 | 5 | 9 | 43     |\n| 23        | 120 | 2 | 5 | 84     |\n| 24        | 125 | 3 | 4 | 69     |\n| 25        | 130 | 5 | 6 | 59     |\n| 26        | 135 | 4 | 7 | 63     |\n| 27        | 140 | 3 | 5 | 83     |\n| 28        | 145 | 2 | 6 | 97     |\n| 29        | 150 | 5 | 10| 30     |\n| 30        | 155 | 3 | 7 | 88     |\n| 31        | 160 | 4 | 6 | 80     |\n| 32        | 165 | 5 | 9 | 59     |\n| 33        | 170 | 3 | 4 | 90     |\n| 34        | 175 | 2 | 6 | 117    |\n| 35        | 180 | 3 | 5 | 107    |\n| 36        | 185 | 4 | 7 | 90     |\n| 37        | 190 | 5 | 10| 38     |\n| 38        | 195 | 3 | 6 | 109    |\n| 39        | 200 | 2 | 5 | 134    |\n| 40        | 205 | 4 | 6 | 100    |",
            "example": {
              "input": "N = 30, A = 3, B = 4",
              "output": "17",
              "explanation": "Numbers divisible by 3 or 4 from 1 to 30 are: 3, 4, 6, 8, 9, 12, 15, 16, 18, 20, 21, 24, 27, 28, 30 (total = 17)"
            },
            "answer": "def count_divisible_by_a_or_b(n, a, b):\n    from math import gcd\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    return n // a + n // b - n // lcm(a, b)"
        },
        {
            "id": 39,
            "title": "Check if a Number Can Be Expressed as Sum of Two Squares",
            "description": "Determine whether a given positive integer N can be expressed as the sum of two squares, i.e., N = a² + b² for some integers a and b.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | True   |\n| 2         | 2   | True   |\n| 3         | 3   | False  |\n| 4         | 4   | True   |\n| 5         | 5   | True   |\n| 6         | 6   | False  |\n| 7         | 7   | False  |\n| 8         | 8   | True   |\n| 9         | 9   | True   |\n| 10        | 10  | True   |\n| 11        | 11  | False  |\n| 12        | 12  | False  |\n| 13        | 13  | True   |\n| 14        | 14  | False  |\n| 15        | 15  | False  |\n| 16        | 16  | True   |\n| 17        | 17  | True   |\n| 18        | 18  | True   |\n| 19        | 19  | False  |\n| 20        | 20  | True   |\n| 21        | 21  | False  |\n| 22        | 22  | False  |\n| 23        | 23  | False  |\n| 24        | 24  | False  |\n| 25        | 25  | True   |\n| 26        | 26  | True   |\n| 27        | 27  | False  |\n| 28        | 28  | False  |\n| 29        | 29  | True   |\n| 30        | 30  | False  |\n| 31        | 31  | False  |\n| 32        | 32  | True   |\n| 33        | 33  | False  |\n| 34        | 34  | False  |\n| 35        | 35  | False  |\n| 36        | 36  | True   |\n| 37        | 37  | True   |\n| 38        | 38  | False  |\n| 39        | 39  | False  |\n| 40        | 40  | True   |",
            "example": {
              "input": "N = 25",
              "output": "True",
              "explanation": "25 can be expressed as 3² + 4²."
            },
            "answer": "def is_sum_of_two_squares(n):\n    from math import isqrt\n    for a in range(isqrt(n) + 1):\n        b_squared = n - a * a\n        b = isqrt(b_squared)\n        if b * b == b_squared:\n            return True\n    return False"
        },
        {
            "id": 40,
            "title": "Euler’s Totient Function φ(n)",
            "description": "Compute Euler’s Totient Function φ(n), which counts the number of integers between 1 and n inclusive that are coprime to n.\n\n| Test Case | n   | φ(n) |\n|-----------|-----|------|\n| 1         | 1   | 1    |\n| 2         | 2   | 1    |\n| 3         | 3   | 2    |\n| 4         | 4   | 2    |\n| 5         | 5   | 4    |\n| 6         | 6   | 2    |\n| 7         | 7   | 6    |\n| 8         | 8   | 4    |\n| 9         | 9   | 6    |\n| 10        | 10  | 4    |\n| 11        | 11  | 10   |\n| 12        | 12  | 4    |\n| 13        | 13  | 12   |\n| 14        | 14  | 6    |\n| 15        | 15  | 8    |\n| 16        | 16  | 8    |\n| 17        | 17  | 16   |\n| 18        | 18  | 6    |\n| 19        | 19  | 18   |\n| 20        | 20  | 8    |\n| 21        | 21  | 12   |\n| 22        | 22  | 10   |\n| 23        | 23  | 22   |\n| 24        | 24  | 8    |\n| 25        | 25  | 20   |\n| 26        | 26  | 12   |\n| 27        | 27  | 18   |\n| 28        | 28  | 12   |\n| 29        | 29  | 28   |\n| 30        | 30  | 8    |\n| 31        | 31  | 30   |\n| 32        | 32  | 16   |\n| 33        | 33  | 20   |\n| 34        | 34  | 16   |\n| 35        | 35  | 24   |\n| 36        | 36  | 12   |\n| 37        | 37  | 36   |\n| 38        | 38  | 18   |\n| 39        | 39  | 24   |\n| 40        | 40  | 16   |",
            "example": {
              "input": "n = 9",
              "output": "6",
              "explanation": "The numbers less than 9 that are coprime to 9 are 1, 2, 4, 5, 7, and 8."
            },
            "answer": "def euler_totient(n):\n    result = n\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            while n % p == 0:\n                n //= p\n            result -= result // p\n        p += 1\n    if n > 1:\n        result -= result // n\n    return result"
        },
        {
            "id": 41,
            "title": "Count Set Bits in a Number",
            "description": "Given an integer N, count the number of set bits (1s) in its binary representation.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | 0      |\n| 2         | 1   | 1      |\n| 3         | 2   | 1      |\n| 4         | 3   | 2      |\n| 5         | 4   | 1      |\n| 6         | 5   | 2      |\n| 7         | 6   | 2      |\n| 8         | 7   | 3      |\n| 9         | 8   | 1      |\n| 10        | 9   | 2      |\n| 11        | 10  | 2      |\n| 12        | 11  | 3      |\n| 13        | 12  | 2      |\n| 14        | 13  | 3      |\n| 15        | 14  | 3      |\n| 16        | 15  | 4      |\n| 17        | 16  | 1      |\n| 18        | 17  | 2      |\n| 19        | 18  | 2      |\n| 20        | 19  | 3      |\n| 21        | 20  | 2      |\n| 22        | 21  | 3      |\n| 23        | 22  | 3      |\n| 24        | 23  | 4      |\n| 25        | 24  | 2      |\n| 26        | 25  | 3      |\n| 27        | 26  | 3      |\n| 28        | 27  | 4      |\n| 29        | 28  | 3      |\n| 30        | 29  | 4      |\n| 31        | 30  | 4      |\n| 32        | 31  | 5      |\n| 33        | 32  | 1      |\n| 34        | 33  | 2      |\n| 35        | 34  | 2      |\n| 36        | 35  | 3      |\n| 37        | 36  | 2      |\n| 38        | 37  | 3      |\n| 39        | 38  | 3      |\n| 40        | 39  | 4      |",
            "example": {
              "input": "N = 13",
              "output": "3",
              "explanation": "Binary representation of 13 is 1101, which has 3 set bits."
            },
            "answer": "def count_set_bits(n):\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count"
        },
        {
            "id": 42,
            "title": "Find XOR of All Numbers from 1 to N",
            "description": "Given an integer N, find the XOR of all numbers from 1 to N.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | 0      |\n| 2         | 1   | 1      |\n| 3         | 2   | 3      |\n| 4         | 3   | 0      |\n| 5         | 4   | 4      |\n| 6         | 5   | 1      |\n| 7         | 6   | 7      |\n| 8         | 7   | 0      |\n| 9         | 8   | 8      |\n| 10        | 9   | 1      |\n| 11        | 10  | 11     |\n| 12        | 11  | 0      |\n| 13        | 12  | 12     |\n| 14        | 13  | 1      |\n| 15        | 14  | 15     |\n| 16        | 15  | 0      |\n| 17        | 16  | 16     |\n| 18        | 17  | 1      |\n| 19        | 18  | 19     |\n| 20        | 19  | 0      |\n| 21        | 20  | 20     |\n| 22        | 21  | 1      |\n| 23        | 22  | 23     |\n| 24        | 23  | 0      |\n| 25        | 24  | 24     |\n| 26        | 25  | 1      |\n| 27        | 26  | 27     |\n| 28        | 27  | 0      |\n| 29        | 28  | 28     |\n| 30        | 29  | 1      |\n| 31        | 30  | 31     |\n| 32        | 31  | 0      |\n| 33        | 32  | 32     |\n| 34        | 33  | 1      |\n| 35        | 34  | 35     |\n| 36        | 35  | 0      |\n| 37        | 36  | 36     |\n| 38        | 37  | 1      |\n| 39        | 38  | 39     |\n| 40        | 39  | 0      |",
            "example": {
              "input": "N = 5",
              "output": "1",
              "explanation": "1 ^ 2 ^ 3 ^ 4 ^ 5 = 1"
            },
            "answer": "def xor_1_to_n(n):\n    rem = n % 4\n    if rem == 0:\n        return n\n    elif rem == 1:\n        return 1\n    elif rem == 2:\n        return n + 1\n    else:\n        return 0"
        },                      
        {
            "id": 43,
            "title": "Check if N is Power of 4 Using Bitwise",
            "description": "Determine whether a given integer N is a power of 4 using bitwise operations.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | False  |\n| 2         | 1   | True   |\n| 3         | 2   | False  |\n| 4         | 4   | True   |\n| 5         | 8   | False  |\n| 6         | 16  | True   |\n| 7         | 32  | False  |\n| 8         | 64  | True   |\n| 9         | 128 | False  |\n| 10        | 256 | True   |\n| 11        | 512 | False  |\n| 12        | 1024| True   |\n| 13        | 2048| False  |\n| 14        | 4096| True   |\n| 15        | 8192| False  |\n| 16        | 16384|True   |\n| 17        | 32768|False  |\n| 18        | 65536|True   |\n| 19        | 131072|False |\n| 20        | 262144|True  |\n| 21        | 524288|False |\n| 22        | 1048576|True |\n| 23        | 2097152|False|\n| 24        | 4194304|True |\n| 25        | 8388608|False|\n| 26        | 16777216|True|\n| 27        | 33554432|False|\n| 28        | 67108864|True|\n| 29        | 134217728|False|\n| 30        | 268435456|True|\n| 31        | 536870912|False|\n| 32        | 1073741824|True|\n| 33        | 2147483648|False|\n| 34        | 4294967296|True|\n| 35        | 8589934592|False|\n| 36        | 17179869184|True|\n| 37        | 34359738368|False|\n| 38        | 68719476736|True|\n| 39        | 137438953472|False|\n| 40        | 274877906944|True|",
            "example": {
              "input": "N = 16",
              "output": "True",
              "explanation": "16 is 2^4, which is a power of 4."
            },
            "answer": "def is_power_of_four(n):\n    return n > 0 and (n & (n - 1)) == 0 and (n & 0x55555555) != 0"
        },
        {
            "id": 44,
            "title": "Count Pairs with Given XOR",
            "description": "Given an array of integers and a target value X, count the number of unique pairs (i, j) such that arr[i] ^ arr[j] == X and i < j.\n\n| Test Case | arr                   | X  | Output |\n|-----------|-----------------------|----|--------|\n| 1         | [1, 2, 3, 4, 5]       | 6  | 2      |\n| 2         | [5, 4, 10, 15, 7, 6]  | 5  | 1      |\n| 3         | [3, 6, 8, 10, 15, 50] | 5  | 2      |\n| 4         | [1, 1, 1, 1]          | 0  | 6      |\n| 5         | [1, 2, 3]             | 1  | 2      |\n| 6         | [0, 0, 0]             | 0  | 3      |\n| 7         | [2, 2, 2]             | 0  | 3      |\n| 8         | [1, 2, 3, 4]          | 7  | 0      |\n| 9         | [10, 15, 20, 25]      | 5  | 1      |\n| 10        | [1, 3, 5, 7]          | 2  | 2      |\n| 11        | [1, 2, 3, 4, 5, 6]    | 7  | 1      |\n| 12        | [1, 2, 3, 4, 5, 6]    | 1  | 3      |\n| 13        | [1, 2, 3, 4, 5, 6]    | 2  | 3      |\n| 14        | [1, 2, 3, 4, 5, 6]    | 3  | 3      |\n| 15        | [1, 2, 3, 4, 5, 6]    | 4  | 3      |\n| 16        | [1, 2, 3, 4, 5, 6]    | 5  | 3      |\n| 17        | [1, 2, 3, 4, 5, 6]    | 6  | 3      |\n| 18        | [1, 2, 3, 4, 5, 6]    | 0  | 0      |\n| 19        | [1, 2, 3, 4, 5, 6]    | 8  | 0      |\n| 20        | [1, 2, 3, 4, 5, 6]    | 9  | 0      |\n| 21        | [1, 2, 3, 4, 5, 6]    | 10 | 0      |\n| 22        | [1, 2, 3, 4, 5, 6]    | 11 | 0      |\n| 23        | [1, 2, 3, 4, 5, 6]    | 12 | 0      |\n| 24        | [1, 2, 3, 4, 5, 6]    | 13 | 0      |\n| 25        | [1, 2, 3, 4, 5, 6]    | 14 | 0      |\n| 26        | [1, 2, 3, 4, 5, 6]    | 15 | 0      |\n| 27        | [1, 2, 3, 4, 5, 6]    | 16 | 0      |\n| 28        | [1, 2, 3, 4, 5, 6]    | 17 | 0      |\n| 29        | [1, 2, 3, 4, 5, 6]    | 18 | 0      |\n| 30        | [1, 2, 3, 4, 5, 6]    | 19 | 0      |\n| 31        | [1, 2, 3, 4, 5, 6]    | 20 | 0      |\n| 32        | [1, 2, 3, 4, 5, 6]    | 21 | 0      |\n| 33        | [1, 2, 3, 4, 5, 6]    | 22 | 0      |\n| 34        | [1, 2, 3, 4, 5, 6]    | 23 | 0      |\n| 35        | [1, 2, 3, 4, 5, 6]    | 24 | 0      |\n| 36        | [1, 2, 3, 4, 5, 6]    | 25 | 0      |\n| 37        | [1, 2, 3, 4, 5, 6]    | 26 | 0      |\n| 38        | [1, 2, 3, 4, 5, 6]    | 27 | 0      |\n| 39        | [1, 2, 3, 4, 5, 6]    | 28 | 0      |\n| 40        | [1, 2, 3, 4, 5, 6]    | 29 | 0      |",
            "example": {
              "input": "arr = [5, 4, 10, 15, 7, 6], X = 5",
              "output": "1",
              "explanation": "Only one pair (10, 15) has XOR equal to 5."
            },
            "answer": "def count_pairs_with_xor(arr, x):\n    count = 0\n    freq = {}\n    for num in arr:\n        target = num ^ x\n        count += freq.get(target, 0)\n        freq[num] = freq.get(num, 0) + 1\n    return count"
        },
        {
            "id": 45,
            "title": "Compute A^B where B is Large (as String)",
            "description": "Given two integers A and B, where B is a large number represented as a string, compute A raised to the power B modulo 10^9+7.\n\n| Test Case | A   | B                 | Output     |\n|-----------|-----|--------------------|------------|\n| 1         | 2   | \"3\"               | 8          |\n| 2         | 5   | \"0\"               | 1          |\n| 3         | 7   | \"1\"               | 7          |\n| 4         | 10  | \"2\"               | 100        |\n| 5         | 3   | \"4\"               | 81         |\n| 6         | 2   | \"10\"              | 1024       |\n| 7         | 2   | \"100\"             | 976371285  |\n| 8         | 2   | \"1000\"            | 688423210  |\n| 9         | 2   | \"10000\"           | 279632277  |\n| 10        | 2   | \"100000\"          | 716070898  |\n| 11        | 2   | \"1000000\"         | 688423210  |\n| 12        | 2   | \"10000000\"        | 279632277  |\n| 13        | 2   | \"100000000\"       | 716070898  |\n| 14        | 2   | \"1000000000\"      | 688423210  |\n| 15        | 2   | \"10000000000\"     | 279632277  |\n| 16        | 2   | \"100000000000\"    | 716070898  |\n| 17        | 2   | \"1000000000000\"   | 688423210  |\n| 18        | 2   | \"10000000000000\"  | 279632277  |\n| 19        | 2   | \"100000000000000\" | 716070898  |\n| 20        | 2   | \"100000000000001\" | 716070898  |\n| 21        | 3   | \"1000000\"         | 181736105  |\n| 22        | 5   | \"100000\"          | 716070898  |\n| 23        | 7   | \"1000000\"         | 770580192  |\n| 24        | 9   | \"999999\"          | 703260708  |\n| 25        | 11  | \"888888\"          | 996452125  |\n| 26        | 17  | \"123456\"          | 286146143  |\n| 27        | 19  | \"654321\"          | 251072084  |\n| 28        | 23  | \"333333\"          | 907786018  |\n| 29        | 29  | \"777777\"          | 236706642  |\n| 30        | 31  | \"111111\"          | 365870323  |\n| 31        | 37  | \"222222\"          | 437572857  |\n| 32        | 41  | \"999999\"          | 88173931   |\n| 33        | 43  | \"135791\"          | 825636120  |\n| 34        | 47  | \"246802\"          | 793558845  |\n| 35        | 53  | \"100001\"          | 799161754  |\n| 36        | 59  | \"909090\"          | 68482308   |\n| 37        | 61  | \"567890\"          | 866698092  |\n| 38        | 67  | \"999999\"          | 638590705  |\n| 39        | 71  | \"101010\"          | 857160897  |\n| 40        | 73  | \"123123\"          | 690321254  |",
            "example": {
              "input": "A = 2, B = \"100000\"",
              "output": "716070898"
            },
            "answer": "def mod_pow(a, b, mod=10**9+7):\n    return pow(a, int(b) % (mod-1), mod)\n"
        }          
    ]
} 
          
