{
    "questions": [
        {
            "id": 1,
            "title": "Find GCD of Two Numbers using Euclidean Algorithm",
            "description": "Given two integers a and b, return their greatest common divisor (GCD) using the Euclidean algorithm.\n\n| Test Case | a     | b     | Expected Output | Notes                             |\n|-----------|-------|-------|-----------------|-----------------------------------|\n| 1         | 48    | 18    | 6               | Common test case                  |\n| 2         | 100   | 10    | 10              | b divides a                       |\n| 3         | 10    | 100   | 10              | a divides b                       |\n| 4         | 13    | 17    | 1               | Co-prime numbers                  |\n| 5         | 270   | 192   | 6               | Larger numbers                    |\n| 6         | 81    | 27    | 27              | Perfect multiple                  |\n| 7         | 101   | 103   | 1               | Both primes                       |\n| 8         | 0     | 5     | 5               | Zero input                        |\n| 9         | 5     | 0     | 5               | Zero input                        |\n| 10        | 0     | 0     | 0               | Both zero                         |\n| 11        | 7     | 49    | 7               | Factor relationship               |\n| 12        | 49    | 7     | 7               | Inverse of previous               |\n| 13        | 36    | 60    | 12              | Even numbers                      |\n| 14        | 1071  | 462   | 21              | From Euclid’s example             |\n| 15        | 9     | 28    | 1               | Co-prime check                    |\n| 16        | 121   | 11    | 11              | Square and its root               |\n| 17        | 99    | 121   | 11              | Mixed digits                      |\n| 18        | 56    | 98    | 14              | Divisible by 14                   |\n| 19        | 150   | 100   | 50              | Common factor 50                  |\n| 20        | 144   | 60    | 12              | Medium values                     |\n| 21        | 391   | 299   | 23              | Non-trivial GCD                   |\n| 22        | 123   | 456   | 3               | Random numbers                    |\n| 23        | 540   | 420   | 60              | Divisible by 60                   |\n| 24        | 1010  | 10    | 10              | Ends in 0                         |\n| 25        | 37    | 600   | 1               | Co-prime with large number        |\n| 26        | 600   | 37    | 1               | Reversed input                    |\n| 27        | 25    | 100   | 25              | Simple divisible test             |\n| 28        | 128   | 64    | 64              | Power of 2                        |\n| 29        | 1000  | 250   | 250             | Multiple of 250                   |\n| 30        | 777   | 888   | 111             | 111 as GCD                        |\n| 31        | 120   | 45    | 15              | Moderate GCD                      |\n| 32        | 85    | 17    | 17              | Prime factor                      |\n| 33        | 14    | 15    | 1               | Co-prime adjacent numbers         |\n| 34        | 20    | 30    | 10              | Basic test                        |\n| 35        | 119   | 544   | 17              | GCD is 17                         |\n| 36        | 1     | 999   | 1               | GCD with 1                        |\n| 37        | 999   | 1     | 1               | GCD with 1 reversed               |\n| 38        | 29    | 87    | 29              | 29 is a factor                    |\n| 39        | 444   | 666   | 222             | GCD is 222                        |\n| 40        | 121   | 242   | 121             | Factor of double                  |",
            "example": {
              "input": "a = 48, b = 18",
              "output": "6",
              "explanation": "GCD(48, 18): 48 % 18 = 12, 18 % 12 = 6, 12 % 6 = 0 => GCD is 6"
            },
            "answer": "def gcd(a: int, b: int) -> int:\n    if a == 0 and b == 0:\n        return 0\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\na, b = map(int, input().split())\nprint(gcd(a, b))"
        },
        {
            "id": 2,
            "title": "Find LCM of Two Numbers Using GCD",
            "description": "Given two integers a and b, return the Least Common Multiple (LCM) using the Euclidean algorithm for GCD.\n\n| Test Case | a   | b   | Expected Output | Notes                                |\n|-----------|-----|-----|-----------------|--------------------------------------|\n| 1         | 2   | 3   | 6               | Basic test                           |\n| 2         | 4   | 6   | 12              | Common multiple                      |\n| 3         | 5   | 10  | 10              | One is a multiple of the other       |\n| 4         | 7   | 9   | 63              | Co-prime numbers                     |\n| 5         | 12  | 15  | 60              | Normal case                          |\n| 6         | 8   | 32  | 32              | One divides the other                |\n| 7         | 3   | 3   | 3               | Equal numbers                        |\n| 8         | 11  | 13  | 143             | Primes                               |\n| 9         | 0   | 7   | 0               | Zero input                           |\n| 10        | 18  | 24  | 72              | GCD = 6                              |\n| 11        | 21  | 6   | 42              | GCD = 3                              |\n| 12        | 100 | 25  | 100             | Large divisible                      |\n| 13        | 7   | 14  | 14              | Multiple case                        |\n| 14        | 1   | 999 | 999             | One is 1                             |\n| 15        | 17  | 34  | 34              | GCD = 17                             |\n| 16        | 13  | 17  | 221             | Coprime prime numbers                |\n| 17        | 99  | 121 | 1331            | GCD = 11                             |\n| 18        | 81  | 27  | 81              | One is multiple                      |\n| 19        | 6   | 9   | 18              | Common factors                       |\n| 20        | 30  | 45  | 90              | GCD = 15                             |\n| 21        | 14  | 49  | 98              | GCD = 7                              |\n| 22        | 22  | 33  | 66              | GCD = 11                             |\n| 23        | 60  | 48  | 240             | Complex multiples                    |\n| 24        | 36  | 90  | 180             | LCM of square and multiple           |\n| 25        | 1   | 1   | 1               | Smallest input                       |\n| 26        | 1000| 500 | 1000            | Large divisible                      |\n| 27        | 17  | 51  | 51              | Multiple case                        |\n| 28        | 19  | 23  | 437             | Large primes                         |\n| 29        | 8   | 9   | 72              | Coprime                              |\n| 30        | 27  | 36  | 108             | GCD = 9                              |\n| 31        | 32  | 40  | 160             | Power of 2s                          |\n| 32        | 13  | 39  | 39              | GCD = 13                             |\n| 33        | 15  | 20  | 60              | Classic LCM case                     |\n| 34        | 99  | 11  | 99              | One is multiple                      |\n| 35        | 81  | 9   | 81              | Powers of 3                          |\n| 36        | 72  | 120 | 360             | Large common factor                  |\n| 37        | 44  | 55  | 220             | GCD = 11                             |\n| 38        | 25  | 75  | 75              | Multiple case                        |\n| 39        | 30  | 70  | 210             | Coprime multiples                    |\n| 40        | 99  | 33  | 99              | GCD = 33                             |",
            "example": {
              "input": "a = 4, b = 6",
              "output": "12",
              "explanation": "GCD(4, 6) = 2 → LCM = (4 × 6) / 2 = 12"
            },
            "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return abs(a * b) // gcd(a, b)\n\na, b = map(int, input().split())\nprint(lcm(a, b))"
        },
        {
            "id": 3,
            "title": "GCD of Array Elements",
            "description": "Given an array of integers, return the greatest common divisor (GCD) of all the elements in the array.\n\n| Test Case | Input         | Output | Notes                        |\n|-----------|---------------|--------|------------------------------|\n| 1         | [2]       | 2    | Basic test case\n| 2         | [2, 4]       | 2    | Basic test case\n| 3         | [2, 4, 6]       | 2    | Basic test case\n| 4         | [2, 4, 6, 8]       | 2    | Basic test case\n| 5         | [2]       | 2    | Basic test case\n| 6         | [2, 4]       | 2    | Basic test case\n| 7         | [2, 4, 6]       | 2    | Basic test case\n| 8         | [2, 4, 6, 8]       | 2    | Basic test case\n| 9         | [2]       | 2    | Basic test case\n| 10        | [2, 4]       | 2    | Basic test case\n| 11        | [2, 4, 6]       | 2    | Basic test case\n| 12        | [2, 4, 6, 8]       | 2    | Basic test case\n| 13        | [2]       | 2    | Basic test case\n| 14        | [2, 4]       | 2    | Basic test case\n| 15        | [2, 4, 6]       | 2    | Basic test case\n| 16        | [2, 4, 6, 8]       | 2    | Basic test case\n| 17        | [2]       | 2    | Basic test case\n| 18        | [2, 4]       | 2    | Basic test case\n| 19        | [2, 4, 6]       | 2    | Basic test case\n| 20        | [2, 4, 6, 8]       | 2    | Basic test case\n| 21        | [2]       | 2    | Basic test case\n| 22        | [2, 4]       | 2    | Basic test case\n| 23        | [2, 4, 6]       | 2    | Basic test case\n| 24        | [2, 4, 6, 8]       | 2    | Basic test case\n| 25        | [2]       | 2    | Basic test case\n| 26        | [2, 4]       | 2    | Basic test case\n| 27        | [2, 4, 6]       | 2    | Basic test case\n| 28        | [2, 4, 6, 8]       | 2    | Basic test case\n| 29        | [2]       | 2    | Basic test case\n| 30        | [2, 4]       | 2    | Basic test case\n| 31        | [2, 4, 6]       | 2    | Basic test case\n| 32        | [2, 4, 6, 8]       | 2    | Basic test case\n| 33        | [2]       | 2    | Basic test case\n| 34        | [2, 4]       | 2    | Basic test case\n| 35        | [2, 4, 6]       | 2    | Basic test case\n| 36        | [2, 4, 6, 8]       | 2    | Basic test case\n| 37        | [2]       | 2    | Basic test case\n| 38        | [2, 4]       | 2    | Basic test case\n| 39        | [2, 4, 6]       | 2    | Basic test case\n| 40        | [2, 4, 6, 8]       | 2    | Basic test case",
            "example": {
              "input": "[12, 24, 36]",
              "output": "12",
              "explanation": "GCD of 12, 24 and 36 is 12."
            },
            "answer": "from functools import reduce\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\narr = list(map(int, input().split()))\nprint(reduce(gcd, arr))"
        },
        {
  "id": 4,
  "title": "Count Pairs with GCD Equal to K",
  "description": "Given an array of integers and an integer K, count the number of pairs (i, j) such that GCD(nums[i], nums[j]) = K.\n\n| Test Case | nums            | K | Output | Notes               |\n|-----------|------------------|---|--------|---------------------|\n| 1         | [1, 2, 3]        | 1 | 3      | Example test case   |\n| 2         | [2, 4, 6]        | 2 | 3      | Example test case   |\n| 3         | [3, 6, 9]        | 3 | 3      | Example test case   |\n| 4         | [4, 8, 12]       | 4 | 3      | Example test case   |\n| 5         | [5, 10, 15]      | 5 | 3      | Example test case   |\n| 6         | [6, 12, 18]      | 1 | 0      | Example test case   |\n| 7         | [7, 14, 21]      | 2 | 0      | Example test case   |\n| 8         | [8, 16, 24]      | 3 | 0      | Example test case   |\n| 9         | [9, 18, 27]      | 4 | 0      | Example test case   |\n| 10        | [10, 20, 30]     | 5 | 0      | Example test case   |\n| 11        | [11, 22, 33]     | 1 | 0      | Example test case   |\n| 12        | [12, 24, 36]     | 2 | 0      | Example test case   |\n| 13        | [13, 26, 39]     | 3 | 0      | Example test case   |\n| 14        | [14, 28, 42]     | 4 | 0      | Example test case   |\n| 15        | [15, 30, 45]     | 5 | 0      | Example test case   |\n| 16        | [16, 32, 48]     | 1 | 0      | Example test case   |\n| 17        | [17, 34, 51]     | 2 | 0      | Example test case   |\n| 18        | [18, 36, 54]     | 3 | 0      | Example test case   |\n| 19        | [19, 38, 57]     | 4 | 0      | Example test case   |\n| 20        | [20, 40, 60]     | 5 | 0      | Example test case   |\n| 21        | [21, 42, 63]     | 1 | 0      | Example test case   |\n| 22        | [22, 44, 66]     | 2 | 0      | Example test case   |\n| 23        | [23, 46, 69]     | 3 | 0      | Example test case   |\n| 24        | [24, 48, 72]     | 4 | 0      | Example test case   |\n| 25        | [25, 50, 75]     | 5 | 0      | Example test case   |\n| 26        | [26, 52, 78]     | 1 | 0      | Example test case   |\n| 27        | [27, 54, 81]     | 2 | 0      | Example test case   |\n| 28        | [28, 56, 84]     | 3 | 0      | Example test case   |\n| 29        | [29, 58, 87]     | 4 | 0      | Example test case   |\n| 30        | [30, 60, 90]     | 5 | 0      | Example test case   |\n| 31        | [31, 62, 93]     | 1 | 0      | Example test case   |\n| 32        | [32, 64, 96]     | 2 | 0      | Example test case   |\n| 33        | [33, 66, 99]     | 3 | 0      | Example test case   |\n| 34        | [34, 68, 102]    | 4 | 0      | Example test case   |\n| 35        | [35, 70, 105]    | 5 | 0      | Example test case   |\n| 36        | [36, 72, 108]    | 1 | 0      | Example test case   |\n| 37        | [37, 74, 111]    | 2 | 0      | Example test case   |\n| 38        | [38, 76, 114]    | 3 | 0      | Example test case   |\n| 39        | [39, 78, 117]    | 4 | 0      | Example test case   |\n| 40        | [40, 80, 120]    | 5 | 0      | Example test case   |",
  "example": {
    "input": "nums = [2, 4, 6, 8], K = 2",
    "output": "6",
    "explanation": "All 6 pairs have GCD equal to 2: (2,4), (2,6), (2,8), (4,6), (4,8), (6,8)"
  },
  "answer": "from math import gcd\n\nnums = list(map(int, input().split()))\nk = int(input())\n\ncount = 0\nn = len(nums)\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if gcd(nums[i], nums[j]) == k:\n            count += 1\n\nprint(count)"
},

      {
  "id": 5,
  "title": "Find a number X such that GCD(A, X) = B",
  "description": "Given two integers A and B, find a number X such that GCD(A, X) = B. If multiple, return any one such X.\n\n| Test Case | A  | B  | Output | Notes                       |\n|-----------|----|----|--------|-----------------------------|\n| 1         | 4 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 2         | 6 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 3         | 8 | 3 | -1 | No such X exists\n| 4         | 10 | 4 | -1 | No such X exists\n| 5         | 12 | 5 | -1 | No such X exists\n| 6         | 14 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 7         | 16 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 8         | 18 | 3 | 3 | Valid X such that GCD(A, X) = B\n| 9         | 20 | 4 | 4 | Valid X such that GCD(A, X) = B\n| 10        | 22 | 5 | -1 | No such X exists\n| 11        | 24 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 12        | 26 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 13        | 28 | 3 | -1 | No such X exists\n| 14        | 30 | 4 | -1 | No such X exists\n| 15        | 32 | 5 | -1 | No such X exists\n| 16        | 34 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 17        | 36 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 18        | 38 | 3 | -1 | No such X exists\n| 19        | 40 | 4 | 4 | Valid X such that GCD(A, X) = B\n| 20        | 42 | 5 | -1 | No such X exists\n| 21        | 44 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 22        | 46 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 23        | 48 | 3 | 3 | Valid X such that GCD(A, X) = B\n| 24        | 50 | 4 | -1 | No such X exists\n| 25        | 52 | 5 | -1 | No such X exists\n| 26        | 54 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 27        | 56 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 28        | 58 | 3 | -1 | No such X exists\n| 29        | 60 | 4 | 4 | Valid X such that GCD(A, X) = B\n| 30        | 62 | 5 | -1 | No such X exists\n| 31        | 64 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 32        | 66 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 33        | 68 | 3 | -1 | No such X exists\n| 34        | 70 | 4 | -1 | No such X exists\n| 35        | 72 | 5 | -1 | No such X exists\n| 36        | 74 | 1 | 1 | Valid X such that GCD(A, X) = B\n| 37        | 76 | 2 | 2 | Valid X such that GCD(A, X) = B\n| 38        | 78 | 3 | 3 | Valid X such that GCD(A, X) = B\n| 39        | 80 | 4 | 4 | Valid X such that GCD(A, X) = B\n| 40        | 82 | 5 | -1 | No such X exists",
  "example": {
    "input": "A = 20, B = 5",
    "output": "5",
    "explanation": "GCD(20, 5) = 5, so X = 5 is a valid solution."
  },
  "answer": "from math import gcd\n\ndef find_x_with_gcd_a_b(a, b):\n    if a % b != 0:\n        return -1\n    return b\n\n# Read input in form: 6 2\na, b = map(int, input().split())\nprint(find_x_with_gcd_a_b(a, b))"
},
        {
  "id": 6,
  "title": "Is GCD of all numbers in the array 1?",
  "description": "Given an array of integers, check if the GCD of all the numbers is 1.\n\n| Test Case | Array                | Output | Notes                       |\n|-----------|----------------------|--------|-----------------------------|\n| 1         | [1, 2, 3, 4]          | Yes    | GCD of all elements is 1   |\n| 2         | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 3         | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 4         | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 5         | [2, 6, 8, 10]         | No     | GCD of all elements is 2   |\n| 6         | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 7         | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 8         | [1, 4, 7, 8]          | Yes    | GCD of all elements is 1   |\n| 9         | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 10        | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 11        | [1, 3, 5, 7]          | Yes    | GCD of all elements is 1   |\n| 12        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 13        | [2, 4, 6, 8]          | No     | GCD of all elements is 2   |\n| 14        | [1, 2, 3, 5]          | Yes    | GCD of all elements is 1   |\n| 15        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 16        | [9, 18, 27, 36]       | No     | GCD of all elements is 9   |\n| 17        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 18        | [11, 22, 33, 44]      | No     | GCD of all elements is 11  |\n| 19        | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 20        | [20, 25, 30, 35]      | No     | GCD of all elements is 5   |\n| 21        | [2, 6, 10, 14]        | No     | GCD of all elements is 2   |\n| 22        | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 23        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 24        | [1, 3, 5, 7]          | Yes    | GCD of all elements is 1   |\n| 25        | [4, 8, 12, 16]        | No     | GCD of all elements is 4   |\n| 26        | [9, 18, 27, 36]       | No     | GCD of all elements is 9   |\n| 27        | [11, 22, 33, 44]      | No     | GCD of all elements is 11  |\n| 28        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 29        | [8, 16, 24, 32]       | No     | GCD of all elements is 8   |\n| 30        | [1, 2, 3, 5]          | Yes    | GCD of all elements is 1   |\n| 31        | [10, 20, 30, 40]      | No     | GCD of all elements is 10  |\n| 32        | [7, 14, 21, 28]       | No     | GCD of all elements is 7   |\n| 33        | [3, 6, 9, 12]         | No     | GCD of all elements is 3   |\n| 34        | [5, 10, 15, 20]       | No     | GCD of all elements is 5   |\n| 35        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 36        | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 37        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |\n| 38        | [1, 2, 3, 4]          | Yes    | GCD of all elements is 1   |\n| 39        | [1, 5, 7, 11]         | Yes    | GCD of all elements is 1   |\n| 40        | [6, 12, 18, 24]       | No     | GCD of all elements is 6   |",
  "example": {
    "input": "[10, 20, 30, 40]",
    "output": "No",
    "explanation": "The GCD of all elements is 10, so the output is No."
  },
"answer": "from math import gcd\\nfrom functools import reduce\\nimport sys\\n\\ndef is_gcd_one(arr):\\n    return reduce(gcd, arr) == 1\\n\\nfor line in sys.stdin:\\n    if line.strip():\\n        arr = list(map(int, line.strip().split()))\\n        print(\"Yes\" if is_gcd_one(arr) else \"No\")"

},
{
  "id": 7,
  "title": "GCD of range [L, R] in an array (using Segment Tree)",
  "description": "Given an array and a range [L, R], find the GCD of all elements in the range [L, R] efficiently using a Segment Tree.\n\n| Test Case | Array            | L  | R  | Output | Notes                              |\n|-----------|------------------|----|----|--------|------------------------------------|\n| 1         | [2, 4, 6, 8, 10] | 1  | 4  | 2      | GCD of elements between index 1-4  |\n| 2         | [5, 10, 15, 20]  | 0  | 3  | 5      | GCD of elements between index 0-3  |\n| 3         | [7, 14, 21, 28]  | 2  | 3  | 7      | GCD of elements between index 2-3  |\n| 4         | [9, 18, 27, 36]  | 0  | 2  | 9      | GCD of elements between index 0-2  |\n| 5         | [10, 20, 30, 40] | 1  | 2  | 10     | GCD of elements between index 1-2  |\n| 6         | [12, 24, 36, 48] | 0  | 1  | 12     | GCD of elements between index 0-1  |\n| 7         | [15, 30, 45, 60] | 1  | 3  | 15     | GCD of elements between index 1-3  |\n| 8         | [16, 32, 48, 64] | 0  | 3  | 16     | GCD of elements between index 0-3  |\n| 9         | [18, 36, 54, 72] | 2  | 3  | 18     | GCD of elements between index 2-3  |\n| 10        | [20, 40, 60, 80] | 1  | 2  | 20     | GCD of elements between index 1-2  |\n| 11        | [25, 50, 75, 100]| 0  | 3  | 25     | GCD of elements between index 0-3  |\n| 12        | [30, 60, 90, 120]| 0  | 2  | 30     | GCD of elements between index 0-2  |\n| 13        | [35, 70, 105, 140]| 1  | 3  | 35    | GCD of elements between index 1-3  |\n| 14        | [40, 80, 120, 160]| 2  | 3  | 40    | GCD of elements between index 2-3  |\n| 15        | [45, 90, 135, 180]| 0  | 1  | 45    | GCD of elements between index 0-1  |\n| 16        | [50, 100, 150, 200]| 1  | 2  | 50    | GCD of elements between index 1-2  |\n| 17        | [55, 110, 165, 220]| 0  | 3  | 55    | GCD of elements between index 0-3  |\n| 18        | [60, 120, 180, 240]| 2  | 3  | 60    | GCD of elements between index 2-3  |\n| 19        | [65, 130, 195, 260]| 1  | 2  | 65    | GCD of elements between index 1-2  |\n| 20        | [70, 140, 210, 280]| 0  | 3  | 70    | GCD of elements between index 0-3  |\n| 21        | [75, 150, 225, 300]| 0  | 2  | 75    | GCD of elements between index 0-2  |\n| 22        | [80, 160, 240, 320]| 1  | 3  | 80    | GCD of elements between index 1-3  |\n| 23        | [85, 170, 255, 340]| 2  | 3  | 85    | GCD of elements between index 2-3  |\n| 24        | [90, 180, 270, 360]| 0  | 3  | 90    | GCD of elements between index 0-3  |\n| 25        | [95, 190, 285, 380]| 1  | 2  | 95    | GCD of elements between index 1-2  |\n| 26        | [100, 200, 300, 400]| 0  | 2  | 100   | GCD of elements between index 0-2  |\n| 27        | [105, 210, 315, 420]| 0  | 1  | 105   | GCD of elements between index 0-1  |\n| 28        | [110, 220, 330, 440]| 2  | 3  | 110   | GCD of elements between index 2-3  |\n| 29        | [115, 230, 345, 460]| 1  | 3  | 115   | GCD of elements between index 1-3  |\n| 30        | [120, 240, 360, 480]| 0  | 3  | 120   | GCD of elements between index 0-3  |\n| 31        | [125, 250, 375, 500]| 1  | 2  | 125   | GCD of elements between index 1-2  |\n| 32        | [130, 260, 390, 520]| 0  | 2  | 130   | GCD of elements between index 0-2  |\n| 33        | [135, 270, 405, 540]| 0  | 3  | 135   | GCD of elements between index 0-3  |\n| 34        | [140, 280, 420, 560]| 1  | 2  | 140   | GCD of elements between index 1-2  |\n| 35        | [145, 290, 435, 580]| 2  | 3  | 145   | GCD of elements between index 2-3  |\n| 36        | [150, 300, 450, 600]| 0  | 1  | 150   | GCD of elements between index 0-1  |\n| 37        | [155, 310, 465, 620]| 1  | 3  | 155   | GCD of elements between index 1-3  |\n| 38        | [160, 320, 480, 640]| 0  | 2  | 160   | GCD of elements between index 0-2  |\n| 39        | [165, 330, 495, 660]| 0  | 3  | 165   | GCD of elements between index 0-3  |\n| 40        | [170, 340, 510, 680]| 1  | 2  | 170   | GCD of elements between index 1-2  |",
  "example": {
    "input": "Array = [12, 24, 36, 48, 60], L = 1, R = 3",
    "output": "12",
    "explanation": "The GCD of the elements from index 1 to 3 (24, 36, 48) is 12."
  },
  "answer": "from math import gcd\n\nclass SegmentTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (4 * self.n)\n        self.build(arr, 0, 0, self.n - 1)\n\n    def build(self, arr, node, start, end):\n        if start == end:\n            self.tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            self.build(arr, 2 * node + 1, start, mid)\n            self.build(arr, 2 * node + 2, mid + 1, end)\n            self.tree[node] = gcd(self.tree[2 * node + 1], self.tree[2 * node + 2])\n\n    def query(self, L, R):\n        return self._query(0, 0, self.n - 1, L, R)\n\n    def _query(self, node, start, end, L, R):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left = self._query(2 * node + 1, start, mid, L, R)\n        right = self._query(2 * node + 2, mid + 1, end, L, R)\n        return gcd(left, right)\n\n# Read input: space-separated array followed by L and R\ninput_data = list(map(int, input().split()))\narr = input_data[:-2]\nL = input_data[-2]\nR = input_data[-1]\n\nst = SegmentTree(arr)\nprint(st.query(L, R))"
},
        {
            "id": 8,
            "title": "Prime Factorization using Sieve",
            "description": "Given a number N, return the list of prime factors of N using a precomputed Sieve.\n\n| Test Case | N   | Output           | Notes                         |\n|-----------|-----|------------------|-------------------------------|\n| 1         | 2   | [2]              | Prime                         |\n| 2         | 3   | [3]              | Prime                         |\n| 3         | 4   | [2, 2]           | 2 × 2                         |\n| 4         | 5   | [5]              | Prime                         |\n| 5         | 6   | [2, 3]           | 2 × 3                         |\n| 6         | 7   | [7]              | Prime                         |\n| 7         | 8   | [2, 2, 2]        | 2³                            |\n| 8         | 9   | [3, 3]           | 3²                            |\n| 9         | 10  | [2, 5]           | 2 × 5                         |\n| 10        | 11  | [11]             | Prime                         |\n| 11        | 12  | [2, 2, 3]        | 2² × 3                        |\n| 12        | 13  | [13]             | Prime                         |\n| 13        | 14  | [2, 7]           | 2 × 7                         |\n| 14        | 15  | [3, 5]           | 3 × 5                         |\n| 15        | 16  | [2, 2, 2, 2]     | 2⁴                            |\n| 16        | 17  | [17]             | Prime                         |\n| 17        | 18  | [2, 3, 3]        | 2 × 3²                        |\n| 18        | 19  | [19]             | Prime                         |\n| 19        | 20  | [2, 2, 5]        | 2² × 5                        |\n| 20        | 21  | [3, 7]           | 3 × 7                         |\n| 21        | 22  | [2, 11]          | 2 × 11                        |\n| 22        | 23  | [23]             | Prime                         |\n| 23        | 24  | [2, 2, 2, 3]     | 2³ × 3                        |\n| 24        | 25  | [5, 5]           | 5²                            |\n| 25        | 26  | [2, 13]          | 2 × 13                        |\n| 26        | 27  | [3, 3, 3]        | 3³                            |\n| 27        | 28  | [2, 2, 7]        | 2² × 7                        |\n| 28        | 29  | [29]             | Prime                         |\n| 29        | 30  | [2, 3, 5]        | 2 × 3 × 5                     |\n| 30        | 31  | [31]             | Prime                         |\n| 31        | 32  | [2, 2, 2, 2, 2]  | 2⁵                            |\n| 32        | 33  | [3, 11]          | 3 × 11                        |\n| 33        | 34  | [2, 17]          | 2 × 17                        |\n| 34        | 35  | [5, 7]           | 5 × 7                         |\n| 35        | 36  | [2, 2, 3, 3]     | 2² × 3²                       |\n| 36        | 37  | [37]             | Prime                         |\n| 37        | 38  | [2, 19]          | 2 × 19                        |\n| 38        | 39  | [3, 13]          | 3 × 13                        |\n| 39        | 40  | [2, 2, 2, 5]     | 2³ × 5                        |\n| 40        | 41  | [41]             | Prime                         |",
            "example": {
              "input": "N = 60",
              "output": "[2, 2, 3, 5]",
              "explanation": "Prime factorization of 60 = 2 × 2 × 3 × 5"
            },
            "answer": "def prime_factors(N):\n    spf = [i for i in range(N + 1)]\n    for i in range(2, int(N ** 0.5) + 1):\n        if spf[i] == i:\n            for j in range(i * i, N + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\n    def get_factors(x):\n        factors = []\n        while x != 1:\n            factors.append(spf[x])\n            x //= spf[x]\n        return factors\n\n    return get_factors(N)"
        },
        {
            "id": 9,
            "title": "Check if a Number is Prime in O(√n)",
            "description": "Check whether a number N is prime using O(√n) trial division.\n\n| Test Case | N   | Output | Notes                     |\n|-----------|-----|--------|---------------------------|\n| 1         | 1   | false  | Not prime                 |\n| 2         | 2   | true   | Prime                     |\n| 3         | 3   | true   | Prime                     |\n| 4         | 4   | false  | 2 × 2                     |\n| 5         | 5   | true   | Prime                     |\n| 6         | 6   | false  | 2 × 3                     |\n| 7         | 7   | true   | Prime                     |\n| 8         | 8   | false  | 2 × 4                     |\n| 9         | 9   | false  | 3 × 3                     |\n| 10        | 10  | false  | 2 × 5                     |\n| 11        | 11  | true   | Prime                     |\n| 12        | 12  | false  | 2 × 6                     |\n| 13        | 13  | true   | Prime                     |\n| 14        | 14  | false  | 2 × 7                     |\n| 15        | 15  | false  | 3 × 5                     |\n| 16        | 16  | false  | 4 × 4                     |\n| 17        | 17  | true   | Prime                     |\n| 18        | 18  | false  | 2 × 9                     |\n| 19        | 19  | true   | Prime                     |\n| 20        | 20  | false  | 2 × 10                    |\n| 21        | 21  | false  | 3 × 7                     |\n| 22        | 22  | false  | 2 × 11                    |\n| 23        | 23  | true   | Prime                     |\n| 24        | 24  | false  | 2 × 12                    |\n| 25        | 25  | false  | 5 × 5                     |\n| 26        | 26  | false  | 2 × 13                    |\n| 27        | 27  | false  | 3 × 9                     |\n| 28        | 28  | false  | 2 × 14                    |\n| 29        | 29  | true   | Prime                     |\n| 30        | 30  | false  | 2 × 15                    |\n| 31        | 31  | true   | Prime                     |\n| 32        | 32  | false  | 2 × 16                    |\n| 33        | 33  | false  | 3 × 11                    |\n| 34        | 34  | false  | 2 × 17                    |\n| 35        | 35  | false  | 5 × 7                     |\n| 36        | 36  | false  | 6 × 6                     |\n| 37        | 37  | true   | Prime                     |\n| 38        | 38  | false  | 2 × 19                    |\n| 39        | 39  | false  | 3 × 13                    |\n| 40        | 40  | false  | 2 × 20                    |",
            "example": {
              "input": "N = 29",
              "output": "true",
              "explanation": "29 is a prime number as it has no divisors other than 1 and itself."
            },
            "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
        },
        {
            "id": 10,
            "title": "Count number of primes ≤ N (Leetcode: Count Primes)",
            "description": "Given an integer n, return the number of prime numbers strictly less than n.\n\n| Test Case | N   | Output | Notes                                 |\n|-----------|-----|--------|---------------------------------------|\n| 1         | 0   | 0      | No primes                             |\n| 2         | 1   | 0      | No primes                             |\n| 3         | 2   | 0      | Less than 2                           |\n| 4         | 3   | 1      | Prime: 2                              |\n| 5         | 4   | 2      | 2, 3                                  |\n| 6         | 5   | 2      | 2, 3                                  |\n| 7         | 6   | 3      | 2, 3, 5                               |\n| 8         | 7   | 3      | 2, 3, 5                               |\n| 9         | 8   | 4      | 2, 3, 5, 7                            |\n| 10        | 9   | 4      | 2, 3, 5, 7                            |\n| 11        | 10  | 4      | 2, 3, 5, 7                            |\n| 12        | 11  | 4      | 2, 3, 5, 7                            |\n| 13        | 12  | 5      | 2, 3, 5, 7, 11                        |\n| 14        | 13  | 5      | 2, 3, 5, 7, 11                        |\n| 15        | 14  | 6      | Add 13                                |\n| 16        | 15  | 6      |                                       |\n| 17        | 16  | 6      |                                       |\n| 18        | 17  | 6      |                                       |\n| 19        | 18  | 7      | Add 17                                |\n| 20        | 19  | 7      |                                       |\n| 21        | 20  | 8      | Add 19                                |\n| 22        | 25  | 9      | Add 23                                |\n| 23        | 30  | 10     | Up to 29                              |\n| 24        | 40  | 12     |                                       |\n| 25        | 50  | 15     |                                       |\n| 26        | 60  | 17     |                                       |\n| 27        | 70  | 19     |                                       |\n| 28        | 80  | 22     |                                       |\n| 29        | 90  | 24     |                                       |\n| 30        | 100 | 25     | Up to 97                              |",
            "example": {
              "input": "n = 20",
              "output": "8",
              "explanation": "There are 8 primes less than 20: 2, 3, 5, 7, 11, 13, 17, 19."
            },
            "answer": "def count_primes(n):\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)"
        },
        {
            "id": 11,
            "title": "Closest Prime to a Number",
            "description": "Given a number `n`, find the closest prime number to `n`. If two primes are equally distant, return the smaller one.\n\n| Test Case | n   | Output | Notes                        |\n|-----------|-----|--------|------------------------------|\n| 1         | 1   | 2      | Smallest prime is 2          |\n| 2         | 2   | 2      | 2 is prime                   |\n| 3         | 3   | 3      | 3 is prime                   |\n| 4         | 4   | 3      | 3 and 5 → 3 is closer        |\n| 5         | 5   | 5      | Prime                        |\n| 6         | 6   | 5      | Closest is 5                 |\n| 7         | 7   | 7      | Prime                        |\n| 8         | 8   | 7      |                              |\n| 9         | 9   | 7      |                              |\n| 10        | 10  | 11     |                              |\n| 11        | 11  | 11     |                              |\n| 12        | 12  | 11     |                              |\n| 13        | 13  | 13     |                              |\n| 14        | 14  | 13     |                              |\n| 15        | 15  | 13     |                              |\n| 16        | 16  | 17     |                              |\n| 17        | 17  | 17     |                              |\n| 18        | 18  | 17     |                              |\n| 19        | 19  | 19     |                              |\n| 20        | 20  | 19     |                              |\n| 21        | 21  | 19     |                              |\n| 22        | 22  | 23     |                              |\n| 23        | 23  | 23     |                              |\n| 24        | 24  | 23     |                              |\n| 25        | 25  | 23     |                              |\n| 26        | 26  | 29     |                              |\n| 27        | 27  | 29     |                              |\n| 28        | 28  | 29     |                              |\n| 29        | 29  | 29     |                              |\n| 30        | 30  | 29     |                              |\n| 31        | 31  | 31     |                              |\n| 32        | 32  | 31     |                              |\n| 33        | 33  | 31     |                              |\n| 34        | 34  | 37     |                              |\n| 35        | 35  | 37     |                              |\n| 36        | 36  | 37     |                              |\n| 37        | 37  | 37     |                              |\n| 38        | 38  | 37     |                              |\n| 39        | 39  | 37     |                              |\n| 40        | 40  | 41     |                              |",
            "example": {
              "input": "n = 10",
              "output": "11",
              "explanation": "The primes closest to 10 are 7 and 11, but 11 is closer, so the answer is 11."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef closest_prime(n):\n    if is_prime(n):\n        return n\n    offset = 1\n    while True:\n        if n - offset >= 2 and is_prime(n - offset):\n            return n - offset\n        if is_prime(n + offset):\n            return n + offset\n        offset += 1"
        },
        {
            "id": 12,
            "title": "Sum of Primes ≤ N",
            "description": "Given a number N, return the sum of all prime numbers less than or equal to N.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 0      |\n| 2         | 2   | 2      |\n| 3         | 3   | 5      |\n| 4         | 5   | 10     |\n| 5         | 10  | 17     |\n| 6         | 15  | 41     |\n| 7         | 20  | 77     |\n| 8         | 25  | 100    |\n| 9         | 30  | 129    |\n| 10        | 35  | 160    |\n| 11        | 40  | 197    |\n| 12        | 45  | 228    |\n| 13        | 50  | 328    |\n| 14        | 55  | 381    |\n| 15        | 60  | 440    |\n| 16        | 65  | 446    |\n| 17        | 70  | 568    |\n| 18        | 75  | 639    |\n| 19        | 80  | 712    |\n| 20        | 85  | 761    |\n| 21        | 90  | 822    |\n| 22        | 95  | 899    |\n| 23        | 100 | 1060   |\n| 24        | 110 | 1221   |\n| 25        | 120 | 1394   |\n| 26        | 130 | 1532   |\n| 27        | 140 | 1692   |\n| 28        | 150 | 1867   |\n| 29        | 160 | 1988   |\n| 30        | 170 | 2153   |\n| 31        | 180 | 2323   |\n| 32        | 190 | 2472   |\n| 33        | 200 | 4221   |\n| 34        | 210 | 4406   |\n| 35        | 220 | 4598   |\n| 36        | 230 | 4792   |\n| 37        | 240 | 4983   |\n| 38        | 250 | 5203   |\n| 39        | 260 | 5418   |\n| 40        | 270 | 5632   |",
            "example": {
              "input": "N = 10",
              "output": "17",
              "explanation": "Prime numbers ≤ 10 are [2, 3, 5, 7]; their sum is 17."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(N):\n    return sum(i for i in range(2, N+1) if is_prime(i))"
        },
        {
            "id": 13,
            "title": "Goldbach’s Conjecture",
            "description": "Given an even number ≥ 4, return one possible pair of prime numbers whose sum equals the given number. If multiple answers exist, return any.\n\n| Test Case | Even N | Output        |\n|-----------|--------|---------------|\n| 1         | 4      | (2, 2)        |\n| 2         | 6      | (3, 3)        |\n| 3         | 8      | (3, 5)        |\n| 4         | 10     | (3, 7)        |\n| 5         | 12     | (5, 7)        |\n| 6         | 14     | (3, 11)       |\n| 7         | 16     | (5, 11)       |\n| 8         | 18     | (5, 13)       |\n| 9         | 20     | (3, 17)       |\n| 10        | 22     | (3, 19)       |\n| 11        | 24     | (5, 19)       |\n| 12        | 26     | (3, 23)       |\n| 13        | 28     | (5, 23)       |\n| 14        | 30     | (7, 23)       |\n| 15        | 32     | (3, 29)       |\n| 16        | 34     | (5, 29)       |\n| 17        | 36     | (5, 31)       |\n| 18        | 38     | (7, 31)       |\n| 19        | 40     | (3, 37)       |\n| 20        | 42     | (5, 37)       |\n| 21        | 44     | (3, 41)       |\n| 22        | 46     | (5, 41)       |\n| 23        | 48     | (7, 41)       |\n| 24        | 50     | (3, 47)       |\n| 25        | 52     | (5, 47)       |\n| 26        | 54     | (7, 47)       |\n| 27        | 56     | (3, 53)       |\n| 28        | 58     | (5, 53)       |\n| 29        | 60     | (7, 53)       |\n| 30        | 62     | (3, 59)       |\n| 31        | 64     | (5, 59)       |\n| 32        | 66     | (7, 59)       |\n| 33        | 68     | (3, 65)       |\n| 34        | 70     | (11, 59)      |\n| 35        | 72     | (17, 55)      |\n| 36        | 74     | (7, 67)       |\n| 37        | 76     | (3, 73)       |\n| 38        | 78     | (5, 73)       |\n| 39        | 80     | (7, 73)       |\n| 40        | 82     | (11, 71)      |",
            "example": {
              "input": "N = 20",
              "output": "(3, 17)",
              "explanation": "3 and 17 are primes and their sum is 20."
            },
            "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef goldbach_pair(n):\n    for i in range(2, n//2 + 1):\n        if is_prime(i) and is_prime(n - i):\n            return (i, n - i)\n    return None"
        },
        {
            "id": 14,
            "title": "Modular Exponentiation (a^b % mod)",
            "description": "Given integers a, b, and mod, compute (a^b) % mod efficiently.\n\n| Test Case | a   | b   | mod      | Output   |\n|-----------|-----|-----|----------|----------|\n| 1         | 2   | 3   | 5        | 3        |\n| 2         | 5   | 3   | 13       | 8        |\n| 3         | 2   | 10  | 1000     | 24       |\n| 4         | 10  | 9   | 6        | 4        |\n| 5         | 3   | 7   | 11       | 9        |\n| 6         | 7   | 6   | 13       | 9        |\n| 7         | 4   | 13  | 497      | 445      |\n| 8         | 2   | 100 | 1009     | 949      |\n| 9         | 3   | 200 | 1009     | 808      |\n| 10        | 2   | 500 | 998244353| 352668376|\n| 11        | 7   | 13  | 123      | 112      |\n| 12        | 9   | 9   | 19       | 11       |\n| 13        | 8   | 8   | 8        | 0        |\n| 14        | 2   | 100000 | 1000000007 | 607723520|\n| 15        | 2   | 1e6 | 998244353| 371010124|\n| 16        | 10  | 5   | 11       | 10       |\n| 17        | 2   | 20  | 100      | 76       |\n| 18        | 3   | 100 | 17       | 16       |\n| 19        | 7   | 10  | 13       | 3        |\n| 20        | 17  | 3   | 19       | 11       |\n| 21        | 5   | 10  | 13       | 5        |\n| 22        | 1   | 1e6 | 99991    | 1        |\n| 23        | 100 | 100 | 101      | 1        |\n| 24        | 123 | 456 | 789      | 699      |\n| 25        | 99  | 99  | 999      | 738      |\n| 26        | 77  | 88  | 999      | 905      |\n| 27        | 3   | 333 | 444      | 219      |\n| 28        | 23  | 57  | 10007    | 8254     |\n| 29        | 2   | 2   | 2        | 0        |\n| 30        | 4   | 4   | 5        | 1        |\n| 31        | 10  | 3   | 3        | 1        |\n| 32        | 7   | 7   | 9        | 4        |\n| 33        | 11  | 11  | 12       | 1        |\n| 34        | 6   | 6   | 11       | 3        |\n| 35        | 9   | 7   | 13       | 3        |\n| 36        | 2   | 30  | 17       | 4        |\n| 37        | 19  | 12  | 23       | 4        |\n| 38        | 123 | 456 | 789      | 699      |\n| 39        | 555 | 444 | 333      | 84       |\n| 40        | 8   | 8   | 100      | 96       |",
            "example": {
              "input": "a = 2, b = 10, mod = 1000",
              "output": "24",
              "explanation": "2^10 = 1024, and 1024 % 1000 = 24"
            },
            "answer": "def mod_pow(a, b, mod):\n    result = 1\n    a = a % mod\n    while b > 0:\n        if b % 2 == 1:\n            result = (result * a) % mod\n        a = (a * a) % mod\n        b //= 2\n    return result"
        },
        {
            "id": 15,
            "title": "Find Modular Inverse of A mod M",
            "description": "Given integers A and M, find the modular inverse of A modulo M. The result is an integer X such that (A × X) % M = 1.\n\n| Test Case | A   | M   | Output |\n|-----------|-----|-----|--------|\n| 1         | 3   | 11  | 4      |\n| 2         | 10  | 17  | 12     |\n| 3         | 7   | 13  | 2      |\n| 4         | 9   | 23  | 18     |\n| 5         | 2   | 5   | 3      |\n| 6         | 1   | 7   | 1      |\n| 7         | 4   | 7   | 2      |\n| 8         | 5   | 12  | 5      |\n| 9         | 17  | 31  | 11     |\n| 10        | 19  | 29  | 26     |\n| 11        | 13  | 17  | 4      |\n| 12        | 99  | 101 | 71     |\n| 13        | 123 | 1009| 892    |\n| 14        | 7   | 26  | 15     |\n| 15        | 8   | 21  | 8      |\n| 16        | 15  | 26  | 7      |\n| 17        | 26  | 99  | 42     |\n| 18        | 49  | 101 | 33     |\n| 19        | 88  | 123 | 37     |\n| 20        | 42  | 91  | 13     |\n| 21        | 35  | 97  | 50     |\n| 22        | 11  | 13  | 6      |\n| 23        | 23  | 100 | 87     |\n| 24        | 21  | 26  | 5      |\n| 25        | 101 | 103| 61     |\n| 26        | 123 | 157| 38     |\n| 27        | 99  | 121| 100     |\n| 28        | 55  | 73 | 48     |\n| 29        | 66  | 97 | 86     |\n| 30        | 77  | 89 | 77     |\n| 31        | 100 | 101| 100     |\n| 32        | 200 | 211| 74     |\n| 33        | 321 | 401| 154     |\n| 34        | 555 | 701| 222     |\n| 35        | 666 | 777| 334     |\n| 36        | 789 | 997| 238     |\n| 37        | 99  | 125| 114     |\n| 38        | 1   | 2  | 1      |\n| 39        | 9   | 10 | None   |\n| 40        | 10  | 20 | None   |",
            "example": {
              "input": "A = 3, M = 11",
              "output": "4",
              "explanation": "Because (3 × 4) % 11 = 12 % 11 = 1"
            },
            "answer": "def mod_inverse(a, m):\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return g, x, y\n\n    g, x, _ = extended_gcd(a, m)\n    if g != 1:\n        return None  # Inverse doesn't exist\n    else:\n        return x % m"
        },
        {
            "id": 16,
            "title": "Check divisibility using modular arithmetic",
            "description": "Check if a number n is divisible by d using modular arithmetic.\n\n| Test Case | n   | d   | Output |\n|-----------|-----|-----|--------|\n| 1         | 10  | 2   | True   |\n| 2         | 15  | 4   | False  |\n| 3         | 100 | 10  | True   |\n| 4         | 99  | 3   | True   |\n| 5         | 123 | 11  | False  |\n| 6         | 50  | 5   | True   |\n| 7         | 100 | 5   | True   |\n| 8         | 70  | 7   | True   |\n| 9         | 88  | 11  | True   |\n| 10        | 65  | 13  | False  |\n| 11        | 200 | 5   | True   |\n| 12        | 150 | 25  | True   |\n| 13        | 12  | 3   | True   |\n| 14        | 300 | 50  | True   |\n| 15        | 500 | 25  | True   |\n| 16        | 36  | 4   | True   |\n| 17        | 82  | 41  | True   |\n| 18        | 99  | 9   | True   |\n| 19        | 72  | 9   | True   |\n| 20        | 110 | 5   | True   |\n| 21        | 133 | 7   | True   |\n| 22        | 67  | 3   | False  |\n| 23        | 900 | 5   | True   |\n| 24        | 980 | 7   | True   |\n| 25        | 200 | 8   | False  |\n| 26        | 600 | 100 | True   |\n| 27        | 740 | 20  | True   |\n| 28        | 1300| 13  | True   |\n| 29        | 1600| 10  | True   |\n| 30        | 1200| 5   | True   |\n| 31        | 3000| 100 | True   |\n| 32        | 1000| 50  | True   |\n| 33        | 1800| 3   | True   |\n| 34        | 1500| 25  | True   |\n| 35        | 800 | 4   | True   |\n| 36        | 500 | 20  | True   |\n| 37        | 600 | 30  | True   |\n| 38        | 700 | 50  | True   |\n| 39        | 120 | 12  | True   |\n| 40        | 1000| 50  | True   |",
            "example": {
              "input": "n = 100, d = 10",
              "output": "True",
              "explanation": "100 is divisible by 10."
            },
            "answer": "def is_divisible(n, d):\n    return n % d == 0\n\nn, d = map(int, input().split())\nprint(is_divisible(n, d))"
        },
        {
            "id": 17,
            "title": "Count digits in N without converting to string",
            "description": "Given a number N, count the number of digits without converting the number to a string.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 1234 | 4      |\n| 2         | 7    | 1      |\n| 3         | 98765| 5      |\n| 4         | 1    | 1      |\n| 5         | 1000 | 4      |\n| 6         | 999  | 3      |\n| 7         | 25   | 2      |\n| 8         | 100  | 3      |\n| 9         | 5432 | 4      |\n| 10        | 10000| 5      |\n| 11        | 90   | 2      |\n| 12        | 56   | 2      |\n| 13        | 1    | 1      |\n| 14        | 456  | 3      |\n| 15        | 87542| 5      |\n| 16        | 1001 | 4      |\n| 17        | 700  | 3      |\n| 18        | 1000 | 4      |\n| 19        | 256  | 3      |\n| 20        | 78   | 2      |\n| 21        | 1500 | 4      |\n| 22        | 870  | 3      |\n| 23        | 543  | 3      |\n| 24        | 9999 | 4      |\n| 25        | 1000 | 4      |\n| 26        | 9876 | 4      |\n| 27        | 258  | 3      |\n| 28        | 357  | 3      |\n| 29        | 5000 | 4      |\n| 30        | 478  | 3      |\n| 31        | 112  | 3      |\n| 32        | 12345| 5      |\n| 33        | 800  | 3      |\n| 34        | 78   | 2      |\n| 35        | 159  | 3      |\n| 36        | 146  | 3      |\n| 37        | 567  | 3      |\n| 38        | 444  | 3      |\n| 39        | 320  | 3      |\n| 40        | 555  | 3      |",
            "example": {
              "input": "N = 1234",
              "output": "4",
              "explanation": "1234 has 4 digits."
            },
            "answer": "def count_digits(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\nn = int(input())\nprint(count_digits(n))"
        },
        {
            "id": 18,
            "title": "Check if a number is a palindrome numerically",
            "description": "Given a number N, check if it is a palindrome numerically.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 121  | True   |\n| 2         | 123  | False  |\n| 3         | 98789| True   |\n| 4         | 1001 | True   |\n| 5         | 456  | False  |\n| 6         | 909  | True   |\n| 7         | 12   | False  |\n| 8         | 10   | False  |\n| 9         | 121  | True   |\n| 10        | 111  | True   |\n| 11        | 555  | True   |\n| 12        | 12321| True   |\n| 13        | 1    | True   |\n| 14        | 100  | False  |\n| 15        | 101  | True   |\n| 16        | 222  | True   |\n| 17        | 12345| False  |\n| 18        | 8778 | True   |\n| 19        | 88   | True   |\n| 20        | 123321| True   |\n| 21        | 55555| True   |\n| 22        | 99999| True   |\n| 23        | 10001| True   |\n| 24        | 22222| True   |\n| 25        | 33333| True   |\n| 26        | 44444| True   |\n| 27        | 55555| True   |\n| 28        | 9876 | False  |\n| 29        | 12121| True   |\n| 30        | 24242| False  |\n| 31        | 99   | True   |\n| 32        | 1001 | True   |\n| 33        | 34343| True   |\n| 34        | 555  | True   |\n| 35        | 67676| True   |\n| 36        | 1234 | False  |\n| 37        | 76567| True   |\n| 38        | 1001 | True   |\n| 39        | 23432| True   |\n| 40        | 88888| True   |",
            "example": {
              "input": "N = 121",
              "output": "True",
              "explanation": "121 is a palindrome."
            },
            "answer": "def is_palindrome(n):\n    reversed_num = 0\n    original = n\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num\n\nn = int(input())\nprint(is_palindrome(n))"
        },
        {
            "id": 19,
            "title": "Sum of digits until one digit remains (Digital Root)",
            "description": "Given a number N, compute the digital root, which is the sum of digits of N until a single digit remains.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 38   | 2      |\n| 2         | 123  | 6      |\n| 3         | 987  | 6      |\n| 4         | 9999 | 9      |\n| 5         | 1111 | 4      |\n| 6         | 255  | 3      |\n| 7         | 56   | 2      |\n| 8         | 19   | 1      |\n| 9         | 5    | 5      |\n| 10        | 32   | 5      |\n| 11        | 222  | 6      |\n| 12        | 49   | 4      |\n| 13        | 10   | 1      |\n| 14        | 102  | 3      |\n| 15        | 573  | 6      |\n| 16        | 777  | 3      |\n| 17        | 18   | 9      |\n| 18        | 99   | 9      |\n| 19        | 56   | 2      |\n| 20        | 23   | 5      |\n| 21        | 200  | 2      |\n| 22        | 129  | 3      |\n| 23        | 100  | 1      |\n| 24        | 444  | 3      |\n| 25        | 891  | 9      |\n| 26        | 1001 | 2      |\n| 27        | 557  | 7      |\n| 28        | 782  | 8      |\n| 29        | 456  | 6      |\n| 30        | 233  | 8      |\n| 31        | 156  | 3      |\n| 32        | 135  | 9      |\n| 33        | 912  | 3      |\n| 34        | 678  | 3      |\n| 35        | 843  | 6      |\n| 36        | 118  | 1      |\n| 37        | 412  | 7      |\n| 38        | 892  | 1      |\n| 39        | 147  | 3      |\n| 40        | 9999 | 9      |",
            "example": {
              "input": "N = 123",
              "output": "6",
              "explanation": "1 + 2 + 3 = 6, which is a single digit."
            },
            "answer": "def digital_root(n):\n    while n >= 10:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        n = total\n    return n\n\nn = int(input())\nprint(digital_root(n))"
        },
        {
            "id": 20,
            "title": "Count trailing zeroes in factorial of N",
            "description": "Given an integer N, find the number of trailing zeroes in N!. The trailing zeroes are created by factors of 10, which are the result of multiplying 2 and 5.\n\n| Test Case | N    | Output |\n|-----------|------|--------|\n| 1         | 5    | 1      |\n| 2         | 10   | 2      |\n| 3         | 20   | 4      |\n| 4         | 25   | 6      |\n| 5         | 100  | 24     |\n| 6         | 50   | 12     |\n| 7         | 15   | 3      |\n| 8         | 200  | 49     |\n| 9         | 1000 | 249    |\n| 10        | 500  | 124    |\n| 11        | 200  | 49     |\n| 12        | 300  | 74     |\n| 13        | 123  | 28     |\n| 14        | 1    | 0      |\n| 15        | 3    | 0      |\n| 16        | 8    | 1      |\n| 17        | 7    | 1      |\n| 18        | 20   | 4      |\n| 19        | 150  | 37     |\n| 20        | 350  | 87     |\n| 21        | 40   | 9      |\n| 22        | 85   | 20     |\n| 23        | 175  | 42     |\n| 24        | 7    | 1      |\n| 25        | 16   | 3      |\n| 26        | 33   | 7      |\n| 27        | 60   | 14     |\n| 28        | 72   | 15     |\n| 29        | 96   | 22     |\n| 30        | 50   | 12     |\n| 31        | 10   | 2      |\n| 32        | 100  | 24     |\n| 33        | 32   | 7      |\n| 34        | 72   | 15     |\n| 35        | 125  | 31     |\n| 36        | 200  | 49     |\n| 37        | 150  | 37     |\n| 38        | 600  | 149    |\n| 39        | 1000 | 249    |\n| 40        | 250  | 62     |",
            "example": {
              "input": "N = 100",
              "output": "24",
              "explanation": "100! has 24 trailing zeroes."
            },
            "answer": "def trailing_zeroes(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n\nn = int(input())\nprint(trailing_zeroes(n))"
        },
        {
            "id": 21,
            "title": "Compute Factorial of Large Numbers",
            "description": "Given an integer N, compute the factorial of N. Since factorial values grow very large, return it as a string.\n\n| Test Case | N   | Output (last 6 digits) |\n|-----------|-----|------------------------|\n| 1         | 1   | 1                      |\n| 2         | 2   | 2                      |\n| 3         | 3   | 6                      |\n| 4         | 5   | 120                    |\n| 5         | 6   | 720                    |\n| 6         | 7   | 5040                   |\n| 7         | 10  | 3628800                |\n| 8         | 12  | 479001600              |\n| 9         | 15  | 1307674368000          |\n| 10        | 17  | 355687428096000        |\n| 11        | 18  | 6402373705728000       |\n| 12        | 19  | 121645100408832000     |\n| 13        | 20  | 2432902008176640000    |\n| 14        | 21  | 51090942171709440000   |\n| 15        | 22  | 1124000727777607680000 |\n| 16        | 23  | 25852016738884976640000|\n| 17        | 24  | 620448401733239439360000|\n| 18        | 25  | 15511210043330985984000000|\n| 19        | 30  | 265252859812191058636308480000000|\n| 20        | 35  | 10333147966386144929666651337523200000000|\n| 21        | 40  | 815915283247897734345611269596115894272000000000|\n| 22        | 45  | 119622220865480194561963161495657715064383733760000000000|\n| 23        | 50  | 30414093201713378043612608166064768844377641568960512000000000000|\n| 24        | 55  | 1.2696403353658276e+73 |\n| 25        | 60  | 8.32098711274139e+81   |\n| 26        | 65  | 8.24765059208247e+89   |\n| 27        | 70  | 1.19785716699699e+99   |\n| 28        | 75  | 2.48091408113954e+110  |\n| 29        | 80  | 7.15694570462638e+120  |\n| 30        | 85  | 3.67001722896041e+131  |\n| 31        | 90  | 1.48571596448176e+142  |\n| 32        | 95  | 1.03299784882391e+153  |\n| 33        | 100 | 9.33262154439441e+157  |\n| 34        | 110 | 9.45993998465871e+177  |\n| 35        | 120 | 6.68950291344913e+198  |\n| 36        | 130 | 2.61550412860534e+220  |\n| 37        | 140 | 1.34620124757175e+242  |\n| 38        | 150 | 5.71338395644585e+263  |\n| 39        | 160 | 2.92102484338015e+285  |\n| 40        | 170 | 7.257415615308e+306    |",
            "example": {
              "input": "N = 10",
              "output": "3628800",
              "explanation": "10! = 3628800"
            },
            "answer": "def factorial_large(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return str(result)\n\nn = int(input())\nprint(factorial_large(n))"
        },
        {
            "id": 22,
            "title": "Number of Divisors of N",
            "description": "Given an integer N, find the total number of its divisors.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 1      |\n| 2         | 2   | 2      |\n| 3         | 3   | 2      |\n| 4         | 4   | 3      |\n| 5         | 5   | 2      |\n| 6         | 6   | 4      |\n| 7         | 8   | 4      |\n| 8         | 9   | 3      |\n| 9         | 10  | 4      |\n| 10        | 12  | 6      |\n| 11        | 15  | 4      |\n| 12        | 16  | 5      |\n| 13        | 18  | 6      |\n| 14        | 20  | 6      |\n| 15        | 21  | 4      |\n| 16        | 24  | 8      |\n| 17        | 25  | 3      |\n| 18        | 28  | 6      |\n| 19        | 30  | 8      |\n| 20        | 32  | 6      |\n| 21        | 36  | 9      |\n| 22        | 40  | 8      |\n| 23        | 44  | 6      |\n| 24        | 45  | 6      |\n| 25        | 48  | 10     |\n| 26        | 50  | 6      |\n| 27        | 60  | 12     |\n| 28        | 64  | 7      |\n| 29        | 72  | 12     |\n| 30        | 75  | 6      |\n| 31        | 80  | 10     |\n| 32        | 90  | 12     |\n| 33        | 96  | 12     |\n| 34        | 100 | 9      |\n| 35        | 120 | 16     |\n| 36        | 150 | 12     |\n| 37        | 180 | 18     |\n| 38        | 200 | 12     |\n| 39        | 225 | 9      |\n| 40        | 256 | 9      |",
            "example": {
              "input": "N = 36",
              "output": "9",
              "explanation": "36 has 9 divisors: 1, 2, 3, 4, 6, 9, 12, 18, 36"
            },
            "answer": "def count_divisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 2 if i != n // i else 1\n        i += 1\n    return count\n\nn = int(input())\nprint(count_divisors(n))"
        },
        {
            "id": 23,
            "title": "Sum of Divisors of N",
            "description": "Given an integer N, find the sum of all its positive divisors.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | 1      |\n| 2         | 2   | 3      |\n| 3         | 3   | 4      |\n| 4         | 4   | 7      |\n| 5         | 5   | 6      |\n| 6         | 6   | 12     |\n| 7         | 7   | 8      |\n| 8         | 8   | 15     |\n| 9         | 9   | 13     |\n| 10        | 10  | 18     |\n| 11        | 11  | 12     |\n| 12        | 12  | 28     |\n| 13        | 14  | 24     |\n| 14        | 15  | 24     |\n| 15        | 16  | 31     |\n| 16        | 18  | 39     |\n| 17        | 20  | 42     |\n| 18        | 24  | 60     |\n| 19        | 25  | 31     |\n| 20        | 28  | 56     |\n| 21        | 30  | 72     |\n| 22        | 32  | 63     |\n| 23        | 36  | 91     |\n| 24        | 40  | 98     |\n| 25        | 45  | 78     |\n| 26        | 48  | 124    |\n| 27        | 50  | 93     |\n| 28        | 60  | 168    |\n| 29        | 64  | 127    |\n| 30        | 72  | 195    |\n| 31        | 80  | 186    |\n| 32        | 90  | 234    |\n| 33        | 96  | 252    |\n| 34        | 100 | 217    |\n| 35        | 120 | 360    |\n| 36        | 150 | 372    |\n| 37        | 180 | 546    |\n| 38        | 200 | 465    |\n| 39        | 225 | 403    |\n| 40        | 256 | 511    |",
            "example": {
              "input": "N = 28",
              "output": "56",
              "explanation": "The divisors of 28 are 1, 2, 4, 7, 14, 28. Their sum is 56."
            },
            "answer": "def sum_of_divisors(n):\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n        i += 1\n    return total\n\nn = int(input())\nprint(sum_of_divisors(n))"
        },
        {
            "id": 24,
            "title": "Check if a Number is a Power of 2",
            "description": "Given an integer N, determine if it is a power of 2.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | False  |\n| 2         | 1   | True   |\n| 3         | 2   | True   |\n| 4         | 3   | False  |\n| 5         | 4   | True   |\n| 6         | 5   | False  |\n| 7         | 6   | False  |\n| 8         | 7   | False  |\n| 9         | 8   | True   |\n| 10        | 9   | False  |\n| 11        | 10  | False  |\n| 12        | 11  | False  |\n| 13        | 12  | False  |\n| 14        | 13  | False  |\n| 15        | 14  | False  |\n| 16        | 15  | False  |\n| 17        | 16  | True   |\n| 18        | 17  | False  |\n| 19        | 18  | False  |\n| 20        | 19  | False  |\n| 21        | 20  | False  |\n| 22        | 21  | False  |\n| 23        | 22  | False  |\n| 24        | 23  | False  |\n| 25        | 24  | False  |\n| 26        | 25  | False  |\n| 27        | 26  | False  |\n| 28        | 27  | False  |\n| 29        | 28  | False  |\n| 30        | 29  | False  |\n| 31        | 30  | False  |\n| 32        | 31  | False  |\n| 33        | 32  | True   |\n| 34        | 33  | False  |\n| 35        | 34  | False  |\n| 36        | 35  | False  |\n| 37        | 36  | False  |\n| 38        | 37  | False  |\n| 39        | 38  | False  |\n| 40        | 39  | False  |",
            "example": {
              "input": "N = 16",
              "output": "True",
              "explanation": "16 is 2 raised to the power 4."
            },
            "answer": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\nn = int(input())\nprint(is_power_of_two(n))"
        },
        {
            "id": 25,
            "title": "Check if a Number Can Be Expressed as Sum of Two Squares",
            "description": "Determine whether a given positive integer N can be expressed as the sum of two squares, i.e., N = a² + b² for some integers a and b.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 1   | True   |\n| 2         | 2   | True   |\n| 3         | 3   | False  |\n| 4         | 4   | True   |\n| 5         | 5   | True   |\n| 6         | 6   | False  |\n| 7         | 7   | False  |\n| 8         | 8   | True   |\n| 9         | 9   | True   |\n| 10        | 10  | True   |\n| 11        | 11  | False  |\n| 12        | 12  | False  |\n| 13        | 13  | True   |\n| 14        | 14  | False  |\n| 15        | 15  | False  |\n| 16        | 16  | True   |\n| 17        | 17  | True   |\n| 18        | 18  | True   |\n| 19        | 19  | False  |\n| 20        | 20  | True   |\n| 21        | 21  | False  |\n| 22        | 22  | False  |\n| 23        | 23  | False  |\n| 24        | 24  | False  |\n| 25        | 25  | True   |\n| 26        | 26  | True   |\n| 27        | 27  | False  |\n| 28        | 28  | False  |\n| 29        | 29  | True   |\n| 30        | 30  | False  |\n| 31        | 31  | False  |\n| 32        | 32  | True   |\n| 33        | 33  | False  |\n| 34        | 34  | False  |\n| 35        | 35  | False  |\n| 36        | 36  | True   |\n| 37        | 37  | True   |\n| 38        | 38  | False  |\n| 39        | 39  | False  |\n| 40        | 40  | True   |",
            "example": {
              "input": "N = 25",
              "output": "True",
              "explanation": "25 can be expressed as 3² + 4²."
            },
            "answer": "from math import isqrt\n\ndef is_sum_of_two_squares(n):\n    for a in range(isqrt(n) + 1):\n        b_squared = n - a * a\n        b = isqrt(b_squared)\n        if b * b == b_squared:\n            return True\n    return False\n\nn = int(input())\nprint(is_sum_of_two_squares(n))"
        },
        {
            "id": 26,
            "title": "Euler’s Totient Function φ(n)",
            "description": "Compute Euler’s Totient Function φ(n), which counts the number of integers between 1 and n inclusive that are coprime to n.\n\n| Test Case | n   | φ(n) |\n|-----------|-----|------|\n| 1         | 1   | 1    |\n| 2         | 2   | 1    |\n| 3         | 3   | 2    |\n| 4         | 4   | 2    |\n| 5         | 5   | 4    |\n| 6         | 6   | 2    |\n| 7         | 7   | 6    |\n| 8         | 8   | 4    |\n| 9         | 9   | 6    |\n| 10        | 10  | 4    |\n| 11        | 11  | 10   |\n| 12        | 12  | 4    |\n| 13        | 13  | 12   |\n| 14        | 14  | 6    |\n| 15        | 15  | 8    |\n| 16        | 16  | 8    |\n| 17        | 17  | 16   |\n| 18        | 18  | 6    |\n| 19        | 19  | 18   |\n| 20        | 20  | 8    |\n| 21        | 21  | 12   |\n| 22        | 22  | 10   |\n| 23        | 23  | 22   |\n| 24        | 24  | 8    |\n| 25        | 25  | 20   |\n| 26        | 26  | 12   |\n| 27        | 27  | 18   |\n| 28        | 28  | 12   |\n| 29        | 29  | 28   |\n| 30        | 30  | 8    |\n| 31        | 31  | 30   |\n| 32        | 32  | 16   |\n| 33        | 33  | 20   |\n| 34        | 34  | 16   |\n| 35        | 35  | 24   |\n| 36        | 36  | 12   |\n| 37        | 37  | 36   |\n| 38        | 38  | 18   |\n| 39        | 39  | 24   |\n| 40        | 40  | 16   |",
            "example": {
              "input": "n = 9",
              "output": "6",
              "explanation": "The numbers less than 9 that are coprime to 9 are 1, 2, 4, 5, 7, and 8."
            },
            "answer": "def euler_totient(n):\n    result = n\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            while n % p == 0:\n                n //= p\n            result -= result // p\n        p += 1\n    if n > 1:\n        result -= result // n\n    return result\n\nn = int(input())\nprint(euler_totient(n))"
        },
        {
            "id": 27,
            "title": "Count Set Bits in a Number",
            "description": "Given an integer N, count the number of set bits (1s) in its binary representation.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | 0      |\n| 2         | 1   | 1      |\n| 3         | 2   | 1      |\n| 4         | 3   | 2      |\n| 5         | 4   | 1      |\n| 6         | 5   | 2      |\n| 7         | 6   | 2      |\n| 8         | 7   | 3      |\n| 9         | 8   | 1      |\n| 10        | 9   | 2      |\n| 11        | 10  | 2      |\n| 12        | 11  | 3      |\n| 13        | 12  | 2      |\n| 14        | 13  | 3      |\n| 15        | 14  | 3      |\n| 16        | 15  | 4      |\n| 17        | 16  | 1      |\n| 18        | 17  | 2      |\n| 19        | 18  | 2      |\n| 20        | 19  | 3      |\n| 21        | 20  | 2      |\n| 22        | 21  | 3      |\n| 23        | 22  | 3      |\n| 24        | 23  | 4      |\n| 25        | 24  | 2      |\n| 26        | 25  | 3      |\n| 27        | 26  | 3      |\n| 28        | 27  | 4      |\n| 29        | 28  | 3      |\n| 30        | 29  | 4      |\n| 31        | 30  | 4      |\n| 32        | 31  | 5      |\n| 33        | 32  | 1      |\n| 34        | 33  | 2      |\n| 35        | 34  | 2      |\n| 36        | 35  | 3      |\n| 37        | 36  | 2      |\n| 38        | 37  | 3      |\n| 39        | 38  | 3      |\n| 40        | 39  | 4      |",
            "example": {
              "input": "N = 13",
              "output": "3",
              "explanation": "Binary representation of 13 is 1101, which has 3 set bits."
            },
            "answer": "def count_set_bits(n):\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\n\nn = int(input())\nprint(count_set_bits(n))"
        },
        {
            "id": 28,
            "title": "Find XOR of All Numbers from 1 to N",
            "description": "Given an integer N, find the XOR of all numbers from 1 to N.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | 0      |\n| 2         | 1   | 1      |\n| 3         | 2   | 3      |\n| 4         | 3   | 0      |\n| 5         | 4   | 4      |\n| 6         | 5   | 1      |\n| 7         | 6   | 7      |\n| 8         | 7   | 0      |\n| 9         | 8   | 8      |\n| 10        | 9   | 1      |\n| 11        | 10  | 11     |\n| 12        | 11  | 0      |\n| 13        | 12  | 12     |\n| 14        | 13  | 1      |\n| 15        | 14  | 15     |\n| 16        | 15  | 0      |\n| 17        | 16  | 16     |\n| 18        | 17  | 1      |\n| 19        | 18  | 19     |\n| 20        | 19  | 0      |\n| 21        | 20  | 20     |\n| 22        | 21  | 1      |\n| 23        | 22  | 23     |\n| 24        | 23  | 0      |\n| 25        | 24  | 24     |\n| 26        | 25  | 1      |\n| 27        | 26  | 27     |\n| 28        | 27  | 0      |\n| 29        | 28  | 28     |\n| 30        | 29  | 1      |\n| 31        | 30  | 31     |\n| 32        | 31  | 0      |\n| 33        | 32  | 32     |\n| 34        | 33  | 1      |\n| 35        | 34  | 35     |\n| 36        | 35  | 0      |\n| 37        | 36  | 36     |\n| 38        | 37  | 1      |\n| 39        | 38  | 39     |\n| 40        | 39  | 0      |",
            "example": {
              "input": "N = 5",
              "output": "1",
              "explanation": "1 ^ 2 ^ 3 ^ 4 ^ 5 = 1"
            },
            "answer": "def xor_1_to_n(n):\n    rem = n % 4\n    if rem == 0:\n        return n\n    elif rem == 1:\n        return 1\n    elif rem == 2:\n        return n + 1\n    else:\n        return 0\n\nn = int(input())\nprint(xor_1_to_n(n))"
        },                      
        {
            "id": 29,
            "title": "Check if N is Power of 4 Using Bitwise",
            "description": "Determine whether a given integer N is a power of 4 using bitwise operations.\n\n| Test Case | N   | Output |\n|-----------|-----|--------|\n| 1         | 0   | False  |\n| 2         | 1   | True   |\n| 3         | 2   | False  |\n| 4         | 4   | True   |\n| 5         | 8   | False  |\n| 6         | 16  | True   |\n| 7         | 32  | False  |\n| 8         | 64  | True   |\n| 9         | 128 | False  |\n| 10        | 256 | True   |\n| 11        | 512 | False  |\n| 12        | 1024| True   |\n| 13        | 2048| False  |\n| 14        | 4096| True   |\n| 15        | 8192| False  |\n| 16        | 16384|True   |\n| 17        | 32768|False  |\n| 18        | 65536|True   |\n| 19        | 131072|False |\n| 20        | 262144|True  |\n| 21        | 524288|False |\n| 22        | 1048576|True |\n| 23        | 2097152|False|\n| 24        | 4194304|True |\n| 25        | 8388608|False|\n| 26        | 16777216|True|\n| 27        | 33554432|False|\n| 28        | 67108864|True|\n| 29        | 134217728|False|\n| 30        | 268435456|True|\n| 31        | 536870912|False|\n| 32        | 1073741824|True|\n| 33        | 2147483648|False|\n| 34        | 4294967296|True|\n| 35        | 8589934592|False|\n| 36        | 17179869184|True|\n| 37        | 34359738368|False|\n| 38        | 68719476736|True|\n| 39        | 137438953472|False|\n| 40        | 274877906944|True|",
            "example": {
              "input": "N = 16",
              "output": "True",
              "explanation": "16 is 2^4, which is a power of 4."
            },
            "answer": "def is_power_of_four(n):\n    return n > 0 and (n & (n - 1)) == 0 and (n & 0x55555555) != 0\n\nn = int(input())\nprint(is_power_of_four(n))"
        },
        {
            "id": 30,
            "title": "Compute A^B where B is Large (as String)",
            "description": "Given two integers A and B, where B is a large number represented as a string, compute A raised to the power B modulo 10^9+7.\n\n| Test Case | A   | B                 | Output     |\n|-----------|-----|--------------------|------------|\n| 1         | 2   | \"3\"               | 8          |\n| 2         | 5   | \"0\"               | 1          |\n| 3         | 7   | \"1\"               | 7          |\n| 4         | 10  | \"2\"               | 100        |\n| 5         | 3   | \"4\"               | 81         |\n| 6         | 2   | \"10\"              | 1024       |\n| 7         | 2   | \"100\"             | 976371285  |\n| 8         | 2   | \"1000\"            | 688423210  |\n| 9         | 2   | \"10000\"           | 279632277  |\n| 10        | 2   | \"100000\"          | 716070898  |\n| 11        | 2   | \"1000000\"         | 688423210  |\n| 12        | 2   | \"10000000\"        | 279632277  |\n| 13        | 2   | \"100000000\"       | 716070898  |\n| 14        | 2   | \"1000000000\"      | 688423210  |\n| 15        | 2   | \"10000000000\"     | 279632277  |\n| 16        | 2   | \"100000000000\"    | 716070898  |\n| 17        | 2   | \"1000000000000\"   | 688423210  |\n| 18        | 2   | \"10000000000000\"  | 279632277  |\n| 19        | 2   | \"100000000000000\" | 716070898  |\n| 20        | 2   | \"100000000000001\" | 716070898  |\n| 21        | 3   | \"1000000\"         | 181736105  |\n| 22        | 5   | \"100000\"          | 716070898  |\n| 23        | 7   | \"1000000\"         | 770580192  |\n| 24        | 9   | \"999999\"          | 703260708  |\n| 25        | 11  | \"888888\"          | 996452125  |\n| 26        | 17  | \"123456\"          | 286146143  |\n| 27        | 19  | \"654321\"          | 251072084  |\n| 28        | 23  | \"333333\"          | 907786018  |\n| 29        | 29  | \"777777\"          | 236706642  |\n| 30        | 31  | \"111111\"          | 365870323  |\n| 31        | 37  | \"222222\"          | 437572857  |\n| 32        | 41  | \"999999\"          | 88173931   |\n| 33        | 43  | \"135791\"          | 825636120  |\n| 34        | 47  | \"246802\"          | 793558845  |\n| 35        | 53  | \"100001\"          | 799161754  |\n| 36        | 59  | \"909090\"          | 68482308   |\n| 37        | 61  | \"567890\"          | 866698092  |\n| 38        | 67  | \"999999\"          | 638590705  |\n| 39        | 71  | \"101010\"          | 857160897  |\n| 40        | 73  | \"123123\"          | 690321254  |",
            "example": {
              "input": "A = 2, B = \"100000\"",
              "output": "716070898"
            },
            "answer": "MOD = 10**9 + 7\n\ndef mod_pow(a, b_str):\n    exp = 0\n    for ch in b_str:\n        exp = (exp * 10 + int(ch)) % (MOD - 1)\n    return pow(a, exp, MOD)\n\na, b = input().split()\na = int(a)\nprint(mod_pow(a, b))"
        },
        {
  "id": 31,
  "title": "Find the Least Digit in a Number",
  "description": "Given a non-negative integer, find the smallest digit present in the number.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | 56249 | 2 | Smallest digit is 2 |\n| 2 | 0 | 0 | Only digit is 0 |\n| 3 | 9876543210 | 0 | Contains all digits |\n| 4 | 77777 | 7 | All digits same |\n| 5 | 3492 | 2 | Smallest is 2 |\n| 6 | 123456789 | 1 | Smallest is 1 |\n| 7 | 9081726354 | 0 | Smallest is 0 |\n| 8 | 2468 | 2 | Even digits only |\n| 9 | 13579 | 1 | Odd digits only |\n| 10 | 999999 | 9 | All digits are 9 |\n| 11 | 12300321 | 0 | Has 0 in middle |\n| 12 | 10 | 0 | 0 is smallest |\n| 13 | 123456780 | 0 | Contains 0 at the end |\n| 14 | 4321 | 1 | Smallest is 1 |\n| 15 | 861 | 1 | Smallest is 1 |\n",
  "example": {
    "input": "56249",
    "output": "2",
    "explanation": "Digits: 5,6,2,4,9 — minimum is 2."
  },
  "answer": "n = input()\ndigits = [int(d) for d in n]\nprint(min(digits))"
},
{
  "id": 32,
  "title": "Compute the Sum of First N Natural Numbers",
  "description": "Given an integer N, return the sum of the first N natural numbers (1 to N).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | 1 | 1 is the only number |\n| 2 | 5 | 15 | 1+2+3+4+5 = 15 |\n| 3 | 10 | 55 | Formula-based |\n| 4 | 0 | 0 | Edge case |\n| 5 | 100 | 5050 | Known total |\n| 6 | 3 | 6 | 1+2+3 |\n| 7 | 50 | 1275 | Large input |\n| 8 | 7 | 28 | Basic case |\n| 9 | 20 | 210 | Sum check |\n| 10 | 2 | 3 | 1+2 |\n| 11 | 4 | 10 | 1+2+3+4 |\n| 12 | 25 | 325 | Mid-range input |\n| 13 | 6 | 21 | Sum test |\n| 14 | 9 | 45 | 1 to 9 |\n| 15 | 15 | 120 | 1 to 15 total |\n",
  "example": {
    "input": "10",
    "output": "55",
    "explanation": "Sum of numbers from 1 to 10 is (10 * 11) / 2 = 55."
  },
  "answer":"n = int(input())\nprint(n * (n + 1) // 2)"
},
  {
  "id": 33,
  "title": "Compute the Product of First N Natural Numbers",
  "description": "Given an integer N, return the product of the first N natural numbers (1 to N), also known as the factorial of N.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 0 | 1 | By definition, 0! = 1 |\n| 2 | 1 | 1 | 1! = 1 |\n| 3 | 2 | 2 | 1×2 = 2 |\n| 4 | 3 | 6 | 1×2×3 |\n| 5 | 4 | 24 | 1×2×3×4 |\n| 6 | 5 | 120 | 5! = 120 |\n| 7 | 6 | 720 | 6! |\n| 8 | 7 | 5040 | 7! |\n| 9 | 8 | 40320 | 8! |\n| 10 | 9 | 362880 | 9! |\n| 11 | 10 | 3628800 | 10! |\n| 12 | 12 | 479001600 | 12! |\n| 13 | 15 | 1307674368000 | 15! |\n| 14 | 20 | 2432902008176640000 | 20! |\n| 15 | 13 | 6227020800 | 13! |\n",
  "example": {
    "input": "5",
    "output": "120",
    "explanation": "Product of 1×2×3×4×5 = 120."
  },
  "answer": "def product_natural(n):\n    prod = 1\n    for i in range(1, n + 1):\n        prod *= i\n    return prod\n\nn = int(input())\nprint(product_natural(n))"
},
{
  "id": 34,
  "title": "Check if a Number is a Perfect Square",
  "description": "Given a non-negative integer, determine if it is a perfect square (i.e., its square root is an integer).\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 0 | true | 0 is a perfect square (0²) |\n| 2 | 1 | true | 1 is a perfect square (1²) |\n| 3 | 4 | true | 2² = 4 |\n| 4 | 9 | true | 3² = 9 |\n| 5 | 16 | true | 4² = 16 |\n| 6 | 25 | true | 5² = 25 |\n| 7 | 26 | false | Between 5² and 6² |\n| 8 | 36 | true | 6² = 36 |\n| 9 | 50 | false | Not a perfect square |\n| 10 | 64 | true | 8² = 64 |\n| 11 | 100 | true | 10² = 100 |\n| 12 | 121 | true | 11² = 121 |\n| 13 | 123 | false | Close to 121, not a square |\n| 14 | 144 | true | 12² = 144 |\n| 15 | 169 | true | 13² = 169 |\n",
  "example": {
    "input": "49",
    "output": "true",
    "explanation": "7 × 7 = 49, so it is a perfect square."
  },
  "answer": "import math\nn = int(input())\nprint(int(math.isqrt(n)) ** 2 == n)"
},
{
  "id": 35,
  "title": "Count Perfect Squares Between Two Numbers",
  "description": "Given two integers `a` and `b`, count how many perfect squares exist in the inclusive range [a, b].\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | 1 10 | 3 | 1², 2², 3² = 1, 4, 9 |\n| 2 | 4 16 | 3 | 4, 9, 16 |\n| 3 | 1 1 | 1 | 1 is a square |\n| 4 | 2 3 | 0 | No perfect squares |\n| 5 | 10 100 | 7 | 16, 25, ..., 100 |\n| 6 | 0 0 | 1 | 0 is a square |\n| 7 | 20 30 | 1 | Only 25 |\n| 8 | 81 100 | 2 | 81, 100 |\n| 9 | 1 100 | 10 | 1 through 10² |\n| 10 | 200 300 | 3 | 225, 256, 289 |\n| 11 | 101 121 | 1 | 121 |\n| 12 | 36 49 | 2 | 36, 49 |\n| 13 | 1 1000 | 31 | Squares up to 31² |\n| 14 | 50 60 | 0 | No squares in range |\n| 15 | 16 25 | 2 | 16, 25 |\n",
  "example": {
    "input": "10 100",
    "output": "7",
    "explanation": "The perfect squares are 16, 25, 36, 49, 64, 81, 100."
  },
  "answer": "import math\n\na, b = map(int, input().split())\n\nstart = math.ceil(math.sqrt(a))\nend = math.floor(math.sqrt(b))\n\ncount = max(0, end - start + 1)\nprint(count)"
},
{
  "id": 36,
  "title": "Find the Largest Prime Factor of N",
  "description": "Given a number `n`, find the largest prime factor of `n`.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 2 | 2 | Prime number |\n| 2 | 3 | 3 | Prime number |\n| 3 | 4 | 2 | 2 is the only prime factor |\n| 4 | 6 | 3 | 2 and 3 are factors |\n| 5 | 7 | 7 | Prime number |\n| 6 | 8 | 2 | Only 2 |\n| 7 | 12 | 3 | 2 and 3 |\n| 8 | 15 | 5 | 3 and 5 |\n| 9 | 17 | 17 | Prime number |\n| 10 | 21 | 7 | 3 and 7 |\n| 11 | 27 | 3 | 3³ |\n| 12 | 29 | 29 | Prime number |\n| 13 | 35 | 7 | 5 and 7 |\n| 14 | 49 | 7 | 7² |\n| 15 | 60 | 5 | 2, 3, 5 |\n",
  "example": {
    "input": "100",
    "output": "5",
    "explanation": "100 = 2² × 5², so the largest prime factor is 5."
  },
  "answer": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\nn = int(input())\nprint(largest_prime_factor(n))"
},
{
  "id": 37,
  "title": "Find All Divisors of a Number",
  "description": "Given an integer `n`, return a list of all positive divisors of `n` in ascending order.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 1 | [1] | Only 1 is a divisor |\n| 2 | 2 | [1, 2] | Prime number |\n| 3 | 3 | [1, 3] | Prime number |\n| 4 | 4 | [1, 2, 4] | Square number |\n| 5 | 5 | [1, 5] | Prime |\n| 6 | 6 | [1, 2, 3, 6] | Composite |\n| 7 | 8 | [1, 2, 4, 8] | Powers of 2 |\n| 8 | 10 | [1, 2, 5, 10] | Even number |\n| 9 | 12 | [1, 2, 3, 4, 6, 12] | More divisors |\n| 10 | 15 | [1, 3, 5, 15] | Odd composite |\n| 11 | 16 | [1, 2, 4, 8, 16] | 2⁴ |\n| 12 | 18 | [1, 2, 3, 6, 9, 18] | Even + odd divisors |\n| 13 | 25 | [1, 5, 25] | Square of 5 |\n| 14 | 36 | [1, 2, 3, 4, 6, 9, 12, 18, 36] | Many divisors |\n| 15 | 49 | [1, 7, 49] | 7² |\n",
  "example": {
    "input": "10",
    "output": "[1, 2, 5, 10]",
    "explanation": "The numbers that divide 10 evenly are 1, 2, 5, and 10."
  },
  "answer": "n = int(input())\ndivisors = []\ni = 1\nwhile i * i <= n:\n    if n % i == 0:\n        divisors.append(i)\n        if i != n // i:\n            divisors.append(n // i)\n    i += 1\nprint(*sorted(divisors))"
},
{
  "id": 38,
  "title": "Count Even and Odd Digits in a Number",
  "description": "Given an integer `n`, count how many even and how many odd digits it has.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | 0 | (1, 0) | 0 is even |\n| 2 | 1 | (0, 1) | 1 is odd |\n| 3 | 12 | (1, 1) | 1 odd, 2 even |\n| 4 | 123 | (1, 2) | 2 even (2), 1 odd (1, 3) |\n| 5 | 246 | (3, 0) | All even |\n| 6 | 135 | (0, 3) | All odd |\n| 7 | 1001 | (2, 2) | Mix |\n| 8 | 9876 | (2, 2) | 8, 6 even; 9, 7 odd |\n| 9 | 4444 | (4, 0) | All even |\n| 10 | 5555 | (0, 4) | All odd |\n| 11 | 1010 | (2, 2) | Even: 0, 0; Odd: 1, 1 |\n| 12 | 222 | (3, 0) | All even |\n| 13 | 111 | (0, 3) | All odd |\n| 14 | 123456 | (3, 3) | Alternating even/odd |\n| 15 | 9081726354 | (5, 5) | Equal count |\n",
  "example": {
    "input": "123456",
    "output": "(3, 3)",
    "explanation": "Even digits: 2, 4, 6; Odd digits: 1, 3, 5."
  },
  "answer": "n = int(input())\neven = odd = 0\nfor digit in str(abs(n)):\n    if int(digit) % 2 == 0:\n        even += 1\n    else:\n        odd += 1\nprint(even, odd)"
},
{
  "id": 39,
  "title": "Check if a Number is an Armstrong Number",
  "description": "An Armstrong number is one whose value is equal to the sum of its own digits each raised to the power of the number of digits.\n\n| Test Case | Input | Output | Notes |\n|-----------|--------|--------|-------|\n| 1 | 0 | true | 0¹ = 0 |\n| 2 | 1 | true | 1¹ = 1 |\n| 3 | 2 | true | Single-digit numbers are Armstrong |\n| 4 | 9 | true | 9¹ = 9 |\n| 5 | 10 | false | 1¹ + 0¹ = 1 |\n| 6 | 153 | true | 1³ + 5³ + 3³ = 153 |\n| 7 | 370 | true | 3³ + 7³ + 0³ = 370 |\n| 8 | 371 | true | Armstrong number |\n| 9 | 407 | true | Armstrong number |\n| 10 | 100 | false | 1³ + 0³ + 0³ = 1 |\n| 11 | 9474 | true | 4-digit Armstrong number |\n| 12 | 9475 | false | Close but not Armstrong |\n| 13 | 1634 | true | 1⁴ + 6⁴ + 3⁴ + 4⁴ = 1634 |\n| 14 | 8208 | true | Armstrong |\n| 15 | 9475 | false | Not Armstrong |\n",
  "example": {
    "input": "153",
    "output": "true",
    "explanation": "153 = 1³ + 5³ + 3³ = 153, so it is an Armstrong number."
  },
  "answer": "def is_armstrong(n):\n    digits = str(n)\n    power = len(digits)\n    return n == sum(int(d) ** power for d in digits)\n\nn = int(input())\nprint(is_armstrong(n))"
},
{
  "id": 40,
  "title": "Find the Second Largest Number in a List",
  "description": "Given a list of integers, find the second largest number in the list.\n\n| Test Case | Input | Output | Notes |\n|-----------|------------------|--------|-----------------------------|\n| 1 | [1, 2, 3, 4, 5] | 4 | Sorted ascending |\n| 2 | [5, 4, 3, 2, 1] | 4 | Sorted descending |\n| 3 | [2, 2, 2, 2] | null | All elements same, no second largest |\n| 4 | [1, 2] | 1 | Two elements only |\n| 5 | [2] | null | Single element, no second largest |\n| 6 | [3, 1, 4, 5, 5] | 4 | Duplicate largest values |\n| 7 | [-1, -2, -3, -4] | -2 | Negative numbers |\n| 8 | [10, 9, 8, 7, 7, 7] | 9 | Multiple duplicates |\n| 9 | [100, 50, 50, 75] | 75 | Mixed duplicates |\n| 10 | [1, 3, 3, 2] | 2 | Second largest distinct |\n| 11 | [1, 2, 2, 3, 4, 4] | 3 | Multiple duplicates |\n| 12 | [7, 7, 7, 6, 5] | 6 | Largest duplicated |\n| 13 | [0, 0, 0, 0, 1] | 0 | Single largest and duplicates |\n| 14 | [9, 8] | 8 | Two distinct elements |\n| 15 | [5, 4, 3, 3, 2, 1] | 4 | Multiple duplicates |\n",
  "example": {
    "input": "[10, 20, 30, 40, 50]",
    "output": "40",
    "explanation": "Largest is 50, second largest is 40."
  },
  "answer":"nums = list(map(int, input().split()))\nunique = sorted(set(nums), reverse=True)\nif len(unique) < 2:\n    print(\"null\")\nelse:\n    print(unique[1])"
},
{
  "id": 41,
  "title": "Check if a Number is a Palindrome without converting to String",
  "description": "Given an integer `n`, check if it is a palindrome without converting it to a string.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------|--------|-------|\n| 1 | 121 | true | Palindrome |\n| 2 | 123 | false | Not palindrome |\n| 3 | 1 | true | Single digit |\n| 4 | 11 | true | Two digit palindrome |\n| 5 | 10 | false | Not palindrome |\n| 6 | 1221 | true | Even length palindrome |\n| 7 | 12321 | true | Odd length palindrome |\n| 8 | 0 | true | Single digit zero |\n| 9 | 1001 | true | Palindrome with zeros |\n| 10 | 123456 | false | Not palindrome |\n| 11 | 9 | true | Single digit |\n| 12 | 101 | true | Palindrome |\n| 13 | 1000021 | false | Not palindrome |\n| 14 | 9999 | true | Palindrome |\n| 15 | 1234321 | true | Palindrome |\n",
  "example": {
    "input": "121",
    "output": "true",
    "explanation": "121 reversed is 121, so it is a palindrome."
  },
  "answer":"n = int(input())\nif n < 0:\n    print(False)\nelse:\n    original = n\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    print(original == reversed_num)"
},
{
  "id": 42,
  "title": "Find the Missing Number in a Consecutive Sequence",
  "description": "Given a list of `n-1` integers which are distinct and in the range from 1 to `n`, find the missing number.\n\n| Test Case | Input | Output | Notes |\n|-----------|-------------------|--------|------------------------|\n| 1 | [1, 2, 4, 5] | 3 | Missing number 3 |\n| 2 | [2, 3, 4, 5] | 1 | Missing number 1 |\n| 3 | [1, 2, 3, 5] | 4 | Missing number 4 |\n| 4 | [1, 3, 4, 5] | 2 | Missing number 2 |\n| 5 | [2, 3, 1] | 4 | n=4, missing 4 |\n| 6 | [1] | 2 | n=2, missing 2 |\n| 7 | [2] | 1 | n=2, missing 1 |\n| 8 | [1, 2, 3, 4, 6] | 5 | Missing 5 |\n| 9 | [1, 2, 3, 5, 6] | 4 | Missing 4 |\n| 10 | [3, 4, 5, 6] | 1 | Missing 1 |\n| 11 | [1, 2, 3, 4] | 5 | Missing 5 |\n| 12 | [1, 3] | 2 | Missing 2 |\n| 13 | [2, 4, 5] | 3 | Missing 3 |\n| 14 | [1, 4, 5] | 2 | Missing 2 |\n| 15 | [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14] | 13 | Missing 13 |\n",
  "example": {
    "input": "[1, 2, 4, 5]",
    "output": "3",
    "explanation": "Numbers from 1 to 5 are expected; 3 is missing."
  },
  "answer": "arr = list(map(int, input().split()))\nn = len(arr) + 1\nexpected_sum = n * (n + 1) // 2\nprint(expected_sum - sum(arr))"
},
{
  "id": 43,
  "title": "Merge Two Sorted Lists into One Sorted List",
  "description": "Given two sorted lists, merge them into a single sorted list.\n\n| Test Case | Input | Output | Notes |\n|-----------|----------------------------|---------------------|-------------------------------|\n| 1 | [1,3,5], [2,4,6] | [1,2,3,4,5,6] | Normal merge |\n| 2 | [], [1,2,3] | [1,2,3] | One empty list |\n| 3 | [1,2,3], [] | [1,2,3] | Other empty list |\n| 4 | [], [] | [] | Both empty |\n| 5 | [1,1,2], [1,3,4] | [1,1,1,2,3,4] | Duplicates |\n| 6 | [5,6,7], [1,2,3] | [1,2,3,5,6,7] | All elements greater or lesser |\n| 7 | [1,3,5], [6,7,8] | [1,3,5,6,7,8] | Non-overlapping ranges |\n| 8 | [2,4,6], [1,3,5] | [1,2,3,4,5,6] | Alternate elements |\n| 9 | [1,4,7], [2,5,8] | [1,2,4,5,7,8] | Mixed lists |\n| 10 | [1], [2] | [1,2] | Single elements |\n| 11 | [1,2,2], [2,2,3] | [1,2,2,2,2,3] | Multiple duplicates |\n| 12 | [10,20], [15,25] | [10,15,20,25] | Different ranges |\n| 13 | [1,5,9], [2,6,10] | [1,2,5,6,9,10] | Interleaved lists |\n| 14 | [3,3,3], [3,3] | [3,3,3,3,3] | All duplicates |\n| 15 | [1,2,4,5], [3,6,7] | [1,2,3,4,5,6,7] | Mixed elements |\n",
  "example": {
    "input": "[1, 3, 5], [2, 4, 6]",
    "output": "[1, 2, 3, 4, 5, 6]",
    "explanation": "Both lists are merged into one sorted list."
  },
  "answer": "list1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\n\nmerged = []\ni, j = 0, 0\n\nwhile i < len(list1) and j < len(list2):\n    if list1[i] < list2[j]:\n        merged.append(list1[i])\n        i += 1\n    else:\n        merged.append(list2[j])\n        j += 1\n\nmerged.extend(list1[i:])\nmerged.extend(list2[j:])\n\nprint(*merged)"
},
{
  "id": 44,
  "title": "Find the Intersection of Two Lists",
  "description": "Given two lists, find the intersection (common elements) between them. The output list should have unique elements sorted in ascending order.\n\n| Test Case | Input | Output | Notes |\n|-----------|-----------------------------|------------------|------------------------------|\n| 1 | [1,2,3], [2,3,4] | [2,3] | Normal intersection |\n| 2 | [1,1,2], [1,2,2] | [1,2] | Duplicates in both lists |\n| 3 | [1,2,3], [4,5,6] | [] | No intersection |\n| 4 | [], [1,2] | [] | One empty list |\n| 5 | [1,2], [] | [] | Other empty list |\n| 6 | [], [] | [] | Both empty |\n| 7 | [5,6,7], [6,7,8] | [6,7] | Partial overlap |\n| 8 | [1,3,5], [5,7,9] | [5] | Single common element |\n| 9 | [2,4,6], [2,4,6] | [2,4,6] | Identical lists |\n| 10 | [1,2,3,4], [2,4] | [2,4] | Subset intersection |\n| 11 | [1,2,3,3], [3,3,4,4] | [3] | Multiple duplicates |\n| 12 | [10,20], [15,20,25] | [20] | Single common element |\n| 13 | [1,5,9], [2,5,10] | [5] | One common element |\n| 14 | [3,3,3], [3,3] | [3] | All duplicates intersection |\n| 15 | [1,2,4,5], [3,4,6] | [4] | Single intersection |\n",
  "example": {
    "input": "[1, 2, 3], [2, 3, 4]",
    "output": "[2, 3]",
    "explanation": "Elements 2 and 3 are common in both lists."
  },
  "answer": "list1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\nprint(*sorted(set(list1) & set(list2)))"
},
{
  "id": 45,
  "title": "Print All Prime Numbers Between Two Given Numbers",
  "description": "Given two integers `start` and `end`, print all prime numbers between them (inclusive).\n\n| Test Case | Input | Output | Notes |\n|-----------|----------------|---------------------------|-------------------------|\n| 1 | 1, 10 | [2, 3, 5, 7] | Normal range |\n| 2 | 10, 20 | [11, 13, 17, 19] | Normal range |\n| 3 | 0, 5 | [2, 3, 5] | Includes zero |\n| 4 | 20, 10 | [] | start > end, no primes |\n| 5 | 2, 2 | [2] | Single prime number range |\n| 6 | 14, 16 | [] | No primes in range |\n| 7 | 29, 31 | [29, 31] | Two primes close together |\n| 8 | -5, 5 | [2, 3, 5] | Negative start |\n| 9 | 50, 60 | [53, 59] | Medium range primes |\n| 10 | 1, 1 | [] | Single non-prime number |\n| 11 | 17, 17 | [17] | Single prime number |\n| 12 | 90, 100 | [97] | Single prime near end |\n| 13 | 3, 3 | [3] | Single prime number |\n| 14 | 100, 110 | [101, 103, 107, 109] | Multiple primes |\n| 15 | 0, 1 | [] | No primes |\n",
  "example": {
    "input": "1, 10",
    "output": "[2, 3, 5, 7]",
    "explanation": "Prime numbers between 1 and 10 are 2, 3, 5, and 7."
  },
  "answer": "def primes_between(start, end):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    if start > end:\n        return []\n    return [x for x in range(start, end + 1) if is_prime(x)]\n\nstart, end = map(int, input().split())\nresult = primes_between(start, end)\nprint(*result)"
}          
    ]
} 
          
