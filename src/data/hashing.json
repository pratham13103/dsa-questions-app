{
    "questions": [
      {
        "id": 1,
        "title": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\n You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n You can return the answer in any order.\n\n| Test Cases | nums                | Target | Expected Output   | Notes                                |\n|------------|----------------------|--------|-------------------|--------------------------------------|\n| 1          | [2, 7, 11, 15]        | 9      | [0, 1]            | Normal case, straightforward         |\n| 2          | [3, 2, 4]             | 6      | [1, 2]            | Same number appears after            |\n| 3          | [3, 3]                | 6      | [0, 1]            | Same value twice                     |\n| 4          | [1, 2, 3, 4, 5, 6]    | 10     | [3, 5]            | Larger array                         |\n| 5          | [0, 4, 3, 0]          | 0      | [0, 3]            | Zero handling                        |\n| 6          | [-3, 4, 3, 90]        | 0      | [0, 2]            | Negative numbers                     |\n| 7          | [1, 5, 1, 5]          | 10     | [1, 3]            | Duplicate numbers                    |\n| 8          | [2, 7, 11, 15]        | 26     | [2, 3]            | Sum of large numbers                 |\n| 9          | [10, 20, 10, 5]       | 30     | [0, 1]            | Same values used                     |\n| 10         | [100, 200, 300]       | 500    | [1, 2]            | Large values                         |\n| 11         | [1, 9, 2, 8]          | 10     | [0, 1]            | First and second                     |\n| 12         | [5, 75, 25]           | 100    | [1, 2]            | Edge case with unique values         |\n| 13         | [1, 1, 1, 1]          | 2      | [0, 1]            | All same values                      |\n| 14         | [0, 0, 3, 4]          | 0      | [0, 1]            | All zero case                        |\n| 15         | [2, 5, 5, 11]         | 10     | [1, 2]            | Repeated middle                      |\n| 16         | [6, 4, 3, 7]          | 13     | [0, 3]            | Random mix                           |\n| 17         | [1, 3, 4, 2, 6]       | 5      | [1, 3]            | Target sum 5                         |\n| 18         | [0, -2, 2]            | 0      | [1, 2]            | Negatives cancel positives           |\n| 19         | [2, 2, 3]             | 4      | [0, 1]            | Repeated value helps                 |\n| 20         | [3, 5, 2, 6]          | 11     | [1, 3]            | Last index usage                     |\n| 21         | [10, 15, 3, 7]        | 17     | [2, 3]            | Middle to end                        |\n| 22         | [4, 6]                | 10     | [0, 1]            | Short array                          |\n| 23         | [100, 200]            | 300    | [0, 1]            | Only two values                      |\n| 24         | [7, 14, 21]           | 35     | [1, 2]            | 3 multiple base                      |\n| 25         | [9, 10, 11, 1]        | 20     | [1, 2]            | Middle pair                          |\n| 26         | [1, 2, 3, 4]          | 7      | [2, 3]            | Final values                         |\n| 27         | [6, 6, 7]             | 12     | [0, 1]            | Repeated works                       |\n| 28         | [3, 2, 3]             | 6      | [0, 2]            | Same value, different indices        |\n| 29         | [2, 3, 4, 5, 6]       | 9      | [3, 4]            | Higher end                           |\n| 30         | [1, 5, 9, 13]         | 14     | [0, 3]            | Edge of range                        |\n| 31         | [1, 2, 4, 8, 16]      | 10     | [2, 3]            | Powers of 2                          |\n| 32         | [9, 3, 4, 5, 1]       | 10     | [0, 4]            | First and last                       |\n| 33         | [1, 1]                | 2      | [0, 1]            | Short repeated                       |\n| 34         | [1, 3, 5, 9]          | 14     | [2, 3]            | Clean solution                       |\n| 35         | [2, 7]                | 9      | [0, 1]            | Minimum valid input                  |\n| 36         | [2, 7, 11, 15]        | 18     | [1, 2]            | Additional valid                     |\n| 37         | [1, 4, 5, 8]          | 9      | [1, 2]            | Mid array                            |\n| 38         | [5, 3, 5, 2, 1]       | 8      | [0, 3]            | Duplicates distract                  |\n| 39         | [7, 7]                | 14     | [0, 1]            | All same                            |\n| 40         | [5, 4, 3, 2, 1]       | 6      | [1, 3]            | Descending                           |",
        "example": {
          "input": "[2,7,11,15], target = 9",
          "output": "[0,1]",
          "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
        },
        "answer": "class Solution:\n    def twoSum(self, nums, target):\n        hashmap = {}\n        for i, num in enumerate(nums):\n            if target - num in hashmap:\n                return [hashmap[target - num], i]\n            hashmap[num] = i"
      },
      {
        "id": 2,
        "title": "Check for Duplicates",
        "description": "Description: Check if any value appears at least twice.\n\n| Test Cases | nums               | Expected Output | Notes                                |\n|------------|--------------------|-----------------|--------------------------------------|\n| 1          | [1, 2, 3, 4, 5, 1] | True            | The value '1' appears twice          |\n| 2          | [1, 2, 3, 4, 5]    | False           | No duplicates present                |\n| 3          | [3, 3, 3, 3]       | True            | The value '3' appears multiple times |\n| 4          | [0, -1, 2, -1]     | True            | Negative numbers are included        |\n| 5          | [10, 20, 30]       | False           | No duplicates in a small list        |\n| 6          | [5, 5, 5, 5, 5]    | True            | Multiple occurrences of the same number |\n| 7          | [1, 2, 3, 4, 2]    | True            | Duplicate found at the end           |\n| 8          | [-3, -2, -1, 0, 1] | False           | No duplicates, mix of positive and negative |\n| 9          | [1, 1, 1]          | True            | The number '1' appears multiple times |\n| 10         | [0, 0, 0, 0, 0]    | True            | All values are the same               |\n| 11         | [100, 200, 300]    | False           | No duplicates, increasing values      |\n| 12         | [7, 8, 9, 10, 11]  | False           | No duplicates, sequential numbers     |\n| 13         | [3, 4, 5, 6, 7]    | False           | No duplicates                         |\n| 14         | [4, 4, 4, 4]       | True            | All values are the same               |\n| 15         | [1, 3, 2, 4, 6, 3] | True            | Duplicate '3' in the list             |\n| 16         | [10, 9, 8, 7, 6, 6] | True            | Duplicate '6'                         |\n| 17         | [20, 30, 40, 50, 60]| False           | No duplicates                         |\n| 18         | [1, 2, 2]          | True            | Duplicate at the end                  |\n| 19         | [10, 20, 10]       | True            | Duplicate '10'                        |\n| 20         | [5, 10, 15, 10]    | True            | Duplicate '10'                        |\n| 21         | [8, 12, 8, 16]     | True            | Duplicate '8'                         |\n| 22         | [9, 14, 14, 20]    | True            | Duplicate '14'                        |\n| 23         | [30, 30, 30]       | True            | All elements are the same             |\n| 24         | [1, 2, 3, 4, 5]    | False           | No duplicates                         |\n| 25         | [2, 2, 5, 5]       | True            | Duplicates for both 2 and 5           |\n| 26         | [1, 2, 3, 3, 4]    | True            | Duplicate '3'                         |\n| 27         | [1000, 1000, 1000] | True            | All elements are the same             |\n| 28         | [7, 7, 8, 9]       | True            | Duplicate '7'                         |\n| 29         | [0, -1, 0]         | True            | Duplicate '0'                         |\n| 30         | [11, 12, 13, 14, 15]| False           | No duplicates                         |\n| 31         | [8, 4, 4, 2]       | True            | Duplicate '4'                         |\n| 32         | [25, 30, 35, 40]   | False           | No duplicates                         |\n| 33         | [12, 15, 17, 15]   | True            | Duplicate '15'                        |\n| 34         | [1, 1, 1, 1]       | True            | All elements are the same             |\n| 35         | [-1, -2, -3, -4]   | False           | No duplicates (distinct negative values) |\n| 36         | [9, 9, 9, 9]       | True            | All values are the same               |\n| 37         | [3, 6, 9, 12, 6]   | True            | Duplicate '6'                         |\n| 38         | [0, 0, 0]          | True            | All zeros                             |\n| 39         | [0, 2, 4, 6, 6]    | True            | Duplicate '6'                         |\n| 40         | [10, 20, 30, 40]   | False           | No duplicates                         |",
        "example": {
          "input": "[1, 2, 3, 4, 5, 1]",
          "output": "True",
          "explanation": "The value '1' appears twice in the list."
        },
        "answer": "class Solution:\n    def containsDuplicate(self, nums):\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return True\n            seen.add(num)\n        return False"
      },
      {
        "id": 3,
        "title": "Intersection of Two Arrays",
        "description": "Description: Return intersection of two arrays.\n\n| Test Cases | nums1               | nums2               | Expected Output | Notes                                |\n|------------|--------------------|---------------------|-----------------|--------------------------------------|\n| 1          | [1, 2, 2, 1]       | [2, 2]              | [2]             | The intersection of nums1 and nums2  |\n| 2          | [4, 9, 5]          | [9, 4, 9, 8, 4]     | [4, 9]          | Common elements between both arrays  |\n| 3          | [1, 1, 2, 3]       | [3, 3, 4, 2]        | [2, 3]          | Common values between nums1 and nums2 |\n| 4          | [5, 6, 7]          | [8, 9, 5, 6]        | [5, 6]          | Intersection of the arrays           |\n| 5          | [1, 1, 1]          | [2, 2, 1]           | [1]             | Intersection with duplicates         |\n| 6          | [3, 4, 5, 6]       | [5, 6, 7, 8]        | [5, 6]          | Two arrays with common numbers       |\n| 7          | [10, 20, 30]       | [40, 50, 30]        | [30]            | Single common element                |\n| 8          | [100, 200]         | [300, 200, 100]     | [100, 200]      | Both arrays contain same elements    |\n| 9          | [1, 2, 3]          | [4, 5, 6]           | []              | No intersection                      |\n| 10         | [1, 2, 3, 4]       | [4, 5, 6, 7]        | [4]             | One common element                   |\n| 11         | [1, 2, 3, 4]       | [1, 3, 5, 7]        | [1, 3]          | Common elements                      |\n| 12         | [5, 6]             | [7, 8, 9]           | []              | No common elements                   |\n| 13         | [4, 4, 4]          | [4, 4, 4]           | [4]             | All values are the same              |\n| 14         | [8, 9, 10]         | [8, 10]             | [8, 10]         | Common elements with no repetition   |\n| 15         | [15, 16]            | [16, 17]            | [16]            | One common element                   |\n| 16         | [1, 3, 5]          | [5, 7, 9]           | [5]             | One common element                   |\n| 17         | [11, 12, 13]       | [14, 13, 12]        | [12, 13]        | Two common elements                  |\n| 18         | [2, 3, 4]          | [1, 2, 4]           | [2, 4]          | Some common elements                 |\n| 19         | [50, 60, 70]       | [70, 80, 90]        | [70]            | Only one common element              |\n| 20         | [1, 1, 2]          | [2, 2, 3]           | [2]             | Repeated elements in both arrays     |\n| 21         | [10, 11]           | [12, 13]            | []              | No intersection                      |\n| 22         | [30, 31, 32]       | [31, 32, 33]        | [31, 32]        | Common elements                      |\n| 23         | [1]                 | [2]                 | []              | No intersection                      |\n| 24         | [10, 20, 30, 40]   | [40, 30, 20]        | [20, 30, 40]    | All elements are common              |\n| 25         | [1, 2, 3, 4]       | [1, 2, 3, 4]        | [1, 2, 3, 4]    | Exact match                          |\n| 26         | [10, 20, 30]       | [50, 60]            | []              | No intersection                      |\n| 27         | [100]               | [100]               | [100]           | Identical arrays                     |\n| 28         | [3, 6, 9]          | [2, 6, 3]           | [3, 6]          | Common elements                      |\n| 29         | [1, 5]              | [5, 10]             | [5]             | Single common element                |\n| 30         | [20, 30]            | [30, 40]            | [30]            | Single common element                |\n| 31         | [1, 2]              | [1, 2]              | [1, 2]          | Identical arrays                     |\n| 32         | [2, 3]              | [5, 6]              | []              | No intersection                      |\n| 33         | [10, 10, 10]        | [10]                | [10]            | All elements are the same            |\n| 34         | [20, 30, 40]        | [40, 50, 60]        | [40]            | Single common element                |\n| 35         | [10, 20, 30]        | [20, 30, 40]        | [20, 30]        | Common elements                      |\n| 36         | [100, 200]          | [200, 300]          | [200]           | Single common element                |\n| 37         | [5, 6, 7, 8]        | [7, 8, 9, 10]       | [7, 8]          | Common elements                      |\n| 38         | [11, 12, 13]        | [14, 13, 15]        | [13]            | Single common element                |\n| 39         | [1, 2, 3]           | [4, 5, 6]           | []              | No intersection                      |\n| 40         | [7, 8, 9]           | [9, 10, 11]         | [9]             | Single common element                |",
        "example": {
          "input": "[1, 2, 2, 1], [2, 2]",
          "output": "[2]",
          "explanation": "The intersection of the two arrays is [2]."
        },
        "answer": "def intersection(nums1, nums2):\n    return list(set(nums1) & set(nums2))"
      },
      {
        "id": 4,
        "title": "Happy Number",
        "description": "Description: Determine if a number is a happy number.\n\n| Test Cases | n       | Expected Output | Notes                                      |\n|------------|---------|-----------------|--------------------------------------------|\n| 1          | 19      | True            | Happy number, it leads to 1               |\n| 2          | 2       | False           | Non-happy number                          |\n| 3          | 1       | True            | 1 is always a happy number                |\n| 4          | 16      | False           | Leads to a cycle                          |\n| 5          | 7       | True            | Happy number, it leads to 1               |\n| 6          | 4       | False           | Non-happy number                          |\n| 7          | 23      | True            | Leads to 1 after several steps            |\n| 8          | 11      | True            | Leads to 1 after several steps            |\n| 9          | 13      | True            | Leads to 1 after several steps            |\n| 10         | 6       | False           | Non-happy number                          |\n| 11         | 100     | True            | Leads to 1 after several steps            |\n| 12         | 97      | False           | Leads to a cycle                          |\n| 13         | 68      | False           | Leads to a cycle                          |\n| 14         | 444     | False           | Non-happy number                          |\n| 15         | 999     | False           | Non-happy number                          |\n| 16         | 45      | True            | Leads to 1 after several steps            |\n| 17         | 89      | False           | Leads to a cycle                          |\n| 18         | 123     | True            | Leads to 1 after several steps            |\n| 19         | 39      | True            | Leads to 1 after several steps            |\n| 20         | 4444    | False           | Non-happy number                          |\n| 21         | 5555    | False           | Non-happy number                          |\n| 22         | 65      | False           | Leads to a cycle                          |\n| 23         | 68      | False           | Non-happy number                          |\n| 24         | 3       | True            | Leads to 1 after several steps            |\n| 25         | 10      | True            | Leads to 1 after several steps            |\n| 26         | 56      | False           | Non-happy number                          |\n| 27         | 44      | False           | Leads to a cycle                          |\n| 28         | 22      | True            | Leads to 1 after several steps            |\n| 29         | 55      | False           | Non-happy number                          |\n| 30         | 75      | True            | Leads to 1 after several steps            |",
        "example": {
          "input": "19",
          "output": "True",
          "explanation": "The number 19 is a happy number as it eventually leads to 1."
        },
        "answer": "def isHappy(n):\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = sum(int(i) ** 2 for i in str(n))\n    return n == 1"
      },
      {
        "id": 5,
        "title": "Single Number",
        "description": "Description: Find the number that appears only once.\n\n| Test Cases | nums               | Expected Output | Notes                                |\n|------------|--------------------|-----------------|--------------------------------------|\n| 1          | [4, 1, 2, 1, 2]     | 4               | The number that appears only once    |\n| 2          | [2, 2, 1]           | 1               | Single number in the array           |\n| 3          | [1, 2, 3, 1, 3]     | 2               | Number 2 appears only once           |\n| 4          | [4, 5, 4]           | 5               | 5 appears only once                  |\n| 5          | [7, 8, 7, 8, 9]     | 9               | The single number is 9               |\n| 6          | [0, 0, 1]           | 1               | 1 appears once in the array          |\n| 7          | [10, 20, 10, 20, 30] | 30              | Single number in a larger list       |\n| 8          | [1, 1, 2, 2, 3]     | 3               | The number 3 appears only once       |\n| 9          | [6, 7, 6, 8, 8]     | 7               | Single number 7                      |\n| 10         | [5, 6, 5, 7, 7]     | 6               | The number 6 appears once            |\n| 11         | [4, 5, 4, 5, 6]     | 6               | The number 6 is the single number    |\n| 12         | [12, 13, 13]        | 12              | Single element in the list           |\n| 13         | [9, 8, 9, 8, 10]    | 10              | The number 10 appears only once      |\n| 14         | [2, 3, 4, 3, 2]     | 4               | The unique number is 4               |\n| 15         | [100, 200, 100]     | 200             | 200 is the single number             |\n| 16         | [10, 10, 20]        | 20              | The number 20 is the only one left   |\n| 17         | [3, 3, 4, 5, 4]     | 5               | 5 is the number that appears only once|\n| 18         | [8, 9, 8, 9, 10]    | 10              | 10 is the single element             |\n| 19         | [11, 12, 11]        | 12              | Single number is 12                  |\n| 20         | [14, 15, 14]        | 15              | The number 15 appears once           |\n| 21         | [5, 6, 5, 6, 7]     | 7               | The unique number is 7               |\n| 22         | [2, 3, 2, 5, 5]     | 3               | The number 3 appears only once       |\n| 23         | [11, 12, 13, 12, 11] | 13              | 13 is the single number              |\n| 24         | [20, 30, 20, 40]    | 30              | The number 30 is unique              |\n| 25         | [50, 60, 50]        | 60              | The number 60 is the single element  |\n| 26         | [100, 200, 300]     | 200             | 200 is the single number             |\n| 27         | [5, 6, 7, 6, 7]     | 5               | The number 5 appears only once       |\n| 28         | [8, 9, 10, 8, 9]    | 10              | The number 10 is unique              |\n| 29         | [15, 16, 17, 15, 16] | 17              | The single number is 17              |\n| 30         | [0, 1, 0, 1, 2]     | 2               | 2 is the single number               |",
        "example": {
          "input": "[4, 1, 2, 1, 2]",
          "output": "4",
          "explanation": "The number 4 appears only once in the array."
        },
        "answer": "def singleNumber(nums):\n    res = 0\n    for num in nums:\n        res ^= num\n    return res"
      },
       {
    "id": 6,
    "title": "Check if Two Arrays are Equal",
    "description": "Determine if two arrays are equal, meaning they contain the same elements with the same frequencies.\n\n| Test Cases | Array 1             | Array 2             | Expected Output |\n|------------|----------------------|----------------------|-----------------|\n| 1          | [1, 2, 3]            | [1, 2, 3]            | true            |\n| 2          | [1, 2, 3]            | [3, 2, 1]            | true            |\n| 3          | [1, 2, 2]            | [1, 2, 3]            | false           |\n| 4          | [1, 2]               | [1, 2, 3]            | false           |\n| 5          | [1, 2, 3]            | [1, 2]               | false           |\n| 6          | []                   | []                   | true            |\n| 7          | [1, 1, 2, 2]         | [2, 2, 1, 1]         | true            |\n| 8          | [1, 2, 3, 4, 5]      | [5, 4, 3, 2, 1]      | true            |\n| 9          | [1, 1, 1]            | [1, 1, 2]            | false           |\n| 10         | [-1, 0, 1]           | [1, 0, -1]           | true            |\n",
    "example": {
      "input": "arr1 = [1, 2, 2], arr2 = [2, 1, 2]",
      "output": "true",
      "explanation": "Both arrays contain the elements 1 (once) and 2 (twice)."
    },
    "answer": "from collections import Counter\n\ndef are_equal(arr1, arr2):\n    return Counter(arr1) == Counter(arr2)"
  },
      {
        "id": 7,
        "title": "Top K Frequent Elements",
        "description": "Description: Find the k most frequent elements.\n\n| Test Cases | nums                   | k  | Expected Output | Notes                                      |\n|------------|------------------------|----|-----------------|--------------------------------------------|\n| 1          | [1, 1, 1, 2, 2, 3]      | 2  | [1, 2]          | 1 appears 3 times, 2 appears 2 times       |\n| 2          | [1, 2, 2, 3, 3, 3]      | 2  | [3, 2]          | 3 appears 3 times, 2 appears 2 times       |\n| 3          | [5, 4, 4, 5, 5]         | 2  | [5, 4]          | 5 appears 3 times, 4 appears 2 times       |\n| 4          | [7, 8, 9, 7, 8, 7]      | 1  | [7]             | 7 appears 3 times                          |\n| 5          | [1, 2, 2, 1, 3, 3, 3]   | 3  | [3, 1, 2]       | 3 appears 3 times, 1 and 2 appear twice each|\n| 6          | [1, 1, 1, 1]            | 1  | [1]             | 1 appears 4 times                          |\n| 7          | [10, 20, 10, 30, 20]    | 2  | [10, 20]        | 10 and 20 appear twice each                 |\n| 8          | [1, 2, 2, 3, 3, 3]      | 1  | [3]             | 3 appears 3 times                          |\n| 9          | [4, 4, 4, 4]            | 1  | [4]             | 4 appears 4 times                          |\n| 10         | [9, 9, 9, 8, 8]         | 2  | [9, 8]          | 9 appears 3 times, 8 appears 2 times       |\n| 11         | [1, 2, 3, 4, 5, 6, 7]   | 3  | [1, 2, 3]       | All numbers appear once                    |\n| 12         | [2, 3, 3, 4, 5]         | 2  | [3, 2]          | 3 appears twice, 2 appears once            |\n| 13         | [4, 4, 5, 5, 6]         | 2  | [4, 5]          | 4 and 5 appear twice each                  |\n| 14         | [1, 1, 2, 2, 3]         | 2  | [1, 2]          | 1 and 2 appear twice each                  |\n| 15         | [6, 6, 7, 7, 8, 8]      | 2  | [6, 7]          | 6 and 7 appear twice each                  |\n| 16         | [3, 5, 5, 3, 5, 3]      | 2  | [3, 5]          | 3 appears 3 times, 5 appears 2 times       |\n| 17         | [5, 6, 6, 5, 7]         | 2  | [5, 6]          | 5 and 6 appear twice each                  |\n| 18         | [1, 2, 3, 1, 2]         | 2  | [1, 2]          | 1 and 2 appear twice each                  |\n| 19         | [4, 5, 4, 6]            | 2  | [4, 5]          | 4 appears twice, 5 appears once            |\n| 20         | [7, 8, 9, 7, 8]         | 2  | [7, 8]          | 7 and 8 appear twice each                  |",
        "example": {
          "input": "[1, 1, 1, 2, 2, 3], k=2",
          "output": "[1, 2]",
          "explanation": "The function returns the two most frequent elements: 1 (appears 3 times) and 2 (appears 2 times)."
        },
        "answer": "from collections import Counter\n\ndef topKFrequent(nums, k):\n    count = Counter(nums)\n    return [item for item, freq in count.most_common(k)]"
      },
      {
        "id": 8,
        "title": "Valid Anagram",
        "description": "Description: Check if two strings are anagrams.\n\n| Test Cases | s       | t       | Expected Output | Notes                          |\n|------------|---------|---------|-----------------|--------------------------------|\n| 1          | 'anagram' | 'nagaram' | True            | The strings are anagrams      |\n| 2          | 'rat'     | 'car'    | False           | Not anagrams                  |\n| 3          | 'listen'  | 'silent' | True            | Both are anagrams             |\n| 4          | 'hello'   | 'world'  | False           | Not anagrams                  |\n| 5          | 'abcd'    | 'dcba'   | True            | The strings are anagrams      |\n| 6          | 'apple'   | 'ppale'  | True            | The strings are anagrams      |\n| 7          | 'tommar'  | 'matorm' | True            | Anagrams in shuffled order    |\n| 8          | 'great'   | 'rgeat'  | True            | Strings are anagrams          |\n| 9          | 'hello'   | 'helo'   | False           | Not the same length           |\n| 10         | 'abcd'    | 'abdc'   | True            | The strings are anagrams      |\n| 11         | 'race'    | 'care'   | True            | Anagrams of 'race' and 'care' |\n| 12         | 'flame'   | 'alfem'  | True            | Both are anagrams             |\n| 13         | 'garden'  | 'drange' | True            | Both are anagrams             |\n| 14         | 'sleep'   | 'peels'  | True            | Anagrams of 'sleep' and 'peels'|\n| 15         | 'cat'     | 'act'    | True            | Both are anagrams             |\n| 16         | 'heart'   | 'earth'  | True            | Anagrams of 'heart' and 'earth'|\n| 17         | 'sad'     | 'ads'    | True            | Anagrams                      |\n| 18         | 'abc'     | 'cab'    | True            | Both are anagrams             |\n| 19         | 'word'    | 'drow'   | True            | Anagrams of 'word' and 'drow' |\n| 20         | 'hello'   | 'lehlo'  | True            | Strings are anagrams          |",
        "example": {
          "input": "'anagram', 'nagaram'",
          "output": "True",
          "explanation": "The strings are anagrams because they have the same letters in the same frequencies."
        },
        "answer": "def isAnagram(s, t):\n    return sorted(s) == sorted(t)"
      },
      {
        "id": 9,
        "title": "Isomorphic Strings",
        "description": "Description: Check if two strings are isomorphic.\n\n| Test Cases | s      | t      | Expected Output | Notes                             |\n|------------|--------|--------|-----------------|-----------------------------------|\n| 1          | 'egg'  | 'add'  | True            | Strings are isomorphic           |\n| 2          | 'foo'  | 'bar'  | False           | Strings are not isomorphic       |\n| 3          | 'ab'   | 'aa'   | False           | Strings are not isomorphic       |\n| 4          | 'paper' | 'title' | True            | Strings are isomorphic           |\n| 5          | 'abc'  | 'def'  | True            | Both strings map uniquely        |\n| 6          | 'aabb' | 'xxyy'  | True            | Isomorphic strings               |\n| 7          | 'egg'  | 'add'  | True            | Both are isomorphic              |\n| 8          | 'level' | 'paper' | False           | Strings do not map properly      |\n| 9          | 'abc'  | 'aaa'  | False           | Not isomorphic                   |\n| 10         | 'xyx'  | 'yxy'  | True            | Isomorphic strings               |\n| 11         | 'bad'  | 'dad'  | False           | Not isomorphic                   |\n| 12         | 'abc'  | 'cba'  | False           | Different mapping                |\n| 13         | 'bc'   | 'cd'   | False           | Not isomorphic                   |\n| 14         | 'stone' | 'stole' | False           | Not isomorphic                   |\n| 15         | 'miss'  | 'mism'  | False           | Strings are not isomorphic       |\n| 16         | 'but'   | 'let'   | False           | Not isomorphic                   |\n| 17         | 'aaa'   | 'bbb'   | True            | Both are isomorphic              |\n| 18         | 'abcd'  | 'efgh'  | True            | Mapping works correctly          |\n| 19         | 'home'  | 'zero'  | False           | Not isomorphic                   |\n| 20         | 'dec'   | 'ecd'   | True            | Isomorphic strings               |",
        "example": {
          "input": "'egg', 'add'",
          "output": "True",
          "explanation": "Both strings map the same characters to each other in a one-to-one manner."
        },
        "answer": "def isIsomorphic(s, t):\n    return len(set(zip(s,t))) == len(set(s)) == len(set(t))"
      },
      {
        "id": 10,
        "title": "Subarray Sum Equals K",
        "description": "Description: Find the number of subarrays with sum = k.\n\n| Test Cases | nums                   | k  | Expected Output | Notes                                      |\n|------------|------------------------|----|-----------------|--------------------------------------------|\n| 1          | [1, 1, 1]              | 2  | 2               | There are two subarrays: [1,1] and [1,1]   |\n| 2          | [1, 2, 3, 4, 5]         | 5  | 2               | Two subarrays: [2,3] and [5]              |\n| 3          | [1, 1, 1, 1]            | 2  | 3               | Subarrays: [1,1], [1,1], [1,1]             |\n| 4          | [3, 4, 7, 2, 8]         | 7  | 2               | Subarrays: [3,4], [7]                     |\n| 5          | [5, 5, 5, 5]            | 10 | 3               | Subarrays: [5,5], [5,5], [5,5]             |\n| 6          | [-1, -1, 1, 1]          | 0  | 4               | Subarrays: [-1, -1], [1, 1], [-1, 1], [-1, 1]|\n| 7          | [10, 5, -5, 5, -10]     | 0  | 3               | Subarrays: [5, -5], [5, -5], [10, -10]    |\n| 8          | [1, -1, 2, 3, -2, 2]    | 3  | 3               | Subarrays: [1, -1, 2, 3], [3], [2, 3]      |\n| 9          | [-1, -1, -1, 1]         | 0  | 3               | Subarrays: [-1, -1], [-1, -1], [1]         |\n| 10         | [0, 0, 0]               | 0  | 6               | Subarrays: [0], [0], [0], [0, 0], [0, 0], [0, 0]|\n| 11         | [1, 2, 3, 4, 5, 6]      | 10 | 2               | Subarrays: [4, 6], [1, 2, 3, 4]            |\n| 12         | [2, 3, 5, 6, -2]        | 4  | 2               | Subarrays: [3, 5], [6, -2]                 |\n| 13         | [3, 1, 2, 4, 1, 3]      | 4  | 3               | Subarrays: [1, 3], [4], [1, 3]             |\n| 14         | [4, 3, 7, 1]            | 4  | 1               | Only one subarray: [4]                    |\n| 15         | [5, 10, -5, 5, -10]     | 10 | 3               | Subarrays: [5, 5], [10], [5, -5, 5]        |\n| 16         | [-1, 1, 0, 1, -1, 1]    | 2  | 4               | Subarrays: [1, 0, 1], [0, 1, -1, 1], etc.  |\n| 17         | [2, 2, 2]               | 4  | 2               | Subarrays: [2, 2], [2, 2]                 |\n| 18         | [1, -1, 1, -1]          | 0  | 4               | Subarrays: [1, -1], [-1, 1], [1, -1], [-1, 1]|\n| 19         | [3, 2, 1, 5, 3]         | 4  | 2               | Subarrays: [3, 1], [1, 3]                 |\n| 20         | [5, 5, 5, 1, 5, 10]     | 10 | 3               | Subarrays: [5, 5], [10], [5, 5]            |",
        "example": {
          "input": "[1, 1, 1], k=2",
          "output": "2",
          "explanation": "There are two subarrays with sum equal to 2: [1,1] and [1,1]."
        },
        "answer": "from collections import defaultdict\n\ndef subarraySum(nums, k):\n    count = 0\n    curr_sum = 0\n    hashmap = defaultdict(int)\n    hashmap[0] = 1\n    for num in nums:\n        curr_sum += num\n        count += hashmap[curr_sum - k]\n        hashmap[curr_sum] += 1\n    return count"
      },
     {
    "id": 11,
    "title": "Find the First Repeating Element",
    "description": "Find the first element that appears more than once in the array.\n\n| Test Cases | Input Array          | Expected Output |\n|------------|----------------------|-----------------|\n| 1          | [1, 2, 3, 2, 1]     | 2               |\n| 2          | [1, 2, 3, 4, 5]     | None            |\n| 3          | [1, 1, 2, 2, 3, 3] | 1               |\n| 4          | [5, 4, 3, 2, 1, 4] | 4               |\n| 5          | [1, 2, 1, 2, 3, 3] | 1               |\n| 6          | []                   | None            |\n| 7          | [1]                  | None            |\n| 8          | [2, 1, 2, 1]        | 2               |\n| 9          | [3, 2, 1, 3, 2, 1] | 3               |\n| 10         | [7, 8, 9, 7, 8, 9] | 7               |\n",
    "example": {
      "input": "[10, 5, 3, 4, 3, 5, 6]",
      "output": "3",
      "explanation": "The element 3 is the first to repeat."
    },
    "answer": "def find_first_repeating(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return element\n        seen.add(element)\n    return None"
  },
      {
        "id": 12,
        "title": "Majority Element",
        "description": "Description: Find element appearing more than n/2 times.\n\n| Test Cases | nums                       | Expected Output | Notes                                      |\n|------------|----------------------------|-----------------|--------------------------------------------|\n| 1          | [2, 2, 1, 1, 1, 2, 2]       | 2               | 2 appears 4 times, which is more than n/2   |\n| 2          | [3, 3, 4, 2, 4, 4, 2, 4, 4] | 4               | 4 appears 5 times, which is more than n/2   |\n| 3          | [1, 2, 3]                   | -1              | No majority element                        |\n| 4          | [8, 8, 8, 6, 6, 6, 8]       | 8               | 8 appears 4 times, which is more than n/2   |\n| 5          | [5, 5, 5, 1, 1, 1, 5]       | 5               | 5 appears 4 times, which is more than n/2   |\n| 6          | [1, 1, 1, 1, 2, 2]          | 1               | 1 appears 4 times, which is more than n/2   |\n| 7          | [9, 9, 9, 3, 3, 9]          | 9               | 9 appears 4 times, which is more than n/2   |\n| 8          | [2, 2, 3, 3, 3]             | 3               | 3 appears 3 times, which is more than n/2   |\n| 9          | [7, 8, 9, 10, 8, 8]         | 8               | 8 appears 3 times, which is more than n/2   |\n| 10         | [1, 1, 1]                   | 1               | 1 appears 3 times, which is more than n/2   |\n| 11         | [3, 3, 3, 5, 5]             | 3               | 3 appears 3 times, which is more than n/2   |\n| 12         | [12, 12, 15, 12, 12]        | 12              | 12 appears 4 times, which is more than n/2   |\n| 13         | [7, 7, 7, 7, 3, 3, 3, 3]    | 7               | 7 appears 4 times, which is more than n/2   |\n| 14         | [2, 3, 5, 5, 5, 6]          | 5               | 5 appears 3 times, which is more than n/2   |\n| 15         | [10, 10, 10, 10, 2]         | 10              | 10 appears 4 times, which is more than n/2   |\n| 16         | [11, 11, 12, 12, 12]        | 12              | 12 appears 3 times, which is more than n/2   |\n| 17         | [20, 20, 30, 20, 40]        | 20              | 20 appears 3 times, which is more than n/2   |\n| 18         | [10, 20, 30, 20, 20, 20]    | 20              | 20 appears 4 times, which is more than n/2   |\n| 19         | [5, 5, 5, 10, 10, 5, 5]     | 5               | 5 appears 5 times, which is more than n/2   |\n| 20         | [3, 5, 3, 7, 8, 3, 3]       | 3               | 3 appears 4 times, which is more than n/2   |\n| 21         | [1, 2, 2, 3, 3, 2, 2]       | 2               | 2 appears 4 times, which is more than n/2   |\n| 22         | [4, 4, 4, 5, 5, 5, 4]       | 4               | 4 appears 4 times, which is more than n/2   |\n| 23         | [6, 6, 6, 7, 7, 6, 6]       | 6               | 6 appears 4 times, which is more than n/2   |\n| 24         | [1, 1, 2, 2, 2, 1]          | 1               | 1 appears 3 times, which is more than n/2   |\n| 25         | [8, 8, 6, 6, 6, 8, 8]       | 8               | 8 appears 4 times, which is more than n/2   |\n| 26         | [3, 3, 3, 2, 2, 2, 3]       | 3               | 3 appears 4 times, which is more than n/2   |\n| 27         | [4, 4, 4, 4, 5, 5, 5]       | 4               | 4 appears 4 times, which is more than n/2   |\n| 28         | [1, 2, 3, 4, 5, 1]          | 1               | 1 appears 2 times, no majority element      |\n| 29         | [3, 4, 3, 3, 5, 3]          | 3               | 3 appears 4 times, which is more than n/2   |\n| 30         | [10, 10, 10, 2, 3, 3, 3]    | 10              | 10 appears 3 times, which is more than n/2   |\n| 31         | [9, 9, 9, 1, 2, 2]          | 9               | 9 appears 3 times, which is more than n/2   |\n| 32         | [11, 11, 2, 2, 11, 2]       | 11              | 11 appears 3 times, which is more than n/2   |\n| 33         | [5, 5, 5, 7, 8, 8]          | 5               | 5 appears 3 times, which is more than n/2   |\n| 34         | [13, 13, 14, 14, 13, 13]    | 13              | 13 appears 4 times, which is more than n/2   |\n| 35         | [6, 6, 6, 6, 7, 7]          | 6               | 6 appears 4 times, which is more than n/2   |\n| 36         | [9, 9, 8, 8, 8, 9]          | 9               | 9 appears 4 times, which is more than n/2   |\n| 37         | [12, 12, 14, 14, 12, 12]    | 12              | 12 appears 4 times, which is more than n/2   |\n| 38         | [1, 1, 3, 3, 4, 4]          | -1              | No majority element                        |\n| 39         | [10, 10, 20, 20, 10, 10]    | 10              | 10 appears 4 times, which is more than n/2   |",
        "example": {
          "input": "[2, 2, 1, 1, 1, 2, 2]",
          "output": "2",
          "explanation": "The majority element is 2, which appears 4 times, more than n/2."
        },
        "answer": "def majorityElement(nums):\n    count = 0\n    candidate = None\n    for num in nums:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate"
      },
      {
        "id": 13,
        "title": "First Unique Character in a String",
        "description": "Description: Find the first non-repeating character.\n\n| Test Cases | s                        | Expected Output | Notes                                      |\n|------------|--------------------------|-----------------|--------------------------------------------|\n| 1          | \"leetcode\"              | 0               | 'l' is the first unique character         |\n| 2          | \"loveleetcode\"          | 2               | 'v' is the first unique character         |\n| 3          | \"aabbcc\"                 | -1              | No unique character                        |\n| 4          | \"abcd\"                   | 0               | 'a' is the first unique character         |\n| 5          | \"\"                        | -1              | Empty string                               |\n| 6          | \"a\"                       | 0               | Single character string                    |\n| 7          | \"abac\"                    | 1               | 'b' is the first unique character          |\n| 8          | \"abccba\"                  | -1              | No unique character                        |\n| 9          | \"zyxwvutsrqponmlkjihgfedcba\" | 0            | All characters are unique                  |\n| 10         | \"aabb\"                    | -1              | No unique character                        |\n| 11         | \"abcdeafgh\"               | 0               | 'a' is the first unique character          |\n| 12         | \"pppppppppp\"              | -1              | All characters are repeating               |\n| 13         | \"zxyabcxyz\"               | 3               | 'a' is the first unique character          |\n| 14         | \"abcddcba\"                | 0               | 'a' is the first unique character          |\n| 15         | \"pqrsrqp\"                 | 0               | 'p' is the first unique character          |\n| 16         | \"abcdefg\"                 | 0               | 'a' is the first unique character          |\n| 17         | \"aaabbcc\"                 | 3               | 'b' is the first unique character          |\n| 18         | \"aaaabbbbcccc\"            | -1              | No unique character                        |\n| 19         | \"qwertyuiop\"              | 0               | 'q' is the first unique character          |\n| 20         | \"xxzzyy\"                  | 0               | 'x' is the first unique character          |\n| 21         | \"eeffgg\"                  | -1              | No unique character                        |\n| 22         | \"aaccbbdd\"                | -1              | No unique character                        |\n| 23         | \"sphinx\"                  | 0               | 's' is the first unique character          |\n| 24         | \"hello\"                   | 0               | 'h' is the first unique character          |\n| 25         | \"iiiii\"                   | -1              | No unique character                        |\n| 26         | \"abcdabcd\"                | -1              | No unique character                        |\n| 27         | \"aaabbbccc\"               | 0               | 'a' is the first unique character          |\n| 28         | \"tylry\"                    | 0               | 't' is the first unique character          |\n| 29         | \"cccaabb\"                 | 3               | 'c' is the first unique character          |\n| 30         | \"xxxxxxxxx\"               | -1              | No unique character                        |",
        "example": {
          "input": "\"leetcode\"",
          "output": "0",
          "explanation": "'l' is the first unique character."
        },
        "answer": "from collections import Counter\n\ndef firstUniqChar(s):\n    count = Counter(s)\n    for i, c in enumerate(s):\n        if count[c] == 1:\n            return i\n    return -1"
      },
      {
        "id": 14,
        "title": "Find All Anagrams in a String",
        "description": "Description: Find all starting indices of anagrams.\n\n| Test Cases | s                        | p          | Expected Output | Notes                                      |\n|------------|--------------------------|------------|-----------------|--------------------------------------------|\n| 1          | \"cbaebabacd\"             | \"abc\"     | [0, 6]          | \"cba\" and \"bac\" are anagrams            |\n| 2          | \"abab\"                   | \"ab\"      | [0, 1, 2]       | Multiple anagrams of \"ab\"                 |\n| 3          | \"afgkbzflabdfhb\"         | \"flab\"    | [6, 9]          | Anagrams starting at index 6 and 9         |\n| 4          | \"dcba\"                   | \"abcd\"    | [0]             | One anagram of \"abcd\" starting at index 0 |\n| 5          | \"ababab\"                 | \"ab\"      | [0, 1, 2, 3, 4] | Multiple anagrams of \"ab\"                 |\n| 6          | \"kkkkkkkkk\"              | \"kk\"      | [0, 1, 2, 3, 4] | Anagrams of \"kk\" starting at multiple positions |\n| 7          | \"abcd\"                   | \"ab\"      | [0, 1, 2]       | Anagrams of \"ab\" starting at index 0, 1, and 2 |\n| 8          | \"xyzxyz\"                 | \"zyx\"     | [0, 3]          | Anagrams of \"zyx\" starting at index 0 and 3 |\n| 9          | \"abcde\"                  | \"e\"       | [4]             | Only the last character is an anagram      |\n| 10         | \"mlnkpqabcdabcd\"         | \"abcd\"    | [7, 11]         | Anagrams of \"abcd\" starting at index 7 and 11 |\n| 11         | \"pqrstabcdabcd\"          | \"abcd\"    | [5, 9]          | Anagrams of \"abcd\" starting at index 5 and 9 |\n| 12         | \"zzzzzzzzzz\"             | \"zz\"      | [0, 1, 2, 3, 4, 5, 6, 7, 8] | Anagrams of \"zz\" at all possible positions |\n| 13         | \"abcdefgh\"                | \"abc\"     | [0, 1, 2]       | Anagrams of \"abc\" starting at index 0, 1, and 2 |\n| 14         | \"hhiiijjjkkk\"             | \"ij\"      | [1, 2]          | Anagrams of \"ij\" starting at index 1 and 2 |\n| 15         | \"kiwivolivo\"              | \"ivo\"     | [0, 4]          | Anagrams of \"ivo\" at indices 0 and 4      |\n| 16         | \"fghijklmnoabc\"           | \"abc\"     | [9]             | Only one anagram of \"abc\" at index 9     |\n| 17         | \"aabbccddeeffgghh\"        | \"abc\"     | [0, 4, 8]       | Anagrams of \"abc\" at multiple positions  |\n| 18         | \"bfghfghi\"                | \"fg\"      | [1, 4]          | Anagrams of \"fg\" at positions 1 and 4    |\n| 19         | \"abcdabcdabcd\"            | \"abcd\"    | [0, 4, 8]       | Multiple occurrences of anagrams          |\n| 20         | \"jjjklmn\"                 | \"kl\"      | [3]             | Only one anagram of \"kl\" at index 3      |\n| 21         | \"madmananagram\"           | \"man\"     | [2]             | Only one anagram of \"man\" at index 2     |\n| 22         | \"xyzxyzxyz\"               | \"zyx\"     | [0, 3, 6]       | Multiple occurrences of anagrams          |\n| 23         | \"abcdefghij\"              | \"gh\"      | [5]             | Anagram of \"gh\" starts at index 5        |\n| 24         | \"qwertyuiopasdfsdf\"       | \"qwe\"     | [0]             | Only one anagram of \"qwe\"                |\n| 25         | \"zzzzzzzzzzzzz\"           | \"zz\"      | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] | Multiple anagrams of \"zz\"                |",
        "example": {
          "input": "\"cbaebabacd\", \"abc\"",
          "output": "[0, 6]",
          "explanation": "Anagrams of \"abc\" start at index 0 and 6."
        },
        "answer": "from collections import Counter\n\ndef findAnagrams(s, p):\n    p_count = Counter(p)\n    s_count = Counter()\n    res = []\n    for i in range(len(s)):\n        s_count[s[i]] += 1\n        if i >= len(p):\n            s_count[s[i-len(p)]] -= 1\n            if s_count[s[i-len(p)]] == 0:\n                del s_count[s[i-len(p)]]\n        if s_count == p_count:\n            res.append(i - len(p) + 1)\n    return res"
      },
        {
    "id": 15,
    "title": "Check if Array Contains a Pair with Given Sum",
    "description": "Given an array and a target sum, check if there exists a pair of elements that add up to the target.\n\n| Test Cases | Input Array   | Target Sum | Expected Output |\n|------------|---------------|------------|-----------------|\n| 1          | [1, 2, 3, 4, 5] | 7          | true            |\n| 2          | [1, 4, 4, 5]   | 8          | true            |\n| 3          | [1, 2, 3, 4, 5] | 10         | true            |\n| 4          | [1, 2, 3, 4, 5] | 2          | false           |\n| 5          | []            | 5          | false           |\n| 6          | [5]           | 5          | false           |\n| 7          | [0, -1, 2, -3, 1] | -1         | true            |\n| 8          | [1, 1, 1, 1]   | 2          | true            |\n| 9          | [10, 5, 2, 8]  | 7          | true            |\n| 10         | [-2, 1, -3, 4, -1, 2, 1, -5, 4] | 0          | true            |\n",
    "example": {
      "input": "arr = [1, 2, 4, 6], target = 6",
      "output": "true",
      "explanation": "The pair (2, 4) adds up to 6."
    },
    "answer": "def has_pair_with_sum(arr, target):\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"
  },
      {
        "id": 16,
        "title": "Count Primes",
        "description": "Count number of primes less than n.\n\n| Test Cases | n    | Expected Output | Notes                                  |\n|------------|------|-----------------|----------------------------------------|\n| 1          | 10   | 4               | Primes are 2, 3, 5, 7                 |\n| 2          | 2    | 0               | No primes less than 2                 |\n| 3          | 1    | 0               | No primes less than 1                 |\n| 4          | 5    | 2               | Primes are 2, 3                       |\n| 5          | 50   | 15              | Primes are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 |\n| 6          | 100  | 25              | 25 primes less than 100               |\n| 7          | 20   | 8               | Primes are 2, 3, 5, 7, 11, 13, 17, 19  |\n| 8          | 30   | 10              | Primes are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29  |\n| 9          | 15   | 6               | Primes are 2, 3, 5, 7, 11, 13         |\n| 10         | 200  | 46              | 46 primes less than 200               |\n| 11         | 500  | 95              | 95 primes less than 500               |\n| 12         | 1000 | 168             | 168 primes less than 1000             |\n| 13         | 2000 | 303             | 303 primes less than 2000             |\n| 14         | 10^6 | 78498           | 78498 primes less than 10^6           |\n| 15         | 10000| 1229            | 1229 primes less than 10000            |\n| 16         | 5000 | 669             | 669 primes less than 5000             |\n| 17         | 150   | 35              | 35 primes less than 150               |\n| 18         | 20   | 8               | Primes are 2, 3, 5, 7, 11, 13, 17, 19  |\n| 19         | 11   | 4               | Primes are 2, 3, 5, 7                 |\n| 20         | 30   | 10              | Primes are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29  |\n| 21         | 100   | 25              | 25 primes less than 100               |\n| 22         | 200   | 46              | 46 primes less than 200               |\n| 23         | 5000  | 669             | 669 primes less than 5000             |\n| 24         | 1500  | 241             | 241 primes less than 1500             |\n| 25         | 10000 | 1229            | 1229 primes less than 10000           |\n| 26         | 100000 | 9592           | 9592 primes less than 100000           |\n| 27         | 15000 | 1735            | 1735 primes less than 15000           |\n| 28         | 30000 | 3007            | 3007 primes less than 30000           |\n| 29         | 1000  | 168             | 168 primes less than 1000             |\n| 30         | 20    | 8               | Primes are 2, 3, 5, 7, 11, 13, 17, 19  |\n| 31         | 500   | 95              | 95 primes less than 500               |\n| 32         | 50000 | 5133            | 5133 primes less than 50000           |\n| 33         | 250   | 53              | 53 primes less than 250               |\n| 34         | 15000 | 1735            | 1735 primes less than 15000           |\n| 35         | 3000  | 430             | 430 primes less than 3000             |\n| 36         | 5000  | 669             | 669 primes less than 5000             |\n| 37         | 8000  | 1272            | 1272 primes less than 8000            |\n| 38         | 2000  | 303             | 303 primes less than 2000             |\n| 39         | 100000 | 9592           | 9592 primes less than 100000           |",
        "example": {
          "input": "10",
          "output": "4",
          "explanation": "The prime numbers less than 10 are: 2, 3, 5, 7."
        },
        "answer": "def countPrimes(n):\n    if n < 2: return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            primes[i*i:n:i] = [False]*len(primes[i*n:i])\n    return sum(primes)"
      },
       {
    "id": 17,
    "title": "Find the Element with Odd Occurrences",
    "description": "Find the element in an array that appears an odd number of times (all others appear an even number of times).\n\n| Test Cases | Input Array          | Expected Output |\n|------------|----------------------|-----------------|\n| 1          | [1, 2, 2, 3, 1]     | 3               |\n| 2          | [2, 3, 5, 4, 5, 3, 4] | 2               |\n| 3          | [1, 1, 2, 2, 3, 3, 4] | 4               |\n| 4          | [1]                  | 1               |\n| 5          | [5, 5, 4, 4, 3]     | 3               |\n| 6          | [10, 20, 10, 30, 20] | 30              |\n| 7          | [7, 7, 7]            | 7               |\n| 8          | [-1, -1, 0]          | 0               |\n| 9          | [8, 2, 8, 2, 9, 9, 1] | 1               |\n| 10         | [1, 2, 3, 2, 1]     | 3               |\n",
    "example": {
      "input": "[1, 2, 3, 2, 1]",
      "output": "3",
      "explanation": "Elements 1 and 2 appear twice (even), while 3 appears once (odd)."
    },
    "answer": "def find_odd_occurrence(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result"
  },
      {
        "id": 18,
        "title": "Roman to Integer",
        "description": "Convert Roman numeral to integer.\n\n| Test Cases | s       | Expected Output | Notes                                      |\n|------------|---------|-----------------|--------------------------------------------|\n| 1          | \"III\"  | 3               | III = 1 + 1 + 1                           |\n| 2          | \"IV\"   | 4               | IV = 5 - 1                                 |\n| 3          | \"IX\"   | 9               | IX = 10 - 1                                |\n| 4          | \"LVIII\"| 58              | L = 50, V = 5, III = 3                    |\n| 5          | \"MCMXCIV\"| 1994            | M = 1000, CM = 900, XC = 90, IV = 4       |\n| 6          | \"MMXXI\" | 2021            | MM = 2000, X = 10, XXI = 21               |\n| 7          | \"CCXXXIV\"| 234             | CC = 200, XXX = 30, IV = 4                |\n| 8          | \"XII\"   | 12              | X = 10, II = 2                            |\n| 9          | \"XLVI\"  | 46              | XL = 40, VI = 6                           |\n| 10         | \"IX\"    | 9               | IX = 9                                    |\n| 11         | \"CXXXII\"| 132             | C = 100, XXX = 30, II = 2                 |\n| 12         | \"V\"     | 5               | Single Roman numeral                       |\n| 13         | \"DCCCXLIV\"| 844            | D = 500, CCC = 300, XL = 40, IV = 4       |\n| 14         | \"MCDLXXXIV\"| 1484          | M = 1000, CD = 400, L = 50, XXX = 30, IV = 4 |\n| 15         | \"I\"     | 1               | Single Roman numeral                       |\n| 16         | \"MDCLXVI\"| 1666            | M = 1000, D = 500, C = 100, L = 50, X = 10, VI = 6 |\n| 17         | \"XCVII\" | 97              | XC = 90, VII = 7                          |\n| 18         | \"CDXLIV\"| 444             | CD = 400, XL = 40, IV = 4                 |\n| 19         | \"MCMXLVIII\"| 1948          | M = 1000, CM = 900, XL = 40, VIII = 8     |\n| 20         | \"MMMCMXC\"| 3990            | MMM = 3000, CM = 900, XC = 90             |\n| 21         | \"DXXX\"   | 530             | D = 500, XXX = 30                         |\n| 22         | \"CCCXXI\" | 321             | CCC = 300, XX = 20, I = 1                 |\n| 23         | \"XIII\"   | 13              | X = 10, III = 3                           |\n| 24         | \"XCV\"    | 95              | XC = 90, V = 5                            |\n| 25         | \"LXVIII\" | 68              | LX = 60, VIII = 8                         |\n| 26         | \"MMLXXXIV\"| 2084           | MM = 2000, LXXX = 80, IV = 4              |\n| 27         | \"CLV\"    | 155             | C = 100, L = 50, V = 5                    |\n| 28         | \"MMXX\"   | 2020            | MM = 2000, XX = 20                        |\n| 29         | \"DLV\"    | 555             | D = 500, L = 50, V = 5                    |\n| 30         | \"XXXVIII\"| 38              | XXX = 30, VIII = 8                        |\n| 31         | \"VIII\"   | 8               | V = 5, III = 3                            |\n| 32         | \"CCCLXVI\"| 366             | CCC = 300, LX = 60, VI = 6                |\n| 33         | \"MMMM\"   | 4000            | M = 1000, M = 1000, M = 1000, M = 1000    |\n| 34         | \"MMCDXLII\"| 2442           | MM = 2000, CD = 400, XL = 40, II = 2      |\n| 35         | \"MDCCCLXXXIV\"| 1884        | M = 1000, D = 500, CCC = 300, L = 50, XXX = 30, IV = 4 |\n| 36         | \"XCII\"   | 92              | XC = 90, II = 2                           |\n| 37         | \"IV\"     | 4               | IV = 5 - 1                                |\n| 38         | \"MMMCCCLXXXVIII\"| 3388   | MMM = 3000, CCC = 300, LXXX = 80, VIII = 8 |\n| 39         | \"XVIII\"  | 18              | X = 10, VIII = 8                          |\n| 40         | \"XVII\"   | 17              | X = 10, VII = 7                           |",
        "example": {
          "input": "\"III\"",
          "output": "3",
          "explanation": "III = 1 + 1 + 1."
        },
        "answer": "def romanToInt(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    for i in range(len(s)):\n        if i+1 < len(s) and roman[s[i]] < roman[s[i+1]]:\n            res -= roman[s[i]]\n        else:\n            res += roman[s[i]]\n    return res"
      },
       {
    "id": 19,
    "title": "Check if Array is a Subset of Another Array",
    "description": "Check if all elements of one array are present in another array.\n\n| Test Cases | Subset Array | Main Array        | Expected Output |\n|------------|--------------|-------------------|-----------------|\n| 1          | [1, 2, 3]    | [1, 2, 3, 4, 5]   | true            |\n| 2          | [3, 1, 2]    | [1, 2, 3, 4, 5]   | true            |\n| 3          | [1, 5, 6]    | [1, 2, 3, 4, 5]   | false           |\n| 4          | []           | [1, 2, 3]         | true            |\n| 5          | [1, 2, 3]    | []                | false           |\n| 6          | [1, 1, 2]    | [1, 2, 2, 1]      | true            |\n| 7          | [1, 2, 3]    | [3, 2, 1]         | true            |\n| 8          | [1, 2, 4]    | [1, 2, 3]         | false           |\n| 9          | [10, 20]     | [20, 10, 30]      | true            |\n| 10         | [5, 5, 5]    | [5, 5]            | false           |\n",
    "example": {
      "input": "subset = [1, 2], main = [1, 2, 3]",
      "output": "true",
      "explanation": "All elements of [1, 2] are present in [1, 2, 3]."
    },
    "answer": "from collections import Counter\n\ndef is_subset(subset, main):\n    subset_counts = Counter(subset)\n    main_counts = Counter(main)\n    for element, count in subset_counts.items():\n        if element not in main_counts or main_counts[element] < count:\n            return False\n    return True"
  },
      {
        "id": 20,
        "title": "Longest Substring Without Repeating Characters",
        "description": "Length of longest substring without repeating characters.\n\n| Test Cases | s                 | Expected Output | Notes                              |\n|------------|-------------------|-----------------|------------------------------------|\n| 1          | \"abcabcbb\"        | 3               | 'abc' is the longest substring    |\n| 2          | \"bbbbb\"           | 1               | Only one character repeated       |\n| 3          | \"pwwkew\"          | 3               | 'wke' is the longest substring    |\n| 4          | \"dvdf\"            | 3               | 'vdf' is the longest substring    |\n| 5          | \"\"                | 0               | Empty string                       |\n| 6          | \"au\"              | 2               | All characters are unique         |\n| 7          | \"cbbebi\"          | 3               | 'cbe' is the longest substring    |\n| 8          | \"abcdabc\"         | 4               | 'abcd' is the longest substring   |\n| 9          | \"abcdefghijk\"     | 11              | Entire string is unique           |\n| 10         | \"aaabcdeffg\"      | 6               | 'abcde' is the longest substring  |\n| 11         | \"bbb\"              | 1               | One character repeated            |\n| 12         | \"abcdefghijklmnopqrstuvwxyz\" | 26      | Entire string is unique           |\n| 13         | \"xyzxyzxyzxyz\"    | 3               | 'xyz' repeats, so longest substring is 3 |\n| 14         | \"qwertyuiop\"      | 10              | Entire string is unique           |\n| 15         | \"abcdefgabcdefg\"  | 7               | 'abcdefg' is the longest substring |\n| 16         | \"lmnoabbcddbb\"    | 6               | 'lmnoab' is the longest substring |\n| 17         | \"abcd\"             | 4               | Entire string is unique           |\n| 18         | \"abcdefffg\"       | 6               | 'abcdef' is the longest substring |\n| 19         | \"zxcvbnm\"          | 7               | Entire string is unique           |\n| 20         | \"abcdefgaa\"       | 7               | 'abcdefg' is the longest substring |\n| 21         | \"abcdabcd\"        | 4               | Repeating pattern                 |\n| 22         | \"aaaabcdeffg\"     | 6               | 'abcde' is the longest substring |\n| 23         | \"yxyzyxyzyxyzy\"    | 3               | 'xyz' repeats, longest substring is 3 |\n| 24         | \"wxyzxyyzx\"        | 4               | Unique longest substring 'wxyz' |\n| 25         | \"nnnnoooooo\"      | 3               | 'no' is the longest substring    |\n| 26         | \"abcabcabcabc\"     | 3               | Pattern repeating after 3 chars |\n| 27         | \"weaweawefwef\"     | 4               | 'weaf' is the longest substring  |\n| 28         | \"abcdcbabcabc\"     | 4               | 'abcd' is longest                |\n| 29         | \"xyxabcabcabc\"     | 3               | 'xy' is longest without repeat   |\n| 30         | \"ab\"               | 2               | 'ab' is longest substring       |\n| 31         | \"bbbbbbbbb\"        | 1               | Repeating b                     |\n| 32         | \"zxyzyx\"           | 3               | Non-repeating longest substring 'zxy' |\n| 33         | \"123321123\"        | 3               | '123' is longest without repeat |\n| 34         | \"wwwwooo\"          | 3               | longest is 'wo'                |\n| 35         | \"qrqrqrqrq\"        | 2               | longest is 'qr'                |\n| 36         | \"abcdefghijklm\"    | 13              | Entire string is unique         |\n| 37         | \"aaacbcdbca\"       | 4               | longest without repeat is 'acbd'|\n| 38         | \"xyyxyxyx\"         | 2               | longest is 'xy'                |\n| 39         | \"abcabcab\"         | 3               | longest is 'abc'               |\n| 40         | \"aaaaaabbbbbb\"     | 2               | longest 'ab'                   |",
        "example": {
          "input": "\"abcabcbb\"",
          "output": "3",
          "explanation": "The longest substring without repeating characters is 'abc'."
        },
        "answer": "def lengthOfLongestSubstring(s):\n    seen = {}\n    left = res = 0\n    for right, c in enumerate(s):\n        if c in seen and seen[c] >= left:\n            left = seen[c] + 1\n        seen[c] = right\n        res = max(res, right - left + 1)\n    return res"
      },
      {
    "id": 21,
    "title": "Find the Intersection of Two Arrays (II)",
    "description": "Return all elements that appear in both arrays, including duplicates.\n\n| Test Cases | Array 1   | Array 2   | Expected Output |\n|------------|-----------|-----------|-----------------|\n| 1          | [1, 2, 2, 1] | [2, 2]    | [2, 2]          |\n| 2          | [4, 9, 5] | [9, 4, 9, 8, 4] | [4, 9]          |\n| 3          | [1, 2, 3] | [4, 5, 6] | []              |\n| 4          | [1, 1, 1] | [1, 1, 1] | [1, 1, 1]       |\n| 5          | []        | [1, 2, 3] | []              |\n| 6          | [1, 2, 3] | []        | []              |\n| 7          | [1, 2, 3] | [3, 2, 1] | [1, 2, 3]       |\n| 8          | [1, 1, 2, 3] | [1, 2]    | [1, 2]          |\n| 9          | [5, 6, 7, 8] | [7, 8, 9, 10] | [7, 8]          |\n| 10         | [3, 1, 2, 1] | [1, 1, 3, 3] | [3, 1, 1]       |\n",
    "example": {
      "input": "nums1 = [1, 2, 2, 1], nums2 = [2, 2]",
      "output": "[2, 2]",
      "explanation": "Both arrays contain two occurrences of the number 2."
    },
    "answer": "from collections import Counter\n\ndef intersect(nums1, nums2):\n    count1 = Counter(nums1)\n    count2 = Counter(nums2)\n    intersection = []\n    for num, count in count1.items():\n        if num in count2:\n            intersection.extend([num] * min(count, count2[num]))\n    return intersection"
  },
      {
        "id": 22,
        "title": "Check if Arrays are Equal After Reversing Subarrays",
        "description": "Check if two arrays can be made equal.\n\n| Test Cases | target             | arr               | Expected Output | Notes                               |\n|------------|--------------------|-------------------|-----------------|-------------------------------------|\n| 1          | [1,2,3,4]          | [2,4,1,3]         | True            | Both arrays can be made equal after reordering |\n| 2          | [1,2,3,4]          | [4,3,2,1]         | True            | Both arrays can be made equal after reordering |\n| 3          | [5,6,7,8]          | [8,7,6,5]         | True            | Both arrays can be made equal after reordering |\n| 4          | [10,11,12]         | [12,10,11]        | True            | Both arrays can be made equal after reordering |\n| 5          | [5,5,5]            | [5,5,5]           | True            | Both arrays are already equal       |\n| 6          | [1,2,3]            | [4,5,6]           | False           | Arrays cannot be made equal        |\n| 7          | [1,2,3,4]          | [1,2,4,3]         | True            | Both arrays can be made equal after reordering |\n| 8          | [7,8,9,10]         | [8,9,7,10]        | True            | Both arrays can be made equal after reordering |\n| 9          | [2,3,4,5]          | [5,4,3,2]         | True            | Both arrays can be made equal after reordering |\n| 10         | [1,1,1]            | [1,1,1]           | True            | Both arrays are already equal       |",
        "example": {
          "input": "[1,2,3,4], [2,4,1,3]",
          "output": "True",
          "explanation": "Both arrays can be made equal after reordering."
        },
        "answer": "def canBeEqual(target, arr):\n    return sorted(target) == sorted(arr)"
      },
      {
        "id": 23,
        "title": "Find Bottom Left Tree Value",
        "description": "Find the bottom left value in a binary tree.\n\n| Test Cases | root                | Expected Output | Notes                              |\n|------------|---------------------|-----------------|------------------------------------|\n| 1          | [1,2,3,4,5]         | 4               | Leftmost leaf at the last level    |\n| 2          | [1,2,3,4]           | 4               | Leftmost leaf at the last level    |\n| 3          | [1,2,3,null,5]       | 5               | Leftmost leaf at the last level    |\n| 4          | [1,2,3]              | 2               | Leftmost leaf at the second level  |\n| 5          | [1,2,3,4,5,6,7]      | 4               | Leftmost leaf at the last level    |\n| 6          | [1,2,3,4,5,6,7,8]    | 4               | Leftmost leaf at the last level    |\n| 7          | [1,2,3,4,5,6,7,8,9]  | 4               | Leftmost leaf at the last level    |\n| 8          | [1,2]                | 2               | Only two nodes, 2 is the leftmost  |\n| 9          | [1,2,3,null,4]       | 4               | Leftmost leaf at the second level  |\n| 10         | [1,2,3,null,5,null,6] | 5               | Leftmost leaf at the second level  |\n| 11         | [1,2,3,4,5,6]        | 4               | Leftmost leaf at the last level    |\n| 12         | [1,2,null,3,null,4]   | 3               | Leftmost leaf at the second level  |\n| 13         | [1,2,3,null,4,5]      | 4               | Leftmost leaf at the second level  |\n| 14         | [1,2,3,4,5,null,6]    | 4               | Leftmost leaf at the last level    |\n| 15         | [1,2,3,4,5,6,7,8]    | 4               | Leftmost leaf at the last level    |\n| 16         | [1,2,3,4,5,6,7]      | 4               | Leftmost leaf at the last level    |\n| 17         | [1]                   | 1               | Only one node                     |\n| 18         | [1,2]                 | 2               | Only two nodes, 2 is the leftmost  |\n| 19         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 20         | [1,2,3,4,5,6,7]       | 4               | Leftmost leaf at the last level    |\n| 21         | [1,2,3,4]             | 4               | Leftmost leaf at the last level    |\n| 22         | [1,2,3,4,5,6]         | 4               | Leftmost leaf at the last level    |\n| 23         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 24         | [1,2,3]               | 2               | Leftmost leaf at the second level  |\n| 25         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 26         | [1,2,3,4,5,6,7,8]     | 4               | Leftmost leaf at the last level    |\n| 27         | [1,2,3]               | 2               | Leftmost leaf at the second level  |\n| 28         | [1,2,3,4]             | 4               | Leftmost leaf at the last level    |\n| 29         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 30         | [1,2,3,4]             | 4               | Leftmost leaf at the last level    |\n| 31         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 32         | [1,2,3]               | 2               | Leftmost leaf at the second level  |\n| 33         | [1,2,3,4,5]           | 4               | Leftmost leaf at the last level    |\n| 34         | [1,2,3]               | 2               | Leftmost leaf at the second level  |\n| 35         | [1,2,3,4,5,6]         | 4               | Leftmost leaf at the last level    |\n| 36         | [1,2]                 | 2               | Only two nodes, 2 is the leftmost  |\n| 37         | [1,2,3,4]             | 4               | Leftmost leaf at the last level    |\n| 38         | [1,2,3,4]             | 4               | Leftmost leaf at the last level    |\n| 39         | [1,2,3]               | 2               | Leftmost leaf at the second level  |\n| 40         | [1,2,3,4,5,6]         | 4               | Leftmost leaf at the last level    |",
        "example": {
          "input": "[1,2,3,4,5]",
          "output": "4",
          "explanation": "The bottom left tree value is 4."
        },
        "answer": "def findBottomLeftValue(root):\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        if node.right: queue.append(node.right)\n        if node.left: queue.append(node.left)\n    return node.val"
      },      
      {
        "id": 24,
        "title": "Populating Next Right Pointers in Each Node",
        "description": "Connect all nodes at the same level using the next right pointer.\n\n| Test Cases | root                | Expected Output | Notes                              |\n|------------|---------------------|-----------------|------------------------------------|\n| 1          | [1,2,3,4,5,6,7]     | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> None] | Standard binary tree with 7 nodes |\n| 2          | [1,2,3]             | [1 -> None, 2 -> 3, 3 -> None] | Simple binary tree with 3 nodes   |\n| 3          | [1,2,3,4,5,6]       | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6] | Binary tree with 6 nodes           |\n| 4          | [1]                  | [1 -> None]                      | Single node tree                   |\n| 5          | [1,2,3,4]            | [1 -> None, 2 -> 3, 3 -> None, 4 -> None] | Tree with only left children        |\n| 6          | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | Tree with two levels               |\n| 7          | [1,2,3,4,5,6,7,8]    | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> None] | Tree with 8 nodes                |\n| 8          | [1,2,3,4,5,6]        | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6] | Simple 6 node tree                  |\n| 9          | [1,2]                 | [1 -> None, 2 -> None]           | Two nodes, single child            |\n| 10         | [1,2,3,4,5,6,7,8]    | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> None] | Binary tree with balanced levels    |\n| 11         | [1,2,3]              | [1 -> None, 2 -> 3, 3 -> None] | Standard case                     |\n| 12         | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | 5 node binary tree with 2 levels    |\n| 13         | [1,2,3,4,5,6]        | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6] | Binary tree with 6 nodes           |\n| 14         | [1,2,3,4,5,6,7,8,9]  | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> 9, 9 -> None] | Full binary tree                 |\n| 15         | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | Full binary tree                   |\n| 16         | [1,2,3,4]            | [1 -> None, 2 -> 3, 3 -> None, 4 -> None] | Simple binary tree                  |\n| 17         | [1,2,3,4,5,6,7]      | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> None] | Binary tree with 7 nodes           |\n| 18         | [1]                   | [1 -> None]                      | Single node tree                   |\n| 19         | [1,2]                 | [1 -> None, 2 -> None]           | Simple tree with 2 nodes           |\n| 20         | [1,2,3,4]            | [1 -> None, 2 -> 3, 3 -> None, 4 -> None] | Tree with left children only        |\n| 21         | [1,2,3,4]            | [1 -> None, 2 -> 3, 3 -> None, 4 -> None] | Same as Test Case 20              |\n| 22         | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | Left and right children alternate    |\n| 23         | [1,2,3]              | [1 -> None, 2 -> 3, 3 -> None] | Simple binary tree                  |\n| 24         | [1,2,3,4,5,6]        | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6] | A binary tree with balanced levels   |\n| 25         | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | Balanced binary tree               |\n| 26         | [1,2,3,4]            | [1 -> None, 2 -> 3, 3 -> None, 4 -> None] | Simple 4 node tree                  |\n| 27         | [1,2,3]              | [1 -> None, 2 -> 3, 3 -> None] | Standard binary tree with 3 nodes  |\n| 28         | [1,2,3]              | [1 -> None, 2 -> 3, 3 -> None] | Binary tree with 3 nodes           |\n| 29         | [1,2,3]              | [1 -> None, 2 -> 3, 3 -> None] | Simple binary tree with 3 nodes    |\n| 30         | [1,2,3,4,5]          | [1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> None] | Basic binary tree with 5 nodes     |",
        "example": {
          "input": "[1,2,3,4,5,6,7]",
          "output": "[1 -> None, 2 -> 3, 3 -> None, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> None]",
          "explanation": "The next right pointers are populated for each node."
        },
        "answer": "def connect(root):\n    if not root: return root\n    queue = [root]\n    while queue:\n        prev = None\n        for i in range(len(queue)):\n            node = queue.pop(0)\n            if prev: prev.next = node\n            if node.left: queue.append(node.left)\n            if node.right: queue.append(node.right)\n            prev = node\n    return root"
      },      
      {
        "id": 25,
        "title": "Search in a Binary Search Tree",
        "description": "Search for a value in a Binary Search Tree.\n\n| Test Cases | root                | target  | Expected Output | Notes                              |\n|------------|---------------------|---------|-----------------|------------------------------------|\n| 1          | [4,2,7,1,3,6,9]     | 3       | true            | Found in left subtree             |\n| 2          | [4,2,7,1,3,6,9]     | 5       | false           | Not found in the tree             |\n| 3          | [10,5,15,3,7,13,18] | 7       | true            | Found in left subtree             |\n| 4          | [10,5,15,3,7,13,18] | 13      | true            | Found in right subtree            |\n| 5          | [8,3,10,1,6,9,12]   | 6       | true            | Found in left subtree             |\n| 6          | [8,3,10,1,6,9,12]   | 15      | false           | Not found                         |\n| 7          | [5,3,8,2,4,7,9]     | 4       | true            | Found in left subtree             |\n| 8          | [5,3,8,2,4,7,9]     | 2       | true            | Found in leftmost node            |\n| 9          | [5,3,8,2,4,7,9]     | 9       | true            | Found in rightmost node           |\n| 10         | [1,2,3]             | 3       | true            | Found in the right subtree        |\n| 11         | [1,2,3]             | 2       | true            | Found in the left subtree         |\n| 12         | [1]                  | 1       | true            | Single node tree, value found     |\n| 13         | [10,5,15,3,7,13,18] | 5       | true            | Found in left subtree             |\n| 14         | [10,5,15,3,7,13,18] | 18      | true            | Found in rightmost node           |\n| 15         | [3,2,4]             | 5       | false           | Not found                         |\n| 16         | [8,3,10,1,6,9,12]   | 1       | true            | Found in left subtree             |\n| 17         | [5,3,8,2,4,7,9]     | 7       | true            | Found in right subtree            |\n| 18         | [10,5,15,3,7,13,18] | 3       | true            | Found in leftmost subtree         |\n| 19         | [4,2,7,1,3,6,9]     | 9       | true            | Found in right subtree            |\n| 20         | [4,2,7,1,3,6,9]     | 2       | true            | Found in left subtree             |\n| 21         | [5,3,8,2,4,7,9]     | 10      | false           | Not found                         |\n| 22         | [1,2,3,4,5]          | 4       | true            | Found in the right subtree        |\n| 23         | [6,3,8,2,5,7,9]     | 5       | true            | Found in the left subtree         |\n| 24         | [6,3,8,2,5,7,9]     | 9       | true            | Found in the right subtree        |\n| 25         | [8,3,10,1,6,9,12]   | 3       | true            | Found in left subtree             |\n| 26         | [8,3,10,1,6,9,12]   | 8       | true            | Root node is the target           |\n| 27         | [1,2,3,4]            | 4       | true            | Found in the right subtree        |\n| 28         | [10,5,15,3,7,13,18] | 13      | true            | Found in the right subtree        |\n| 29         | [7,3,10,2,4,8,12]   | 2       | true            | Found in the leftmost node        |\n| 30         | [7,3,10,2,4,8,12]   | 12      | true            | Found in the rightmost node       |",
        "example": {
          "input": "[10,5,15,3,7,13,18], target: 7",
          "output": "true",
          "explanation": "The target 7 is found in the left subtree of the root."
        },
        "answer": "def searchBST(root, target):\n    if not root: return False\n    if root.val == target: return True\n    elif target < root.val: return searchBST(root.left, target)\n    else: return searchBST(root.right, target)"
      }
  

 
                                    
    ]
}
