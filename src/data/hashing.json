{
    "questions": [
      {
        "id": 1,
        "title": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. \n\n You may assume that each input would have exactly one solution, and you may not use the same element twice. \n\n You can return the answer in any order.\n\n| Test Cases | nums                | Target | Expected Output   | Notes                                |\n|------------|----------------------|--------|-------------------|--------------------------------------|\n| 1          | [2, 7, 11, 15]        | 9      | [0, 1]            | Normal case, straightforward         |\n| 2          | [3, 2, 4]             | 6      | [1, 2]            | Same number appears after            |\n| 3          | [3, 3]                | 6      | [0, 1]            | Need to use the same value twice (different indices) |\n| 4          | [1, 2, 3, 4, 5, 6]    | 10     | [3, 5]            | Larger array                         |\n| 5          | [0, 4, 3, 0]          | 0      | [0, 3]            | Zero handling                        |\n| 6          | [-3, 4, 3, 90]        | 0      | [0, 2]            | Negative numbers                     |\n| 7          | [1, 5, 1, 5]          | 10     | [1, 3]            | Duplicate numbers in array           |\n| 8          | [2, 7, 11, 15]        | 26     | [2, 3]            | Sum of large numbers                 |\n| 9          | [1, 2, 3]             | 7      | None/Error        | No solution case (if allowed)        |\n| 10         | [5]                   | 5      | None/Error        | Single element array, invalid case   |",
        "example": {
          "input": "[2,7,11,15], target = 9",
          "output": "[0,1]",
          "explaination": "Because nums[0] + nums[1] == 9, we return [0, 1]."
        },
        "answer": "class Solution:\n    def twoSum(self, nums, target):\n        hashmap = {}\n        for i, num in enumerate(nums):\n            if target - num in hashmap:\n                return [hashmap[target - num], i]\n            hashmap[num] = i"
      }
    ]
}
