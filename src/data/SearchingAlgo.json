{
    "questions": [
        {
    "id": 1,
    "title": "Count Elements Greater Than X",
    "description": "Given an array and a number X, count how many elements are greater than X.\n\n| Test Cases | array          | X    | Expected Output |\n|------------|----------------|------|-----------------|\n| 1          | [1, 2, 3, 4, 5] | 2    | 3               |\n| 2          | [5, 4, 3, 2, 1] | 3    | 2               |\n| 3          | [10, 20, 30]   | 15   | 2               |\n| 4          | [7, 7, 7, 7]   | 6    | 4               |\n| 5          | []             | 0    | 0               |\n| 6          | [-1, 0, 1]     | -2   | 3               |\n| 7          | [99, -5, 10]   | 5    | 2               |\n| 8          | [1, 5, 2, 8, 3] | 4    | 2               |\n| 9          | [1, 5, 2, 8, 3] | 8    | 0               |\n| 10         | [100]          | 99   | 1               |",
    "example": {
      "input": "[1, 2, 3, 4, 5], X: 2",
      "output": "3",
      "explanation": "The elements 3, 4, and 5 are greater than 2."
    },
    "answer": "def count_greater_than_x(arr, x):\n    count = 0\n    for element in arr:\n        if element > x:\n            count += 1\n    return count"
  },
        {
            "id": 2,
            "title": "Binary Search in Sorted Array",
            "description": "Use binary search to find element in a sorted array.\n\n| Test Cases | arr               | target | Expected Output | Notes                          |\n|------------|-------------------|--------|-----------------|--------------------------------|\n| 1          | [1, 2, 3, 4, 5, 6] | 4      | 3               | Element found at index 3       |\n| 2          | [1, 2, 3, 4, 5, 6] | 1      | 0               | Element found at index 0       |\n| 3          | [1, 2, 3, 4, 5, 6] | 6      | 5               | Element found at last index    |\n| 4          | [1, 2, 3, 4, 5, 6] | 7      | -1              | Element not found              |\n| 5          | [1, 2, 3, 4, 5]    | 3      | 2               | Element found at index 2       |\n| 6          | [10, 20, 30, 40, 50] | 40    | 3               | Element found at index 3       |\n| 7          | [10, 20, 30, 40, 50] | 25    | -1              | Element not found              |\n| 8          | [1, 3, 5, 7, 9]    | 7      | 3               | Element found at index 3       |\n| 9          | [1, 3, 5, 7, 9]    | 1      | 0               | Element found at index 0       |\n| 10         | [2, 4, 6, 8, 10]   | 6      | 2               | Element found at index 2       |\n| 11         | [2, 4, 6, 8, 10]   | 11     | -1              | Element not found              |\n| 12         | [5, 10, 15, 20, 25] | 15    | 2               | Element found at index 2       |\n| 13         | [5, 10, 15, 20, 25] | 5     | 0               | Element found at index 0       |\n| 14         | [50, 60, 70, 80, 90] | 70    | 2               | Element found at index 2       |\n| 15         | [50, 60, 70, 80, 90] | 90    | 4               | Element found at last index    |\n| 16         | [100, 200, 300, 400, 500] | 400 | 3               | Element found at index 3       |\n| 17         | [100, 200, 300, 400, 500] | 100 | 0               | Element found at index 0       |\n| 18         | [1, 2, 3, 4, 5, 6, 7] | 4     | 3               | Element found at index 3       |\n| 19         | [1, 2, 3, 4, 5, 6, 7] | 8     | -1              | Element not found              |\n| 20         | [10, 20, 30, 40, 50, 60, 70] | 60  | 5               | Element found at index 5       |\n| 21         | [10, 20, 30, 40, 50, 60, 70] | 30  | 2               | Element found at index 2       |\n| 22         | [10, 20, 30, 40, 50, 60, 70] | 100 | -1              | Element not found              |\n| 23         | [1, 2, 3, 4, 5, 6, 7] | 2     | 1               | Element found at index 1       |\n| 24         | [1, 2, 3, 4, 5]    | 5      | 4               | Element found at last index    |\n| 25         | [15, 25, 35, 45, 55] | 45    | 3               | Element found at index 3       |",
            "example": {
              "input": "[1, 2, 3, 4, 5, 6], target: 4",
              "output": "3",
              "explanation": "The target 4 is found at index 3."
            },
            "answer": "def binarySearch(arr, target):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
        },
        {
            "id": 3,
            "title": "First Occurrence in Sorted Array",
            "description": "Find the first occurrence of the target in a sorted array.\n\n| Test Cases | array                      | Target | Expected Output | Notes                              |\n|------------|----------------------------|--------|-----------------|------------------------------------|\n| 1          | [2, 4, 4, 4, 5, 6]         | 4      | 1               | Target occurs multiple times      |\n| 2          | [1, 2, 3, 4, 5]             | 3      | 2               | Simple sorted array               |\n| 3          | [1, 1, 1, 1, 2, 2]         | 2      | 4               | Target appears after duplicates   |\n| 4          | [1, 2, 2, 2, 3]             | 2      | 1               | Target is at the second position  |\n| 5          | [5, 6, 7, 8, 9]             | 7      | 2               | Array with no duplicates          |\n| 6          | [1, 1, 2, 2, 3, 4]         | 3      | 4               | Target in the middle              |\n| 7          | [0, 1, 2, 3, 4, 5]         | 5      | 5               | Target at the last position       |\n| 8          | [10, 20, 30, 40]            | 20     | 1               | Array with distinct elements      |\n| 9          | [1, 3, 5, 7, 9]             | 1      | 0               | Target at the first position      |\n| 10         | [2, 2, 3, 4, 5]             | 6      | -1              | Target not present                |\n| 11         | [1, 3, 5, 7, 9, 11]         | 7      | 3               | Middle position                   |\n| 12         | [1, 2, 3, 4]                | 5      | -1              | Target not present                |\n| 13         | [2, 3, 3, 3, 4]             | 3      | 1               | Multiple occurrences of target    |\n| 14         | [5, 5, 5, 5, 5]             | 5      | 0               | Target present at the beginning   |\n| 15         | [1, 2, 4, 4, 6, 7, 8]       | 4      | 2               | Target repeated in array          |\n| 16         | [6, 7, 8, 9, 10]            | 9      | 3               | Array with consecutive numbers    |\n| 17         | [1, 2, 3, 4, 4, 4]          | 4      | 3               | Target present in the middle      |\n| 18         | [8, 9, 10, 11, 12]          | 10     | 2               | Simple sorted array               |\n| 19         | [2, 3, 4, 5, 6]             | 4      | 2               | Array with ascending numbers      |\n| 20         | [10, 20, 30, 40, 50]        | 30     | 2               | Array with distinct elements      |\n| 21         | [5, 7, 9, 12]               | 9      | 2               | Array with non-consecutive numbers|\n| 22         | [1, 3, 3, 3, 4, 6]          | 3      | 1               | Multiple duplicates of target     |\n| 23         | [10, 11, 12, 13, 14]        | 12     | 2               | Simple ascending order            |\n| 24         | [5, 6, 7, 8, 9, 10]         | 5      | 0               | Target is the first element       |\n| 25         | [1, 3, 5, 7, 8]             | 6      | -1              | Target not present                |\n| 26         | [1, 2, 3, 4, 5, 6]          | 6      | 5               | Target at the last position       |\n| 27         | [1, 2, 3, 4]                | 2      | 1               | Simple sorted array               |\n| 28         | [3, 5, 7, 9, 11]            | 7      | 2               | Sorted array with odd numbers     |\n| 29         | [4, 4, 4, 4, 4]             | 4      | 0               | Array with only duplicates        |\n| 30         | [2, 4, 5, 7, 9]             | 7      | 3               | Middle of array                   |",
            "example": {
                "input": "[2, 4, 4, 4, 5, 6], 4",
                "output": "1",
                "explanation": "The first occurrence of 4 in the array is at index 1."
            },
            "answer": "def firstOccurrence(arr, target):\n    low, high = 0, len(arr)-1\n    result = -1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == target:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
        },       
        {
    "id": 4,
    "title": "Find Index of Maximum Element",
    "description": "Return the index of the largest element in the array.\n\n| Test Cases | array          | Expected Output |\n|------------|----------------|-----------------|\n| 1          | [1, 2, 3, 4, 5] | 4               |\n| 2          | [5, 4, 3, 2, 1] | 0               |\n| 3          | [10, 20, 30]   | 2               |\n| 4          | [7, 7, 7, 7]   | 0               |\n| 5          | [100]          | 0               |\n| 6          | [-1, 0, 1]     | 2               |\n| 7          | [99, -5, 10]   | 0               |\n| 8          | [1, 5, 2, 8, 3] | 3               |\n| 9          | [-10, -20, -5] | 2               |\n| 10         | [0, 0, 0]      | 0               |",
    "example": {
      "input": "[1, 2, 3, 4, 5]",
      "output": "4",
      "explanation": "The largest element is 5, and its index is 4."
    },
    "answer": "def find_max_index(arr):\n    if not arr:\n        return -1\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index"
  },
        {
            "id": 5,
            "title": "Number of Occurrences",
            "description": "Count occurrences using first and last position.\n\n| Test Cases | Array               | Target | Expected Output | Notes  |\n|------------|---------------------|--------|-----------------|--------|\n| 1          | [1,2,2,2,3,4]       | 2      | 3               | Simple case |\n| 2          | [1,1,1,1]           | 1      | 4               | All elements are the target |\n| 3          | [2,3,4,5,6,7]       | 3      | 1               | Target occurs once |\n| 4          | [2,2,3,3,4,5]       | 3      | 2               | Target appears twice |\n| 5          | [1,2,3,4,5,6]       | 0      | 0               | Target not in array |\n| 6          | [10,10,10,20]       | 10     | 3               | Target at the beginning |\n| 7          | [1,2,3,4,5,6,7,8,9] | 5      | 1               | Middle target |\n| 8          | [1,2,2,2,3,3,3]     | 3      | 3               | Target appears thrice |\n| 9          | [1,2,3,4,5]         | 4      | 1               | Single occurrence at the end |\n| 10         | [2,4,6,8,10]        | 5      | 0               | Target missing |\n| 11         | [1,1,1,1,1]         | 1      | 5               | All elements are the target |\n| 12         | [2,4,6,8,10]        | 6      | 1               | Target in the middle |\n| 13         | [3,3,3,4,5,5]       | 3      | 3               | Target at the start |\n| 14         | [2,3,4,5,6,7,8]     | 6      | 1               | Target towards the end |\n| 15         | [1,1,2,2,2,3]       | 2      | 3               | Middle target appears thrice |\n| 16         | [4,4,4,4,5,6]       | 4      | 4               | Target appears in the beginning |\n| 17         | [1,2,3,4,4,4,5]     | 4      | 3               | Repeated target in middle |\n| 18         | [1,1,2,3,4]         | 3      | 1               | Target near the end |\n| 19         | [5,6,7,8,9]         | 5      | 1               | Single element match |\n| 20         | [1,3,5,7,9]         | 3      | 1               | Target in the middle |\n| 21         | [9,8,7,6,5,4,3,2,1] | 7      | 1               | Target in descending order |\n| 22         | [5,5,5,5]           | 5      | 4               | All elements are the target |\n| 23         | [1,2,3,4]           | 2      | 1               | Target in the middle |\n| 24         | [1,1,2,3,4]         | 2      | 1               | Middle target |\n| 25         | [10,20,30,40,50]    | 20     | 1               | Target is in the beginning |\n| 26         | [1,2,3,4,5,6]       | 6      | 1               | Last element is target |\n| 27         | [10,20,30,40]       | 50     | 0               | Target exceeds array values |\n| 28         | [1,2,3,4,5]         | 0      | 0               | Target is less than array values |\n| 29         | [1,2,2,3,4]         | 2      | 2               | Target appears in the middle |\n| 30         | [3,3,3,3,3]         | 3      | 5               | All elements are the target |\n| 31         | [2,3,4,5]           | 5      | 1               | Last element match |\n| 32         | [1,2,3,4,5,6]       | 7      | 0               | Target is larger than max value |\n| 33         | [4,4,4,5,6]         | 4      | 3               | Target at the start |\n| 34         | [8,8,8,8,9,9,9]     | 9      | 3               | Target at the end |\n| 35         | [1,2,3,3,4,4]       | 3      | 2               | Target appears twice |\n| 36         | [5,5,5,5,5]         | 5      | 5               | All elements are the target |\n| 37         | [1,2,3,4,5,6,7]     | 1      | 1               | Target at the start |\n| 38         | [10,20,30,40]       | 40     | 1               | Target at the end |\n| 39         | [1,2,3,4,5]         | 2      | 1               | Target in the middle |\n| 40         | [7,8,9,10]          | 7      | 1               | Target at the start |",
            "example": {
                "input": "[1,2,2,2,3,4]",
                "target": "2",
                "output": "3",
                "explanation": "The target 2 appears three times in the array."
            },
            "answer": "def countOccurrences(arr, target):\n    return lastOccurrence(arr, target) - firstOccurrence(arr, target) + 1"
        },
        {
            "id": 6,
            "title": "Search Insert Position",
            "description": "Find position where target should be inserted.\n\n| Test Cases | Array               | Target | Expected Output | Notes  |\n|------------|---------------------|--------|-----------------|--------|\n| 1          | [1,3,5,6]           | 2      | 1               | Target should be inserted at index 1 |\n| 2          | [1,2,3,4]           | 5      | 4               | Target should be inserted at index 4 |\n| 3          | [1,3,5,6]           | 0      | 0               | Target should be inserted at the beginning |\n| 4          | [2,4,6,8]           | 5      | 2               | Target should be inserted at index 2 |\n| 5          | [1,3,5,7,9]         | 6      | 3               | Target should be inserted at index 3 |\n| 6          | [1,3,5,7,9]         | 2      | 1               | Target should be inserted at index 1 |\n| 7          | [1,3,5,7,9]         | 10     | 5               | Target should be inserted at the end |\n| 8          | [2,4,6,8,10]        | 5      | 2               | Target should be inserted at index 2 |\n| 9          | [1,1,2,2,3]         | 2      | 2               | Target is already present at index 2 |\n| 10         | [10,20,30]          | 25     | 2               | Target should be inserted at index 2 |\n| 11         | [1,3,5,7,9,11]      | 6      | 3               | Target should be inserted at index 3 |\n| 12         | [1,2,4,6]           | 3      | 2               | Target should be inserted at index 2 |\n| 13         | [2,4,6,8]           | 7      | 3               | Target should be inserted at index 3 |\n| 14         | [1,2,3,5,6,7]       | 4      | 3               | Target should be inserted at index 3 |\n| 15         | [1,2,4,6,8]         | 7      | 4               | Target should be inserted at index 4 |\n| 16         | [5,6,7,8]           | 6      | 1               | Target already exists at index 1 |\n| 17         | [1,1,1,1]           | 1      | 0               | Target already exists at the beginning |\n| 18         | [10,20,30,40]       | 35     | 3               | Target should be inserted at index 3 |\n| 19         | [1,3,5,7,9]         | 8      | 4               | Target should be inserted at index 4 |\n| 20         | [1,2,3,4]           | 5      | 4               | Target should be inserted at index 4 |\n| 21         | [1,3,5,6,7,8]       | 7      | 4               | Target is at the end |\n| 22         | [1,2,3,4]           | 3      | 2               | Target exists at index 2 |\n| 23         | [1,1,1,1]           | 2      | 4               | Target should be inserted at index 4 |\n| 24         | [5,10,15,20]        | 12     | 2               | Target should be inserted at index 2 |\n| 25         | [10,20,30,40]       | 50     | 4               | Target should be inserted at index 4 |\n| 26         | [1,3,5,7,9,11]      | 7      | 4               | Target already exists at index 4 |\n| 27         | [1,2,3,4]           | 1      | 0               | Target is already at the beginning |\n| 28         | [4,6,8,10]          | 6      | 1               | Target is at index 1 |\n| 29         | [1,2,3,4]           | 2      | 1               | Target is at index 1 |\n| 30         | [10,20,30]          | 35     | 3               | Target should be inserted at index 3 |\n| 31         | [2,4,6,8]           | 3      | 1               | Target should be inserted at index 1 |\n| 32         | [1,1,1,2]           | 1      | 0               | Target already exists at index 0 |\n| 33         | [3,5,7,9]           | 4      | 1               | Target should be inserted at index 1 |\n| 34         | [10,20,30]          | 15     | 1               | Target should be inserted at index 1 |\n| 35         | [1,3,5,7]           | 8      | 4               | Target should be inserted at the end |\n| 36         | [1,2,3,4,5]         | 4      | 3               | Target is already at index 3 |\n| 37         | [10,20,30]          | 25     | 2               | Target should be inserted at index 2 |\n| 38         | [1,2,3,4,5,6,7]     | 6      | 5               | Target is at the end |\n| 39         | [1,2,3,5,6]         | 4      | 3               | Target should be inserted at index 3 |\n| 40         | [1,3,5,7,9]         | 2      | 1               | Target should be inserted at index 1 |",
            "example": {
                "input": "[1,3,5,6]",
                "target": "2",
                "output": "1",
                "explanation": "The target 2 should be inserted at index 1."
            },
            "answer": "def searchInsert(arr, target):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"
        },
        {
            "id": 7,
            "title": "Find Minimum in Rotated Sorted Array",
            "description": "Find the minimum element.\n\n| Test Cases | Array               | Expected Output | Notes  |\n|------------|---------------------|-----------------|--------|\n| 1          | [3,4,5,1,2]         | 1               | Simple case |\n| 2          | [4,5,6,7,0,1,2]     | 0               | Array rotated |\n| 3          | [11,13,15,17,19,20,1,3,5] | 1               | Multiple rotations |\n| 4          | [3,4,5,6,7,0,1,2]   | 0               | Simple rotated case |\n| 5          | [1,2,3,4,5]         | 1               | Already sorted |\n| 6          | [1,2,3,4,5,6,7]     | 1               | Already sorted |\n| 7          | [7,8,9,10,1,2,3]    | 1               | Array rotated once |\n| 8          | [6,7,8,9,10,1,2,3]  | 1               | Array rotated twice |\n| 9          | [4,5,6,7,0,1,2]     | 0               | Array rotated four times |\n| 10         | [2,3,4,5,6,7,8,9,1] | 1               | Rotation with highest number at start |\n| 11         | [9,10,1,2,3,4]      | 1               | First rotated part has highest values |\n| 12         | [2,3,4,5,6,7,8,9]   | 2               | No rotation, sorted |\n| 13         | [3,4,5,6,7,8]       | 3               | No rotation, sorted |\n| 14         | [10,11,12,13,1,2,3] | 1               | Array rotated after 4 elements |\n| 15         | [6,7,8,9,10,1]      | 1               | Small rotation |\n| 16         | [2,3,4,5,6]         | 2               | Sorted in ascending order |\n| 17         | [9,10,11,12,1]      | 1               | Array rotated once |\n| 18         | [15,16,17,18,19,20,1,2,3,4] | 1               | Array rotated several times |\n| 19         | [4,5,6,7,8,9]       | 4               | Already sorted |\n| 20         | [3,4,5,6,7,8]       | 3               | Already sorted |\n| 21         | [8,9,10,1,2,3,4]    | 1               | First value after rotation |\n| 22         | [4,5,6,7,8,1,2]     | 1               | Smaller array with a big rotation |\n| 23         | [2,3,4,5,6,1]       | 1               | Array rotated once |\n| 24         | [4,5,6,7,8,9,1,2]   | 1               | Longer rotation |\n| 25         | [12,13,14,15,16,17,18,19,20,1,2,3] | 1               | Large rotated array |\n| 26         | [10,20,30,40,50]    | 10              | No rotation |\n| 27         | [3,4,5,1,2]         | 1               | Rotation by 3 positions |\n| 28         | [8,9,10,11,12,13]   | 8               | No rotation, sorted |\n| 29         | [3,4,5,6,7,0,1,2]   | 0               | Simple rotation case |\n| 30         | [4,5,6,7,8,9,10,1,2,3] | 1               | 3 rotations |\n| 31         | [7,8,9,10,11,12,1,2] | 1               | Rotation |\n| 32         | [11,12,13,14,1,2]   | 1               | Rotation twice |\n| 33         | [1,2,3,4,5,6]       | 1               | No rotation |\n| 34         | [6,7,8,9,10,11,1,2,3] | 1               | Multiple rotations |\n| 35         | [7,8,9,1,2,3]       | 1               | Rotation once |\n| 36         | [1,2,3,4]           | 1               | Already sorted |\n| 37         | [1,3,4,5,2]         | 1               | Small rotation |\n| 38         | [8,9,10,1,2]        | 1               | First element rotated |\n| 39         | [5,10,15,20]        | 5               | No rotation |\n| 40         | [3,4,5,6,7]         | 3               | Already sorted |\n",
            "example": {
                "input": "[3,4,5,1,2]",
                "output": "1",
                "explanation": "The minimum value in the rotated array is 1."
            },
            "answer": "def findMin(nums):\n    low, high = 0, len(nums)-1\n    while low < high:\n        mid = (low + high)//2\n        if nums[mid] > nums[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return nums[low]"
        },
        {
            "id": 8,
            "title": "Search in Rotated Sorted Array",
            "description": "Search an element in rotated array.\n\n| Test Cases | Array                   | Target | Expected Output | Notes           |\n|------------|-------------------------|--------|-----------------|-----------------|\n| 1          | [4,5,6,7,0,1,2]          | 0      | 4               | Simple rotated  |\n| 2          | [1,2,3,4,5,6,7]          | 5      | 4               | No rotation     |\n| 3          | [7,8,9,10,1,2,3]         | 3      | 6               | Rotated once    |\n| 4          | [5,6,7,8,9,10,1,2,3]     | 7      | 2               | Multiple rotations |\n| 5          | [3,4,5,1,2]              | 3      | 0               | Rotation by 3   |\n| 6          | [6,7,8,9,10,1,2,3,4,5]   | 10     | 4               | Rotation       |\n| 7          | [1,2,3,4,5,6,7,8]        | 6      | 5               | Sorted          |\n| 8          | [9,10,11,12,13,1,2,3]    | 1      | 5               | Array rotated   |\n| 9          | [3,4,5,6,7,0,1,2]        | 1      | 6               | Rotated array   |\n| 10         | [8,9,10,11,12,13,14]     | 10     | 2               | Sorted          |\n| 11         | [7,8,9,10,1,2,3,4]       | 4      | 7               | One rotation    |\n| 12         | [5,6,7,8,1,2,3]          | 8      | 3               | Smaller rotation|\n| 13         | [3,4,5,6,1,2]            | 6      | 3               | Simple rotated  |\n| 14         | [1,2,3,4,5,6,7,8,9,10]   | 9      | 8               | Sorted array    |\n| 15         | [4,5,6,7,8,9,1,2]        | 5      | 1               | Rotated array   |\n| 16         | [5,6,7,8,9,10,1,2,3,4]   | 1      | 6               | Multiple rotations |\n| 17         | [4,5,6,7,8,1,2,3]        | 7      | 3               | Array rotation  |\n| 18         | [10,20,30,40,50,1,2,3]   | 50     | 4               | Array rotated once |\n| 19         | [1,3,5,7,9,11,13,15]     | 15     | 7               | Sorted ascending |\n| 20         | [7,8,9,10,1,2,3,4]       | 2      | 6               | Rotation case   |\n| 21         | [3,4,5,6,7,8,9,10]       | 8      | 5               | No rotation     |\n| 22         | [7,8,9,10,1,2]           | 9      | 2               | Rotated once    |\n| 23         | [3,4,5,6,7,0,1]          | 7      | 4               | Rotated first   |\n| 24         | [5,7,9,12,13,3]          | 3      | 5               | Rotation        |\n| 25         | [5,6,7,8,9,10,1,2]       | 9      | 4               | Multiple rotation |\n| 26         | [2,3,4,5,6,7,8]          | 4      | 2               | Already sorted  |\n| 27         | [10,11,12,13,14,15]      | 13     | 3               | Sorted          |\n| 28         | [1,3,4,5,6,7,8]          | 4      | 2               | No rotation     |\n| 29         | [8,9,10,11,12,13,14]     | 12     | 4               | Sorted          |\n| 30         | [3,4,5,6,7,8]            | 6      | 3               | Simple sorted   |\n| 31         | [6,7,8,9,10,1]           | 9      | 3               | Array rotated once |\n| 32         | [1,2,3,4,5,6]            | 5      | 4               | Sorted          |\n| 33         | [9,10,1,2,3]             | 1      | 2               | Simple rotation |\n| 34         | [5,6,7,8,9,10,1]         | 1      | 6               | Rotation once   |\n| 35         | [3,4,5,6,1]              | 3      | 0               | Simple rotation |\n| 36         | [1,2,3,4,5,6,7,8]        | 8      | 7               | Sorted          |\n| 37         | [7,8,9,10,1,2]           | 10     | 3               | Rotation once   |\n| 38         | [5,6,7,8,9,10,1,2]       | 6      | 1               | Rotated twice   |\n| 39         | [8,9,10,11,12,13,1]      | 12     | 4               | Rotation once   |\n| 40         | [7,8,9,1,2,3]            | 8      | 1               | Rotated once    |",
            "example": {
                "input": "[4,5,6,7,0,1,2], 0",
                "output": "4",
                "explanation": "Target 0 is located at index 4 in the rotated array."
            },
            "answer": "def search(nums, target):\n    low, high = 0, len(nums)-1\n    while low <= high:\n        mid = (low+high)//2\n        if nums[mid] == target:\n            return mid\n        if nums[low] <= nums[mid]:\n            if nums[low] <= target < nums[mid]:\n                high = mid-1\n            else:\n                low = mid+1\n        else:\n            if nums[mid] < target <= nums[high]:\n                low = mid+1\n            else:\n                high = mid-1\n    return -1"
        },
        {
            "id": 9,
            "title": "Square Root using Binary Search",
            "description": "Find integer part of square root.\n\n| Test Cases | Input  | Expected Output | Notes       |\n|------------|--------|-----------------|-------------|\n| 1          | 8      | 2               | Normal case |\n| 2          | 16     | 4               | Perfect square |\n| 3          | 25     | 5               | Perfect square |\n| 4          | 7      | 2               | Non-perfect square |\n| 5          | 1      | 1               | Smallest case |\n| 6          | 100    | 10              | Perfect square |\n| 7          | 20     | 4               | Non-perfect square |\n| 8          | 9      | 3               | Perfect square |\n| 9          | 14     | 3               | Non-perfect square |\n| 10         | 30     | 5               | Non-perfect square |\n| 11         | 50     | 7               | Non-perfect square |\n| 12         | 36     | 6               | Perfect square |\n| 13         | 10     | 3               | Non-perfect square |\n| 14         | 121    | 11              | Perfect square |\n| 15         | 250    | 15              | Non-perfect square |\n| 16         | 999    | 31              | Large number |\n| 17         | 1000   | 31              | Large number |\n| 18         | 300    | 17              | Non-perfect square |\n| 19         | 2      | 1               | Small input |\n| 20         | 500    | 22              | Non-perfect square |\n| 21         | 8      | 2               | Normal case |\n| 22         | 1024   | 32              | Large perfect square |\n| 23         | 12345  | 111             | Random large number |\n| 24         | 5      | 2               | Non-perfect square |\n| 25         | 144    | 12              | Perfect square |\n| 26         | 2500   | 50              | Perfect square |\n| 27         | 98     | 9               | Non-perfect square |\n| 28         | 99     | 9               | Non-perfect square |\n| 29         | 121    | 11              | Perfect square |\n| 30         | 64     | 8               | Perfect square |\n| 31         | 256    | 16              | Perfect square |\n| 32         | 320    | 17              | Non-perfect square |\n| 33         | 90     | 9               | Non-perfect square |\n| 34         | 31     | 5               | Non-perfect square |\n| 35         | 14     | 3               | Non-perfect square |\n| 36         | 1      | 1               | Smallest square |\n| 37         | 9999   | 99              | Large input |\n| 38         | 50     | 7               | Non-perfect square |\n| 39         | 81     | 9               | Perfect square |\n| 40         | 102    | 10              | Non-perfect square |",
            "example": {
                "input": "8",
                "output": "2",
                "explanation": "The integer square root of 8 is 2."
            },
            "answer": "def sqrtBinary(x):\n    if x < 2:\n        return x\n    low, high = 1, x//2\n    while low <= high:\n        mid = (low+high)//2\n        if mid*mid == x:\n            return mid\n        elif mid*mid < x:\n            low = mid+1\n            ans = mid\n        else:\n            high = mid-1\n    return ans"
        },
        {
            "id": 10,
            "title": "Peak Element",
            "description": "Find a peak element (greater than neighbors).\n\n| Test Cases | Input              | Expected Output | Notes       |\n|------------|--------------------|-----------------|-------------|\n| 1          | [1, 2, 3, 1]       | 2               | Normal case |\n| 2          | [1, 3, 2]          | 1               | Normal case |\n| 3          | [1, 2, 3, 4, 5]    | 4               | Increasing sequence |\n| 4          | [5, 4, 3, 2, 1]    | 0               | Decreasing sequence |\n| 5          | [1, 2, 1, 3, 5, 6, 4] | 5            | Peak at right end |\n| 6          | [10, 20, 15]       | 1               | 3 elements case |\n| 7          | [100, 90, 80, 70, 60] | 0             | Strictly decreasing |\n| 8          | [50, 60, 50, 40, 30, 20] | 1            | Middle peak |\n| 9          | [3, 2, 1]          | 0               | Descending sequence |\n| 10         | [1, 2]             | 1               | Two elements |\n| 11         | [3, 2, 1]          | 0               | Decreasing sequence |\n| 12         | [1, 2, 3, 4]       | 3               | Peak at right end |\n| 13         | [2, 3, 4, 1]       | 2               | Peak at start |\n| 14         | [1, 2, 4, 3]       | 2               | Peak in middle |\n| 15         | [1, 3, 2, 4, 5]    | 3               | Middle peak |\n| 16         | [6, 5, 4, 3]       | 0               | Descending sequence |\n| 17         | [1, 5, 2, 1]       | 1               | Normal case |\n| 18         | [1, 2, 5, 3]       | 2               | Normal peak |\n| 19         | [3, 2, 1, 4]       | 3               | Descending sequence |\n| 20         | [8, 7, 6, 5, 4]    | 0               | Strictly decreasing |\n| 21         | [1, 2, 1]          | 1               | Small case |\n| 22         | [5, 3, 1]          | 0               | Decreasing sequence |\n| 23         | [6, 2, 4]          | 0               | Small case |\n| 24         | [9, 7, 5, 3, 2]    | 0               | Decreasing sequence |\n| 25         | [4, 2, 1, 6, 3]    | 3               | Middle peak |\n| 26         | [5, 7, 3]          | 1               | Middle peak |\n| 27         | [2, 3, 1, 2]       | 1               | Small case |\n| 28         | [10, 20, 5, 4]     | 1               | Normal peak |\n| 29         | [5, 6, 7, 5, 4]    | 2               | Peak in middle |\n| 30         | [12, 11, 8, 7]     | 0               | Decreasing sequence |\n| 31         | [2, 1]             | 0               | Two elements |\n| 32         | [10, 8, 7, 6]      | 0               | Decreasing sequence |\n| 33         | [6, 2, 1, 8]       | 3               | Peak in middle |\n| 34         | [3, 2, 4, 5]       | 3               | Peak at right |\n| 35         | [1, 5, 8]          | 1               | Peak in middle |\n| 36         | [2, 3, 1, 4]       | 3               | Normal case |\n| 37         | [9, 10, 11]        | 2               | Increasing sequence |\n| 38         | [5, 3, 2, 4, 7]    | 0               | Peak in middle |\n| 39         | [5, 3, 1]          | 0               | Strictly decreasing |\n| 40         | [12, 6, 5, 1]      | 0               | Peak at start |",
            "example": {
              "input": "[1, 2, 3, 1]",
              "output": "2",
              "explanation": "The peak element is at index 1, which is 2."
            },
            "answer": "def findPeakElement(nums):\n    low, high = 0, len(nums)-1\n    while low < high:\n        mid = (low+high)//2\n        if nums[mid] < nums[mid+1]:\n            low = mid+1\n        else:\n            high = mid\n    return low"
        },
        {
            "id": 11,
            "title": "Binary Search on Reverse Sorted Array",
            "description": "Search when array sorted descendingly.\n\n| Test Cases | Input                  | Target | Expected Output | Notes                       |\n|------------|------------------------|--------|------------------|-----------------------------|\n| 1          | [9,7,5,3,1]            | 5      | 2                | Normal case                 |\n| 2          | [10, 8, 6, 4, 2]       | 6      | 2                | Middle match                |\n| 3          | [10, 8, 6, 4, 2]       | 2      | 4                | Last element                |\n| 4          | [10, 8, 6, 4, 2]       | 10     | 0                | First element               |\n| 5          | [10, 8, 6, 4, 2]       | 7      | -1               | Not present                 |\n| 6          | [20, 18, 16, 14, 12]   | 14     | 3                | Even values                 |\n| 7          | [15, 13, 11, 9, 7]     | 15     | 0                | First element               |\n| 8          | [15, 13, 11, 9, 7]     | 8      | -1               | Near miss                   |\n| 9          | [5, 4, 3, 2, 1]        | 1      | 4                | Last element                |\n| 10         | [5, 4, 3, 2, 1]        | 6      | -1               | Outside range               |\n| 11         | [50,40,30,20,10]       | 30     | 2                | Exact middle                |\n| 12         | [100,90,80,70,60]      | 60     | 4                | End value                   |\n| 13         | [99,88,77,66,55]       | 77     | 2                | Match at mid                |\n| 14         | [100, 80, 60, 40, 20]  | 100    | 0                | Largest element             |\n| 15         | [100, 80, 60, 40, 20]  | 10     | -1               | Smaller than smallest       |\n| 16         | [10]                   | 10     | 0                | Single element match        |\n| 17         | [10]                   | 5      | -1               | Single element no match     |\n| 18         | [20, 10]               | 10     | 1                | Two elements match          |\n| 19         | [20, 10]               | 30     | -1               | Two elements no match       |\n| 20         | [9, 8, 7, 6, 5, 4, 3]  | 4      | 5                | Lower half                  |\n| 21         | [50, 45, 40, 35, 30]   | 45     | 1                | Match second element        |\n| 22         | [60,50,40,30,20,10]    | 50     | 1                | Common test                 |\n| 23         | [7,6,5,4,3,2,1]        | 3      | 4                | Normal case                 |\n| 24         | [100,90,80,70]         | 85     | -1               | Between values              |\n| 25         | [8,7,6,5,4,3]          | 6      | 2                | Match mid                   |\n| 26         | [8,7,6,5,4,3]          | 2      | -1               | Lower than all              |\n| 27         | [15,12,9,6,3]          | 9      | 2                | Exact mid match             |\n| 28         | [10,9,8,7,6]           | 6      | 4                | Last element                |\n| 29         | [20, 18, 16, 14, 12]   | 17     | -1               | Between values              |\n| 30         | [9, 6, 3, 0]           | 3      | 2                | Found in small array        |\n| 31         | [100, 99, 98, 97]      | 95     | -1               | Not present in sorted list  |\n| 32         | [60, 50, 40]           | 60     | 0                | First match                 |\n| 33         | [60, 50, 40]           | 40     | 2                | Last match                  |\n| 34         | [5, 4, 3, 2, 1]        | 4      | 1                | Small list match            |\n| 35         | [10, 9, 8, 7, 6, 5]    | 7      | 3                | Match in middle             |\n| 36         | [10, 9, 8, 7, 6, 5]    | 11     | -1               | Larger than all             |\n| 37         | [100, 90, 80, 70, 60]  | 65     | -1               | Between elements            |\n| 38         | [12, 11, 10, 9, 8]     | 9      | 3                | Exact match                 |\n| 39         | [1000, 900, 800]       | 1000   | 0                | Large values                |\n| 40         | [1000, 900, 800]       | 850    | -1               | Not present, near mid       |",
            "example": {
              "input": "[9,7,5,3,1], target = 5",
              "output": "2",
              "explanation": "The value 5 is found at index 2 in the descending sorted array."
            },
            "answer": "def binarySearchReverse(arr, target):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1"
          },
          {
            "id": 12,
            "title": "Search Range (First and Last Position)",
            "description": "Find the first and last positions of a target in a sorted array.\n\n| Test Cases | Input                     | Target | Expected Output | Notes                        |\n|------------|---------------------------|--------|------------------|------------------------------|\n| 1          | [5,7,7,8,8,10]            | 8      | [3,4]            | Normal case                  |\n| 2          | [5,7,7,8,8,10]            | 6      | [-1,-1]          | Not present                  |\n| 3          | []                        | 0      | [-1,-1]          | Empty array                  |\n| 4          | [1]                       | 1      | [0,0]            | Single element match         |\n| 5          | [2,2,2,2,2]               | 2      | [0,4]            | All same values              |\n| 6          | [1,2,3,4,5,6,7,8,9]       | 5      | [4,4]            | Unique middle match          |\n| 7          | [1,2,3,4,5,6,7,8,9]       | 10     | [-1,-1]          | Outside range                |\n| 8          | [1,1,2,2,2,3,4,4]         | 2      | [2,4]            | Multiple occurrences         |\n| 9          | [1,3,5,7,9]               | 1      | [0,0]            | First element                |\n| 10         | [1,3,5,7,9]               | 9      | [4,4]            | Last element                 |\n| 11         | [1,2,3,4,5]               | 3      | [2,2]            | Single match                 |\n| 12         | [1,1,1,2,3]               | 1      | [0,2]            | First sequence               |\n| 13         | [1,2,3,3,3,4,5]           | 3      | [2,4]            | Middle repeated              |\n| 14         | [1,2,3,4,4,4,5,6]         | 4      | [3,5]            | Multiple in middle           |\n| 15         | [2,3,3,3,3,3,4,5]         | 3      | [1,5]            | Wide spread                  |\n| 16         | [5,6,7,8,9,10,10]         | 10     | [5,6]            | End duplicate                |\n| 17         | [5,6,7,7,7,8,9]           | 7      | [2,4]            | Multiple mid                 |\n| 18         | [1,2,3,4,5]               | 6      | [-1,-1]          | Not found                    |\n| 19         | [1,2,2,2,3,4]             | 2      | [1,3]            | Repeat in early              |\n| 20         | [1,2,3,4,5,6]             | 2      | [1,1]            | One occurrence               |\n| 21         | [2,4,4,4,6,6,7]           | 4      | [1,3]            | Repeated match               |\n| 22         | [1,2,3,4,4,4,5,6]         | 4      | [3,5]            | Triplet                      |\n| 23         | [1,2,3,4,4,4,4,4,5,6]     | 4      | [3,7]            | Long range                   |\n| 24         | [5,5,5,5,5,5]             | 5      | [0,5]            | All match                    |\n| 25         | [1,1,1,1,2,3,3,3]         | 1      | [0,3]            | Head repeated                |\n| 26         | [1,2,2,2,2,2,3]           | 2      | [1,5]            | Cluster in middle            |\n| 27         | [1,2,3,4,5]               | 0      | [-1,-1]          | Below range                  |\n| 28         | [1,2,3,4,5]               | 6      | [-1,-1]          | Above range                  |\n| 29         | [3,3,3,3,3,3]             | 3      | [0,5]            | Full match                   |\n| 30         | [1,1,2,2,3,3,4,4,5]       | 3      | [4,5]            | Multiple doublets            |\n| 31         | [0,1,2,3,4,5,6,7,8,9]     | 7      | [7,7]            | Near end match               |\n| 32         | [10,20,30,40,50]          | 30     | [2,2]            | Middle match                 |\n| 33         | [10,20,30,40,50]          | 35     | [-1,-1]          | Between values               |\n| 34         | [1,1,2,2,2,3,4,4]         | 5      | [-1,-1]          | Not in repeated values       |\n| 35         | [1,2,3,3,3,3,3,4]         | 3      | [2,6]            | Long group mid               |\n| 36         | [1,2,3,4,5,6,7,8]         | 4      | [3,3]            | Single match                 |\n| 37         | [1,1,1,1,1,1]             | 1      | [0,5]            | Full repeated                |\n| 38         | [2,2,2,2,3,3,4,4,4,5]     | 4      | [6,8]            | Grouped near end             |\n| 39         | [2,3,4,5,6,7,8,9]         | 10     | [-1,-1]          | Not found above max          |\n| 40         | [1,2,2,3,4,4,5,6]         | 2      | [1,2]            | Double match early           |",
            "example": {
              "input": "[5,7,7,8,8,10], target = 8",
              "output": "[3,4]",
              "explanation": "The value 8 starts at index 3 and ends at index 4."
            },
            "answer": "def searchRange(nums, target):\n    def findFirst(nums, target):\n        low, high = 0, len(nums)-1\n        first = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                first = mid\n                high = mid - 1\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return first\n\n    def findLast(nums, target):\n        low, high = 0, len(nums)-1\n        last = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                last = mid\n                low = mid + 1\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return last\n\n    return [findFirst(nums, target), findLast(nums, target)]"
          },
          {
    "id": 13,
    "title": "Search for an Element in an Unsorted Array",
    "description": "Find if a given number exists in the array.\n\n| Test Cases | array          | target | Expected Output |\n|------------|----------------|--------|-----------------|\n| 1          | [1, 2, 3, 4, 5] | 3      | true            |\n| 2          | [5, 4, 3, 2, 1] | 6      | false           |\n| 3          | [10, 20, 30]   | 20     | true            |\n| 4          | [7, 7, 7, 7]   | 7      | true            |\n| 5          | []             | 5      | false           |\n| 6          | [-1, 0, 1]     | 0      | true            |\n| 7          | [99, -5, 10]   | -5     | true            |\n| 8          | [1, 5, 2, 8, 3] | 8      | true            |\n| 9          | [1, 5, 2, 8, 3] | 4      | false           |\n| 10         | [100]          | 100    | true            |",
    "example": {
      "input": "[1, 2, 3, 4, 5], target: 3",
      "output": "true",
      "explanation": "The number 3 exists in the array."
    },
    "answer": "def search_element(arr, target):\n    for element in arr:\n        if element == target:\n            return True\n    return False"
  },
          {
            "id": 14,
            "title": "Find Rotation Count in Rotated Sorted Array",
            "description": "Find how many times array is rotated.\n\n| Test Cases | Input                        | Expected Output | Notes                       |\n|------------|------------------------------|-----------------|-----------------------------|\n| 1          | [15, 18, 2, 3, 6, 12]        | 2               | Rotated 2 times            |\n| 2          | [7, 9, 11, 12, 5]            | 4               | Rotated at end             |\n| 3          | [1, 2, 3, 4, 5]              | 0               | Not rotated                |\n| 4          | [3, 4, 5, 1, 2]              | 3               | Rotated at middle          |\n| 5          | [4, 5, 1, 2, 3]              | 2               | Rotated 2 positions        |\n| 6          | [6, 7, 1, 2, 3, 4, 5]        | 2               | Middle rotation            |\n| 7          | [2, 3, 4, 5, 6, 7, 1]        | 6               | Rotated almost full        |\n| 8          | [5, 6, 7, 1, 2, 3, 4]        | 3               | Full rotation set          |\n| 9          | [1]                          | 0               | Single element             |\n| 10         | [2, 1]                       | 1               | Two elements rotated       |\n| 11         | [9, 10, 1, 2, 3, 4, 5]       | 2               | Rotated 2 places           |\n| 12         | [10, 1, 2, 3, 4, 5, 6]       | 1               | Rotation at 1              |\n| 13         | [3, 4, 5, 6, 7, 1, 2]        | 5               | Rotation before last       |\n| 14         | [8, 9, 10, 1, 2, 3, 4, 5]    | 3               | Large array, rotated       |\n| 15         | [4, 5, 6, 7, 8, 9, 1, 2, 3]  | 6               | Rotation towards end       |\n| 16         | [6, 1, 2, 3, 4, 5]           | 1               | Rotation just started      |\n| 17         | [10, 20, 30, 5, 6, 7]        | 3               | Random rotation point      |\n| 18         | [2, 3, 4, 5, 1]              | 4               | Last element minimum       |\n| 19         | [12, 14, 18, 21, 2, 5, 8]    | 4               | Random with offset         |\n| 20         | [30, 40, 50, 5, 10, 20]      | 3               | Partial descending         |\n| 21         | [1, 2, 3, 4, 5, 6, 7]        | 0               | No rotation                |\n| 22         | [3, 4, 5, 6, 7, 1, 2]        | 5               | Large jump                 |\n| 23         | [6, 7, 8, 9, 10, 1, 2, 3]    | 5               | Long rotated segment       |\n| 24         | [2, 3, 4, 5, 6, 7, 1]        | 6               | Last element min           |\n| 25         | [5, 1, 2, 3, 4]              | 1               | Rotation just started      |\n| 26         | [3, 4, 5, 6, 1, 2]           | 4               | Near end                   |\n| 27         | [4, 5, 6, 1, 2, 3]           | 3               | Typical rotation           |\n| 28         | [7, 8, 1, 2, 3, 4, 5, 6]     | 2               | Long rotated array         |\n| 29         | [2, 1]                       | 1               | Only 2 elements            |\n| 30         | [1, 2]                       | 0               | Sorted 2 elements          |\n| 31         | [20, 1, 2, 3, 4, 5, 6]       | 1               | Rotation after large       |\n| 32         | [4, 5, 6, 7, 8, 1, 2, 3]     | 5               | Typical mid rotation       |\n| 33         | [5, 6, 7, 8, 1, 2, 3, 4]     | 4               | Rotation at 4              |\n| 34         | [8, 1, 2, 3, 4, 5, 6, 7]     | 1               | Start rotation             |\n| 35         | [1, 2, 3, 4, 5, 6]           | 0               | No rotation                |\n| 36         | [2, 3, 4, 5, 6, 1]           | 5               | Last rotation              |\n| 37         | [7, 1, 2, 3, 4, 5, 6]        | 1               | Large max first            |\n| 38         | [6, 7, 8, 9, 10, 1, 2]       | 5               | Mid rotation               |\n| 39         | [10, 1, 2, 3, 4]             | 1               | Sharp drop                 |\n| 40         | [3, 4, 5, 6, 7, 8, 1, 2]     | 6               | Classic rotation pattern   |",
            "example": {
              "input": "[15, 18, 2, 3, 6, 12]",
              "output": "2",
              "explanation": "The array is rotated 2 times; the minimum element is at index 2."
            },
            "answer": "def rotationCount(arr):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        next = (mid+1)%len(arr)\n        prev = (mid-1+len(arr))%len(arr)\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid-1\n        else:\n            low = mid+1"
          },                    
          {
                "id": 15,
                "title": "Find Missing Number using Binary Search",
                "description": "Find missing number in sorted array .\n\n | Test Cases | Input                     | Expected Output | Notes                           |\n|------------|----------------------------|-----------------|---------------------------------|\n| 1          | [0,1,2,4,5,6]              | 3               | Missing in middle               |\n| 2          | [0,1,3,4,5,6]              | 2               | Missing in middle               |\n| 3          | [0,2,3,4,5,6]              | 1               | Missing early                   |\n| 4          | [1,2,3,4,5,6]              | 0               | Missing at start                |\n| 5          | [0,1,2,3,4,6]              | 5               | Missing before last             |\n| 6          | [0,1,2,3,4,5]              | 6               | Missing at end (next index)     |\n| 7          | [0,1]                      | 2               | Missing at end small case       |\n| 8          | [1]                        | 0               | Only one element, missing 0     |\n| 9          | [0]                        | 1               | Only one element, missing next  |\n| 10         | []                         | 0               | Empty array                     |\n| 11         | [0,1,3]                    | 2               | Short array missing in middle   |\n| 12         | [0,2]                      | 1               | Short array missing middle      |\n| 13         | [0,1,2,3,5,6]              | 4               | Missing 4                       |\n| 14         | [0,1,2,3,4,5,7,8]          | 6               | Larger array missing 6          |\n| 15         | [0,1,2,3,4,5,6,7,9]        | 8               | Missing 8                       |\n| 16         | [0,1,2,3,4,5,6,8]          | 7               | Missing 7                       |\n| 17         | [0,2,3,4,5,6,7]            | 1               | Missing 1                       |\n| 18         | [0,1,2,4,5,6,7]            | 3               | Missing 3                       |\n| 19         | [0,1,2,3,5,6,7]            | 4               | Missing 4                       |\n| 20         | [0,1,3,4,5,6,7]            | 2               | Missing 2                       |\n| 21         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 22         | [0,1,2,3,4,5,6,7,8,9]      | 10              | All present, next expected      |\n| 23         | [1,2,3,4,5,6,7,8,9,10]     | 0               | Missing 0                       |\n| 24         | [0,1,2,3,4,5,6,7,9,10]     | 8               | Missing 8                       |\n| 25         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 26         | [0,1,3,4,5,6,7,8,9,10]     | 2               | Missing 2                       |\n| 27         | [0,2,3,4,5,6,7,8,9,10]     | 1               | Missing 1                       |\n| 28         | [0,1,2,3,4,5,6,7,8,9,11]   | 10              | Missing 10                      |\n| 29         | [0,1,2,3,4,5,6,7,8,9,10]   | 11              | All present, next expected      |\n| 30         | [0,1,2,3,5,6,7,8,9,10]     | 4               | Missing 4                       |\n| 31         | [0,1,2,4,5,6,7,8,9,10]     | 3               | Missing 3                       |\n| 32         | [0,1,2,3,4,6,7,8,9,10]     | 5               | Missing 5                       |\n| 33         | [0,1,2,3,4,5,7,8,9,10]     | 6               | Missing 6                       |\n| 34         | [0,1,2,3,4,5,6,8,9,10]     | 7               | Missing 7                       |\n| 35         | [0,1,2,3,4,5,6,7,9,10]     | 8               | Missing 8                       |\n| 36         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 37         | [0,1,2,3,4,5,6,7,8,9,12]   | 10              | Missing 10, 11 ignored          |\n| 38         | [0,1,2,3,4,5,6,7,8,9,10,12]| 11              | Missing 11                      |\n| 39         | [0,1,2,3,4,5,6,7,8,9,10,11]| 12              | All present                     |\n| 40         | [0,1,2,3,4,5,6,7,8,9,11,12]| 10              | Missing 10                      |",
                "example": {
                  "input": "[0,1,2,4,5,6]",
                  "output": "3",
                  "explanation": "The number 3 is missing at the correct index."
                },
                "answer": "def missingNumber(nums):\n    low, high = 0, len(nums)-1\n    while low <= high:\n        mid = (low+high)//2\n        if nums[mid] == mid:\n            low = mid+1\n        else:\n            high = mid-1\n    return low"
           }
   
    ]

}