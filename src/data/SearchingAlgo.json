{
    "questions": [
        {
            "id": 1,
            "title": "Linear Search in Array",
            "description": "Find an element in the array using linear search.\n\n| Test Cases | arr               | target | Expected Output | Notes                          |\n|------------|-------------------|--------|-----------------|--------------------------------|\n| 1          | [5, 8, 2, 9, 1]    | 9      | 3               | Element found at index 3       |\n| 2          | [1, 2, 3, 4]       | 4      | 3               | Element found at last index   |\n| 3          | [7, 8, 9, 10]      | 7      | 0               | Element at the first index    |\n| 4          | [1, 2, 3, 4, 5]    | 6      | -1              | Element not found              |\n| 5          | [10, 20, 30]       | 20     | 1               | Element found at index 1       |\n| 6          | [5, 10, 15]        | 10     | 1               | Element found at index 1       |\n| 7          | [6, 5, 4, 3, 2]    | 5      | 1               | Found at index 1               |\n| 8          | [100, 200, 300]    | 400    | -1              | Element not found              |\n| 9          | [0, 0, 0, 0]       | 0      | 0               | Element found at index 0       |\n| 10         | [1, 1, 1, 1]       | 1      | 0               | All elements are same          |\n| 11         | [3, 5, 7, 9]       | 5      | 1               | Element found at index 1       |\n| 12         | [1, 2, 3, 4, 5]    | 1      | 0               | Element found at first index   |\n| 13         | [6, 5, 7]          | 5      | 1               | Element found at index 1       |\n| 14         | [9, 8, 7, 6]       | 9      | 0               | Element found at index 0       |\n| 15         | [2, 4, 6, 8]       | 8      | 3               | Element found at last index    |\n| 16         | [10, 20, 30]       | 15     | -1              | Element not found              |\n| 17         | [1, 3, 5, 7, 9]    | 5      | 2               | Element found at index 2       |\n| 18         | [4, 6, 8, 10]      | 6      | 1               | Element found at index 1       |\n| 19         | [1, 5, 7, 8]       | 7      | 2               | Element found at index 2       |\n| 20         | [10, 5, 20]        | 5      | 1               | Element found at index 1       |\n| 21         | [1, 1, 1, 1]       | 1      | 0               | All elements are the same      |\n| 22         | [5, 5, 5]          | 5      | 0               | All elements are the same      |\n| 23         | [1, 2, 3, 4]       | 3      | 2               | Element found at index 2       |\n| 24         | [5, 10, 15]        | 15     | 2               | Element found at index 2       |\n| 25         | [20, 30, 40]       | 25     | -1              | Element not found              |",
            "example": {
              "input": "[5, 8, 2, 9, 1], target: 9",
              "output": "3",
              "explanation": "The target 9 is found at index 3."
            },
            "answer": "def linearSearch(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"
        },
        {
            "id": 2,
            "title": "Binary Search in Sorted Array",
            "description": "Use binary search to find element in a sorted array.\n\n| Test Cases | arr               | target | Expected Output | Notes                          |\n|------------|-------------------|--------|-----------------|--------------------------------|\n| 1          | [1, 2, 3, 4, 5, 6] | 4      | 3               | Element found at index 3       |\n| 2          | [1, 2, 3, 4, 5, 6] | 1      | 0               | Element found at index 0       |\n| 3          | [1, 2, 3, 4, 5, 6] | 6      | 5               | Element found at last index    |\n| 4          | [1, 2, 3, 4, 5, 6] | 7      | -1              | Element not found              |\n| 5          | [1, 2, 3, 4, 5]    | 3      | 2               | Element found at index 2       |\n| 6          | [10, 20, 30, 40, 50] | 40    | 3               | Element found at index 3       |\n| 7          | [10, 20, 30, 40, 50] | 25    | -1              | Element not found              |\n| 8          | [1, 3, 5, 7, 9]    | 7      | 3               | Element found at index 3       |\n| 9          | [1, 3, 5, 7, 9]    | 1      | 0               | Element found at index 0       |\n| 10         | [2, 4, 6, 8, 10]   | 6      | 2               | Element found at index 2       |\n| 11         | [2, 4, 6, 8, 10]   | 11     | -1              | Element not found              |\n| 12         | [5, 10, 15, 20, 25] | 15    | 2               | Element found at index 2       |\n| 13         | [5, 10, 15, 20, 25] | 5     | 0               | Element found at index 0       |\n| 14         | [50, 60, 70, 80, 90] | 70    | 2               | Element found at index 2       |\n| 15         | [50, 60, 70, 80, 90] | 90    | 4               | Element found at last index    |\n| 16         | [100, 200, 300, 400, 500] | 400 | 3               | Element found at index 3       |\n| 17         | [100, 200, 300, 400, 500] | 100 | 0               | Element found at index 0       |\n| 18         | [1, 2, 3, 4, 5, 6, 7] | 4     | 3               | Element found at index 3       |\n| 19         | [1, 2, 3, 4, 5, 6, 7] | 8     | -1              | Element not found              |\n| 20         | [10, 20, 30, 40, 50, 60, 70] | 60  | 5               | Element found at index 5       |\n| 21         | [10, 20, 30, 40, 50, 60, 70] | 30  | 2               | Element found at index 2       |\n| 22         | [10, 20, 30, 40, 50, 60, 70] | 100 | -1              | Element not found              |\n| 23         | [1, 2, 3, 4, 5, 6, 7] | 2     | 1               | Element found at index 1       |\n| 24         | [1, 2, 3, 4, 5]    | 5      | 4               | Element found at last index    |\n| 25         | [15, 25, 35, 45, 55] | 45    | 3               | Element found at index 3       |",
            "example": {
              "input": "[1, 2, 3, 4, 5, 6], target: 4",
              "output": "3",
              "explanation": "The target 4 is found at index 3."
            },
            "answer": "def binarySearch(arr, target):\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
        },
        {
            "id": 3,
            "title": "First Occurrence in Sorted Array",
            "description": "Find the first occurrence of the target in a sorted array.\n\n| Test Cases | array                      | Target | Expected Output | Notes                              |\n|------------|----------------------------|--------|-----------------|------------------------------------|\n| 1          | [2, 4, 4, 4, 5, 6]         | 4      | 1               | Target occurs multiple times      |\n| 2          | [1, 2, 3, 4, 5]             | 3      | 2               | Simple sorted array               |\n| 3          | [1, 1, 1, 1, 2, 2]         | 2      | 4               | Target appears after duplicates   |\n| 4          | [1, 2, 2, 2, 3]             | 2      | 1               | Target is at the second position  |\n| 5          | [5, 6, 7, 8, 9]             | 7      | 2               | Array with no duplicates          |\n| 6          | [1, 1, 2, 2, 3, 4]         | 3      | 4               | Target in the middle              |\n| 7          | [0, 1, 2, 3, 4, 5]         | 5      | 5               | Target at the last position       |\n| 8          | [10, 20, 30, 40]            | 20     | 1               | Array with distinct elements      |\n| 9          | [1, 3, 5, 7, 9]             | 1      | 0               | Target at the first position      |\n| 10         | [2, 2, 3, 4, 5]             | 6      | -1              | Target not present                |\n| 11         | [1, 3, 5, 7, 9, 11]         | 7      | 3               | Middle position                   |\n| 12         | [1, 2, 3, 4]                | 5      | -1              | Target not present                |\n| 13         | [2, 3, 3, 3, 4]             | 3      | 1               | Multiple occurrences of target    |\n| 14         | [5, 5, 5, 5, 5]             | 5      | 0               | Target present at the beginning   |\n| 15         | [1, 2, 4, 4, 6, 7, 8]       | 4      | 2               | Target repeated in array          |\n| 16         | [6, 7, 8, 9, 10]            | 9      | 3               | Array with consecutive numbers    |\n| 17         | [1, 2, 3, 4, 4, 4]          | 4      | 3               | Target present in the middle      |\n| 18         | [8, 9, 10, 11, 12]          | 10     | 2               | Simple sorted array               |\n| 19         | [2, 3, 4, 5, 6]             | 4      | 2               | Array with ascending numbers      |\n| 20         | [10, 20, 30, 40, 50]        | 30     | 2               | Array with distinct elements      |\n| 21         | [5, 7, 9, 12]               | 9      | 2               | Array with non-consecutive numbers|\n| 22         | [1, 3, 3, 3, 4, 6]          | 3      | 1               | Multiple duplicates of target     |\n| 23         | [10, 11, 12, 13, 14]        | 12     | 2               | Simple ascending order            |\n| 24         | [5, 6, 7, 8, 9, 10]         | 5      | 0               | Target is the first element       |\n| 25         | [1, 3, 5, 7, 8]             | 6      | -1              | Target not present                |\n| 26         | [1, 2, 3, 4, 5, 6]          | 6      | 5               | Target at the last position       |\n| 27         | [1, 2, 3, 4]                | 2      | 1               | Simple sorted array               |\n| 28         | [3, 5, 7, 9, 11]            | 7      | 2               | Sorted array with odd numbers     |\n| 29         | [4, 4, 4, 4, 4]             | 4      | 0               | Array with only duplicates        |\n| 30         | [2, 4, 5, 7, 9]             | 7      | 3               | Middle of array                   |",
            "example": {
                "input": "[2, 4, 4, 4, 5, 6], 4",
                "output": "1",
                "explanation": "The first occurrence of 4 in the array is at index 1."
            },
            "answer":  "def first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            high = mid - 1  # look on the left side for earlier occurrence\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\n# Read input\ndata = list(map(int, input().split()))\ntarget = data[0]\narr = data[1:]\n\n# Run the function\nprint(first_occurrence(arr, target))"
        },       
        {
            "id": 4,
            "title": "Populating Next Right Pointers in Each Node",
            "description": "Populate the next right pointer to the next node in the same level.\n\n| Test Cases | tree structure           | Expected Output               | Notes                                      |\n|------------|--------------------------|--------------------------------|--------------------------------------------|\n| 1          | [1, 2, 3, 4, 5, 6, 7]    | [1 -> null, 2 -> 3, 3 -> null, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> null] | Full binary tree                           |\n| 2          | [1, 2, 3, null, 4]        | [1 -> null, 2 -> 3, 3 -> null, 4 -> null] | Tree with missing nodes                    |\n| 3          | [10, 20, 30, null, null]  | [10 -> null, 20 -> 30, 30 -> null]        | Right-heavy tree                           |\n| 4          | [5, 6, 7, null, 8]        | [5 -> null, 6 -> 7, 7 -> null, 8 -> null]  | Missing left sub-tree                      |\n| 5          | [8, 6, 7, null, 5]        | [8 -> null, 6 -> 7, 7 -> null, 5 -> null]  | No right sub-tree                          |\n| 6          | [2, 3, 4, 5]              | [2 -> null, 3 -> 4, 4 -> 5, 5 -> null]     | Simple four node tree                      |\n| 7          | [5, 6, 7]                 | [5 -> null, 6 -> 7, 7 -> null]             | Binary tree with three nodes               |\n| 8          | [1, 2, null, null, 3]      | [1 -> null, 2 -> 3, 3 -> null]             | Simple left-heavy tree                     |\n| 9          | [1, 2, 3, null, null]      | [1 -> null, 2 -> 3, 3 -> null]             | Tree with missing left sub-tree            |\n| 10         | [4, 5, 6]                 | [4 -> null, 5 -> 6, 6 -> null]             | Binary tree with right child only          |\n| 11         | [1, 2, 3, 4, null]        | [1 -> null, 2 -> 3, 3 -> 4, 4 -> null]     | Tree with few nodes                        |\n| 12         | [2, 4, null]              | [2 -> null, 4 -> null]                     | Tree with only two nodes                   |\n| 13         | [1, 3, 5, null, null]      | [1 -> null, 3 -> 5, 5 -> null]             | A tree with only right side children       |\n| 14         | [1, null, 2, 3]           | [1 -> null, 2 -> 3, 3 -> null]             | Simple right skewed tree                   |\n| 15         | [10, 20, 30, 40]          | [10 -> null, 20 -> 30, 30 -> 40, 40 -> null] | Straight-line left skewed tree             |\n| 16         | [4, 2, 6, null, null]     | [4 -> null, 2 -> 6, 6 -> null]             | Binary tree with missing left child        |\n| 17         | [10, null, 12, null]      | [10 -> null, 12 -> null]                   | Binary tree with only right children       |\n| 18         | [6, null, 7, 8, 9]        | [6 -> null, 7 -> 8, 8 -> 9, 9 -> null]     | A linear right-heavy tree                  |\n| 19         | [5, 3, 7, 2, 4]           | [5 -> null, 3 -> 7, 7 -> null, 2 -> 4]     | Tree with two branches                     |\n| 20         | [1, null, 3, 4, null]     | [1 -> null, 3 -> 4, 4 -> null]             | Simple left-skewed tree                    |\n| 21         | [12, 14, 16, 18]          | [12 -> null, 14 -> 16, 16 -> 18, 18 -> null] | Linear right-skewed tree                    |\n| 22         | [5, null, 8, null, 9]      | [5 -> null, 8 -> 9, 9 -> null]             | Right-skewed tree with missing nodes       |\n| 23         | [3, null, 4, 5, null]     | [3 -> null, 4 -> 5, 5 -> null]             | Mixed skewed tree                          |\n| 24         | [1, 2, 3, 4, null, 5]      | [1 -> null, 2 -> 3, 3 -> 4, 4 -> 5, 5 -> null] | Binary tree with depth 3                   |\n| 25         | [6, 3, 9, null, null, 7, 10]| [6 -> null, 3 -> 9, 9 -> 7, 7 -> 10, 10 -> null] | Mixed branches and missing left child     |\n| 26         | [2, 1, 3, null, 5]        | [2 -> null, 1 -> 3, 3 -> 5, 5 -> null]     | Tree with depth 3                           |\n| 27         | [7, 4, 8, null, null, 9]   | [7 -> null, 4 -> 8, 8 -> 9, 9 -> null]     | Tree with right heavy structure            |\n| 28         | [9, 2, null, null, 5, 3]   | [9 -> null, 2 -> 5, 5 -> 3, 3 -> null]     | Tree with sparse branches                  |\n| 29         | [5, 6, 7, 8, 9, 10]       | [5 -> null, 6 -> 7, 7 -> 8, 8 -> 9, 9 -> 10, 10 -> null] | Balanced tree with all children filled     |\n| 30         | [3, null, 8, 2, null]      | [3 -> null, 8 -> 2, 2 -> null]             | Right-heavy tree with null children        |\n| 31         | [1, 2, 3, 4, 5, 6, 7, 8]  | [1 -> null, 2 -> 3, 3 -> 4, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> null] | Full binary tree                           |\n| 32         | [9, 4, 5, null, 6]         | [9 -> null, 4 -> 5, 5 -> 6, 6 -> null]     | Binary tree with two branches              |\n| 33         | [3, null, 5, null, 7]      | [3 -> null, 5 -> 7, 7 -> null]             | Single right-skewed tree                   |\n| 34         | [12, null, 14, 15, 16]     | [12 -> null, 14 -> 15, 15 -> 16, 16 -> null] | Linear right-skewed tree                   |\n| 35         | [1, 2, null, 3]            | [1 -> null, 2 -> 3, 3 -> null]             | Left skewed with additional right child    |\n| 36         | [8, 5, 6, 3, null]         | [8 -> null, 5 -> 6, 6 -> 3, 3 -> null]     | Binary tree with depth 4                   |\n| 37         | [5, 7, 3, null, null, 9]   | [5 -> null, 7 -> 3, 3 -> 9, 9 -> null]     | Tree with mixed structure                  |\n| 38         | [4, 2, null, 1, 3]         | [4 -> null, 2 -> 1, 1 -> 3, 3 -> null]     | Sparse tree with different node branches   |\n| 39         | [6, null, 8, 7, null]      | [6 -> null, 8 -> 7, 7 -> null]             | Simple skewed right tree                   |",
            "example": {
              "input": "[1, 2, 3, 4, 5, 6, 7]",
              "output": "[1 -> null, 2 -> 3, 3 -> null, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> null]",
              "explanation": "The next right pointers are populated in the same level from left to right."
            },
            "answer": "def connect(root):\n    if not root:\n        return None\n    queue = [root]\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.pop(0)\n            if i < size - 1:\n                node.next = queue[0]\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    return root"
        },
        {
            "id": 5,
            "title": "Number of Occurrences",
            "description": "Count occurrences using first and last position.\n\n| Test Cases | Array               | Target | Expected Output | Notes  |\n|------------|---------------------|--------|-----------------|--------|\n| 1          | [1,2,2,2,3,4]       | 2      | 3               | Simple case |\n| 2          | [1,1,1,1]           | 1      | 4               | All elements are the target |\n| 3          | [2,3,4,5,6,7]       | 3      | 1               | Target occurs once |\n| 4          | [2,2,3,3,4,5]       | 3      | 2               | Target appears twice |\n| 5          | [1,2,3,4,5,6]       | 0      | 0               | Target not in array |\n| 6          | [10,10,10,20]       | 10     | 3               | Target at the beginning |\n| 7          | [1,2,3,4,5,6,7,8,9] | 5      | 1               | Middle target |\n| 8          | [1,2,2,2,3,3,3]     | 3      | 3               | Target appears thrice |\n| 9          | [1,2,3,4,5]         | 4      | 1               | Single occurrence at the end |\n| 10         | [2,4,6,8,10]        | 5      | 0               | Target missing |\n| 11         | [1,1,1,1,1]         | 1      | 5               | All elements are the target |\n| 12         | [2,4,6,8,10]        | 6      | 1               | Target in the middle |\n| 13         | [3,3,3,4,5,5]       | 3      | 3               | Target at the start |\n| 14         | [2,3,4,5,6,7,8]     | 6      | 1               | Target towards the end |\n| 15         | [1,1,2,2,2,3]       | 2      | 3               | Middle target appears thrice |\n| 16         | [4,4,4,4,5,6]       | 4      | 4               | Target appears in the beginning |\n| 17         | [1,2,3,4,4,4,5]     | 4      | 3               | Repeated target in middle |\n| 18         | [1,1,2,3,4]         | 3      | 1               | Target near the end |\n| 19         | [5,6,7,8,9]         | 5      | 1               | Single element match |\n| 20         | [1,3,5,7,9]         | 3      | 1               | Target in the middle |\n| 21         | [9,8,7,6,5,4,3,2,1] | 7      | 1               | Target in descending order |\n| 22         | [5,5,5,5]           | 5      | 4               | All elements are the target |\n| 23         | [1,2,3,4]           | 2      | 1               | Target in the middle |\n| 24         | [1,1,2,3,4]         | 2      | 1               | Middle target |\n| 25         | [10,20,30,40,50]    | 20     | 1               | Target is in the beginning |\n| 26         | [1,2,3,4,5,6]       | 6      | 1               | Last element is target |\n| 27         | [10,20,30,40]       | 50     | 0               | Target exceeds array values |\n| 28         | [1,2,3,4,5]         | 0      | 0               | Target is less than array values |\n| 29         | [1,2,2,3,4]         | 2      | 2               | Target appears in the middle |\n| 30         | [3,3,3,3,3]         | 3      | 5               | All elements are the target |\n| 31         | [2,3,4,5]           | 5      | 1               | Last element match |\n| 32         | [1,2,3,4,5,6]       | 7      | 0               | Target is larger than max value |\n| 33         | [4,4,4,5,6]         | 4      | 3               | Target at the start |\n| 34         | [8,8,8,8,9,9,9]     | 9      | 3               | Target at the end |\n| 35         | [1,2,3,3,4,4]       | 3      | 2               | Target appears twice |\n| 36         | [5,5,5,5,5]         | 5      | 5               | All elements are the target |\n| 37         | [1,2,3,4,5,6,7]     | 1      | 1               | Target at the start |\n| 38         | [10,20,30,40]       | 40     | 1               | Target at the end |\n| 39         | [1,2,3,4,5]         | 2      | 1               | Target in the middle |\n| 40         | [7,8,9,10]          | 7      | 1               | Target at the start |",
            "example": {
                "input": "[1,2,2,2,3,4]",
                "target": "2",
                "output": "3",
                "explanation": "The target 2 appears three times in the array."
            },
            "answer": "def first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            index = mid\n            high = mid - 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return index\n\ndef last_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            index = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return index\n\n# Main input handler\ninput_str = input().strip()  # Example: \"2 1 2 2 2 3 4\"\ntokens = list(map(int, input_str.split()))\ntarget = tokens[0]\narr = tokens[1:]\n\nfirst = first_occurrence(arr, target)\nlast = last_occurrence(arr, target)\n\nif first == -1:\n    print(0)\nelse:\n    print(last - first + 1)"
       },
            {
            "id": 6,
            "title": "Search Insert Position",
            "description": "Find position where target should be inserted.\n\n| Test Cases | Array               | Target | Expected Output | Notes  |\n|------------|---------------------|--------|-----------------|--------|\n| 1          | [1,3,5,6]           | 2      | 1               | Target should be inserted at index 1 |\n| 2          | [1,2,3,4]           | 5      | 4               | Target should be inserted at index 4 |\n| 3          | [1,3,5,6]           | 0      | 0               | Target should be inserted at the beginning |\n| 4          | [2,4,6,8]           | 5      | 2               | Target should be inserted at index 2 |\n| 5          | [1,3,5,7,9]         | 6      | 3               | Target should be inserted at index 3 |\n| 6          | [1,3,5,7,9]         | 2      | 1               | Target should be inserted at index 1 |\n| 7          | [1,3,5,7,9]         | 10     | 5               | Target should be inserted at the end |\n| 8          | [2,4,6,8,10]        | 5      | 2               | Target should be inserted at index 2 |\n| 9          | [1,1,2,2,3]         | 2      | 2               | Target is already present at index 2 |\n| 10         | [10,20,30]          | 25     | 2               | Target should be inserted at index 2 |\n| 11         | [1,3,5,7,9,11]      | 6      | 3               | Target should be inserted at index 3 |\n| 12         | [1,2,4,6]           | 3      | 2               | Target should be inserted at index 2 |\n| 13         | [2,4,6,8]           | 7      | 3               | Target should be inserted at index 3 |\n| 14         | [1,2,3,5,6,7]       | 4      | 3               | Target should be inserted at index 3 |\n| 15         | [1,2,4,6,8]         | 7      | 4               | Target should be inserted at index 4 |\n| 16         | [5,6,7,8]           | 6      | 1               | Target already exists at index 1 |\n| 17         | [1,1,1,1]           | 1      | 0               | Target already exists at the beginning |\n| 18         | [10,20,30,40]       | 35     | 3               | Target should be inserted at index 3 |\n| 19         | [1,3,5,7,9]         | 8      | 4               | Target should be inserted at index 4 |\n| 20         | [1,2,3,4]           | 5      | 4               | Target should be inserted at index 4 |\n| 21         | [1,3,5,6,7,8]       | 7      | 4               | Target is at the end |\n| 22         | [1,2,3,4]           | 3      | 2               | Target exists at index 2 |\n| 23         | [1,1,1,1]           | 2      | 4               | Target should be inserted at index 4 |\n| 24         | [5,10,15,20]        | 12     | 2               | Target should be inserted at index 2 |\n| 25         | [10,20,30,40]       | 50     | 4               | Target should be inserted at index 4 |\n| 26         | [1,3,5,7,9,11]      | 7      | 4               | Target already exists at index 4 |\n| 27         | [1,2,3,4]           | 1      | 0               | Target is already at the beginning |\n| 28         | [4,6,8,10]          | 6      | 1               | Target is at index 1 |\n| 29         | [1,2,3,4]           | 2      | 1               | Target is at index 1 |\n| 30         | [10,20,30]          | 35     | 3               | Target should be inserted at index 3 |\n| 31         | [2,4,6,8]           | 3      | 1               | Target should be inserted at index 1 |\n| 32         | [1,1,1,2]           | 1      | 0               | Target already exists at index 0 |\n| 33         | [3,5,7,9]           | 4      | 1               | Target should be inserted at index 1 |\n| 34         | [10,20,30]          | 15     | 1               | Target should be inserted at index 1 |\n| 35         | [1,3,5,7]           | 8      | 4               | Target should be inserted at the end |\n| 36         | [1,2,3,4,5]         | 4      | 3               | Target is already at index 3 |\n| 37         | [10,20,30]          | 25     | 2               | Target should be inserted at index 2 |\n| 38         | [1,2,3,4,5,6,7]     | 6      | 5               | Target is at the end |\n| 39         | [1,2,3,5,6]         | 4      | 3               | Target should be inserted at index 3 |\n| 40         | [1,3,5,7,9]         | 2      | 1               | Target should be inserted at index 1 |",
            "example": {
                "input": "[1,3,5,6]",
                "target": "2",
                "output": "1",
                "explanation": "The target 2 should be inserted at index 1."
            },
            "answer": "def search_insert_position(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\ninput_str = input().strip()\ntokens = list(map(int, input_str.split()))\ntarget = tokens[0]\narr = tokens[1:]\n\nprint(search_insert_position(arr, target))"

        },
        {
            "id": 7,
            "title": "Find Minimum in Rotated Sorted Array",
            "description": "Find the minimum element.\n\n| Test Cases | Array               | Expected Output | Notes  |\n|------------|---------------------|-----------------|--------|\n| 1          | [3,4,5,1,2]         | 1               | Simple case |\n| 2          | [4,5,6,7,0,1,2]     | 0               | Array rotated |\n| 3          | [11,13,15,17,19,20,1,3,5] | 1               | Multiple rotations |\n| 4          | [3,4,5,6,7,0,1,2]   | 0               | Simple rotated case |\n| 5          | [1,2,3,4,5]         | 1               | Already sorted |\n| 6          | [1,2,3,4,5,6,7]     | 1               | Already sorted |\n| 7          | [7,8,9,10,1,2,3]    | 1               | Array rotated once |\n| 8          | [6,7,8,9,10,1,2,3]  | 1               | Array rotated twice |\n| 9          | [4,5,6,7,0,1,2]     | 0               | Array rotated four times |\n| 10         | [2,3,4,5,6,7,8,9,1] | 1               | Rotation with highest number at start |\n| 11         | [9,10,1,2,3,4]      | 1               | First rotated part has highest values |\n| 12         | [2,3,4,5,6,7,8,9]   | 2               | No rotation, sorted |\n| 13         | [3,4,5,6,7,8]       | 3               | No rotation, sorted |\n| 14         | [10,11,12,13,1,2,3] | 1               | Array rotated after 4 elements |\n| 15         | [6,7,8,9,10,1]      | 1               | Small rotation |\n| 16         | [2,3,4,5,6]         | 2               | Sorted in ascending order |\n| 17         | [9,10,11,12,1]      | 1               | Array rotated once |\n| 18         | [15,16,17,18,19,20,1,2,3,4] | 1               | Array rotated several times |\n| 19         | [4,5,6,7,8,9]       | 4               | Already sorted |\n| 20         | [3,4,5,6,7,8]       | 3               | Already sorted |\n| 21         | [8,9,10,1,2,3,4]    | 1               | First value after rotation |\n| 22         | [4,5,6,7,8,1,2]     | 1               | Smaller array with a big rotation |\n| 23         | [2,3,4,5,6,1]       | 1               | Array rotated once |\n| 24         | [4,5,6,7,8,9,1,2]   | 1               | Longer rotation |\n| 25         | [12,13,14,15,16,17,18,19,20,1,2,3] | 1               | Large rotated array |\n| 26         | [10,20,30,40,50]    | 10              | No rotation |\n| 27         | [3,4,5,1,2]         | 1               | Rotation by 3 positions |\n| 28         | [8,9,10,11,12,13]   | 8               | No rotation, sorted |\n| 29         | [3,4,5,6,7,0,1,2]   | 0               | Simple rotation case |\n| 30         | [4,5,6,7,8,9,10,1,2,3] | 1               | 3 rotations |\n| 31         | [7,8,9,10,11,12,1,2] | 1               | Rotation |\n| 32         | [11,12,13,14,1,2]   | 1               | Rotation twice |\n| 33         | [1,2,3,4,5,6]       | 1               | No rotation |\n| 34         | [6,7,8,9,10,11,1,2,3] | 1               | Multiple rotations |\n| 35         | [7,8,9,1,2,3]       | 1               | Rotation once |\n| 36         | [1,2,3,4]           | 1               | Already sorted |\n| 37         | [1,3,4,5,2]         | 1               | Small rotation |\n| 38         | [8,9,10,1,2]        | 1               | First element rotated |\n| 39         | [5,10,15,20]        | 5               | No rotation |\n| 40         | [3,4,5,6,7]         | 3               | Already sorted |\n",
            "example": {
                "input": "[3,4,5,1,2]",
                "output": "1",
                "explanation": "The minimum value in the rotated array is 1."
            },
            "answer": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndata = list(map(int, input().split()))\ntarget = data[0]\narr = data[1:]\n\nprint(binary_search(arr, target))"

        },
        {
            "id": 8,
            "title": "Search in Rotated Sorted Array",
            "description": "Search an element in rotated array.\n\n| Test Cases | Array                   | Target | Expected Output | Notes           |\n|------------|-------------------------|--------|-----------------|-----------------|\n| 1          | [4,5,6,7,0,1,2]          | 0      | 4               | Simple rotated  |\n| 2          | [1,2,3,4,5,6,7]          | 5      | 4               | No rotation     |\n| 3          | [7,8,9,10,1,2,3]         | 3      | 6               | Rotated once    |\n| 4          | [5,6,7,8,9,10,1,2,3]     | 7      | 2               | Multiple rotations |\n| 5          | [3,4,5,1,2]              | 3      | 0               | Rotation by 3   |\n| 6          | [6,7,8,9,10,1,2,3,4,5]   | 10     | 4               | Rotation       |\n| 7          | [1,2,3,4,5,6,7,8]        | 6      | 5               | Sorted          |\n| 8          | [9,10,11,12,13,1,2,3]    | 1      | 5               | Array rotated   |\n| 9          | [3,4,5,6,7,0,1,2]        | 1      | 6               | Rotated array   |\n| 10         | [8,9,10,11,12,13,14]     | 10     | 2               | Sorted          |\n| 11         | [7,8,9,10,1,2,3,4]       | 4      | 7               | One rotation    |\n| 12         | [5,6,7,8,1,2,3]          | 8      | 3               | Smaller rotation|\n| 13         | [3,4,5,6,1,2]            | 6      | 3               | Simple rotated  |\n| 14         | [1,2,3,4,5,6,7,8,9,10]   | 9      | 8               | Sorted array    |\n| 15         | [4,5,6,7,8,9,1,2]        | 5      | 1               | Rotated array   |\n| 16         | [5,6,7,8,9,10,1,2,3,4]   | 1      | 6               | Multiple rotations |\n| 17         | [4,5,6,7,8,1,2,3]        | 7      | 3               | Array rotation  |\n| 18         | [10,20,30,40,50,1,2,3]   | 50     | 4               | Array rotated once |\n| 19         | [1,3,5,7,9,11,13,15]     | 15     | 7               | Sorted ascending |\n| 20         | [7,8,9,10,1,2,3,4]       | 2      | 6               | Rotation case   |\n| 21         | [3,4,5,6,7,8,9,10]       | 8      | 5               | No rotation     |\n| 22         | [7,8,9,10,1,2]           | 9      | 2               | Rotated once    |\n| 23         | [3,4,5,6,7,0,1]          | 7      | 4               | Rotated first   |\n| 24         | [5,7,9,12,13,3]          | 3      | 5               | Rotation        |\n| 25         | [5,6,7,8,9,10,1,2]       | 9      | 4               | Multiple rotation |\n| 26         | [2,3,4,5,6,7,8]          | 4      | 2               | Already sorted  |\n| 27         | [10,11,12,13,14,15]      | 13     | 3               | Sorted          |\n| 28         | [1,3,4,5,6,7,8]          | 4      | 2               | No rotation     |\n| 29         | [8,9,10,11,12,13,14]     | 12     | 4               | Sorted          |\n| 30         | [3,4,5,6,7,8]            | 6      | 3               | Simple sorted   |\n| 31         | [6,7,8,9,10,1]           | 9      | 3               | Array rotated once |\n| 32         | [1,2,3,4,5,6]            | 5      | 4               | Sorted          |\n| 33         | [9,10,1,2,3]             | 1      | 2               | Simple rotation |\n| 34         | [5,6,7,8,9,10,1]         | 1      | 6               | Rotation once   |\n| 35         | [3,4,5,6,1]              | 3      | 0               | Simple rotation |\n| 36         | [1,2,3,4,5,6,7,8]        | 8      | 7               | Sorted          |\n| 37         | [7,8,9,10,1,2]           | 10     | 3               | Rotation once   |\n| 38         | [5,6,7,8,9,10,1,2]       | 6      | 1               | Rotated twice   |\n| 39         | [8,9,10,11,12,13,1]      | 12     | 4               | Rotation once   |\n| 40         | [7,8,9,1,2,3]            | 8      | 1               | Rotated once    |",
            "example": {
                "input": "[4,5,6,7,0,1,2], 0",
                "output": "4",
                "explanation": "Target 0 is located at index 4 in the rotated array."
            },
            "answer": "def search_in_rotated_array(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n\n        if arr[low] <= arr[mid]:\n            if arr[low] <= target < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if arr[mid] < target <= arr[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    return -1\n\ninput_str = input().strip()\ntokens = list(map(int, input_str.split()))\ntarget = tokens[0]\narr = tokens[1:]\n\nprint(search_in_rotated_array(arr, target))"

        },
        {
            "id": 9,
            "title": "Square Root using Binary Search",
            "description": "Find integer part of square root.\n\n| Test Cases | Input  | Expected Output | Notes       |\n|------------|--------|-----------------|-------------|\n| 1          | 8      | 2               | Normal case |\n| 2          | 16     | 4               | Perfect square |\n| 3          | 25     | 5               | Perfect square |\n| 4          | 7      | 2               | Non-perfect square |\n| 5          | 1      | 1               | Smallest case |\n| 6          | 100    | 10              | Perfect square |\n| 7          | 20     | 4               | Non-perfect square |\n| 8          | 9      | 3               | Perfect square |\n| 9          | 14     | 3               | Non-perfect square |\n| 10         | 30     | 5               | Non-perfect square |\n| 11         | 50     | 7               | Non-perfect square |\n| 12         | 36     | 6               | Perfect square |\n| 13         | 10     | 3               | Non-perfect square |\n| 14         | 121    | 11              | Perfect square |\n| 15         | 250    | 15              | Non-perfect square |\n| 16         | 999    | 31              | Large number |\n| 17         | 1000   | 31              | Large number |\n| 18         | 300    | 17              | Non-perfect square |\n| 19         | 2      | 1               | Small input |\n| 20         | 500    | 22              | Non-perfect square |\n| 21         | 8      | 2               | Normal case |\n| 22         | 1024   | 32              | Large perfect square |\n| 23         | 12345  | 111             | Random large number |\n| 24         | 5      | 2               | Non-perfect square |\n| 25         | 144    | 12              | Perfect square |\n| 26         | 2500   | 50              | Perfect square |\n| 27         | 98     | 9               | Non-perfect square |\n| 28         | 99     | 9               | Non-perfect square |\n| 29         | 121    | 11              | Perfect square |\n| 30         | 64     | 8               | Perfect square |\n| 31         | 256    | 16              | Perfect square |\n| 32         | 320    | 17              | Non-perfect square |\n| 33         | 90     | 9               | Non-perfect square |\n| 34         | 31     | 5               | Non-perfect square |\n| 35         | 14     | 3               | Non-perfect square |\n| 36         | 1      | 1               | Smallest square |\n| 37         | 9999   | 99              | Large input |\n| 38         | 50     | 7               | Non-perfect square |\n| 39         | 81     | 9               | Perfect square |\n| 40         | 102    | 10              | Non-perfect square |",
            "example": {
                "input": "8",
                "output": "2",
                "explanation": "The integer square root of 8 is 2."
            },
            "answer": "def integer_square_root(x):\n    if x < 2:\n        return x\n\n    left, right = 1, x // 2\n    ans = 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == x:\n            return mid\n        elif mid * mid < x:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return ans\n\nn = int(input())\nprint(integer_square_root(n))"

        },
        {
            "id": 10,
            "title": "Peak Element",
            "description": "Find a peak element (greater than neighbors).\n\n| Test Cases | Input              | Expected Output | Notes       |\n|------------|--------------------|-----------------|-------------|\n| 1          | [1, 2, 3, 1]       | 2               | Normal case |\n| 2          | [1, 3, 2]          | 1               | Normal case |\n| 3          | [1, 2, 3, 4, 5]    | 4               | Increasing sequence |\n| 4          | [5, 4, 3, 2, 1]    | 0               | Decreasing sequence |\n| 5          | [1, 2, 1, 3, 5, 6, 4] | 5            | Peak at right end |\n| 6          | [10, 20, 15]       | 1               | 3 elements case |\n| 7          | [100, 90, 80, 70, 60] | 0             | Strictly decreasing |\n| 8          | [50, 60, 50, 40, 30, 20] | 1            | Middle peak |\n| 9          | [3, 2, 1]          | 0               | Descending sequence |\n| 10         | [1, 2]             | 1               | Two elements |\n| 11         | [3, 2, 1]          | 0               | Decreasing sequence |\n| 12         | [1, 2, 3, 4]       | 3               | Peak at right end |\n| 13         | [2, 3, 4, 1]       | 2               | Peak at start |\n| 14         | [1, 2, 4, 3]       | 2               | Peak in middle |\n| 15         | [1, 3, 2, 4, 5]    | 3               | Middle peak |\n| 16         | [6, 5, 4, 3]       | 0               | Descending sequence |\n| 17         | [1, 5, 2, 1]       | 1               | Normal case |\n| 18         | [1, 2, 5, 3]       | 2               | Normal peak |\n| 19         | [3, 2, 1, 4]       | 3               | Descending sequence |\n| 20         | [8, 7, 6, 5, 4]    | 0               | Strictly decreasing |\n| 21         | [1, 2, 1]          | 1               | Small case |\n| 22         | [5, 3, 1]          | 0               | Decreasing sequence |\n| 23         | [6, 2, 4]          | 0               | Small case |\n| 24         | [9, 7, 5, 3, 2]    | 0               | Decreasing sequence |\n| 25         | [4, 2, 1, 6, 3]    | 3               | Middle peak |\n| 26         | [5, 7, 3]          | 1               | Middle peak |\n| 27         | [2, 3, 1, 2]       | 1               | Small case |\n| 28         | [10, 20, 5, 4]     | 1               | Normal peak |\n| 29         | [5, 6, 7, 5, 4]    | 2               | Peak in middle |\n| 30         | [12, 11, 8, 7]     | 0               | Decreasing sequence |\n| 31         | [2, 1]             | 0               | Two elements |\n| 32         | [10, 8, 7, 6]      | 0               | Decreasing sequence |\n| 33         | [6, 2, 1, 8]       | 3               | Peak in middle |\n| 34         | [3, 2, 4, 5]       | 3               | Peak at right |\n| 35         | [1, 5, 8]          | 1               | Peak in middle |\n| 36         | [2, 3, 1, 4]       | 3               | Normal case |\n| 37         | [9, 10, 11]        | 2               | Increasing sequence |\n| 38         | [5, 3, 2, 4, 7]    | 0               | Peak in middle |\n| 39         | [5, 3, 1]          | 0               | Strictly decreasing |\n| 40         | [12, 6, 5, 1]      | 0               | Peak at start |",
            "example": {
              "input": "[1, 2, 3, 1]",
              "output": "2",
              "explanation": "The peak element is at index 1, which is 2."
            },
            "answer":"def find_peak_element(nums):\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if nums[mid] > nums[mid + 1]:\n            right = mid  # Peak is in the left half (including mid)\n        else:\n            left = mid + 1  # Peak is in the right half (excluding mid)\n\n    return left  # or right, since left == right\n\nnums = list(map(int, input().split()))\nprint(find_peak_element(nums))"

        },
        {
            "id": 11,
            "title": "Binary Search on Reverse Sorted Array",
            "description": "Search when array sorted descendingly.\n\n| Test Cases | Input                  | Target | Expected Output | Notes                       |\n|------------|------------------------|--------|------------------|-----------------------------|\n| 1          | [9,7,5,3,1]            | 5      | 2                | Normal case                 |\n| 2          | [10, 8, 6, 4, 2]       | 6      | 2                | Middle match                |\n| 3          | [10, 8, 6, 4, 2]       | 2      | 4                | Last element                |\n| 4          | [10, 8, 6, 4, 2]       | 10     | 0                | First element               |\n| 5          | [10, 8, 6, 4, 2]       | 7      | -1               | Not present                 |\n| 6          | [20, 18, 16, 14, 12]   | 14     | 3                | Even values                 |\n| 7          | [15, 13, 11, 9, 7]     | 15     | 0                | First element               |\n| 8          | [15, 13, 11, 9, 7]     | 8      | -1               | Near miss                   |\n| 9          | [5, 4, 3, 2, 1]        | 1      | 4                | Last element                |\n| 10         | [5, 4, 3, 2, 1]        | 6      | -1               | Outside range               |\n| 11         | [50,40,30,20,10]       | 30     | 2                | Exact middle                |\n| 12         | [100,90,80,70,60]      | 60     | 4                | End value                   |\n| 13         | [99,88,77,66,55]       | 77     | 2                | Match at mid                |\n| 14         | [100, 80, 60, 40, 20]  | 100    | 0                | Largest element             |\n| 15         | [100, 80, 60, 40, 20]  | 10     | -1               | Smaller than smallest       |\n| 16         | [10]                   | 10     | 0                | Single element match        |\n| 17         | [10]                   | 5      | -1               | Single element no match     |\n| 18         | [20, 10]               | 10     | 1                | Two elements match          |\n| 19         | [20, 10]               | 30     | -1               | Two elements no match       |\n| 20         | [9, 8, 7, 6, 5, 4, 3]  | 4      | 5                | Lower half                  |\n| 21         | [50, 45, 40, 35, 30]   | 45     | 1                | Match second element        |\n| 22         | [60,50,40,30,20,10]    | 50     | 1                | Common test                 |\n| 23         | [7,6,5,4,3,2,1]        | 3      | 4                | Normal case                 |\n| 24         | [100,90,80,70]         | 85     | -1               | Between values              |\n| 25         | [8,7,6,5,4,3]          | 6      | 2                | Match mid                   |\n| 26         | [8,7,6,5,4,3]          | 2      | -1               | Lower than all              |\n| 27         | [15,12,9,6,3]          | 9      | 2                | Exact mid match             |\n| 28         | [10,9,8,7,6]           | 6      | 4                | Last element                |\n| 29         | [20, 18, 16, 14, 12]   | 17     | -1               | Between values              |\n| 30         | [9, 6, 3, 0]           | 3      | 2                | Found in small array        |\n| 31         | [100, 99, 98, 97]      | 95     | -1               | Not present in sorted list  |\n| 32         | [60, 50, 40]           | 60     | 0                | First match                 |\n| 33         | [60, 50, 40]           | 40     | 2                | Last match                  |\n| 34         | [5, 4, 3, 2, 1]        | 4      | 1                | Small list match            |\n| 35         | [10, 9, 8, 7, 6, 5]    | 7      | 3                | Match in middle             |\n| 36         | [10, 9, 8, 7, 6, 5]    | 11     | -1               | Larger than all             |\n| 37         | [100, 90, 80, 70, 60]  | 65     | -1               | Between elements            |\n| 38         | [12, 11, 10, 9, 8]     | 9      | 3                | Exact match                 |\n| 39         | [1000, 900, 800]       | 1000   | 0                | Large values                |\n| 40         | [1000, 900, 800]       | 850    | -1               | Not present, near mid       |",
            "example": {
              "input": "[9,7,5,3,1], target = 5",
              "output": "2",
              "explanation": "The value 5 is found at index 2 in the descending sorted array."
            },
            "answer": "def reverse_binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\ninput_str = input().strip()\ntokens = list(map(int, input_str.split()))\ntarget = tokens[0]\narr = tokens[1:]\n\nprint(reverse_binary_search(arr, target))"

          },
          {
            "id": 12,
            "title": "Search Range (First and Last Position)",
            "description": "Find the first and last positions of a target in a sorted array.\n\n| Test Cases | Input                     | Target | Expected Output | Notes                        |\n|------------|---------------------------|--------|------------------|------------------------------|\n| 1          | [5,7,7,8,8,10]            | 8      | [3,4]            | Normal case                  |\n| 2          | [5,7,7,8,8,10]            | 6      | [-1,-1]          | Not present                  |\n| 3          | []                        | 0      | [-1,-1]          | Empty array                  |\n| 4          | [1]                       | 1      | [0,0]            | Single element match         |\n| 5          | [2,2,2,2,2]               | 2      | [0,4]            | All same values              |\n| 6          | [1,2,3,4,5,6,7,8,9]       | 5      | [4,4]            | Unique middle match          |\n| 7          | [1,2,3,4,5,6,7,8,9]       | 10     | [-1,-1]          | Outside range                |\n| 8          | [1,1,2,2,2,3,4,4]         | 2      | [2,4]            | Multiple occurrences         |\n| 9          | [1,3,5,7,9]               | 1      | [0,0]            | First element                |\n| 10         | [1,3,5,7,9]               | 9      | [4,4]            | Last element                 |\n| 11         | [1,2,3,4,5]               | 3      | [2,2]            | Single match                 |\n| 12         | [1,1,1,2,3]               | 1      | [0,2]            | First sequence               |\n| 13         | [1,2,3,3,3,4,5]           | 3      | [2,4]            | Middle repeated              |\n| 14         | [1,2,3,4,4,4,5,6]         | 4      | [3,5]            | Multiple in middle           |\n| 15         | [2,3,3,3,3,3,4,5]         | 3      | [1,5]            | Wide spread                  |\n| 16         | [5,6,7,8,9,10,10]         | 10     | [5,6]            | End duplicate                |\n| 17         | [5,6,7,7,7,8,9]           | 7      | [2,4]            | Multiple mid                 |\n| 18         | [1,2,3,4,5]               | 6      | [-1,-1]          | Not found                    |\n| 19         | [1,2,2,2,3,4]             | 2      | [1,3]            | Repeat in early              |\n| 20         | [1,2,3,4,5,6]             | 2      | [1,1]            | One occurrence               |\n| 21         | [2,4,4,4,6,6,7]           | 4      | [1,3]            | Repeated match               |\n| 22         | [1,2,3,4,4,4,5,6]         | 4      | [3,5]            | Triplet                      |\n| 23         | [1,2,3,4,4,4,4,4,5,6]     | 4      | [3,7]            | Long range                   |\n| 24         | [5,5,5,5,5,5]             | 5      | [0,5]            | All match                    |\n| 25         | [1,1,1,1,2,3,3,3]         | 1      | [0,3]            | Head repeated                |\n| 26         | [1,2,2,2,2,2,3]           | 2      | [1,5]            | Cluster in middle            |\n| 27         | [1,2,3,4,5]               | 0      | [-1,-1]          | Below range                  |\n| 28         | [1,2,3,4,5]               | 6      | [-1,-1]          | Above range                  |\n| 29         | [3,3,3,3,3,3]             | 3      | [0,5]            | Full match                   |\n| 30         | [1,1,2,2,3,3,4,4,5]       | 3      | [4,5]            | Multiple doublets            |\n| 31         | [0,1,2,3,4,5,6,7,8,9]     | 7      | [7,7]            | Near end match               |\n| 32         | [10,20,30,40,50]          | 30     | [2,2]            | Middle match                 |\n| 33         | [10,20,30,40,50]          | 35     | [-1,-1]          | Between values               |\n| 34         | [1,1,2,2,2,3,4,4]         | 5      | [-1,-1]          | Not in repeated values       |\n| 35         | [1,2,3,3,3,3,3,4]         | 3      | [2,6]            | Long group mid               |\n| 36         | [1,2,3,4,5,6,7,8]         | 4      | [3,3]            | Single match                 |\n| 37         | [1,1,1,1,1,1]             | 1      | [0,5]            | Full repeated                |\n| 38         | [2,2,2,2,3,3,4,4,4,5]     | 4      | [6,8]            | Grouped near end             |\n| 39         | [2,3,4,5,6,7,8,9]         | 10     | [-1,-1]          | Not found above max          |\n| 40         | [1,2,2,3,4,4,5,6]         | 2      | [1,2]            | Double match early           |",
            "example": {
              "input": "[5,7,7,8,8,10], target = 8",
              "output": "[3,4]",
              "explanation": "The value 8 starts at index 3 and ends at index 4."
            },
            "answer": "def find_first(arr, target):\n    low, high = 0, len(arr) - 1\n    first = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            first = mid\n            high = mid - 1  # Search left part\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first\n\ndef find_last(arr, target):\n    low, high = 0, len(arr) - 1\n    last = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            last = mid\n            low = mid + 1  # Search right part\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return last\n\ninput_str = input().strip()  # Example: \"8 5 7 7 8 8 10\"\ntokens = list(map(int, input_str.split()))\ntarget = tokens[0]\narr = tokens[1:]\n\nfirst = find_first(arr, target)\nlast = find_last(arr, target)\n\nprint(f\"{first} {last}\")"

          },
          {
            "id": 13,
            "title": "Find Element in Infinite Sorted Array",
            "description": "Array is infinite, find position.\n\n| Test Cases | Input                   | Expected Output | Notes                            |\n|------------|-------------------------|-----------------|----------------------------------|\n| 1          | Find 10 in array        | Index of 10     | Basic example with infinite array |\n| 2          | Find 1 in array         | Index of 1      | Lower boundary test              |\n| 3          | Find 999 in array       | Index of 999    | Large number check               |\n| 4          | Find 0 in array         | Index of 0      | Check for first element          |\n| 5          | Find 1000 in array      | Index of 1000   | Far right test                   |\n| 6          | Find -1 in array        | -1              | Value not in array               |\n| 7          | Find 500 in array       | Index of 500    | Mid-range test                   |\n| 8          | Find 2 in array         | Index of 2      | Small value                      |\n| 9          | Find 20 in array        | Index of 20     | Simple case                      |\n| 10         | Find 101 in array       | Index of 101    | After doubling range             |\n| 11         | Find 250 in array       | Index of 250    | Doubling range test              |\n| 12         | Find 40 in array        | Index of 40     | Random test                      |\n| 13         | Find 4 in array         | Index of 4      | Small value                      |\n| 14         | Find 70 in array        | Index of 70     | Multiple range doubling          |\n| 15         | Find 3 in array         | Index of 3      | Before doubling                  |\n| 16         | Find 600 in array       | Index of 600    | High value                       |\n| 17         | Find 2000 in array      | Index of 2000   | Large range test                 |\n| 18         | Find 120 in array       | Index of 120    | Medium range                     |\n| 19         | Find 11 in array        | Index of 11     | Low-medium range                 |\n| 20         | Find 9999 in array      | Index of 9999   | Very large value                 |\n| 21         | Find 1024 in array      | Index of 1024   | Edge power of 2                  |\n| 22         | Find 5 in array         | Index of 5      | Small range                      |\n| 23         | Find 17 in array        | Index of 17     | Prime test                       |\n| 24         | Find 23 in array        | Index of 23     | Prime number again               |\n| 25         | Find 75 in array        | Index of 75     | Mid-range test                   |\n| 26         | Find 33 in array        | Index of 33     | Moderate number                  |\n| 27         | Find 88 in array        | Index of 88     | Random                           |\n| 28         | Find 144 in array       | Index of 144    | Fibonacci number                 |\n| 29         | Find 222 in array       | Index of 222    | Mid-high range                   |\n| 30         | Find 678 in array       | Index of 678    | High-range                       |\n| 31         | Find 42 in array        | Index of 42     | Random                           |\n| 32         | Find 9 in array         | Index of 9      | Small range                      |\n| 33         | Find 444 in array       | Index of 444    | Large range                      |\n| 34         | Find 321 in array       | Index of 321    | High-range                       |\n| 35         | Find 77 in array        | Index of 77     | Mid-range                        |\n| 36         | Find 30 in array        | Index of 30     | Moderate number                  |\n| 37         | Find 666 in array       | Index of 666    | High-range test                  |\n| 38         | Find 89 in array        | Index of 89     | Fibonacci test                   |\n| 39         | Find 390 in array       | Index of 390    | Random                           |\n| 40         | Find 512 in array       | Index of 512    | Power of 2                       |",
            "example": {
              "input": "Find 10 in an infinite sorted array",
              "output": "Index of 10",
              "explanation": "Start with range [0, 1] and double until value at high >= target. Then binary search in [low, high] to find the index."
            },
            "answer": ""
          },
          {
            "id": 14,
            "title": "Find Rotation Count in Rotated Sorted Array",
            "description": "Find how many times array is rotated.\n\n| Test Cases | Input                        | Expected Output | Notes                       |\n|------------|------------------------------|-----------------|-----------------------------|\n| 1          | [15, 18, 2, 3, 6, 12]        | 2               | Rotated 2 times            |\n| 2          | [7, 9, 11, 12, 5]            | 4               | Rotated at end             |\n| 3          | [1, 2, 3, 4, 5]              | 0               | Not rotated                |\n| 4          | [3, 4, 5, 1, 2]              | 3               | Rotated at middle          |\n| 5          | [4, 5, 1, 2, 3]              | 2               | Rotated 2 positions        |\n| 6          | [6, 7, 1, 2, 3, 4, 5]        | 2               | Middle rotation            |\n| 7          | [2, 3, 4, 5, 6, 7, 1]        | 6               | Rotated almost full        |\n| 8          | [5, 6, 7, 1, 2, 3, 4]        | 3               | Full rotation set          |\n| 9          | [1]                          | 0               | Single element             |\n| 10         | [2, 1]                       | 1               | Two elements rotated       |\n| 11         | [9, 10, 1, 2, 3, 4, 5]       | 2               | Rotated 2 places           |\n| 12         | [10, 1, 2, 3, 4, 5, 6]       | 1               | Rotation at 1              |\n| 13         | [3, 4, 5, 6, 7, 1, 2]        | 5               | Rotation before last       |\n| 14         | [8, 9, 10, 1, 2, 3, 4, 5]    | 3               | Large array, rotated       |\n| 15         | [4, 5, 6, 7, 8, 9, 1, 2, 3]  | 6               | Rotation towards end       |\n| 16         | [6, 1, 2, 3, 4, 5]           | 1               | Rotation just started      |\n| 17         | [10, 20, 30, 5, 6, 7]        | 3               | Random rotation point      |\n| 18         | [2, 3, 4, 5, 1]              | 4               | Last element minimum       |\n| 19         | [12, 14, 18, 21, 2, 5, 8]    | 4               | Random with offset         |\n| 20         | [30, 40, 50, 5, 10, 20]      | 3               | Partial descending         |\n| 21         | [1, 2, 3, 4, 5, 6, 7]        | 0               | No rotation                |\n| 22         | [3, 4, 5, 6, 7, 1, 2]        | 5               | Large jump                 |\n| 23         | [6, 7, 8, 9, 10, 1, 2, 3]    | 5               | Long rotated segment       |\n| 24         | [2, 3, 4, 5, 6, 7, 1]        | 6               | Last element min           |\n| 25         | [5, 1, 2, 3, 4]              | 1               | Rotation just started      |\n| 26         | [3, 4, 5, 6, 1, 2]           | 4               | Near end                   |\n| 27         | [4, 5, 6, 1, 2, 3]           | 3               | Typical rotation           |\n| 28         | [7, 8, 1, 2, 3, 4, 5, 6]     | 2               | Long rotated array         |\n| 29         | [2, 1]                       | 1               | Only 2 elements            |\n| 30         | [1, 2]                       | 0               | Sorted 2 elements          |\n| 31         | [20, 1, 2, 3, 4, 5, 6]       | 1               | Rotation after large       |\n| 32         | [4, 5, 6, 7, 8, 1, 2, 3]     | 5               | Typical mid rotation       |\n| 33         | [5, 6, 7, 8, 1, 2, 3, 4]     | 4               | Rotation at 4              |\n| 34         | [8, 1, 2, 3, 4, 5, 6, 7]     | 1               | Start rotation             |\n| 35         | [1, 2, 3, 4, 5, 6]           | 0               | No rotation                |\n| 36         | [2, 3, 4, 5, 6, 1]           | 5               | Last rotation              |\n| 37         | [7, 1, 2, 3, 4, 5, 6]        | 1               | Large max first            |\n| 38         | [6, 7, 8, 9, 10, 1, 2]       | 5               | Mid rotation               |\n| 39         | [10, 1, 2, 3, 4]             | 1               | Sharp drop                 |\n| 40         | [3, 4, 5, 6, 7, 8, 1, 2]     | 6               | Classic rotation pattern   |",
            "example": {
              "input": "[15, 18, 2, 3, 6, 12]",
              "output": "2",
              "explanation": "The array is rotated 2 times; the minimum element is at index 2."
            },
            "answer": "def find_rotation_count(arr):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        # If the array segment is already sorted\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n\n        # Check if mid is the minimum\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n\n        # Decide which half to choose\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return 0\n\narr = list(map(int, input().split()))\nprint(find_rotation_count(arr))"

          },                    
          {
                "id": 15,
                "title": "Find Missing Number using Binary Search",
                "description": "Find missing number in sorted array .\n\n | Test Cases | Input                     | Expected Output | Notes                           |\n|------------|----------------------------|-----------------|---------------------------------|\n| 1          | [0,1,2,4,5,6]              | 3               | Missing in middle               |\n| 2          | [0,1,3,4,5,6]              | 2               | Missing in middle               |\n| 3          | [0,2,3,4,5,6]              | 1               | Missing early                   |\n| 4          | [1,2,3,4,5,6]              | 0               | Missing at start                |\n| 5          | [0,1,2,3,4,6]              | 5               | Missing before last             |\n| 6          | [0,1,2,3,4,5]              | 6               | Missing at end (next index)     |\n| 7          | [0,1]                      | 2               | Missing at end small case       |\n| 8          | [1]                        | 0               | Only one element, missing 0     |\n| 9          | [0]                        | 1               | Only one element, missing next  |\n| 10         | []                         | 0               | Empty array                     |\n| 11         | [0,1,3]                    | 2               | Short array missing in middle   |\n| 12         | [0,2]                      | 1               | Short array missing middle      |\n| 13         | [0,1,2,3,5,6]              | 4               | Missing 4                       |\n| 14         | [0,1,2,3,4,5,7,8]          | 6               | Larger array missing 6          |\n| 15         | [0,1,2,3,4,5,6,7,9]        | 8               | Missing 8                       |\n| 16         | [0,1,2,3,4,5,6,8]          | 7               | Missing 7                       |\n| 17         | [0,2,3,4,5,6,7]            | 1               | Missing 1                       |\n| 18         | [0,1,2,4,5,6,7]            | 3               | Missing 3                       |\n| 19         | [0,1,2,3,5,6,7]            | 4               | Missing 4                       |\n| 20         | [0,1,3,4,5,6,7]            | 2               | Missing 2                       |\n| 21         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 22         | [0,1,2,3,4,5,6,7,8,9]      | 10              | All present, next expected      |\n| 23         | [1,2,3,4,5,6,7,8,9,10]     | 0               | Missing 0                       |\n| 24         | [0,1,2,3,4,5,6,7,9,10]     | 8               | Missing 8                       |\n| 25         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 26         | [0,1,3,4,5,6,7,8,9,10]     | 2               | Missing 2                       |\n| 27         | [0,2,3,4,5,6,7,8,9,10]     | 1               | Missing 1                       |\n| 28         | [0,1,2,3,4,5,6,7,8,9,11]   | 10              | Missing 10                      |\n| 29         | [0,1,2,3,4,5,6,7,8,9,10]   | 11              | All present, next expected      |\n| 30         | [0,1,2,3,5,6,7,8,9,10]     | 4               | Missing 4                       |\n| 31         | [0,1,2,4,5,6,7,8,9,10]     | 3               | Missing 3                       |\n| 32         | [0,1,2,3,4,6,7,8,9,10]     | 5               | Missing 5                       |\n| 33         | [0,1,2,3,4,5,7,8,9,10]     | 6               | Missing 6                       |\n| 34         | [0,1,2,3,4,5,6,8,9,10]     | 7               | Missing 7                       |\n| 35         | [0,1,2,3,4,5,6,7,9,10]     | 8               | Missing 8                       |\n| 36         | [0,1,2,3,4,5,6,7,8,10]     | 9               | Missing 9                       |\n| 37         | [0,1,2,3,4,5,6,7,8,9,12]   | 10              | Missing 10, 11 ignored          |\n| 38         | [0,1,2,3,4,5,6,7,8,9,10,12]| 11              | Missing 11                      |\n| 39         | [0,1,2,3,4,5,6,7,8,9,10,11]| 12              | All present                     |\n| 40         | [0,1,2,3,4,5,6,7,8,9,11,12]| 10              | Missing 10                      |",
                "example": {
                  "input": "[0,1,2,4,5,6]",
                  "output": "3",
                  "explanation": "The number 3 is missing at the correct index."
                },
                "answer": "def find_missing_number(arr):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\narr = list(map(int, input().split()))\nprint(find_missing_number(arr))"


           }
   
    ]

}